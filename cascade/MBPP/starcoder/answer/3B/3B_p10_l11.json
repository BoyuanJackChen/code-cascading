[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared = set1.intersection(set2)\n    return list(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Create sets of unique elements in both lists\n    unique1 = set(test_tup1)\n    unique2 = set(test_tup2)\n\n    # Create set of common elements\n    common = unique1.intersection(unique2)\n\n    # Return the common elements as a list\n    return list(common)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return tuple(shared_list)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Initialize a set to store the elements of both lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    # iterate over the first tuple\n    for item1 in test_tup1:\n        # check if the item is present in the second tuple\n        if item1 in test_tup2:\n            shared_elements.append(item1)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # set() will automatically remove duplicates from the list\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # union() will give us all the unique elements in both lists\n    shared_elements = set1.union(set2)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is not a prime number, else False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n == 2 or n == 3:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i*i <= n:\n            if n % i == 0:\n                return True\n            i += 2\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Create a min-heap of size n\n    h = hq.nsmallest(n, nums)\n    \n    # Add the remaining elements to the heap\n    for num in nums[n:]:\n        hq.heappush(h, num)\n        \n    # Return the largest elements of the heap\n    return h"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        nums: List of integers.\n        n: Integer.\n\n    Returns:\n        A list of n integers, the n largest integers from the input list.\n    \"\"\"\n    # Convert the list to a min heap\n    heap = nums[:]\n    hq.heapify(heap)\n\n    # Extract the n largest integers from the heap\n    result = [hq.heappop(heap) for _ in range(n)]\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a max heap from the first n elements of the list\n    max_heap = [0] * n\n    for i in range(n):\n        max_heap[i] = nums[i]\n        hq.heapify(max_heap[:i+1])\n\n    # Remove and return the n largest elements from the heap\n    for _ in range(n):\n        nums.remove(max_heap[0])\n        max_heap[0] = hq.heappop(max_heap)\n\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    largest = [hq.heappop(nums) for _ in range(n)]\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Create a min-heap from the given list of numbers\n    hq.heapify(nums)\n    \n    # Remove the n largest numbers from the heap and return them in a list\n    return list(hq.nsmallest(n, nums))"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a heap\n    nums = [-x for x in nums]\n    hq.heapify(nums)\n    \n    # Extract the n largest numbers and return them as a list\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min-heap and extract the first n elements\n    heap = hq.nlargest(n, nums)\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums[:n]:\n        hq.heappush(heap, -num)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap from the first n elements of the list\n    hq.heapify(nums[:n])\n    \n    # remove the smallest element from the min heap and add it to the end of the result list\n    result = [hq.heappop(nums)]\n    \n    # repeat until the min heap is empty\n    while nums:\n        # remove the smallest element from the min heap and add it to the end of the result list\n        result.append(hq.heappop(nums))\n        \n        # check if the result list has more than n elements, if so, remove the smallest element from the end of the list\n        if len(result) > n:\n            result.pop()\n    \n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    count = 0\n    while x > 1: \n        if x & 1 == 0: \n            count += 1 \n        x >>= 1 \n\n    if x == 1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 1:\n        if x & 1 == 1:\n            count += 1\n        x = x >> 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    else:\n        if x & (x - 1) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 0:\n        x = x >> 1\n        count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0:\n        x &= (x-1)\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 0:\n        count += 1\n        x >>= 1\n\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if x is a power of 2\n    if x == 0 or (x & (x-1)) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # find all words in the string\n    words = re.findall('\\b\\w+\\b', text)\n    \n    # filter out words with less than 4 characters\n    filtered_words = [word for word in words if len(word) >= 4]\n    \n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # filter out words that are less than 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Use the re.findall() function to find all the matches in the string\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n    # Initialize two pointers, one at the beginning and the other at the end\n    left = 0\n    right = n - 1\n    # Initialize a variable to store the minimum number of rotations\n    min_rotations = n\n    # Initialize a flag to check if the string is already in its original position\n    flag = False\n    \n    # Perform the following operations until the string is in its original position\n    while not flag:\n        # Check if the characters at the left and right pointers are same\n        if str[left]!= str[right]:\n            # If they are not same, then the string has been rotated\n            if min_rotations > 0:\n                min_rotations -= 1\n            # Reverse the string from the left pointer to the right pointer\n            left, right = right, left\n        else:\n            # If the characters are same, then the string is already in its original position\n            flag = True\n    \n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # initialize variables\n    str_len = len(str)\n    min_rotations = 0\n    \n    # loop through all possible rotations\n    for i in range(1, str_len+1):\n        # check if the rotated string is the same as the original string\n        if str == str[i:] + str[:i]:\n            min_rotations = max(min_rotations, i)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str1 = str\n    n = len(str1)\n    # check if the string is a palindrome or not\n    if str1 == str1[::-1]:\n        return 0\n    \n    # check if the string has only one character\n    if n == 1:\n        return 0\n    \n    # initialize variables\n    min_rotations = 0\n    max_rotations = n\n    \n    # loop through all possible rotations\n    while min_rotations < max_rotations:\n        mid = (min_rotations + max_rotations) // 2\n        \n        # find the number of swaps required for each rotation\n        count = 0\n        for i in range(n):\n            if str1[i]!= str1[i + mid]:\n                count += 1\n        \n        # update min_rotations if the number of swaps is less\n        if count < min_rotations:\n            min_rotations = count\n        else:\n            max_rotations = mid\n    \n    # return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Find the length of the string\n    n = len(str)\n\n    # Initialize a list to store the prefixes of the string\n    prefix = []\n\n    # Loop through each character of the string\n    for i in range(n):\n        # Add the current character to the prefix list\n        prefix.append(str[i])\n\n        # Check if the prefix list is the same as the suffix of the string\n        if prefix == str[n-i-1:]:\n            # If yes, then return the number of rotations required\n            return i+1\n\n    # If no such prefix is found, then return 0\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                min_rotations = min(min_rotations, j-i+1)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "Let's write the Python function `find_Rotations` that implements this approach."
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    # check if all characters are same\n    if n > 1 and str[0] == str[-1]:\n        # if yes, no rotations required\n        return 0\n    # if not same, consider each character as a rotation center\n    for i in range(n-1):\n        # if any character is different, increment the minimum number of rotations\n        if str[i]!= str[n-i-1]:\n            min_rotations = min(min_rotations, i+1)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    left = 0\n    right = n - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if str[left:mid+1] == str[mid+1:right+1]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Create a dictionary to store the count of characters in each substring\n    substring_counts = {}\n    for i in range(len(str)):\n        substring = str[i:]\n        if substring in substring_counts:\n            substring_counts[substring] += 1\n        else:\n            substring_counts[substring] = 1\n\n    # Find the maximum count of each substring\n    max_counts = {}\n    for key in substring_counts:\n        if key not in max_counts or substring_counts[key] > max_counts[key]:\n            max_counts[key] = substring_counts[key]\n\n    # Find the minimum count of each substring\n    min_counts = {}\n    for key in max_counts:\n        if key not in min_counts or substring_counts[key] < min_counts[key]:\n            min_counts[key] = substring_counts[key]\n\n    # Find the minimum number of rotations required to get the same string\n    rotations = 0\n    for count in max_counts:\n        if max_counts[count] == min_counts[count]:\n            rotations += 1\n            if count > 1:\n                rotations += count\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1] == str[j:i-1][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    s = s.replace(ch, \"\")\n    s = s.replace(ch, \"\", 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Using split() method to split the string into a list of characters.\n    lst = s.split()\n    \n    # Removing first occurrence of the character.\n    if lst[0] == ch:\n        lst.pop(0)\n    \n    # Removing last occurrence of the character.\n    if lst[-1] == ch:\n        lst.pop()\n    \n    # Joining the list of characters back into a string.\n    return''.join(lst)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # convert the string to a list\n    lst = list(s)\n    # initialize the first and last indices\n    first = 0\n    last = len(lst)-1\n    # loop through the list\n    while first <= last:\n        # if the current character matches the given character, increment the index\n        if lst[first] == ch:\n            first += 1\n        # if the current character does not match the given character, decrement the index\n        elif lst[last] == ch:\n            last -= 1\n        # if the current character is not found, break the loop\n        else:\n            break\n    # create a new string with the first and last occurrences removed\n    s_new = ''.join(lst[first:last])\n    # return the new string\n    return s_new"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    # check if the string has at least one character\n    if len(s) < 1:\n        return \"String is empty\"\n    # check if the character is present in the string\n    if ch not in s:\n        return \"Character not found in the string\"\n    # create a list of characters in the string\n    char_list = list(s)\n    # remove the first occurrence of the character from the list\n    char_list.remove(ch)\n    # remove the last occurrence of the character from the list\n    char_list.remove(char_list[-1])\n    # convert the list to a string\n    return ''.join(char_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into list of characters\n    char_list = list(s)\n    \n    # remove first occurrence of the character\n    while char_list[0] == ch:\n        char_list.pop(0)\n    \n    # remove last occurrence of the character\n    while char_list[-1] == ch:\n        char_list.pop()\n    \n    # join the characters into string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) > 1: # if the character is present in the string more than once, then remove all occurrences\n        return s.replace(ch,'',1)\n    elif s.count(ch) == 1: # if the character is present only once, then remove only the first occurrence\n        return s.replace(ch,'',1).replace(ch,'',1)\n    else: # if the character is not present in the string, then return the same string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # check if the given character is empty or not\n    if not ch:\n        return \"Character cannot be empty!\"\n    # remove the first occurrence of the character from the string\n    s = s.replace(ch, \"\")\n    # remove the last occurrence of the character from the string\n    s = s.replace(ch, \"\", 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip(ch) # strip removes the leading and trailing occurrence of ch from the string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the string has only one character\n    if len(s) == 1:\n        return \"\"\n    \n    # Find the first occurrence of the character\n    first_occurrence = s.find(ch)\n    \n    # If the character is not found, return the string as it is\n    if first_occurrence == -1:\n        return s\n    \n    # Find the last occurrence of the character\n    last_occurrence = s.rfind(ch)\n    \n    # If the last occurrence is also the first occurrence, return an empty string\n    if first_occurrence == last_occurrence:\n        return \"\"\n    \n    # Remove the first and last occurrences of the character\n    return s[:first_occurrence] + s[last_occurrence+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if ch is not in s, return the original string\n    if ch not in s:\n        return s\n    \n    # find the first and last occurrences of ch in s\n    i = s.find(ch)\n    j = s.rfind(ch)\n    \n    # if i is greater than j, ch was not found in s\n    if i > j:\n        return s\n    \n    # otherwise, remove the first and last occurrences of ch from s and return the result\n    return s[:i] + s[j+len(ch):]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the matrix in ascending order based on the row sums\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j][i], M[j+1][i] = M[j+1][i], M[j][i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n    # Initialize a variable to store the sum of the rows of the matrix\n    row_sum = 0\n\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Initialize a variable to store the maximum value in the row\n        max_val = M[i][0]\n        # Initialize a variable to store the index of the maximum value in the row\n        max_idx = 0\n\n        # Loop through each column in the row and update the maximum value and its index if necessary\n        for j in range(len(M[i])):\n            if M[i][j] > max_val:\n                max_val = M[i][j]\n                max_idx = j\n\n        # Add the maximum value to the row_sum variable\n        row_sum += max_val\n        # Remove the maximum value from the row\n        M[i].pop(max_idx)\n\n        # Add the row to the sorted_M list\n        sorted_M.append(M[i])\n\n    # Sort the sorted_M list in ascending order based on the row_sum\n    sorted_M.sort(key=lambda x: row_sum - x)\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    # sort each row of the matrix in ascending order\n    for i in range(len(M)):\n        M[i].sort()\n\n    # initialize a list to store the sorted matrix\n    sorted_M = []\n\n    # iterate through each row of the sorted matrix\n    for i in range(len(M)):\n        # add each sorted row to the sorted matrix\n        sorted_M.append(M[i])\n\n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    sums = [sum(row) for row in M]\n    # sort the matrix according to the sums\n    sorted_M = sorted(M, key=lambda row: sums.index(sum(row)))\n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i] + M[j][j]:\n                M[i][j], M[j][j] = M[j][j], M[i][j]\n                M[i][i], M[j][i] = M[j][i], M[i][i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    # Get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n\n    # Loop through each row of the matrix and find the sum of its elements\n    sums = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            sums[i][j] = sum(M[i][j:])\n\n    # Sort the matrix based on the sums of its rows\n    sorted_M = []\n    for i in range(n):\n        row_sums = sorted(sums[i])\n        for j in range(m):\n            sorted_M.append(row_sums.index(sums[i][j]))\n\n    # Create a new matrix with the sorted elements\n    sorted_M = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            sorted_M[i][j] = sorted_M[i][j] + i * (m + 1) + j\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # create a list of lists to store the sorted matrix\n    sorted_matrix = [[0] * n for i in range(n)]\n    # loop through each row in the matrix\n    for i in range(n):\n        # loop through each element in the current row and add it to a running sum\n        running_sum = 0\n        for j in range(n):\n            running_sum += M[i][j]\n        # loop through each element in the current row and add it to the corresponding element in the sorted matrix\n        for j in range(n):\n            sorted_matrix[i][j] = M[i][j]\n        # sort the current row in descending order of the running sum\n        sorted_matrix[i] = sorted(sorted_matrix[i], reverse=True)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n\n    # Loop through each element in the matrix\n    for i in range(n):\n        # Find the sum of the row\n        row_sum = sum(M[i])\n\n        # Loop through each element in the row\n        for j in range(m):\n            # If the element is greater than the current element, swap them\n            if M[i][j] > M[i][j + 1]:\n                M[i][j], M[i][j + 1] = M[i][j + 1], M[i][j]\n\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (l * b * h) / 2\n    volume = area * (1/3)\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n\n    Args:\n    l (float): Length of the base of the prism.\n    b (float): Length of the height of the prism.\n    h (float): Length of the side of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n\n    # Calculate the volume of the prism\n    volume = l * b * h\n\n    # Return the volume of the prism\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the volume of the prism\n    volume = l * b * h\n\n    # Return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the prism using Heron's formula\n    volume = (1 / 3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h/3\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore,\n    and False otherwise.\n    \"\"\"\n    pattern = r'[a-z][a-z_]*[a-z]'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<![A-Z])[a-z]+(?![a-z])_\"\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n\n    pattern = r'[a-z]+[_][a-z]+'\n    result = re.search(pattern, text)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=\\b[a-z])(?=\\w)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]*_?)+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4 # assuming that a side length is equal to its length"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    # create an empty list to store characters to remove from the first string \n    chars_to_remove = [] \n    # loop through each character in the second string \n    for char in string: \n        # if the character is not already in the list of characters to remove, add it \n        if char not in chars_to_remove: \n            chars_to_remove.append(char) \n    # loop through each character in the first string and remove any that are in the list of characters to remove \n    for i in range(len(string)): \n        if string[i] in chars_to_remove: \n            string = string[:i] + string[i+1:] \n    # return the modified string \n    return string "
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list of characters in the input string.\n    '''\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    list_chars = [chr(i) for i in range(NO_OF_CHARS) if chr(i) not in char_set]\n    return list_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(string)\n    for i in range(NO_OF_CHARS):\n        if string.count(chr(i)) > 0:\n            list_of_chars.remove(chr(i))\n    return ''.join(list_of_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string1, string2): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    list1 = list(string1) # converting string1 to list\n    list2 = list(string2) # converting string2 to list\n    for char in list2: # iterating over string2\n        if char in list1: # checking if char is present in list1\n            list1.remove(char) # removing char from list1 if present\n    return ''.join(list1) # converting list1 to string and returning the result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            string = string.replace(chr(i), '')\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for char in string:\n        if char not in string:\n            char_list.append(char)\n    return char_list\n\nNO_OF_CHARS = 256\ndef remove_chars(string1, string2):\n    '''\n    This function takes in two strings, string1 and string2. It returns the characters from string1 that are not present in string2.\n    '''\n    char_list = []\n    for char in string1:\n        if char not in string2:\n            char_list.append(char)\n    return char_list\n\ndef main():\n    string1 = input(\"Enter the first string: \")\n    string2 = input(\"Enter the second string: \")\n    print(\"The characters from string1 that are not present in string2 are:\")\n    print(remove_chars(string1, string2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through the list of characters\n    for char in char_list:\n        # If the character is not present in the second string, add it to the result list\n        if char not in string:\n            result_list.append(char)\n    # Convert the result list to a string\n    result_string = ''.join(result_list)\n    # Return the result string\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        char_list.append(chr(i))\n\n    for char in string:\n        if char in char_list:\n            char_list.remove(char)\n\n    return char_list\n\nprint(str_to_list(\"Hello World\")) # ['H', 'e', 'l', 'o','', 'W', 'o', 'r', 'l', 'd']"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a list of characters which are present in the second string\n    common_chars = [chr(i) for i in range(NO_OF_CHARS) if chr(i) in string]\n    # initialize an empty list to store the final result\n    result = []\n    # iterate over each character in the first string\n    for char in string:\n        # check if the character is not present in the common characters list\n        if char not in common_chars:\n            # if not, append the character to the result list\n            result.append(char)\n    # return the final result as a string\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string) # converting string to set to check for presence of characters\n    result = []\n    for i in range(NO_OF_CHARS):\n        if i not in char_set: # checking if character is present in char_set\n            result.append(chr(i)) # appending character to result list if not present\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    hash_table = {}\n    for num in arraynums:\n        if num in hash_table:\n            return True\n        hash_table[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n\n    Args:\n        arraynums (list): A list of integers.\n\n    Returns:\n        bool: True if the array contains any duplicate elements, False otherwise.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_elements = set()\n\n    # Iterate over the array and add each element to the set\n    for num in arraynums:\n        unique_elements.add(num)\n\n    # Check if the set has more than one element (i.e. it contains duplicates)\n    return len(unique_elements) > 1"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the values and their frequencies\n    freq_dict = {}\n\n    # loop through the array and update the frequency dictionary\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # loop through the dictionary and check if any value appears more than once\n    for value in freq_dict:\n        if freq_dict[value] > 1:\n            return True\n\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        else:\n            num_set.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the elements and their indices\n    indexdict = {}\n    # loop through the array and check if each element is already in the dictionary\n    for i in range(len(arraynums)):\n        if arraynums[i] in indexdict:\n            # if element is already in dictionary, return True\n            return True\n        else:\n            # add element to dictionary with its index\n            indexdict[arraynums[i]] = i\n    # if no duplicate is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the numbers and their counts\n    counts = {}\n    for num in arraynums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # iterate over the dictionary and check if any number has a count greater than 1\n    for num, count in counts.items():\n        if count > 1:\n            return True\n    \n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store unique numbers\n    unique_set = set()\n    # loop through the array and add each unique number to the set\n    for num in arraynums:\n        unique_set.add(num)\n    # check if the set has more than one element (indicating duplicate)\n    if len(unique_set) > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Check if array is empty\n    if len(arraynums) == 0:\n        return False\n\n    # Set a set to store the unique elements of the array\n    unique_set = set()\n\n    # Loop through the array and add each unique element to the set\n    for num in arraynums:\n        if num not in unique_set:\n            unique_set.add(num)\n        else:\n            # Return True if a duplicate is found\n            return True\n\n    # If no duplicate is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if the number is divisible by 12\n    if x % 12 == 0:\n        return \"It's a woodball!\"\n    else:\n        return \"It's not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    This function checks if a given number is a Woodall number or not. \n    A Woodall number is a number that has the form 4k+1, where k is a positive integer.\n    For example, 15 is a Woodall number because 4x + 1 = 15.\n    '''\n\n    if x % 4 == 0:\n        if x % (x//4) == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1000:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 8:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 3 and x % 100!= 12:\n        return True\n    elif x % 10 == 7 and x % 100!= 13:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Not a woodall\"\n    else:\n        return \"A woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x % 10 == 0: \n        return True\n    elif x % 10 == 1: \n        return False\n    elif x % 10 == 2: \n        return False\n    elif x % 10 == 3: \n        return True\n    elif x % 10 == 4: \n        return False\n    elif x % 10 == 5: \n        return False\n    elif x % 10 == 6: \n        return True\n    elif x % 10 == 7: \n        return False\n    elif x % 10 == 8: \n        return False\n    elif x % 10 == 9: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Not a Woodall\"\n    else:\n        return \"Woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and x % 5 == 0:\n        return \"Woodall\"\n    else:\n        return \"Not a Woodall\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if rev_num < 2 * num:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    if num < 10:\n        return False\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    return reverse_num - 1 == 2 * reverse_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # convert the number to a string\n    num_str = str(num)\n    \n    # reverse the string\n    rev_str = num_str[::-1]\n    \n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    \n    # check if the original number is one less than twice its reverse\n    if num-2*rev_num == 1:\n        print(\"The given number is one less than twice its reverse.\")\n    else:\n        print(\"The given number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    return reverse_num < num * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # convert the reversed number to an integer and check if it's one less than twice the original number\n    return int(reversed_num) < 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num!= 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse % 2 == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse < 2 * reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    reverse_num = str(num)[::-1]\n    # Convert the reverse number back to an integer and check if it's one less than twice the original number\n    if int(reverse_num) == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num = num//10\n    if reverse < 2*reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Check if the number is negative or zero\n    if num < 0:\n        return False\n    # Calculate the reverse of the number\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    # Check if the original number is one less than twice the reverse\n    if reverse >= 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    # Convert the list of digits into a set to remove duplicates and sort the digits in ascending order\n    digits = sorted(set(arr))\n    # Initialize the maximum number to 0\n    max_num = 0\n    # Loop through each digit in the sorted list\n    for digit in digits:\n        # Calculate the power of the digit using the formula n^(i+1), where n is the number of digits and i is the current digit index\n        power = len(digits) ** arr.index(digit)\n        # Update the maximum number if the power is greater than the current maximum number\n        max_num = max(max_num, power)\n    # Return the maximum number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    n = len(arr)\n    arr.sort(reverse=True) # sort the digits in descending order\n    max_num = 0 # initialize the maximum number to be 0\n\n    for i in range(n): # loop through each digit in the list\n        temp_num = arr[i] # store the current digit\n        for j in range(i+1, n): # loop through each remaining digit\n            if temp_num + arr[j] > max_num: # if the sum of the two digits is greater than the current max_num\n                max_num = temp_num + arr[j] # update the max_num to the sum\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_num = max(max_num, int(''.join(sorted(str(arr[i])+str(arr[j])))))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    # Initialize max_num with the first element of the list\n    max_num = arr[0]\n\n    # Traverse through the list from the second element\n    for num in arr[1:]:\n        # If the current number is greater than max_num, update max_num\n        if num > max_num:\n            max_num = num\n\n    # Return the max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    # To store the maximum number formed with the given digits\n    max_num = 0\n    \n    # To store the length of the given digits list\n    n = len(arr)\n    \n    # To store the power of each digit in the digits list\n    power = [1] * n\n    \n    # To store the sum of the digits raised to the power of each digit in the digits list\n    sum_of_digits = [0] * n\n    \n    # To store the current number formed with the given digits\n    curr_num = 0\n    \n    # To loop through the digits list and find the maximum number formed with the digits\n    for i in range(n):\n        curr_num = 0\n        for j in range(n):\n            curr_num += arr[j] * power[j]\n            power[j] *= arr[i]\n        sum_of_digits[i] = curr_num\n        \n        # Updating the maximum number formed with the given digits\n        if curr_num > max_num:\n            max_num = curr_num\n    \n    # To find the maximum number formed with the given digits\n    for i in range(n):\n        max_num = max(max_num, sum_of_digits[i])\n    \n    # Returning the maximum number formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed by the digits.\n    '''\n\n    # sort the digits in descending order\n    arr.sort(reverse=True)\n\n    # initialize variables for the maximum number and the number of digits that can be formed\n    max_num = 0\n    count = 0\n\n    # loop through each digit in the sorted list\n    for digit in arr:\n        # if the current digit is greater than the maximum number, update the maximum number and increment the count\n        if digit > max_num:\n            max_num = digit\n            count += 1\n\n    # return the maximum number of digits that can be formed\n    return count"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes in a list of digits (as strings) as input and returns the largest number that can be formed with those digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, int(arr[i]) * (10**i))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Initialize the maximum number to be formed with the first digit of the list\n    max_num = arr[0]\n\n    # Traverse through the list of digits starting from the second digit\n    for i in range(1, len(arr)) : \n\n        # Calculate the sum of the current digit and the maximum number formed so far\n        current_digit_sum = arr[i] + max_num\n\n        # Update the maximum number if the current digit sum is greater than the maximum number\n        if current_digit_sum > max_num : \n            max_num = current_digit_sum\n\n    # Return the maximum number formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num = int(''.join(map(str, arr)))\n        else:\n            max_num *= 10\n            max_num += int(''.join(map(str, arr[i:])))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n\n    # Initialize variables\n    max_num = arr[0]\n\n    # Loop through the list and find the maximum number\n    for i in range(1, len(arr)) : \n        num = arr[i]\n        for j in range(i+1, len(arr)) : \n            if (num+arr[j]) > max_num : \n                max_num = num+arr[j]\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y >= 0:\n        return \"opposite signs\"\n    else:\n        return \"same signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether two integers have opposite sign or not.\n\n    Args:\n    x (int): A positive integer.\n    y (int): A positive integer.\n\n    Returns:\n    bool: True if the given integers have opposite signs, otherwise False.\n    '''\n    # Check if x is greater than y\n    if x > y:\n        # If x is greater than y, then return True\n        return True\n    # Check if y is greater than x\n    elif y > x:\n        # If y is greater than x, then return False\n        return False\n    # If x and y are equal, then return False\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return \"The two numbers have the same sign\"\n    elif x < 0 and y < 0:\n        return \"The two numbers have the same sign\"\n    elif x > 0 and y < 0:\n        return \"The first number has a positive sign and the second number has a negative sign\"\n    elif x < 0 and y > 0:\n        return \"The first number has a negative sign and the second number has a positive sign\"\n    else:\n        return \"The two numbers have opposite signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and checks whether they have opposite signs or not.\n    '''\n    if x<0 and y<0:\n        print(\"Both numbers have opposite signs\")\n    elif x>0 and y>0:\n        print(\"Both numbers have opposite signs\")\n    else:\n        print(\"Both numbers have the same sign\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x == 0 and y == 0:\n        return False\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        return \"Both are positive numbers\"\n    elif x < 0 and y < 0: \n        return \"Both are negative numbers\"\n    else: \n        return \"One of the numbers is positive and one is negative\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return False\n    elif (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return \"Error: Both numbers are zero.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n**2) + 6"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal_helper(n, start, end):\n        if start > end:\n            return 0\n        elif start == end:\n            return start\n        else:\n            mid = (start + end) // 2\n            if mid*mid == n:\n                return mid\n            elif mid*mid < n:\n                return octagonal_helper(n, mid+1, end)\n            else:\n                return octagonal_helper(n, start, mid-1)\n\n    return octagonal_helper(n, 1, n**0.5)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n * (3**0.5) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a *= 3\n        b = a - 1\n        c = a - 2\n        d = a - 3\n        if a == 27 or (a % 8 == 0 and a == int(a**0.5)**2):\n            return True\n        if i == 1:\n            continue\n        if a - b == c - d:\n            return True\n        a += 2\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 'Invalid input. Please enter a positive integer.'\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        for i in range(3, n+1):\n            num = 16*i*i\n            if num > 2*n:\n                return num\n        return 'The nth octagonal number is greater than 2*n'"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        prev_octagonal = 1\n        curr_octagonal = 2\n        for i in range(2, n):\n            next_octagonal = (prev_octagonal ** 2) + (curr_octagonal ** 2)\n            prev_octagonal = curr_octagonal\n            curr_octagonal = next_octagonal\n        return curr_octagonal\n\nn = int(input(\"Enter the value of n: \"))\noctagonal_number = is_octagonal(n)\nif octagonal_number is None:\n    print(\"Invalid input\")\nelse:\n    print(\"The nth octagonal number is:\", octagonal_number)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n == (8*n**2 - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Function to calculate the nth octagonal number\n    def nth_octagonal(n): \n        if n == 1: \n            return 1\n        else: \n            return 2 * n * (2 * n - 1)\n\n    # Call the function to find the nth octagonal number\n    octagonal_number = nth_octagonal(n)\n\n    # Return the octagonal number\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_valid_octagon(num):\n        num = int(num)\n        if num < 0 or num % 8!= 0:\n            return False\n        return num == (num**3 - 1)**2\n\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return is_valid_octagon(12 * n * n) - 2\n    else:\n        return is_valid_octagon(13 * n * n) - 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    for i in range(1, n+1):\n        c = a + b\n        print(c, end=' ')\n        a = b\n        b = c"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j+1].isdigit():\n                digit_sum = sum(int(d) for d in s[i:j+1])\n                if digit_sum == len(s[i:j+1]):\n                    count += 1\n                    dp[i][j] = count\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    num_substrings = 0\n    count_dict = defaultdict(int)\n\n    for i in range(len(s)):\n        count_dict[sum(map(int, s[i:]))] += 1\n\n    for i in range(len(s) - 1):\n        for j in range(i + 1, len(s) + 1):\n            if sum(map(int, s[i:j])) == j - i:\n                num_substrings += count_dict[j - i]\n\n    return num_substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    substrings_count = defaultdict(int)\n\n    # Iterate through the string and calculate the sum of digits for each substring\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            substrings_count[sum_of_digits] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return sum(substrings_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(d) for d in substring) == len(substring):\n                count[substring] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            digits_sum = sum(int(digit) for digit in s[i:j])\n            if digits_sum == len(digits_sum):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j].isdigit():\n                count[len(s[i:j])] += 1\n\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_sum_dict = defaultdict(int)\n    substring_sum_dict = defaultdict(int)\n\n    for i in range(len(s)):\n        substring_sum_dict[s[i]] = substring_sum_dict[s[i]] + 1\n\n    for i in range(len(s) - 1):\n        digit_sum_dict[len(s) - i - 1] = digit_sum_dict[len(s) - i - 1] + substring_sum_dict[s[i]]\n\n    total_count = 0\n    for key in digit_sum_dict:\n        total_count = total_count + digit_sum_dict[key]\n\n    return total_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with each digit sum\n    digit_sum = defaultdict(int)\n    \n    # Iterate through the input string\n    for i in range(len(s)):\n        # Check if the current substring has a sum of digits equal to its length\n        if sum(int(digit) for digit in s[i:]) == len(s[i:]):\n            # Increment the count of substrings with a digit sum equal to its length\n            digit_sum[len(s[i:])] += 1\n    \n    # Return the total count of substrings with a digit sum equal to its length\n    return sum(digit_sum.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # convert the string into a list of digits\n    s_list = list(map(int, s))\n    # create a dictionary to store the count of substrings with a given sum of digits\n    count_dict = defaultdict(int)\n    # loop through all possible substrings of length len(s)\n    for i in range(len(s_list)-len(s)+1):\n        # calculate the sum of digits in the substring\n        sum_digits = sum(s_list[i:i+len(s)])\n        # add the count to the dictionary\n        count_dict[sum_digits] += 1\n    # return the count of substrings with a sum of digits equal to their length\n    return count_dict[len(s)]"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n\n    Args:\n    xs: A list of integers.\n\n    Returns:\n    The smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list `xs` and returns the smallest number in the list.\n    \"\"\"\n    # initialize smallest number as the first element of the list\n    smallest = xs[0]\n    \n    # loop through the rest of the list and compare each element with the smallest\n    for x in xs[1:]:\n        if x < smallest:\n            # if an element is smaller than the smallest, update the smallest\n            smallest = x\n    \n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list.\n    \"\"\"\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # initialize maximum difference as 0\n    max_diff = 0\n\n    # iterate through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between current pair and next pair\n            diff = test_list[j][1] - test_list[i][1]\n\n            # update maximum difference if current difference is greater than current max difference\n            if diff > max_diff:\n                max_diff = diff\n\n    # return maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] > test_list[i][0]:\n                diff = test_list[j][0] - test_list[i][0]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the given list in ascending order\n    test_list.sort()\n    # Initialize variables for max_diff and current_diff\n    max_diff = 0\n    current_diff = 0\n    # Iterate through the sorted list\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between current element and next element\n        diff = test_list[i + 1] - test_list[i]\n        # Update the current_diff if the new difference is greater than current_diff\n        if diff > current_diff:\n            current_diff = diff\n        # Update max_diff if current_diff is greater than max_diff\n        elif diff > max_diff:\n            max_diff = diff\n    # Return the max_diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][0] - test_list[j][0], test_list[i][1] - test_list[j][1])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples\n    sorted_list = sorted(test_list)\n\n    # Initialize variables to keep track of the maximum difference and its indices\n    max_diff = sorted_list[1][1] - sorted_list[0][1]\n    max_index = 1\n\n    # Loop through the list of tuples and compare adjacent pairs\n    for i in range(1, len(sorted_list)):\n        diff = sorted_list[i][1] - sorted_list[i-1][1]\n        if diff > max_diff:\n            max_diff = diff\n            max_index = i\n\n    return sorted_list[max_index-1][1], sorted_list[max_index][1]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf') # initialize maximum difference to negative infinity\n\n    for i in range(len(test_list)-1): # iterate over the list\n        for j in range(i+1, len(test_list)): # iterate over the remaining list\n            diff = abs(test_list[i][0] - test_list[j][0]) # calculate the difference between the values of the two tuples\n            if diff > max_diff: # if the current difference is greater than the current maximum difference\n                max_diff = diff # update the maximum difference\n\n    return max_diff # return the maximum difference"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    prev_num = None\n\n    # Iterate over the list of tuples\n    for num, pair in test_list:\n        if prev_num is not None:\n            # Calculate the current difference\n            diff = num - prev_num\n\n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n\n        # Update the previous number for the next iteration\n        prev_num = num\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        diff = test_list[i][1] - test_list[i+1][1]\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum difference between available pairs.\n    \"\"\"\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    pairs.sort()\n    max_diff = pairs[-1][1] - pairs[0][0]\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to keep track of the minimum and maximum values in the list\n    min_value = test_list[0][1]\n    max_value = test_list[0][1]\n    # Loop through the list to find the minimum and maximum values\n    for value in test_list:\n        if value[1] < min_value:\n            min_value = value[1]\n        if value[1] > max_value:\n            max_value = value[1]\n    # Calculate the maximum difference between pairs of values\n    max_diff = max_value - min_value\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts it based on the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples by the second value of each tuple.\n\n    Args:\n    - subjectmarks: list of tuples, where each tuple contains the name of a subject and its marks.\n\n    Returns:\n    - sorted_marks: list of tuples, where each tuple contains the name of a subject and its marks sorted by the second value.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples in ascending order of the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst, acc=[]):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item, acc)\n            else:\n                acc.append(item)\n        return acc\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    # Base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n\n    # Recursive case: add the first element to the result of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flattened_list = flatten(data_list)\n    sum_of_flat_list = sum(flattened_list)\n    return sum_of_flat_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case\n    if len(data_list) == 0:\n        return 0\n\n    # Recursive case\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list):  # recursive case: nested list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # leaf case: int or float\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return it\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data):\n        if isinstance(data, list):\n            for item in data:\n                flatten(item)\n        else:\n            yield data\n    \n    result = 0\n    for item in flatten(data_list):\n        result += item\n    \n    return result"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:  # base case: empty list\n        return 0\n    else:\n        # flatten the list\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(recursive_list_sum(item))\n            else:\n                flat_list.append(item)\n        # sum all the elements in the flattened list\n        total = 0\n        for item in flat_list:\n            if isinstance(item, (int, float)):\n                total += item\n        return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if type(item) in [list, tuple]:\n                result += flatten(item)\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the variables to store the count and sum of the Bell numbers\n    count = 0\n    sum_bell_numbers = 0\n\n    # Loop through each number from 0 to n-1\n    for i in range(n):\n\n        # Add the value of i to the sum of the Bell numbers\n        sum_bell_numbers += i\n\n        # Check if the sum of the Bell numbers is divisible by n\n        if sum_bell_numbers % n == 0:\n\n            # Increment the count\n            count += 1\n\n            # Reset the sum of the Bell numbers\n            sum_bell_numbers = 0\n\n    # Return the count of ways to partition the set of Bell numbers\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of elements in the partition set.\n\n    Returns:\n    (int): The number of ways to partition the set of Bell numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return bell_number(n//2) + bell_number(n//2) + bell_number(n//2)\n    else:\n        return bell_number(n-1) + bell_number(n-1) + bell_number(n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    # create a 2D array dp with dimensions n+1 x n+1\n    dp = [[0]*(n+1) for _ in range(n+1)]\n\n    # fill the base cases\n    for j in range(1, n+1):\n        dp[0][j] = 1\n\n    for i in range(1, n+1):\n        dp[i][0] = 1\n\n    # calculate the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(j, 0, -1):\n                dp[i][j] += dp[i-1][k]*(n-k)\n\n    # return the value in dp[n][1]\n    return dp[n][1]\n\nLet's test the function:\n\n>>> bell_number(5)\n14\n\nThere are 14 ways to partition the set of Bell numbers into 5 parts."
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize array with 1s\n    dp = [1]*(n+1)\n    # iterate through array and fill with values\n    for i in range(1, n+1):\n        dp[i] = sum(dp[:i])\n    return dp[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    def helper(k, i, count):\n        if k == 0:\n            count[0] += 1\n            return\n        if k < 0:\n            return\n\n        helper(k-1, i, count)\n        if i > 0:\n            helper(k, i-1, count)\n\n        count[0] += 1\n\n    count = [0]\n    helper(n, n, count)\n    return count[0]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    # Initialize the result matrix with zeros\n    result = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Fill the matrix row by row\n    for i in range(1, n+1):\n        result[i][1] = 1\n\n    # Fill the matrix column by column\n    for j in range(2, n+1):\n        result[1][j] = 1\n\n    # Calculate the result matrix element by element\n    for i in range(2, n+1):\n        for j in range(2, n+1):\n            result[i][j] = result[i-1][j-1] + result[i][j-1] + result[i-1][j]\n\n    # Return the value in the bottom-right corner of the result matrix\n    return result[n][n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    def partition(n, k):\n        if k == 0 or k == n:\n            return 1\n        elif k > n:\n            return 0\n        else:\n            return partition(n-1, k) + partition(n, k-1)\n\n    if n == 0:\n        return 1\n    else:\n        return partition(n, n)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n    A monotonic array is an array where either it is increasing or decreasing.\n    \"\"\"\n    # check if the array is empty or not\n    if len(A) == 0:\n        return True\n\n    # check if all the elements in the array are the same\n    if all(elem == A[0] for elem in A):\n        return True\n\n    # check if the array is increasing or decreasing\n    if A[1] <= A[0]:\n        for i in range(len(A)-1):\n            if A[i+1] < A[i]:\n                return False\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i+1] > A[i]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    # check if the array is empty or not\n    if not A:\n        return True\n    \n    # check if the array contains only one element or not\n    if len(A) == 1:\n        return True\n    \n    # check if the array is monotonic or not\n    if A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3]:\n        return True\n    elif A[0] >= A[1] and A[1] >= A[2] and A[2] >= A[3]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n < 2:\n        return True\n\n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes in an array A and checks if it is monotonic or not.\n\n    Args:\n    A: a list of integers\n\n    Returns:\n    True: if the array is monotonic\n    False: if the array is not monotonic\n\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[1:]) + is_Monotonic(A[1:][::-1])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n\n    if A[0] >= A[1]:\n        return False\n\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    # Check if the array is empty or not\n    if len(A) == 0:\n        return True\n    \n    # Initialize variables for the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n    \n    # Loop through the array from the beginning to the end\n    for i in range(len(A)-1):\n        # Check if the element is smaller than the previous element\n        if A[i] < first:\n            return False\n        # Check if the element is greater than the next element\n        elif A[i] > last:\n            return False\n    \n    # If the loop completes without returning False, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    # Check if the array is empty or has only one element\n    if len(A) <= 1: \n        return True\n    \n    # Check if the array is increasing or decreasing\n    if A[1] - A[0] * (A[1] - A[0] > 0) > 0: \n        # If it's increasing, check if it's monotonic\n        for i in range(1, len(A)-1):\n            if A[i+1] - A[i] < 0:\n                return False\n        return True\n    \n    # If it's decreasing, check if it's monotonic\n    for i in range(1, len(A)-1):\n        if A[i+1] - A[i] > 0:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n        if A[i] < A[i+1]:\n            continue\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # check for monotonicity from left to right\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n\n    # check for monotonicity from right to left\n    for i in range(len(A)-2, -1, -1):\n        if A[i] > A[i+1]:\n            return False\n\n    # if both checks pass, the array is monotonic\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:  # If the sublist is empty, return True\n        return True\n    if l[0] in s:\n        if s.startswith(l):  # If the first element of the sublist is present in the list, check if the sublist is a sublist of the remaining elements of the list\n            return is_sublist(l[1:], s[1:])\n        else:  # If the first element of the sublist is not present in the list, return False\n            return False\n    else:  # If the first element of the sublist is not present in the list, return False\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not l:\n        return False\n    if not s:\n        return True\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    if len(Input) == 0:\n        return False\n    \n    for i in range(1, len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    # Loop through the list of tuples\n    for tup in Input:\n        # Check if the length of the tuple is the same for all tuples in the list\n        if len(set(tup))!= len(tup):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Store the length of each tuple in a list\n    tuple_lengths = []\n\n    # Iterate through each tuple in the input list\n    for tuple_ in Input:\n        # Store the length of the current tuple in a variable\n        length = len(tuple_)\n        # Add the length to the list of tuple lengths\n        tuple_lengths.append(length)\n\n    # Compare the length of all tuples in the input list\n    all_equal = all(x == tuple_lengths[0] for x in tuple_lengths)\n\n    # Return the result\n    return all_equal\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # get the number of tuples in the input\n    n = len(Input)\n\n    # check if all tuples have the same length\n    for i in range(n):\n        length = len(Input[i])\n        if length!= n:\n            return False\n\n    # if all tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # First, check if any of the tuples in the list have length 0\n    for t in Input:\n        if len(t) == 0:\n            return False\n    # If no tuple has length 0, check if all the tuples have equal length\n    length = len(Input[0])\n    for t in Input:\n        if len(t)!= length:\n            return False\n    # If all the tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Returns True if all the given tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = [len(t) for t in Input]\n    return all(len(t) == lengths[0] for t in Input)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for tuple in Input:\n        if len(tuple)!= len(Input[0]):\n            count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # initialize the parameters for the algorithm\n    n = len(nums)\n    min_val = min(nums)\n    max_val = max(nums)\n    gap = n\n\n    # sort the list using the comb sort algorithm\n    while gap > 1 or min_val!= max_val:\n        # calculate the new gap size\n        if gap > 1:\n            gap = int(gap / 1.3)\n        else:\n            gap = int(1.3 * n)\n\n        # calculate the new minimum and maximum values\n        min_val = min(nums)\n        max_val = max(nums)\n\n        # perform the sorting using the comb sort algorithm\n        for i in range(n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    start = 0\n    while gap > 1 or swapped:\n        gap = int(gap/1.3)\n        if gap == 0:\n            gap = 1\n        swapped = False\n        for i in range(start, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm works by repeatedly sorting a sublist of the unsorted list.\n    This process continues until the sublist is sorted or becomes empty.\n\n    This algorithm has a time complexity of O(n^2), which is not very efficient for large lists.\n    However, for small lists, it is very efficient.\n    '''\n\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = int(1.3 * gap)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n - 1\n\n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n\n        swapped = False\n        start += 1\n        end -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        gap = min(gap, n // 2)\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        \n        n -= gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if gap == 1 or gap == n:\n            gap = 1\n        else:\n            gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Define parameters\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    # Main loop\n    while gap > 1 or swapped:\n\n        # Decrease gap until it becomes 1\n        while gap > 1 and swapped:\n            gap = (gap + 1) // 2\n            swapped = False\n\n        # Set swapped flag to False\n        swapped = False\n\n        # Iterate through the list\n        for i in range(n - gap):\n\n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is less than 1\n    if n < 1:\n        return False\n    # Check if the number is a square\n    elif n**0.5 == int(n**0.5):\n        return True\n    # Check if the number is the sum of two squares\n    else:\n        # Check if the difference between the number and its square root is a square\n        diff = n - int(n**0.5)\n        if diff**0.5 == int(diff**0.5):\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if (n - i*i)**2 == i*i:\n            print(i)\n            return True\n        elif (n + i*i)**2 == i*i:\n            print(-i)\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    # Check if the number is divisible by 4\n    if n.count('4')!= 0:\n        return \"The number cannot be represented as the difference of two squares\"\n    # Check if the number is divisible by 9\n    if n.count('9')!= 0:\n        return \"The number cannot be represented as the difference of two squares\"\n    # If none of the above conditions are true, the number can be represented as the difference of two squares\n    else:\n        return \"The number can be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # To check if the given number can be represented as the difference of two squares or not, we first check if it is divisible by 4 and if it is, then it cannot be represented as the difference of two squares.\n    if n%4==0:\n        return False\n    \n    # If the given number is divisible by 4, then we can check if it can be represented as the difference of two squares by finding the square root of the given number.\n    sqrt_n = int(n**0.5)\n    \n    # To check if the given number can be represented as the difference of two squares, we check if it is divisible by the square root of the given number.\n    if n%sqrt_n == 0:\n        return True\n    \n    # If the given number can be represented as the difference of two squares, then we can check if it can be represented as the difference of two squares by finding the sum of the squares of the two numbers.\n    if n%sqrt_n**2 == 0:\n        return True\n    \n    # If none of the above conditions are true, then the given number cannot be represented as the difference of two squares.\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is odd\n    if n % 2 == 1: \n        return False\n\n    # check if n is divisible by 4\n    if n % 4 == 0: \n        return False\n\n    # check if n is divisible by 9\n    if n % 9 == 0: \n        return False\n\n    # check if n is divisible by 16\n    if n % 16 == 0: \n        return False\n\n    # check if n is divisible by 25\n    if n % 25 == 0: \n        return False\n\n    # check if n is divisible by 36\n    if n % 36 == 0: \n        return False\n\n    # check if n is divisible by 49\n    if n % 49 == 0: \n        return False\n\n    # check if n is divisible by 64\n    if n % 64 == 0: \n        return False\n\n    # check if n is divisible by 81\n    if n % 81 == 0: \n        return False\n\n    # check if n is divisible by 100\n    if n % 100 == 0: \n        return False\n\n    # check if n is divisible by 121\n    if n % 121 == 0: \n        return False\n\n    # check if n is divisible by 144\n    if n % 144 == 0: \n        return False\n\n    # check if n is divisible by 169\n    if n % 169 == 0: \n        return False\n\n    # check if n is divisible by 196\n    if n % 196 == 0: \n        return False\n\n    # check if n is divisible by 225\n    if n % 225 == 0: \n        return False\n\n    # check if n is divisible by 256\n    if n % 256 == 0: \n        return False\n\n    # check if n is divisible by 289\n    if n % 289 == 0: \n        return False\n\n    # check if n is divisible by 324\n    if n % 324 == 0: \n        return False\n\n    # check if n is divisible by 361\n    if n % 361 == 0: \n        return False\n\n    # check if n is divisible by 400\n    if n % 400 == 0: \n        return False\n\n    # check if n is divisible by 441\n    if n % 441 == 0: \n        return False\n\n    # check if n is divisible by 484\n    if n % 484 == 0: \n        return False\n\n    # check if n is divisible by 529\n    if n % 529 == 0: \n        return False\n\n    # check if n is divisible by 576\n    if n % 576 == 0: \n        return False\n\n    # check if n is divisible by 625\n    if n % 625 == 0: \n        return False\n\n    # check if n is divisible by 676\n    if n % 676 == 0: \n        return False\n\n    # check if n is divisible by 729\n    if n % 729 == 0: \n        return False\n\n    # check if n is divisible by 784\n    if n % 784 == 0: \n        return False\n\n    # check if n is divisible by 841\n    if n % 841 == 0: \n        return False\n\n    # check if n is divisible by 900\n    if n % 900 == 0: \n        return False\n\n    # check if n is divisible by 961\n    if n % 961 == 0: \n        return False\n\n    # check if n is divisible by 1024\n    if n % 1024 == 0: \n        return False\n\n    # check if"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        print(\"Number should not be negative\")\n        return\n    \n    # Check if the given number can be written as the difference of two squares\n    a = int(n**0.5)\n    b = int(n - a**2)\n    \n    if a**2 + b**2 == n:\n        print(\"The given number can be written as the difference of two squares.\")\n    else:\n        print(\"The given number cannot be written as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # if the given number is a square, return True\n    if n**0.5 == int(n**0.5):\n        return True\n\n    # if the given number is not a square, check whether it can be represented as the difference of two squares\n    else:\n        i = 1\n        while i**2 <= n:\n            if n - i**2 == i**2 or n - i**2 == i**2 - 1:\n                return True\n            i += 1\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0 and i!= n//i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # initialize variables\n    square = 0\n    temp = n\n    \n    # while temp is not equal to 0, calculate square of temp and add to square\n    while temp!= 0:\n        square += temp ** 2\n        temp //= 10\n    \n    # check if square of n can be represented as the difference of two squares\n    if n == square or n == square + 1 or n == square - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Define a function to check whether a number is a perfect square\n    def is_square(num):\n        if num == 0 or num == 1:\n            return True\n        for i in range(int(num**0.5)+1):\n            if num % i!= 0:\n                return False\n        return True\n    \n    # Check whether the given number can be represented as the difference of two squares or not\n    if is_square(n):\n        print(n, \"is a perfect square.\")\n    else:\n        # Define a function to check whether a number is a perfect cube\n        def is_cube(num):\n            if num == 0 or num == 1:\n                return True\n            for i in range(int(num**0.5)+1):\n                if num % i!= 0:\n                    return False\n            return True\n        \n        # Check whether the given number can be represented as the difference of two cubes or not\n        if is_cube(n):\n            print(n, \"is a perfect cube.\")\n        else:\n            # Check whether the given number can be represented as the difference of two squares with a common factor or not\n            for i in range(1, int(n**0.5)+1):\n                if n % i == 0 and is_square(n//i) and is_square(i):\n                    print(n, \"is the difference of two squares with a common factor.\")\n                    break\n            else:\n                # Check whether the given number can be represented as the difference of two cubes with a common factor or not\n                for i in range(1, int(n**0.5)+1):\n                    if n % i == 0 and is_cube(n//i) and is_cube(i):\n                        print(n, \"is the difference of two cubes with a common factor.\")\n                        break\n                else:\n                    print(n, \"can't be represented as the difference of two squares or cubes.\")"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Initialize the pattern index to 0\n    pattern_index = 0\n\n    # Loop through each color in the sequence\n    for color in colors:\n        # Check if the current color matches the expected pattern\n        if color == patterns[pattern_index]:\n            # If it does, increment the pattern index\n            pattern_index += 1\n        # If the pattern has been completed, return True\n        if pattern_index == len(patterns):\n            return True\n\n    # If the pattern hasn't been completed, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # create a dictionary to store the index of the first occurrence of each pattern\n    pattern_indices = {}\n    for i, pattern in enumerate(patterns):\n        if pattern in pattern_indices:\n            pattern_indices[pattern] = i\n        else:\n            pattern_indices[pattern] = i\n\n    # iterate through the colors array and check if each pattern is present in the same order\n    for i, color in enumerate(colors):\n        if color not in pattern_indices:\n            return False\n        first_index = pattern_indices[color]\n        if patterns[first_index]!= color:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the lengths of the colors and patterns arrays are the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check if the colors array contains all the colors in the patterns array\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    # Check if the patterns array contains all the patterns in the colors array\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n\n    # Check if the colors in the colors array match the patterns in the patterns array\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a dictionary to store the count of each pattern\n    pattern_count = {}\n    for pattern in patterns:\n        if pattern in pattern_count:\n            pattern_count[pattern] += 1\n        else:\n            pattern_count[pattern] = 1\n\n    # Initialize a list to store the count of each color\n    color_count = [0] * 3\n\n    # Iterate through the colors list and update the color count dictionary\n    for color in colors:\n        if color == 'R':\n            color_count[0] += 1\n        elif color == 'G':\n            color_count[1] += 1\n        else:\n            color_count[2] += 1\n\n    # Iterate through the patterns list and check if each pattern is followed\n    for pattern in patterns:\n        # If the pattern is not followed by the given color, return False\n        if pattern_count[pattern] > color_count[pattern[0] - 'A']:\n            return False\n\n    # If all patterns are followed, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors.sort()\n    for pattern in patterns:\n        if colors!= pattern:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two sequences as input and returns True if they follow the same sequence,\n    and False otherwise. The sequence of colors should be the same length as the sequence of patterns.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables for colors and patterns\n    curr_color = None\n    pattern_index = 0\n\n    # Loop through colors and patterns\n    for color in colors:\n        if color == curr_color:\n            if patterns[pattern_index] == 'R':\n                pattern_index += 1\n            elif patterns[pattern_index] == 'G':\n                pattern_index += 1\n            elif patterns[pattern_index] == 'B':\n                pattern_index += 1\n        else:\n            if patterns[pattern_index] == 'R':\n                curr_color = 'R'\n            elif patterns[pattern_index] == 'G':\n                curr_color = 'G'\n            elif patterns[pattern_index] == 'B':\n                curr_color = 'B'\n            pattern_index += 1\n\n    # If the loop completes without finding any mismatches, return True\n    return pattern_index == len(patterns)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Use set to remove duplicates from test_list\n    test_set = set(test_list)\n    # Iterate through the set of tuples and check if all elements are divisible by K\n    for tup in test_set:\n        if not all(elem % K == 0 for elem in tup):\n            # If any element is not divisible by K, remove the tuple from the set\n            test_set.remove(tup)\n    # Convert the set back to a list and return it\n    return list(test_set)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_divisible_by_k = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]):\n                tuples_divisible_by_k.append(tuple(test_list[i]))\n                if len(tuples_divisible_by_k) == K:\n                    return tuples_divisible_by_k\n    return tuples_divisible_by_k"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n    \n    # Iterate through each tuple in the test list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible by K, add the tuple to the set of unique tuples\n            unique_tuples.add(tup)\n    \n    # Convert the set of unique tuples to a list and return it\n    return list(unique_tuples)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    # create a new list to store the tuples that have all elements divisible by K\n    result = []\n    \n    # iterate through the list of tuples\n    for i in range(len(test_list)):\n        # initialize a counter variable to keep track of how many elements in the current tuple are divisible by K\n        count = 0\n        \n        # iterate through the elements of the current tuple\n        for j in range(len(test_list[i])):\n            # check if the element at index j is divisible by K\n            if test_list[i][j] % K == 0:\n                # increment the counter variable\n                count += 1\n        \n        # if all elements in the current tuple are divisible by K, add the tuple to the result list\n        if count == len(test_list[i]):\n            result.append(test_list[i])\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [x for x in test_list if all(y % K == 0 for y in x)]\n"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            if j % K == 0:\n                if len(result) == 0 or result[-1][-1] < j:\n                    result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        all_divisible = True\n        for num in tup:\n            if num % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize a set to store the tuples that satisfy the condition\n    result = set()\n    # Iterate over each tuple in the test list\n    for tup in test_list:\n        # Check if all elements of the tuple are divisible by K\n        if all(num % K == 0 for num in tup):\n            # If the condition is satisfied, add the tuple to the result set\n            result.add(tup)\n    # Return the result set\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Returns True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if it is divisible by 11 and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the sentence into words\n    for word in words: # iterate through each word\n        if len(word) % 2 == 0: # check if the length of the word is even\n            return False # return False if the length is even\n        else:\n            continue # continue with the next word if the length is odd\n    return True # return True if all the words are odd"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    s = s.lower()\n    words = s.split()\n    odd_len = False\n    for word in words:\n        if len(word) % 2 == 1:\n            odd_len = True\n            break\n    return odd_len"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    len_word = len(word)\n    if len_word % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(f\"{word} is an odd length word.\")\n        else:\n            print(f\"{word} is an even length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word)%2 == 1: # check if the length of the word is odd\n            print(f\"{word} is odd length\")\n        else:\n            print(f\"{word} is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string by whitespace and return the length of the first word\n    return len(s.split()[0]) % 2"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    if len(word) > 0:\n        return len(word[0]) % 2 == 1\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef word_len(s):\n    pattern = r'\\w+'\n    matches = re.findall(pattern, s)\n    return len(matches[0]) % 2 == 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 4\n    else:\n        return 8 * (n - 2) + 4"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Constants\n    a = 1\n    b = 1.5\n    c = 1.5\n    d = 1\n\n    # Loop to calculate the nth tetrahedral number\n    for i in range(1, n+1):\n        # Calculate the values of a, b, c, and d for the i-th tetrahedral number\n        a = 1 + (b**2)/(3*c**2)\n        b = 1 + (c**2)/(3*a**2)\n        c = 1 + (a**2)/(3*b**2)\n        d = 1 + (b**2)/(3*a**2)\n\n        # Calculate the nth tetrahedral number\n        tetrahedral_num = a + b + c + d\n\n    return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return ((4 * n * n) - (n * n * n)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0: \n        return \"Please enter a positive integer\"\n    \n    tetra = 0\n    for i in range(1, n+1):\n        tetra += i * (3*i - 1) // 2\n        \n    return tetra"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return (1 + 2 * n) * 4 * n**2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 0\n    d = 1\n    for i in range(n):\n        a, b, c, d = b, c, a + b + c, d + 1\n        print(a, b, c, d)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4*n*(3*n-1)**2\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    t = 1\n    a = 0\n    b = 1\n    c = 0\n    \n    # Calculate the nth tetrahedral number\n    for i in range(n):\n        t = (t + a + b + c) % 4\n        a, b, c = b, c, 2*a + b - c\n    \n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def get_binary(n):\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary\n    \n    def get_sum(n):\n        binary_n = get_binary(n)\n        sum_digits = 0\n        for i in range(len(binary_n)):\n            if binary_n[i] == '1':\n                sum_digits += int(binary_n[i])\n        return sum_digits\n    \n    def get_product(n):\n        binary_n = get_binary(n)\n        product = 1\n        for i in range(len(binary_n)):\n            if binary_n[i] == '1':\n                product *= int(binary_n[i])\n        return product\n    \n    def get_tetrahedral_number(n):\n        return get_sum(get_product(n))\n    \n    return get_tetrahedral_number(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n - 1) * (n - 2) * (n - 3) // 6"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function calculates the volume of a sphere with the given radius.\n\n    Args:\n        r (float): The radius of the sphere.\n\n    Returns:\n        float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r ** 3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r and returns the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function calculates the volume of a sphere based on its radius.\n    \"\"\"\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r ** 3\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert the string to lowercase to avoid issues with uppercase and lowercase letters\n    strr = strr.lower()\n\n    # Initialize a variable to store the sum of ASCII values of characters in the string\n    char_sum = 0\n\n    # Iterate through each character of the string\n    for char in strr:\n        # Add the ASCII value of the current character to the sum variable\n        char_sum += ord(char)\n\n    # Convert the sum to a character and return it\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # Initialize the character variable with an empty string\n    char = \"\"\n    \n    # Iterate over each character of the string\n    for char_str in strr:\n        # Convert the character to its ASCII value using the ord() function\n        ascii_val = ord(char_str)\n        \n        # Add the ASCII value of the current character to the character variable modulo 26\n        char += chr((ascii_val + 1) % 26)\n    \n    # Return the final character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in range(len(strr)):\n        total += ord(strr[i])\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    char_val = ascii_val % 26\n    if char_val < 10:\n        char_val = chr(ord('A') + char_val - 1)\n    else:\n        char_val = chr(ord('a') + char_val - 10)\n    return char_val"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_of_chars = 0\n    for char in strr:\n        sum_of_chars += ord(char)\n    return (chr(sum_of_chars % 26 + 65))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    num = 0\n    for char in strr:\n        num += ord(char)\n    return chr((num % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = sum(ord(char) for char in strr) % 26\n    return chr(ascii_value + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    return chr((char_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_value = 0\n    for char in strr:\n        ASCII_value += ord(char)\n    return chr((ASCII_value % 26) + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 0, 0]\n    for i in range(n):\n        for j in range(len(sequence)):\n            if j == 0:\n                sequence[j+1] = sequence[j]\n            elif j == len(sequence)-1:\n                sequence[j] = sequence[j-1] + sequence[j]\n            else:\n                sequence[j] = sequence[j-1] + sequence[j+1]\n    return sequence[0]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    # initialize the sequence with 0\n    sequence = [0]\n\n    # loop through n-1 times\n    for i in range(n-1):\n        # add the current number to the sequence\n        sequence.append(sequence[-1])\n\n        # check for the rule of newman conway\n        if sequence[-1] % 3 == 0:\n            # if the current number is divisible by 3, then double it\n            sequence[-1] = 2*sequence[-1]\n        else:\n            # if the current number is not divisible by 3, then triple it\n            sequence[-1] = 3*sequence[-1]\n\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = 1\n    i = 1\n    while i < n:\n        sequence += sequence\n        i += 1\n    return sequence - 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(3 * sequence[i-1] + 1)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    # Initialize a list to store the sequence\n    sequence = []\n    # Initialize a variable to keep track of the current number in the sequence\n    current = 1\n\n    # Generate the sequence by adding the next number to the list and setting the current number to the sum of the next two numbers in the sequence\n    while len(sequence) < n:\n        sequence.append(current)\n        current = sequence[-1] + sequence[-2]\n\n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = 1\n    while True:\n        seq = (seq * 2) % 256\n        if seq == 0:\n            return n - 1\n        if seq == 1:\n            n += 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    for i in range(n-1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The {}th number in the newman conway sequence is: {}\".format(n, sequence(n)))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + 1)\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes a radius as input and returns the surface area of a sphere.\n    '''\n    # calculate the surface area of a sphere\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    A = 4 * math.pi * r**2\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    # Define the surface area of a sphere using the formula:\n    # surface_area = (4/3) * pi * r^3\n    surface_area = (4/3) * math.pi * r**3\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere with a given radius.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 / 3) * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    # Helper function to find the center of the nth hexagon\n    def center(n):\n        if n < 1:\n            return 0\n        return center(n//2) + 2*n - 2\n    \n    # Find the center of the nth hexagon\n    center_of_n_hexagon = center(n)\n    \n    # Find the nth centered hexagon\n    return (center_of_n_hexagon + 1) * (center_of_n_hexagon + 3) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Formula for centered hexagonal number:\n    # C(n) = (n^2 + 2n) / 2\n    return int((n ** 2 + 2 * n) / 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the first two centered hexagonal numbers\n    centered_hex = 1\n    centered_hex_2 = 2\n\n    # Calculate the next centered hexagon number\n    for i in range(1, n+1):\n        # Calculate the current centered hexagon number\n        hex = centered_hex_2 + (centered_hex_2 - 1) * i\n\n        # If the current centered hexagon number is odd, add 1 to get the next centered hexagon number\n        if hex % 2 == 1:\n            centered_hex = hex + 1\n        # If the current centered hexagon number is even, keep the same centered hexagon number\n        else:\n            centered_hex = hex\n\n        # Update the value of centered_hex_2 for the next iteration\n        centered_hex_2 = centered_hex\n\n    # Return the centered hexagon number\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize a variable to keep track of the current centered hexagonal number\n    current_centered_hexagonal_number = 1\n    \n    # Loop through all the numbers from 1 to n\n    for i in range(2, n+1):\n        # Calculate the next centered hexagonal number\n        next_centered_hexagonal_number = 2 * current_centered_hexagonal_number\n        \n        # Add the next centered hexagonal number to the current centered hexagonal number\n        current_centered_hexagonal_number += next_centered_hexagonal_number\n        \n        # Update the value of n to keep track of the current centered hexagonal number\n        n = current_centered_hexagonal_number\n        \n    return current_centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Function to calculate centered hexagonal number\n    def centered_hex(n):\n        return (1 / 3) * ((2 * n) ** 2) + 1\n    \n    # Function to find nth centered hexagonal number\n    def nth_centered_hex(n):\n        # Calculate centered hexagonal number\n        cent_hex = centered_hex(n)\n        # Calculate centered hexagonal number for each 15th number\n        for i in range(15, n+1, 15):\n            # Calculate centered hexagonal number for each 15th number\n            cent_hex = centered_hex(i)\n        return cent_hex\n    \n    # Find and return nth centered hexagonal number\n    return nth_centered_hex(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    centered_hex = 0\n    for i in range(1, n+1):\n        centered_hex += (2*i - 1)**2\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def is_centered(num):\n        \"\"\"\n        Check if the given number is centered or not.\n        \"\"\"\n        hex_num = num // 6\n        return hex_num == num % 6\n\n    def centered_hexagonal(n):\n        \"\"\"\n        Calculate the centered hexagonal number.\n        \"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 1 + centered_hexagonal(n - 1)\n\n    # Check if the input is valid\n    if n < 0 or not is_centered(n):\n        print(\"Invalid input\")\n        return\n\n    # Calculate the centered hexagonal number\n    centered_num = centered_hexagonal(n)\n\n    # Print the result\n    print(\"The centered hexagonal number is:\", centered_num)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (n*(n+1)*(2*n+1) + (n-1)*(n-1)*(2*n-1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = (n + 1) * ((2 * n) + 1)\n    return num"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    # Combine all three dictionaries into one using the union() method of the defaultdict class\n    merged_dict = ct.defaultdict(list)\n    \n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        merged_dict[key].append(dict1.get(key, None))\n        merged_dict[key].append(dict2.get(key, None))\n        merged_dict[key].append(dict3.get(key, None))\n    \n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1 (dict): First dictionary to merge.\n    - dict2 (dict): Second dictionary to merge.\n    - dict3 (dict): Third dictionary to merge.\n\n    Returns:\n    - dict: A merged dictionary.\n\n    \"\"\"\n    # Combine the three dictionaries into one using the dictionary update method.\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function merges three dictionaries into a single dictionary.\n\n    Args:\n        dict1: A dictionary to be merged with dict2 and dict3.\n        dict2: A dictionary to be merged with dict1 and dict3.\n        dict3: A dictionary to be merged with dict1 and dict2.\n\n    Returns:\n        A single dictionary that contains all the key-value pairs from dict1, dict2 and dict3.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): Dictionary 1.\n        dict2 (dict): Dictionary 2.\n        dict3 (dict): Dictionary 3.\n\n    Returns:\n        dict: A dictionary that contains all the keys from all three dictionaries.\n\n    Examples:\n        >>> dict1 = {'a': 1, 'b': 2}\n        >>> dict2 = {'c': 3, 'd': 4}\n        >>> dict3 = {'e': 5, 'f': 6}\n        >>> merge_dictionaries_three(dict1, dict2, dict3)\n        {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n    \"\"\"\n    # Create a dictionary to store all the merged keys\n    merged_dict = {}\n\n    # Loop through all the keys in the three dictionaries\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        # If the key exists in only one dictionary, add it to the merged dictionary\n        if key in dict1.keys() and key in dict2.keys() and key in dict3.keys():\n            merged_dict[key] = dict1[key]\n        elif key in dict1.keys():\n            merged_dict[key] = dict1[key]\n        elif key in dict2.keys():\n            merged_dict[key] = dict2[key]\n        elif key in dict3.keys():\n            merged_dict[key] = dict3[key]\n        # If the key exists in all three dictionaries, add it to the merged dictionary\n        else:\n            merged_dict[key] = None\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as an input and returns a dictionary of the frequency of all the elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = collections.Counter(list1)\n    return count_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are the elements of the list and the values are the frequency of that element.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(1, N+1))\n    smallest_diff = float('inf')\n    closest_num = -1\n    \n    for num in nums:\n        diff = abs(num - N)\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_num = num\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 1:\n        return None\n    else:\n        closest = float('inf')\n        for i in range(1, N):\n            if abs(N - i) < abs(closest - i):\n                closest = N - i\n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N % 2 == 0:\n        # If N is even, return the smallest odd number greater than N\n        return N + 1\n    else:\n        # If N is odd, return the smallest even number greater than N\n        return N + 2"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest_smaller = None\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n            closest_smaller = num - smallest\n        elif num - smallest <= smallest:\n            closest_smaller = min(closest_smaller, num - smallest)\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    \"\"\"\n    This function finds the closest smaller number than n.\n    \"\"\"\n    min_num = float('inf')\n    for num in range(1, N+1):\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Calculate the absolute difference between N and the smallest number less than N\n    diff = abs(N - min(range(N)))\n    # Calculate the absolute difference between N and the largest number greater than N\n    diff = min(diff, abs(N - max(range(N))))\n    # Return the smallest number greater than or equal to N that has the same number of 1's as N\n    return min(N + i - diff for i in range(1, 10))"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest = N\n    for i in range(1, N+1):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Find the difference between N and the smallest number in the list\n    diff = min(N, *N) - N\n    \n    # If the difference is greater than 1, return N\n    if diff > 1:\n        return N\n    \n    # If the difference is equal to 1, find the closest smaller number\n    else:\n        # Initialize the closest smaller number to N\n        closest_num = N\n        \n        # Loop through the list and compare each number to N\n        for num in N:\n            if num < closest_num and num - N < closest_num - closest_num:\n                closest_num = num\n        \n        return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables to store the smallest and largest number\n    smallest = float('inf')\n    largest = float('-inf')\n\n    # Loop through all the numbers from 1 to N\n    for i in range(1, N+1):\n        # Check if the current number is smaller than the smallest number\n        if i < smallest:\n            smallest = i\n        # Check if the current number is larger than the largest number\n        if i > largest:\n            largest = i\n\n    # Find the closest smaller number\n    closest = smallest if smallest < largest else largest\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = float('inf')\n    for i in range(N):\n        if i == 0:\n            closest = N\n        elif abs(N - i) < abs(closest - i):\n            closest = i\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    # initialize variables\n    longest_word = \"\"\n    longest_length = 0\n    \n    # loop through the list of words\n    for word in list1:\n        # if the length of the current word is greater than the current longest word, update the longest word and length\n        if len(word) > longest_length:\n            longest_word = word\n            longest_length = len(word)\n    \n    # return the length of the longest word\n    return longest_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    longest = 0\n    current = 0\n    # iterate through the list and find the length of the longest word\n    for word in list1:\n        if len(word) > current:\n            longest = current\n            current = len(word)\n        elif len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    lst = [str1]\n    for i in lst:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in the list\")\n    else:\n        print(f\"{sub_str} is not present in the list\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in the given string\")\n    else:\n        print(f\"{sub_str} is not present in the given string\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert list of strings to a set to remove duplicates\n    str1 = set(str1)\n\n    # Check if the substring is present in the set of strings\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str_list, sub_str):\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two arguments: a string'str1' and a substring'sub_str'.\n    It checks if the substring'sub_str' is present as a substring in the string'str1'.\n    If it is present, it returns True, else it returns False.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in str1[i:]:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return \"The number is not undulating.\"\n    else:\n        return \"The number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether a given number is undulating or not.\n    '''\n    if n < 10:\n        return \"The number is not undulating\"\n    else:\n        return \"The number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # check if the number is divisible by 5 or 10\n    if n % 5 == 0 or n % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 100:\n        return \"The number is not undulating.\"\n    elif n < 1000:\n        return \"The number is undulating.\"\n    else:\n        return \"The number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_undulating(n // 2)\n        else:\n            return not is_undulating((n-1) // 2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'The number is odd and undulating'\n    else:\n        return 'The number is even and not undulating'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a, b)\n\nhelp(power)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by the second value\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n\n    # Use the itemgetter() function to extract the second value from each tuple\n    min_values = sorted(test_list, key=itemgetter(1))\n\n    # Return the index of the first tuple in the sorted list\n    return min_values[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the smallest length to be the length of the first list in the list\n    smallest_length = len(lst[0])\n    # Iterate through each list in the list of lists\n    for i in range(1, len(lst)):\n        # Check if the length of the current list is smaller than the smallest length found so far\n        if len(lst[i]) < smallest_length:\n            # Update the smallest length with the length of the current list\n            smallest_length = len(lst[i])\n    # Return the smallest length found\n    return smallest_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None  \n    for sub_lst in lst:  \n        if min_length is None or len(sub_lst) < min_length:  \n            min_length = len(sub_lst)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n\n    min_length = None  \n    for lst in lst:  \n        if min_length is None or len(lst) < min_length:  \n            min_length = len(lst)  \n\n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sub_list in lst:  \n        if len(sub_list) < min_length:  \n            min_length = len(sub_list)  \n    return min_length  \n    "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n\n    # Initialize the length of the smallest list to be the length of the first list in the list\n    min_length = len(lst[0])\n\n    # Iterate through the list of lists\n    for sublist in lst:\n        # Check if the current sublist has a shorter length than the current minimum length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    # Loop through from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # If n is divisible by i, add 1 to count\n        if n % i == 0:\n            count += 1\n    # Return count\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initializing an empty dictionary to store frequency of each element\n    freq = {}\n\n    # looping through each element in the flattened list\n    for item in list1:\n        # checking if the item is already in the dictionary\n        if item in freq:\n            # incrementing its frequency by 1\n            freq[item] += 1\n        else:\n            # adding the item to the dictionary with frequency of 1\n            freq[item] = 1\n\n    # returning the dictionary of frequencies\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in list1:\n        for j in i:\n            if j in frequency_dict:\n                frequency_dict[j] += 1\n            else:\n                frequency_dict[j] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists to a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Use a dictionary to store the frequencies\n    freq_dict = {}\n    # Loop through the flattened list and update the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in frequency_dict:\n                frequency_dict[subitem] += 1\n            else:\n                frequency_dict[subitem] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in frequency_dict:\n                    frequency_dict[subitem] += 1\n                else:\n                    frequency_dict[subitem] = 1\n        else:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # flatten the list of lists\n    flat_list = []\n    for item in list1:\n        for subitem in item:\n            flat_list.append(subitem)\n\n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    product /= len(numbers)\n    return product"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to store the binary representation of n\n    binary = \"\"\n    # loop while n is greater than 0\n    while n > 0:\n        # extract the remainder of n when divided by 2\n        remainder = n % 2\n        # add the remainder to the beginning of the binary string\n        binary = str(remainder) + binary\n        # divide n by 2 to remove the last digit from the original value\n        n = n // 2\n    # return the binary representation of n as a string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    # Remove leading zeros\n    while binary[0] == '0':\n        binary = binary[1:]\n    # Reverse the binary string\n    binary = binary[::-1]\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to hold the binary representation of the decimal number\n    binary_string = ''\n    \n    # Loop through each digit of the decimal number from right to left\n    while n > 0: \n        # Append the remainder of n divided by 2 to the front of binary_string\n        binary_string = str(n % 2) + binary_string\n        # Divide n by 2 to remove the last digit\n        n //= 2\n        \n    # Return the binary string with no leading zeros\n    return binary_string.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # convert decimal number to binary\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    # remove leading zeros\n    while binary.startswith(\"0\"):\n        binary = binary[1:]\n    # return the binary number as a string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert the decimal number to binary using bitwise operations\n    binary = \"\"\n    while n > 0:\n        # Get the last digit of the decimal number\n        digit = n & 1\n        # Append the binary representation of the digit to the binary string\n        binary = str(digit) + binary\n        # Shift the decimal number to the left by one bit\n        n = n >> 1\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    # define an empty string to store the binary equivalent\n    binary = ''\n    # loop through the decimal number from least significant digit to most significant digit\n    for i in range(1, 10):\n        # calculate the power of 2 for the current digit\n        power = 2**(9-i)\n        # check if the current digit is greater than or equal to the decimal number\n        if n >= power:\n            # if it is, add a 1 to the binary string\n            binary += '1'\n            # subtract the power of 2 from the decimal number\n            n -= power\n        # if the current digit is less than the decimal number, add a 0 to the binary string\n        else:\n            binary += '0'\n    # return the binary string\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given integer is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef is_prime(num):\n    '''\n    Helper function to check if a given integer is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_prime(num):\n        return num + 1\n    while True:\n        candidate = num + 1\n        if is_palindrome(candidate) and is_prime(candidate):\n            return candidate\n        num += 1\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: python next_smallest_palindrome.py [integer]\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    next_num = next_smallest_palindrome(num)\n    print(f\"The next smallest palindrome of {num} is {next_num}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num * 10\n\n    min_num = 10\n    while True:\n        num_str = str(num)\n        new_num = int(num_str[::-1])\n        if new_num < min_num and new_num % 10 == 0:\n            return new_num\n\n        min_num = new_num\n        num += 1\n\n    return None\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    result = next_smallest_palindrome(num)\n    if result is None:\n        print(\"No next smallest palindrome found.\")\n    else:\n        print(\"The next smallest palindrome of\", num, \"is\", result)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the given integer to a string and reverse it\n    str_num = str(num)[::-1]\n\n    # Initialize variables to store the next smallest and current palindromes\n    next_palindrome = int(str_num)\n    current_palindrome = num\n\n    # Iterate through the digits of the string and find the next smallest palindrome\n    while current_palindrome > next_palindrome:\n        current_palindrome -= 1\n        next_palindrome = int(str_num)\n\n    # Return the next smallest palindrome\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    def is_palindrome(num):\n        '''\n        A helper function to check if a number is a palindrome.\n        '''\n        return str(num) == str(num)[::-1]\n\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n\n    # Check if the number is divisible by 10\n    if num % 10 == 0:\n        return next_smallest_palindrome(num + 1)\n\n    # Find the smallest multiple of 10 greater than the number\n    multiple = 10 * ((num // 10) + 1)\n\n    # Check if the multiple is a palindrome\n    if is_palindrome(multiple):\n        return multiple\n\n    # Find the next smallest palindrome greater than the multiple\n    next_multiple = next_smallest_palindrome(multiple + 1)\n\n    # Check if the next multiple is a palindrome\n    if is_palindrome(next_multiple):\n        return next_multiple\n\n    # If we get here, there is no palindrome greater than the number, so return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Define a function to check whether a number is palindrome or not\n    def is_palindrome(num):\n        # Convert the number to a string and then reverse the string\n        reverse_num = str(num)[::-1]\n        # Compare the original number with its reversed version\n        if reverse_num == str(num):\n            return True\n        else:\n            return False\n\n    # Check if the given number is a palindrome\n    if is_palindrome(num):\n        # If it is a palindrome, find the next smallest palindrome\n        min_palindrome = num - 1\n        while not is_palindrome(min_palindrome):\n            min_palindrome -= 1\n\n        return min_palindrome\n    else:\n        # If it is not a palindrome, find the smallest palindrome greater than the given number\n        min_palindrome = num + 1\n        while not is_palindrome(min_palindrome):\n            min_palindrome += 1\n\n        return min_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    smallest_palindrome = 0\n    current_palindrome = num\n    while not is_palindrome(current_palindrome):\n        smallest_palindrome = current_palindrome\n        current_palindrome += num\n    return smallest_palindrome\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    next_num = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", next_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        if int(num ** 0.5) ** 2 == num:\n            return int(num ** 0.5)\n        num += 1\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print('Usage: python next_smallest_palindrome.py <integer>')\n        sys.exit(1)\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Remove all digits except the last one from the given integer\n    num_str = str(num)\n    last_digit = int(num_str[-1])\n    num_str = num_str[:-1]\n\n    # Convert the remaining digits to a list\n    num_list = [int(i) for i in num_str]\n\n    # Find the first odd number greater than the last digit in the original number\n    i = len(num_list)\n    while i > 0:\n        if num_list[i-1] % 2 == 1:\n            break\n        i -= 1\n\n    # If the original number is odd, the next smallest palindrome is the number with all digits except the last one incremented by 1\n    if num_list[i-1] % 2 == 0:\n        next_palindrome = num + 1\n\n    # If the original number is even, the next smallest palindrome is the number with all digits except the last one incremented by 2\n    else:\n        next_palindrome = num + 2\n\n    # Convert the next palindrome to an integer\n    next_palindrome_str = str(next_palindrome)\n    next_palindrome = int(''.join(next_palindrome_str))\n\n    return next_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    # find the length of the string\n    length = len(num_str)\n    # check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # if it is, increment the number by 1\n        num += 1\n    else:\n        # if it's not, check for the next smallest palindrome\n        for i in range(length):\n            # check if the current digit is even\n            if int(num_str[i]) % 2 == 0:\n                # if it is, add 1 to the current digit and carry\n                num_str = str(int(num_str[i]) + 1) + num_str[:i] + num_str[i+1:]\n                break\n            # if the current digit is odd, add 0 to the current digit and carry\n            else:\n                num_str = str(int(num_str[i]) + 0) + num_str[:i] + num_str[i+1:]\n                break\n        # add 1 to the end of the string if the carry is 1\n        if int(num_str[-1]) == 0:\n            num_str += '1'\n        else:\n            num_str += '0'\n    # convert the reversed string back to an integer\n    next_num = int(num_str)\n    # return the next smallest palindrome\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome or not.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    next_num = num\n    while True:\n        if is_palindrome(next_num):\n            break\n        next_num += 1\n\n    return next_num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        print(\"The given array does not have enough elements to find the kth element.\")\n        return\n    count = 1\n    for i in range(len(arr)):\n        if count == k:\n            return arr[i]\n        count += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k <= 0 or k > len(arr):\n        return None\n    \n    count = 0\n    for i in range(1, len(arr) + 1):\n        count += arr[i - 1]\n        \n        if count == k:\n            return i"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if not arr:\n        return None\n\n    # Get the length of the array\n    n = len(arr)\n\n    # Calculate the index of the kth element\n    index = k - 1\n\n    # Check if the index is valid\n    if index < 0 or index >= n:\n        return None\n\n    # Return the kth element\n    return arr[index]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n < k or k < 1:\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        mid = n // 2\n        if k < mid:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid:], k - mid)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) == 1:\n        return arr[0]\n    elif k < 1 or k > len(arr):\n        return None\n    # Find the middle index of the array\n    mid = len(arr) // 2\n    # Check if the kth element is in the left half of the array\n    if k == mid + 1:\n        return arr[k - 1]\n    # Check if the kth element is in the right half of the array\n    elif k > mid + 1:\n        return kth_element(arr[:mid], k - mid - 1)\n    # If the kth element is in the left half of the array\n    else:\n        return kth_element(arr[mid:], k - mid)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Calculate the length of the array\n    n = len(arr)\n    \n    # Check if k is valid\n    if k < 1 or k > n:\n        return None\n    \n    # Initialize two pointers\n    left = 1\n    right = n\n    \n    # Iterate until the pointers meet or cross each other\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the middle index is the kth element, return the value\n        if mid == k:\n            return arr[k-1]\n        \n        # If the middle index is greater, the kth element is in the left half of the array\n        elif mid < k:\n            left = mid + 1\n        \n        # If the middle index is less, the kth element is in the right half of the array\n        else:\n            right = mid - 1\n    \n    # If the while loop exits without finding the kth element, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the array is empty or k is out of bounds\n    if len(arr) == 0 or k < 1 or k > len(arr):\n        return None\n    \n    # find the middle element of the array\n    mid = len(arr) // 2\n    \n    # if the kth element is in the first half of the array\n    if k <= mid:\n        return kth_element(arr[:mid], k)\n    \n    # if the kth element is in the second half of the array\n    else:\n        return kth_element(arr[mid+1:], k-mid-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    if k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        mid = n // 2\n        left = kth_element(arr[:mid], k)\n        right = kth_element(arr[mid:], k - mid)\n        if left is None:\n            return right\n        elif right is None:\n            return left\n        else:\n            return left if left < right else right"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        else:\n            camel_case += letter.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i].isupper():\n            camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i].upper()\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert the first word to uppercase and the rest to lowercase\n    camel_case = words[0].upper() + words[1:].lower()\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert all the words to lowercase\n    word = word.lower()\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    result = words[0]\n    for i in range(1, len(words)):\n        result += words[i].capitalize()\n    # Convert the result to camel case\n    result = result.title()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        elif word[i-1] == \"_\":\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Args:\n    word (str): A snake case string.\n\n    Returns:\n    str: A camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the snake case string into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    parts = word.split('_')\n    camel_case = []\n    for part in parts:\n        camel_case.append(part.capitalize())\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].upper()\n        elif word[i].isupper():\n            camel_word += word[i]\n        else:\n            camel_word += '_' + word[i].lower()\n    return camel_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function calculates the Eulerian number a(n, m).\n    The Eulerian number is defined as the number of paths that exist between two points on an n-by-n grid with m obstacles.\n\n    Parameters:\n    n (int): The number of rows in the grid.\n    m (int): The number of obstacles in the grid.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    3\n    >>> eulerian_num(5, 0)\n    15\n    '''\n\n    # Check if the given input is valid\n    if n < 1 or m < 0 or n < m:\n        return -1\n\n    # Create a list of all possible paths from the top-left corner\n    paths = []\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                paths.append((i, j))\n            else:\n                paths.append((i, j))\n                if i > 0:\n                    paths.append((i - 1, j))\n                if j > 0:\n                    paths.append((i, j - 1))\n\n    # Count the number of paths that satisfy the given conditions\n    count = 0\n    for path in paths:\n        i, j = path\n        if i == n - 1 and j == m - 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return n\n    else:\n        return eulerian_num(n + 1, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Define the matrix A\n    A = [[0 for j in range(m)] for i in range(n)]\n\n    # Initialize the first row of A\n    A[0][0] = 1\n\n    # Compute the rest of the matrix\n    for i in range(1, n):\n        for j in range(m):\n            A[i][j] = (A[i-1][j] + A[i-1][j+1]) % 2\n\n    # Find the sum of the diagonal elements\n    diag = sum(sum(A[i][j] for j in range(m)) for i in range(n))\n\n    # Return the Eulerian number\n    return diag"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # initializing a list to store the prime numbers up to sqrt(n)\n    prime_list = [True] * (n+1)\n\n    # using the Sieve of Eratosthenes to find all prime numbers up to sqrt(n)\n    for i in range(2, int(n**0.5)+1):\n        if prime_list[i]:\n            for j in range(i*i, n+1, i):\n                prime_list[j] = False\n\n    # finding the prime numbers up to sqrt(n)\n    prime_nums = []\n    for i in range(2, n+1):\n        if prime_list[i]:\n            prime_nums.append(i)\n\n    # finding all even numbers that are divisible by 3\n    even_nums = []\n    for num in range(2, n+1, 2):\n        if num in prime_nums:\n            even_nums.append(num)\n\n    # finding the product of all even numbers that are divisible by 3\n    product = 1\n    for num in even_nums:\n        product *= num\n\n    # finding the product of all even numbers that are divisible by 5\n    product_by_5 = 1\n    for num in even_nums:\n        if num % 5 == 0:\n            product_by_5 *= num\n\n    # finding the product of all even numbers that are divisible by both 3 and 5\n    product_by_3_and_5 = 1\n    for num in even_nums:\n        if num % 5 == 0 and num % 3 == 0:\n            product_by_3_and_5 *= num\n\n    # finding the Eulerian number a(n, m)\n    eulerian_num = product - product_by_5 + product_by_3_and_5\n\n    return eulerian_num\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # If either n or m is 0, then the Eulerian number is 0\n    if n == 0 or m == 0:\n        return 0\n    # If n is even, then the Eulerian number is 2^(m-1)\n    elif n % 2 == 0:\n        return (1 << (m-1))\n    # If n is odd, then the Eulerian number is n^m\n    else:\n        return n**m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Finding the minimum value of m such that there exists a positive integer k such that n = k * m.\n    k = n // m\n    if k * m == n:\n        return k\n    else:\n        return eulerian_num(n, k + 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    if n == 1 and m == 1:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) + 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Eulerian number a(n, m) = n * (n-1) * (n-2) *... * (n-m+1)\n    # Using math.factorial() function to calculate factorial of n.\n    factorial_n = math.factorial(n)\n    # Using math.comb() function to calculate comb(n, m)\n    comb_n_m = math.comb(n, m)\n    # Calculating Eulerian number using the above formula.\n    eulerian_num = factorial_n // (factorial_n // comb_n_m)\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = []\n    for i in range(1, n+1):\n        a.append([0] * (i + m))\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if j <= n:\n                a[i][j] = a[i-1][j-1]\n            else:\n                a[i][j] = a[i-1][j]\n            a[i][j] += a[i-1][j]\n        a[i][i+m] = 1\n    return a[n][n+m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a *= (2*i-1)/(i+m)\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = str(input_list[i][j]).lower()\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n\n        # Sort the sublist in ascending order using the sorted() function\n        sublist.sort()\n\n        # Print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n\n    Parameters:\n    lst (list): a list of booleans\n\n    Returns:\n    int: the number of true booleans in the list\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):   \n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the given list to the given tuples\n    test_list.extend(test_tup)\n    \n    # print the updated tuples\n    print(test_list, test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    print(\"The list has been appended to the tuple.\")"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the lists to tuples for easier manipulation\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # append the lists to the tuples\n    test_list += test_tup\n    # convert the result back to a list\n    test_list = list(test_list)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n\n    # append lists to tuples\n    result = test_tup + test_list\n\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # append the test_list to test_tup\n    test_tup = test_tup + test_list\n    \n    # return the modified test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + test_tup\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    # Return the sorted combined list\n    return combined_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function merges three sorted lists into a single sorted list.\n    '''\n\n    # Create a min heap to store the smallest element of each list\n    min_heap = [heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heapq.heappushpop(heap"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists as input and returns a single sorted list.\n    '''\n    # Merge the three input lists into a single list using heapq\n    merged_list = sorted(list(heapq.merge(num1, num2, num3)))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n\n    # Sort the combined list using heapq\n    heapq.heapify(combined_list)\n\n    # Extract the first element of the sorted list\n    result = heapq.heappop(combined_list)\n\n    # Convert the remaining elements to a list and return it\n    return list(result)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n    def merge_lists(lst1, lst2):\n        \"\"\"\n        Merges two sorted lists into a single sorted list.\n        \"\"\"\n        merged = []\n        i = j = 0\n        while i < len(lst1) and j < len(lst2):\n            if lst1[i] <= lst2[j]:\n                merged.append(lst1[i])\n                i += 1\n            else:\n                merged.append(lst2[j])\n                j += 1\n        merged += lst1[i:]\n        merged += lst2[j:]\n        return merged\n\n    def merge_lists_and_heapify(lst1, lst2):\n        \"\"\"\n        Merges two sorted lists into a single sorted list and heapifies it.\n        \"\"\"\n        merged = merge_lists(lst1, lst2)\n        heapq.heapify(merged)\n        return merged\n\n    def merge_sorted_lists(lst1, lst2, lst3):\n        \"\"\"\n        Merges three sorted lists into a single sorted list.\n        \"\"\"\n        merged_lst = merge_lists_and_heapify(lst1, lst2)\n        return merge_lists_and_heapify(merged_lst, lst3)\n\n    return merge_sorted_lists(num1, num2, num3)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Create a min heap of size len(combined_list)\n    min_heap = []\n    \n    # Fill the min heap with the elements of the combined list\n    for element in combined_list:\n        heapq.heappush(min_heap, element)\n    \n    # Create a new list to hold the merged elements\n    merged_list = []\n    \n    # Pop elements from the min heap and add them to the merged list\n    while len(min_heap) > 0:\n        merged_list.append(heapq.heappop(min_heap))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge the lists in ascending order\n    sorted_list = sorted(num1 + num2 + num3)\n    # create an empty heap\n    heap = []\n    # push the elements of the sorted list into the heap\n    for i in sorted_list:\n        heapq.heappush(heap, i)\n    # pop the elements from the heap and add them to the result list in descending order\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    result.reverse()\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n    num1 (list): List of integers.\n    num2 (list): List of integers.\n    num3 (list): List of integers.\n\n    Returns:\n    list: List of integers.\n    \"\"\"\n\n    # Combine the three lists into one sorted list\n    merged_list = heapq.merge(heapq.merge(num1, num2), num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists as input and returns a single sorted list.\n    \"\"\"\n\n    # Merge the two smallest lists\n    merged_list = heapq.merge(num1, num2)\n\n    # Merge the merged list with the third list\n    return heapq.merge(merged_list, num3)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Function to find the number of odd numbers in a binary string after rotating it n number of times.\n\n    Parameters:\n    s (str): Binary string\n    n (int): Number of rotations\n\n    Returns:\n    int: Number of odd numbers in the rotated binary string.\n    '''\n\n    # Convert the binary string to a list of binary digits\n    s_list = [int(i) for i in s]\n\n    # Rotate the binary list n times\n    for i in range(n):\n        s_list = s_list[1:] + s_list[:1]\n\n    # Count the number of odd numbers in the rotated list\n    odd_count = 0\n    for digit in s_list:\n        if digit % 2 == 1:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #initialize count variable\n    count = 0\n    #split the binary string into characters\n    binary_list = list(s)\n    #rotate the binary string the given number of times\n    rotated_list = [binary_list[-i-1] for i in range(n)]\n    #iterate through the rotated binary string to count odd values\n    for binary_char in rotated_list:\n        if int(binary_char) % 2!= 0:\n            count += 1\n    #return the count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # find the length of the binary string\n    length = len(s)\n    \n    # initialize the count variable to 0\n    count = 0\n    \n    # loop n times\n    for i in range(n):\n        \n        # convert the binary string to an array of binary digits\n        binary = [int(digit) for digit in s]\n        \n        # create a new array with the same length as the binary string, but initialized to 0\n        new_binary = [0] * length\n        \n        # rotate the array by 1 position to the left\n        for j in range(length-1):\n            new_binary[j] = binary[j+1]\n            \n        # add the count of the new binary string to the count variable\n        count += sum(new_binary)\n        \n        # convert the new binary string back to a binary string and set it to the original binary string\n        s = ''.join([str(digit) for digit in new_binary])\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    for i in range(n):\n        new_string = s[::-1] + s[:1]\n        if s!= new_string:\n            odd_count += 1\n            s = new_string\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    # Initialize variables\n    count = 0\n    temp = \"\"\n    \n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in s]\n    \n    # Rotate the list of bits the given number of times\n    for _ in range(n):\n        temp = []\n        for bit in bits:\n            if bit == 0:\n                temp.append(0)\n            else:\n                temp.append(1)\n        bits = temp\n    \n    # Count the number of odd values in the rotated list of bits\n    for bit in bits:\n        if bit == 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # convert the string to a list of binary digits\n    digits = [int(digit) for digit in s]\n\n    # rotate the digits by n positions\n    for i in range(n):\n        temp = digits[0]\n        digits = digits[1:]\n        digits.append(temp)\n\n    # count the number of odd digits\n    count = 0\n    for digit in digits:\n        if digit % 2!= 0:\n            count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Initialize variables\n    count = 0\n    rotated = []\n    k = n % len(s)\n    i = 0\n\n    # Rotate the binary string k times and append the last k bits of the original binary string\n    while i < len(s):\n        if s[i] == '1':\n            rotated.append(1)\n        else:\n            rotated.append(0)\n        i += 1\n\n    # Initialize variables for odd equivalent number count\n    prev_rotated = rotated\n    temp_count = 0\n\n    # Iterate through all possible rotations of the binary string and check if the rotated string contains an odd value\n    for i in range(2 ** k):\n        temp_rotated = []\n        j = 0\n        while j < len(rotated):\n            if i % 2 == 1:\n                temp_rotated.append(rotated[j])\n            else:\n                temp_rotated.append(1 - rotated[j])\n            j += 1\n        temp_count = temp_count + temp_rotated.count(1)\n        rotated = temp_rotated\n\n    # Return the number of odd equivalent numbers found\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # initialize variables for the binary string and the number of odd values\n    binary_string = s\n    odd_count = 0\n    # loop through the given number of rotations\n    for i in range(n):\n        # convert the binary string to a list of digits\n        binary_list = list(binary_string)\n        # iterate through the list and add 1 to the count for each odd value\n        for j in range(len(binary_list)):\n            if int(binary_list[j]) % 2 == 1:\n                odd_count += 1\n        # reverse the list and join the digits into a new string\n        binary_string = ''.join(map(str, reversed(binary_list)))\n    # return the final count of odd values after the rotations\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Initialize an empty list to store the odd numbers\n    odd_numbers = []\n    \n    # Initialize an index variable to start from the right end of the string\n    i = len(s)-1\n    \n    # Rotate the binary string n times\n    for _ in range(n):\n        # If the current character is an odd number, append it to the odd_numbers list\n        if s[i] == '1':\n            odd_numbers.append(int(s[i]))\n        # Rotate the string by one character to the left\n        s = s[:i] + s[i+1:]\n        # Decrease the index variable to start from the right end of the new string\n        i -= 1\n    \n    # Return the length of the odd_numbers list\n    return len(odd_numbers)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s_list = list(s)\n    for i in range(n):\n        s_list.append(s_list.pop(0))\n    odd_count = 0\n    for i in range(len(s_list)):\n        if int(s_list[i]) % 2 == 1:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common_elements:\n                common_elements.append(j)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst in nestedlist:\n        for item in lst:\n            if item not in common_elements:\n                common_elements.append(item)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[0][j])):\n                if nestedlist[i][j][k] in common_elements:\n                    common_elements.remove(nestedlist[i][j][k])\n                else:\n                    common_elements.append(nestedlist[i][j][k])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    \n    common_elements = []\n    for i in range(len(nestedlist[0])):\n        for sublist in nestedlist:\n            if i >= len(sublist):\n                continue\n            if sublist[i] in common_elements:\n                common_elements.remove(sublist[i])\n            else:\n                common_elements.append(sublist[i])\n    \n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                continue\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i!= j:\n                if i in j and j in i:\n                    common_elements.append(i)\n                    common_elements.append(j)\n    return list(set(common_elements))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    if len(nestedlist[0]) == 0:\n        return []\n    common = []\n    for i in range(len(nestedlist[0])):\n        if all(nestedlist[j][i] == nestedlist[0][i] for j in range(len(nestedlist))):\n            common.append(nestedlist[0][i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(set(sublist))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = set()\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common.update(nestedlist[i] & nestedlist[j])\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if i!= {}:\n            return False\n\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(len(item) == 0 for item in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Loop through each dictionary in the list\n    for dic in list1:\n        # Check if the dictionary is empty\n        if len(dic) == 0:\n            return False\n    # If all dictionaries are empty, return True\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty list to store the converted integers\n    result = []\n    \n    # Iterate through the tuple and convert each integer to a string and append it to the result list\n    for num in nums:\n        result.append(str(num))\n    \n    # Join the strings in the result list into a single string using a comma as a separator\n    result = \",\".join(result)\n    \n    # Convert the resulting string to an integer using the int() function\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = []\n    for num in nums:\n        int_list.append(int(num))\n    return sum(int_list)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    if not nums:\n        return None\n    total = 0\n    for num in nums:\n        if not isinstance(num, int) or num < 1:\n            return None\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple of integers to string of integers separated by commas\n    nums_str = ', '.join(str(num) for num in nums)\n    # Convert string to integer\n    result = int(nums_str)\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], float):\n                result.append(test_list[i][j])\n            elif isinstance(test_list[i][j], int):\n                result.append(float(test_list[i][j]))\n            elif isinstance(test_list[i][j], str):\n                try:\n                    result.append(float(test_list[i][j]))\n                except ValueError:\n                    pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, str):\n                try:\n                    test_list[test_list.index(sublist)][test_list[test_list.index(sublist)].index(item)] = float(item)\n                except ValueError:\n                    pass\n            elif isinstance(item, list):\n                list_to_float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                item = float(item)\n            except ValueError:\n                continue\n            else:\n                sublist.remove(item)\n\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Define a function to convert elements of a list to floats\n    def float_converter(item):\n        # Check if the element is convertible to a float\n        try:\n            # Convert the element to a float and return the result\n            return float(item)\n        except ValueError:\n            # If the element cannot be converted to a float, return None\n            return None\n\n    # Use the function to convert each element of the list to a float\n    new_list = [float_converter(item) for item in test_list]\n\n    # Return the new list of floats\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n                row.append(float(element))\n            except ValueError:\n                row.append(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                continue\n            else:\n                sublist.remove(item)\n                sublist.append(float(item))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for item in test_list:\n        try:\n            float_item = float(item)\n            result_list.append(float_item)\n        except ValueError:\n            continue\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        new_row = []\n        for item in row:\n            try:\n                new_item = float(item)\n                new_row.append(new_item)\n            except ValueError:\n                new_row.append(item)\n        result.append(new_row)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n\n    # Split the string on the space character\n    split_string = string.split()\n\n    # Return the list of strings\n    return split_string"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character and return the result as a list\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # iterate through the array and update the frequency count for each element\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # iterate through the array and check if each element appears only once\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    # Initialize the left and right pointers\n    left, right = 0, len(arr) - 1\n    \n    # While there are still elements to search\n    while left <= right:\n        # Compute the middle index\n        mid = (left + right) // 2\n        \n        # If the middle element is the only one, return its value\n        if arr[mid] == arr[mid+1]:\n            return arr[mid]\n        \n        # If the middle element appears only once, search the right half\n        elif arr[mid] < arr[mid+1]:\n            left = mid + 1\n        \n        # If the middle element appears only once, search the left half\n        else:\n            right = mid - 1\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    # Iterate through the array\n    for element in arr:\n        # If the element is already in the dictionary, increment its count\n        if element in count:\n            count[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count[element] = 1\n    # Iterate through the array again to find the element that appears only once\n    for element in arr:\n        # If the count of the element in the dictionary is 1, return it\n        if count[element] == 1:\n            return element\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Iterate through the array and update the frequency of each element in the dictionary\n    for element in arr:\n        freq[element] = freq.get(element, 0) + 1\n    \n    # Iterate through the dictionary and return the key with frequency 1 (which is the only element that appears only once)\n    for key in freq:\n        if freq[key] == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    if arr[0] == arr[1]:\n        return search(arr[1:])\n\n    for i in range(1, len(arr)-1):\n        if arr[i] == arr[i-1]:\n            if arr[i] == arr[i+1]:\n                return arr[i]\n            elif arr[i-1]!= arr[i+1]:\n                return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n            if count == 1:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in count:\n        if count[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Traverse through the array\n    for i in range(n):\n        # Check if the element is already present in the second half of the array\n        if arr[i] == arr[n-i-1]:\n            return arr[i]\n    return \"Element not found\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize the count and element variables\n    count = 0\n    element = None\n\n    # Iterate over the array and count the number of occurrences of each element\n    for num in arr:\n        if num == element:\n            count += 1\n        else:\n            count = 1\n            element = num\n\n    # Return the element that appears only once\n    return element if count == 1 else None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    # initialize count and result variables\n    count = 0\n    result = None\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        # check if the current element is the first occurrence\n        if i == 0 or arr[i]!= arr[i-1]:\n            # increment the count of occurrences\n            count += 1\n            \n            # check if the current element is the only one\n            if count == 1:\n                # if it is, set the result variable to the current element\n                result = arr[i]\n    \n    # return the result\n    return result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0]*list1[j][1])\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0])) > max_product:\n                max_product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables for the maximum absolute product and the current product\n    max_prod = 0\n    current_prod = 1\n    \n    # Iterate through the list of tuples\n    for pair in list1:\n        # Calculate the product of the current pair\n        current_prod = pair[0] * pair[1]\n        \n        # Calculate the absolute value of the product\n        abs_prod = abs(current_prod)\n        \n        # Update the maximum absolute product if the current product is greater than the current maximum\n        if abs_prod > max_prod:\n            max_prod = abs_prod\n    \n    # Return the maximum absolute product\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Iterate through the list\n    for i in range(len(list1)):\n        # Iterate through the list from the next index\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute difference between the two numbers\n            difference = abs(list1[i] - list1[j])\n            \n            # Update the current product\n            current_product *= difference\n            \n            # Update the maximum product if the current product is greater than the maximum product\n            if current_product > max_product:\n                max_product = current_product\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0] * list1[j][1])\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][0]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][0])\n            if abs(list1[i][1] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][1] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function will find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n\n    # initialize a list to store amicable numbers\n    amicable = []\n\n    # loop through all numbers from 1 to the limit\n    for i in range(1, limit + 1):\n\n        # check if the number is amicable\n        if is_amicable(i):\n\n            # if it is, add it to the list of amicable numbers\n            amicable.append(i)\n\n    # calculate the sum of the amicable numbers\n    amicable_sum = sum(amicable)\n\n    return amicable_sum\n\n\ndef is_amicable(n):\n    \"\"\"\n    This function will check if a number is amicable to any of its factors.\n    \"\"\"\n\n    # initialize a list to store factors of the number\n    factors = []\n\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(n ** 0.5) + 1):\n\n        # check if the number is divisible by the factor\n        if n % i == 0:\n\n            # if it is, add the factor to the list of factors\n            factors.append(i)\n\n    # check if the number is divisible by any of the factors\n    if n in factors:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list to store the numbers to check for amicable numbers\n    amicable_numbers = []\n    # Loop from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable with any other number between 1 and limit\n        for j in range(1, limit+1):\n            if i!= j and i+j == limit:\n                # If the sum is a prime number, add the number to the list of amicable numbers\n                if is_prime(i+j):\n                    amicable_numbers.append(i+j)\n    # Return the sum of all the amicable numbers\n    return sum(amicable_numbers)\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    # If the number is less than or equal to 1, it is not prime\n    if num <= 1:\n        return False\n    # Loop from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    # If the loop completes without finding a factor, the number is prime\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize variables\n    sum_amicable = 0\n    count = 0\n\n    # iterate through numbers from 1 to the specified limit\n    for num in range(1, limit + 1):\n        # check if the number is amicable by iterating through all the numbers between 1 and the square root of the number\n        for i in range(1, int(num ** 0.5) + 1):\n            if (num % i == 0) and (num // i == i):\n                # if the number is amicable, add it to the sum and increment the count\n                sum_amicable += num\n                count += 1\n                break\n\n    # return the sum of the amicable numbers\n    return sum_amicable\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    if n < 12:\n        return False\n\n    def sum_divisors(num):\n        \"\"\"\n        Sum of the divisors of a number.\n        \"\"\"\n        divisors = []\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n\n    return sum_divisors(n) == n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum_amicable += i\n\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    This function takes a positive integer limit as input and returns the sum of all amicable numbers between 1 and limit.\n    '''\n    # Create a list to store the sum of amicable numbers\n    sum_amicable = []\n    # Loop through the numbers between 1 and limit\n    for i in range(1, limit + 1):\n        # Check if the number is amicable with any other number between 1 and limit\n        for j in range(1, limit + 1):\n            # Check if the number is amicable with the other number\n            if i!= j and i + j == limit and i!= sum_amicable:\n                # If the number is amicable, add it to the sum_amicable list\n                sum_amicable.append(i + j)\n                # Break out of the inner loop since we only need to check the current number\n                break\n    # Return the sum of the amicable numbers\n    return sum(sum_amicable)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i!= 1:\n            if i in range(2, limit):\n                if i in range(2, limit):\n                    for j in range(2, limit):\n                        if i + j == limit:\n                            amicable_sum += i + j\n                            print(f'{i} + {j} = {i + j}')\n                            break\n                        if i + j > limit:\n                            break\n                else:\n                    amicable_sum += i\n                    print(f'{i} is an amicable number.')\n            else:\n                continue\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i > 1 and is_prime(i) and i!= 4:\n            for j in range(1, limit + 1):\n                if j > 1 and is_prime(j) and i + j == 4 and i!= j:\n                    amicable_numbers.add(i + j)\n    return sum(amicable_numbers)\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        if num == sum_of_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\n\ndef sum_of_divisors(num):\n    divisors_sum = 1\n    for i in range(2, num):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\n\nif __name__ == '__main__':\n    limit = int(input(\"Enter a number to find the sum of amicable numbers: \"))\n    print(\"The sum of amicable numbers from 1 to\", limit, \"is\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        j = i\n        while j <= limit:\n            if i == j:\n                break\n            if i % j == 0:\n                break\n            j += 1\n        else:\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers up to a specified limit.\n    \"\"\"\n    amicable_pairs = []\n    for a in range(1, limit):\n        b = a\n        while b <= limit:\n            if is_prime(a) and is_prime(b) and a!= b:\n                if a + b == limit:\n                    amicable_pairs.append((a, b))\n                    break\n                elif a + b < limit:\n                    b += 1\n                else:\n                    break\n            else:\n                b += 1\n    return sum(p[0] + p[1] for p in amicable_pairs)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle of the complex number in radians.\n\n    Parameters:\n    a (complex): a complex number\n    b (complex): another complex number\n\n    Returns:\n    float: angle of complex number in radians.\n    \"\"\"\n\n    # Calculate the modulus of the complex numbers\n    modulus = cmath.sqrt(a.real**2 + a.imag**2)\n\n    # Calculate the angle between the two complex numbers\n    angle = cmath.phase(a + b)\n\n    # Convert the angle to radians\n    angle = angle.imag / (modulus / 2)\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = a + b*1j\n    \n    # find the angle of the complex number using cmath.phase() function\n    angle_radian = cmath.phase(complex_number)\n    \n    # convert the angle from radians to degree\n    angle_degree = (angle_radian * 180) / cmath.pi\n    \n    return angle_degree"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize two variables to keep track of the count of 0s and 1s in the string\n    count_0s = 0\n    count_1s = 0\n    \n    # Loop through the string and update the count of 0s and 1s\n    for char in string:\n        if char == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n    \n    # Find the maximum difference between the count of 0s and count of 1s\n    max_diff = abs(count_0s - count_1s)\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            max_diff = max(max_diff, count)\n            count = 0\n    max_diff = max(max_diff, count)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [0] * (2 * n)\n    for i in range(n):\n        dp[i] = 0\n    for i in range(n):\n        for j in range(i, n):\n            if string[i] == '0' and string[j] == '0':\n                dp[i] = max(dp[i], dp[j]) + 1\n    return max(dp)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count += 1\n        else:\n            count = 0\n        if count == 0:\n            max_diff = max(max_diff, count)\n        elif count > 0:\n            max_diff = max(max_diff, count - 1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    # Initialize two variables to count the number of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Loop through each character of the string\n    for char in string:\n        # If the character is a 0, increment the 0 count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the 1 count\n        elif char == '1':\n            one_count += 1\n        # If the character is neither a 0 nor a 1, the sub-string is invalid\n        else:\n            return None\n\n    # Calculate the maximum difference between the number of 0s and 1s\n    max_diff = max(zero_count, one_count)\n\n    # Return the maximum difference between the number of 0s and 1s\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            continue\n        count_0 = string.count('0')\n        count_1 = string.count('1')\n        diff = count_0 - count_1\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n\n        if count_0 > count_1:\n            max_diff = max(max_diff, count_0 - count_1)\n            count_0 = 0\n            count_1 = 0\n        else:\n            count_1 = 0\n            count_0 = 0\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        diff = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        zeros = 0\n        ones = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n            if zeros - ones > max_diff:\n                max_diff = zeros - ones\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    dp = [0] * n\n    max_diff = 0\n\n    # Calculate the difference for each substring\n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if string[i] == '0':\n            dp[i] += 1\n        else:\n            dp[i] -= 1\n\n        # Update the maximum difference\n        diff = abs(dp[i] - dp[i-1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find all the common divisors of the two numbers\n    divisors = set()\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            divisors.add(i)\n    # Calculate the sum of these common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    def common_divisor(a, b):\n        '''\n        A helper function to find the common divisor of two given numbers.\n        '''\n        for i in range(1, a):\n            if a % i == 0 and b % i == 0:\n                return i\n        return None\n\n    def sum_of_divisors(num):\n        '''\n        A helper function to find the sum of common divisors of a given number.\n        '''\n        divisors = []\n        divisor = 1\n        while divisor <= num:\n            if num % divisor == 0:\n                divisors.append(divisor)\n            divisor += 1\n        return divisors\n\n    sum_a = sum_of_divisors(a)\n    sum_b = sum_of_divisors(b)\n\n    if sum_a:\n        for divisor in sum_a:\n            if divisor in sum_b:\n                return a*b//divisor\n\n    return None\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    # Calculate the sum of the common divisors\n    sum_cd = 0\n    divisor = 1\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            sum_cd += i\n            divisor *= i\n\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    This function takes two integer arguments, a and b, and returns their sum of common divisors.\n    '''\n\n    # Using trial division method to find common divisors\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            print(i, end=' ')\n\n    # Using Euclidean algorithm to find common divisors\n    divisor = 1\n    while divisor <= a and divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            print(divisor, end=' ')\n        divisor += 1\n\n    # Returning the sum of common divisors\n    return sum(divisor, divisor) - sum(divisor-1, divisor-1)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    for i in range(1, b + 1):\n        if b % i == 0 and a % i == 0:\n            print(i)\n            break\n    else:\n        print(\"There are no common divisors.\")"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    This function takes two integers a and b as input and returns the sum of their common divisors.\n    '''\n    # Using a set to find the set of common divisors of a and b\n    common_divisors = set(set(a).intersection(set(b)))\n    # Using the sum() function to find the sum of the common divisors\n    result = sum(common_divisors)\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Function to find the common divisors of two numbers\n    def common_divisors(a, b):\n        divisors = []\n        for i in range(1, a + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    # Find the common divisors of the two given numbers\n    div1 = common_divisors(a, b)\n    div2 = common_divisors(b, a)\n    \n    # Find the sum of common divisors\n    div = div1 + div2\n    return sum(div)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return sum(b, a % b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_sum = 0\n    for i in range(1, a+1):\n        if a%i == 0 and b%i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = [i for i in range(1, a+1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        carry = x & y\n        product = product ^ carry\n        x = x << 1\n        y = y >> 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the given string into words\n    words = str.split()\n    \n    # Initialize an empty list to store the long words\n    long_words_list = []\n    \n    # Iterate through the words and check if each word is longer than n characters\n    for word in words:\n        if len(word) > n:\n            # If the word is longer than n characters, append it to the long_words_list\n            long_words_list.append(word)\n    \n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()  # Split the string into a list of words\n    long_words = []  # Create an empty list to store the long words\n    \n    # Loop through the words in the list\n    for word in words:\n        if len(word) > n:  # If the length of the word is greater than n\n            long_words.append(word)  # Add the word to the list of long words\n            \n    return long_words  # Return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str:\n        if len(word) > n:\n            words.append(word)\n    return words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # split the string into a list of words\n    words = str.split()\n    \n    # create an empty list to store the longer words\n    longer_words = []\n    \n    # iterate through each word in the list\n    for word in words:\n        # if the length of the word is greater than n characters, add it to the list\n        if len(word) > n:\n            longer_words.append(word)\n    \n    # return the list of longer words\n    return longer_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            # Check if the sum of the element on the current row and the element on the current column is equal to the sum of the element on the current diagonal\n            if sum(my_matrix[i]) == sum(my_matrix[j]) == sum(my_matrix[i][j]):\n                return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check for anti-magic squares\n    for i in range(len(my_matrix)):\n        row = my_matrix[i]\n        for j in range(len(row)):\n            if row[j] == sum(my_matrix[x][j] for x in range(len(my_matrix)) if x!= i) or \\\n               row[j] == sum(my_matrix[j][x] for x in range(len(my_matrix)) if x!= i):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix has 9 elements\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n\n    # check if the matrix elements are integers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n\n    # check if the matrix is a magic square\n    magic_sum = 15\n    for row in my_matrix:\n        row_sum = sum(row)\n        if row_sum!= magic_sum:\n            return False\n        magic_sum -= 15\n\n    for col in range(3):\n        col_sum = sum([row[col] for row in my_matrix])\n        if col_sum!= magic_sum:\n            return False\n        magic_sum -= 15\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the number of rows and columns are the same\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n    if num_rows!= num_cols:\n        return False\n\n    # Check if all the elements of the matrix are different\n    for row in my_matrix:\n        if len(set(row))!= num_rows:\n            return False\n\n    # Check if the matrix is a magic square\n    magic_sum = sum(sum(row) for row in my_matrix)\n    if magic_sum == 0:\n        return True\n    elif magic_sum == num_rows ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the sum of all rows is equal to the sum of all columns\n    for row in my_matrix:\n        if sum(row)!= sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))):\n            return False\n    \n    # Check if the sum of the diagonals is equal to the sum of the other elements\n    diag1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag2 = sum(my_matrix[i][-i-1] for i in range(len(my_matrix)))\n    if diag1!= diag2:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int):\n                return False\n\n    # Check if the sum of each row is the same as the sum of the entire matrix\n    row_sum = [sum(row) for row in my_matrix]\n    if row_sum!= [sum(row_sum)]*len(my_matrix):\n        return False\n\n    # Check if the sum of each column is the same as the sum of the entire matrix\n    col_sum = [[sum(row[i]) for i in range(len(row))] for row in my_matrix]\n    if col_sum!= [[sum(col_sum)]*len(my_matrix)]*len(my_matrix):\n        return False\n\n    # Check if the sum of the main diagonal is the same as the sum of the entire matrix\n    diag_sum = sum(row[i] for i in range(len(row)))\n    if diag_sum!= sum(my_matrix[i][i] for i in range(len(my_matrix))):\n        return False\n\n    # Check if the sum of the secondary diagonal is the same as the sum of the entire matrix\n    diag_sum = sum(row[-i-1] for i in range(len(row)))\n    if diag_sum!= sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))):\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # check if the matrix is a square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return \"Matrix is not a square.\"\n    \n    # check for all diagonal values\n    for i in range(n):\n        if my_matrix[i][i]!= my_matrix[n-i-1][n-i-1]:\n            return \"Matrix is not a magic square.\"\n            \n    # check for all anti-diagonal values\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return \"Matrix is not a magic square.\"\n    \n    # if all checks pass, the matrix is a magic square\n    return \"Matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    # Check if the matrix is square\n    if size!= len(my_matrix[0]):\n        return False\n    # Check for duplicates\n    for i in range(size):\n        for j in range(size):\n            if my_matrix[i][j] == my_matrix[j][i]:\n                return False\n    # Check for ascending rows\n    for i in range(size):\n        row = my_matrix[i]\n        if len(set(row))!= size:\n            return False\n    # Check for ascending columns\n    for j in range(size):\n        col = [row[j] for row in my_matrix]\n        if len(set(col))!= size:\n            return False\n    # Check for diagonals\n    for i in range(size):\n        if my_matrix[i][i]!= my_matrix[size-i-1][size-i-1]:\n            return False\n    for i in range(size):\n        if my_matrix[i][size-i-1]!= my_matrix[i][i]:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        if not all(isinstance(elem, int) for elem in row):\n            return False\n    \n    # Check if the matrix is a magic square\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    square_sum = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n    \n    return row_sum == col_sum == square_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n\n    :param my_matrix: the matrix to be tested\n    :type my_matrix: list\n    :return: True if the matrix is a magic square, False otherwise\n    :rtype: bool\n    \"\"\"\n\n    # Calculate the sum of all elements in the matrix\n    total = sum([sum(row) for row in my_matrix])\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Check if the total and diagonal sum are equal\n    if total == diagonal_sum:\n        # Check if all rows and columns are magic squares\n        for i in range(len(my_matrix)):\n            if is_magic_square(my_matrix[i]):\n                return True\n            if is_magic_square(list(map(lambda x: my_matrix[i][x], range(len(my_matrix))))):\n                return True\n        # Check if the matrix is a magic square by finding the sum of the permutations of each row and column\n        row_perms = sum(map(lambda x: sum(my_matrix[i][j] for j in x), range(len(my_matrix))))\n        col_perms = sum(map(lambda x: sum(my_matrix[j][i] for j in x), range(len(my_matrix))))\n        if row_perms == col_perms:\n            return True\n    return False\n\n\ndef is_magic_square(row):\n    \"\"\"\n    Check if a row is a magic square.\n\n    :param row: the row to be tested\n    :type row: list\n    :return: True if the row is a magic square, False otherwise\n    :rtype: bool\n    \"\"\"\n\n    # Calculate the sum of the row elements\n    row_sum = sum(row)\n\n    # Check if the row sum is equal to its index\n    return row_sum == row.index(row_sum)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_item = None\n    max_count = 0\n    for item, count in frequency.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        count[num] += 1\n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    max_count = max(count.values())\n\n    for num in nums:\n        if count[num] == max_count:\n            return num\n\n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    for num in nums:\n        freq_map[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for num, freq in freq_map.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    \n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    \n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = float('-inf')\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for item, freq in freq.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    max_num = -1\n    max_count = 0\n    for num, count in count.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            vowel_count += 1\n        else:\n            new_str += str1[i]\n    return new_str, vowel_count"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = []\n    for char in str1:\n        if char in vowels:\n            new_str.append(char)\n    return ''.join(reversed(new_str))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    reversed_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_set = set(vowels)\n    result = \"\"\n    for char in str1:\n        if char not in vowels_set:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    result = []\n    for char in str1:\n        if char in vowels:\n            if vowel_count % 2 == 0:\n                result.append(char)\n            vowel_count += 1\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] in vowels and (i == 0 or str1[i-1] not in vowels):\n            str1[i], str1[len(str1)-1-i] = str1[len(str1)-1-i], str1[i]\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    result = ''\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_count += 1\n            result = char + result\n    if vowel_count > 0:\n        return result[::-1]\n    else:\n        return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    str1 = str1.upper()\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_dict = {v:True for v in vowels}\n    \n    result = []\n    for char in str1:\n        if char in vowels_dict:\n            result.append(char)\n    \n    return result[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string = \"\"\n    for item in tup1:\n        string += str(item)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \" \"\n    return str1[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n\n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the number to the sum of negative numbers\n            neg_sum += num\n\n    # Return the sum of negative numbers\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n    # iterate through the list of numbers\n    for num in nums:\n        # if the number is negative, add it to the sum\n        if num < 0:\n            neg_sum += num\n    # return the sum of negative numbers\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Define the first two hexagonal numbers\n    hex_num = 1\n    prev_hex_num = 0\n\n    # Loop through the desired number of hexagonal numbers\n    for i in range(n):\n        # Calculate the next hexagonal number\n        next_hex_num = 2 * hex_num - prev_hex_num\n\n        # Update the values for the previous and current hexagonal numbers\n        prev_hex_num = hex_num\n        hex_num = next_hex_num\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    hexagonal_num = 0\n    \n    for i in range(n):\n        hexagonal_num += a + b\n        a += 2\n        b += 4\n        \n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n\n    for i in range(2, n+1):\n        a = a + 2*b\n        b = 2*a - b\n\n    return a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n    elif n == 1:\n        return 1\n    else:\n        return n*6 + hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (3 * n - 1) / 2\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 6*n*(n-1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case for n = 1\n    if n == 1: \n        return 1\n\n    # Find the value of n-1th hexagonal number\n    num_1 = (n - 1) * (2 * n - 1)\n\n    # Find the value of n-2th hexagonal number\n    num_2 = (n - 2) * (2 * n - 1)\n\n    # Return the sum of the two values\n    return num_1 + num_2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def is_prime(num):\n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if n is a valid input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Initialize hexagon num and count\n    hex_num = 1\n    count = 1\n    \n    # Iterate until we have found the nth hexagon number\n    while count < n:\n        # If the current hexagon is prime, add it to the list\n        if is_prime(hex_num):\n            hexagonal_nums.append(hex_num)\n        # Increment the count and move on to the next hexagon number\n        count += 1\n        hex_num += 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * ((2 * n) ** 0.5)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i') # create a new array to store the count of each element\n    \n    for num in nums:\n        count.append(num) # add the current element to the array\n    \n    num_zeros = 0 # initialize the count of zeroes\n    num_ones = 0 # initialize the count of ones\n    \n    for i in range(len(count)):\n        if count[i] == 0: # if the current element is zero\n            num_zeros += 1 # increment the count of zeroes\n        else: # if the current element is one\n            num_ones += 1 # increment the count of ones\n    \n    if num_zeros == 0: # if there were no zeroes in the array\n        return 0.0 # return 0 as the ratio of zeroes to non-zeroes\n    \n    return num_ones / num_zeros # return the ratio of ones to zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert array to list for easy manipulation\n    arr = list(nums)\n    \n    # count the number of zeros\n    zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n    \n    # count the number of non-zeros\n    non_zero_count = len(arr) - zero_count\n    \n    # calculate the ratio and return it as a float\n    ratio = non_zero_count / zero_count\n    return round(ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array to store the count of each number in the input array\n    count_array = array('i', [0] * (max(nums) + 1))\n    \n    # loop through the input array and increment the count of each number in the count array\n    for num in nums:\n        count_array[num] += 1\n    \n    # loop through the count array and calculate the ratio of zeroes to non-zeroes\n    non_zeroes = sum(count_array[1:])\n    zeroes = sum(count_array) - non_zeroes\n    ratio = zeroes / non_zeroes\n    \n    # return the ratio of zeroes to non-zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array of boolean values representing whether each number is zero or not\n    boolean_array = array('b', [num!= 0 for num in nums])\n\n    # Calculate the number of zeroes and non-zeroes\n    zero_count = sum(boolean_array)\n    non_zero_count = len(boolean_array)\n\n    # Return the ratio of zeroes to non-zeroes\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    ones = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            ones[ones.index(num)] += 1\n\n    zeros_count = sum(zeros)\n    ones_count = sum(ones)\n\n    return zeros_count / ones_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Count the number of zeroes and non-zeroes in the array\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zeroes / non_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    ones = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            ones.append(1)\n\n    if len(zeros) == 0:\n        return 0.0\n    else:\n        return float(zeros[0]) / len(zeros)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeros = 0\n    for num in nums:\n        if num!= 0:\n            non_zeros += 1\n    zeroes = len(nums) - non_zeros\n    ratio = zeroes / non_zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    \n    total_count = sum(zero_count)\n    non_zero_count = len(nums) - sum(zero_count)\n    \n    ratio = non_zero_count / total_count\n    \n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def is_power_of_two(num):\n        \"\"\"\n        Check if a given number is a power of 2 or not.\n        \"\"\"\n        return (num & (num - 1)) == 0\n    \n    def count_bits(num):\n        \"\"\"\n        Count the number of bits in a given number.\n        \"\"\"\n        count = 0\n        while num > 0:\n            count += 1\n            num &= (num - 1)\n        return count\n    \n    # Check if n is a power of 2\n    if not is_power_of_two(n):\n        return \"Not a power of 2\"\n    \n    # Compute the sum of powers of 2\n    count = 0\n    power = 1\n    while power * power <= n:\n        if n >= power * power:\n            n -= power * power\n            count += 1\n        else:\n            power <<= 1\n    \n    # Check if the number can be represented as sum of non-zero powers of 2\n    if count < 2:\n        return \"Not a sum of powers of 2\"\n    else:\n        return count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    for i in range(1, n+1):\n        if n-i == 0:\n            return True\n            \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    # Function to check if a number is power of 2\n    def is_power_of_2(num):\n        return num & (num-1) == 0\n\n    # Function to calculate the sum of non-zero powers of 2\n    def sum_of_powers_of_2(num):\n        count = 0\n        while num > 0:\n            if num & 1 == 1:\n                count += 1\n            num >>= 1\n        return count\n\n    # Check if the given number can be represented as sum of non-zero powers of 2\n    if is_power_of_2(n):\n        return True\n    elif sum_of_powers_of_2(n) >= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True\n    elif n % 2 == 0: \n        if n//2 == 1: \n            return True\n        else: \n            return False\n    else: \n        return is_Sum_Of_Powers_Of_Two(n//2)\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 1:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # Initialize the sum of powers of 2 to 0\n    sum_of_powers_of_2 = 0\n    \n    # Keep track of the current power of 2\n    current_power_of_2 = 1\n    \n    # Iterate through the number until we reach the square root of the number\n    while current_power_of_2 <= n:\n        # Check if the current power of 2 is a factor of n\n        if n % current_power_of_2 == 0:\n            # If it is, then add it to the sum of powers of 2\n            sum_of_powers_of_2 += current_power_of_2\n        # Update the current power of 2 and n\n        current_power_of_2 *= 2\n        n //= 2\n    \n    # Check if the sum of powers of 2 is equal to the original number\n    if sum_of_powers_of_2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def helper(n, index, sum, powers):\n        if n == 0:\n            return True\n\n        if index == len(powers):\n            return False\n\n        if powers[index] > n:\n            return False\n\n        if index == 0:\n            return helper(n - powers[index], index, sum, powers)\n\n        return helper(n - powers[index], index, sum, powers)\n\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    else:\n        powers = [2]\n        while powers[-1] <= n:\n            powers.append(powers[-1] * 2)\n\n        return helper(n, len(powers) - 1, 0, powers)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 1:\n        return True\n\n    # Divide n by 2 and check if the result is a power of 2\n    while n % 2 == 0:\n        if n % 4 == 0:\n            return False\n        else:\n            n //= 2\n\n    # Check if the result is a power of 2\n    while n > 1:\n        if n % 2 == 0:\n            return False\n        else:\n            n //= 2\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a counter for the number of non-zero powers of 2\n    count = 0\n    \n    # Iterate through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is a power of 2, increment the counter\n        if i == 2**count:\n            count += 1\n    \n    # If the number of non-zero powers of 2 is equal to the log2(n), then it can be represented as sum of powers of 2\n    if count == int(math.log2(n)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is a power of 2 or not\n    if n & (n-1) == 0:\n        return True\n\n    # Find the power of 2\n    power = 0\n    while n > 1:\n        power += 1\n        n >>= 1\n\n    # Check if the number is a sum of powers of 2\n    for i in range(1, 2**(power+1)):\n        if i + (1 << power) == n:\n            return True\n\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # Using the formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r # pi = 3.14159, circumference = 2 * pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846264338327950288\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten_list(lst):\n        flattened = []\n        for item in lst:\n            if isinstance(item, list):\n                flattened.extend(flatten_list(item))\n            else:\n                flattened.append(item)\n        return flattened\n    return flatten_list(test_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Use list comprehension to flatten the list of lists\n    flattened_list = [num for sublist in test_list for num in sublist]\n    # Return a set of unique numbers from the flattened list\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if type(item) == int or type(item) == float:\n                flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Flatten the list of lists into a single set of numbers\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for sub_list in test_list:\n        flattened_list += sub_list\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) is list:\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the largest element with the first element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the unsorted part of the list\n        for j in range(i):\n            nums[j], nums[n-1-j] = nums[n-1-j], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # find the largest element and its index\n    max_element = max(nums)\n    max_index = nums.index(max_element)\n\n    # use the bubble sort algorithm to sort the remaining elements\n    for i in range(max_index, 0, -1):\n        for j in range(1, i + 1):\n            if nums[j - 1] > nums[j]:\n                nums[j - 1], nums[j] = nums[j], nums[j - 1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # function to swap elements in the list\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    # function to reverse the elements in the list\n    def reverse(lst, start, end):\n        while start < end:\n            swap(lst, start, end)\n            start += 1\n            end -= 1\n\n    # function to arrange the elements in a pancake sort fashion\n    def sort_pancake(lst):\n        n = len(lst)\n        # reverse the first element and arrange the rest in pancake sort fashion\n        reverse(lst, 0, n - 1)\n        # reverse the sorted pancake and arrange the rest in pancake sort fashion\n        reverse(lst, 0, n - 1)\n        # reverse the final sorted pancake to get the sorted list\n        reverse(lst, 0, n - 1)\n\n    # call the sort_pancake function to sort the list\n    sort_pancake(nums)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # start from the smallest number and swap it with the last element of the list\n    for i in range(n):\n        # initialize the index of the last element\n        j = n-1\n        # while the index is greater than the starting index, swap the elements\n        while j > i:\n            # compare the elements at the starting index and the current index\n            if nums[i] > nums[j]:\n                # swap the elements\n                nums[i], nums[j] = nums[j], nums[i]\n                # move the index of the last element up by 1\n                j -= 1\n            else:\n                # move the index of the last element down by 1\n                j -= 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    def pancake_sort_inner(nums, start, end):\n        if start >= end:\n            return\n        \n        # find the largest element in the sub-array from start to end\n        max_val = nums[start]\n        for i in range(start+1, end+1):\n            if nums[i] > max_val:\n                max_val = nums[i]\n        \n        # swap the largest element with the first element of the sub-array\n        nums[start], nums[end] = nums[end], nums[start]\n        \n        # recursively sort the sub-array from start+1 to end-1\n        pancake_sort_inner(nums, start+1, end-1)\n    \n    # sort the array using the pancake sort algorithm\n    pancake_sort_inner(nums, 0, len(nums)-1)\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # find the length of the list\n    n = len(nums)\n\n    # start from the largest element and swap with the smallest element\n    for i in range(n-1, 0, -1):\n        # find the index of the smallest element\n        min_index = i\n        for j in range(i-1, -1, -1):\n            if nums[j] < nums[min_index]:\n                min_index = j\n\n        # swap the elements at the indices\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Traverse the list using a pancake sort algorithm\n    for i in range(n):\n        # Find the maximum element in the remaining unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def helper(start, end):\n        while start < end:\n            # Move the start element to the end of the array\n            nums[start], nums[end] = nums[end], nums[start]\n\n            # Move the start pointer to the next element\n            start += 1\n\n            # Move the end pointer to the previous element\n            end -= 1\n\n            # Count the number of swaps made so far\n            swaps += 1\n\n        return swaps\n\n    # Initialize variables\n    swaps = 0\n\n    # Sort the array using the bubble sort algorithm\n    while swaps!= len(nums):\n        swaps = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] > nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    swaps += 1\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # swap the maximum element with the last element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # reverse the pancake with length n-i-1\n        pancake_length = n-i-1\n        while pancake_length > 0:\n            nums[i], nums[i+pancake_length] = nums[i+pancake_length], nums[i]\n            pancake_length -= 1\n            \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def sort_helper(nums, n):\n        if n == 1:\n            return nums\n\n        sorted_nums = sort_helper(nums, n-1)\n\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n\n        return sorted_nums\n\n    sorted_nums = sort_helper(nums, len(nums))\n\n    return sorted_nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i,list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array of numbers as input and returns the maximum difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # initialize variables to store the maximum absolute difference and the indices of the maximum and minimum elements\n    max_diff = 0\n    max_index = 0\n    min_index = 0\n\n    # iterate through the array and calculate the absolute difference between each element and the minimum element\n    for i in range(len(arr)):\n        if i == 0:\n            max_diff = abs(arr[i] - arr[i])\n            max_index = i\n        else:\n            diff = abs(arr[i] - arr[min_index])\n            if diff > max_diff:\n                max_diff = diff\n                max_index = i\n\n    # return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to keep track of the maximum absolute difference\n    max_diff = 0\n    prev_diff = abs(arr[1] - arr[0])\n\n    # Iterate through the array and calculate the absolute difference between each element and the previous element\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n\n        # Update the maximum absolute difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    # initialize max_diff to the first element of the array\n    max_diff = abs(arr[0] - arr[1])\n\n    # loop through the rest of the array\n    for i in range(2, len(arr)):\n        # calculate the absolute difference between the current element and the next element\n        current_diff = abs(arr[i] - arr[i+1])\n\n        # update max_diff if the current difference is greater\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    # return the maximum difference found\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Initialize x and y as 0 and 1\n    x = 0\n    y = 1\n    \n    # Find the number of iterations required to reach the square root of n\n    iterations = 0\n    while x**2 + y**2 <= n:\n        iterations += 1\n        x += 1\n    \n    # If the square root of n cannot be reached, return None\n    if x**2 + y**2 > n:\n        return None\n    \n    # Otherwise, return the solution as a tuple (x, y)\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if a is zero\n    if a == 0:\n        if b == 0:\n            return None\n        \n        # If b is positive, the equation has no solution\n        elif b > 0:\n            return None\n        \n        # If b is negative, the equation has no solution\n        elif b < 0:\n            return None\n    \n    # Calculate the solution\n    x = (-n + b**2) / (2*a)\n    y = (-n - b**2) / (2*a)\n    \n    # Check if there is a solution\n    if x.is_integer() and y.is_integer():\n        return (int(x), int(y))\n    \n    # If there is no solution, return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # if a = 0, there is no solution\n    if a == 0:\n        return None\n    # if b = 0, there is only one solution: x = -n/a\n    if b == 0:\n        return (-n/a,)\n    # if b = -a, there are two solutions: x = -n/(2*a) and x = n/(2*a)\n    if b == -a:\n        return (-n/(2*a), n/(2*a))\n    # if a = 1, b = -1, and n is a quadratic equation of the form ax^2 + bx + c, then there are three solutions:\n    # x1 = (-b + sqrt(b^2 - 4ac)) / (2a)\n    # x2 = (-b - sqrt(b^2 - 4ac)) / (2a)\n    # x3 = (-b) / (2a)\n    if a == 1 and b == -1:\n        c = n\n        d = b**2 - 4*a*c\n        sqrt_d = d**0.5\n        if sqrt_d >= 0:\n            x1 = (-b + sqrt_d) / (2*a)\n            x2 = (-b - sqrt_d) / (2*a)\n            x3 = -b / (2*a)\n            return (x1, x2, x3)\n    # if a = 1, b = -1, and n is a quadratic equation of the form ax^2 + bx + c, then there are three solutions:\n    # x1 = (-b + sqrt(b^2 - 4ac)) / (2a)\n    # x2 = (-b - sqrt(b^2 - 4ac)) / (2a)\n    # x3 = (-b) / (2a)\n    if a == -1 and b == 1:\n        c = n\n        d = b**2 - 4*a*c\n        sqrt_d = d**0.5\n        if sqrt_d >= 0:\n            x1 = (-b + sqrt_d) / (2*a)\n            x2 = (-b - sqrt_d) / (2*a)\n            x3 = -b / (2*a)\n            return (x1, x2, x3)\n    # if a = 1, b = -1, and n is a quadratic equation of the form ax^2 + bx + c, then there are three solutions:\n    # x1 = (-b + sqrt(b^2 - 4ac)) / (2a)\n    # x2 = (-b - sqrt(b^2 - 4ac)) / (2a)\n    # x3 = (-b) / (2a)\n    if a == -1 and b == -1:\n        c = n\n        d = b**2 - 4*a*c\n        sqrt_d = d**0.5\n        if sqrt_d >= 0:\n            x1 = (-b + sqrt_d) / (2*a)\n            x2 = (-b - sqrt_d) / (2*a)\n            x3 = -b / (2*a)\n            return (x1, x2, x3)\n    # if a = 1, b = -1, and n is a cubic equation of the form ax^3 + bx^2 + cx + d, then there are four solutions:\n    # x1 = (-b - sqrt(b^3 - 3ac)) / (3a)\n    # x2 = (-b + sqrt(b^3 - 3ac)) / (3a)\n    # x3 = (-b^2 + sqrt(b^3 - 9ac)) / 3a\n    # x4 = (-b^2 - sqrt(b^3 - 9ac)) / 3a\n    if a == 1 and b == -1:\n        d = n\n        e = b**3 - 3*a*c\n        sqrt_e = e**0.5\n        if sqrt_e >= 0:\n            x1 = (-b - sqrt_e) / (3*a)\n            x2 = (-b + sqrt_e) / (3*a)\n            x3 = (-b**2 + sqrt_e) / 3*a\n            x4 = (-b**2 - sqrt_e) / "
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:  # If ax = 0, then y must be non-negative\n        if b > 0:\n            return None  # No solution exists if both a and b are non-positive\n        elif b == 0:\n            return None  # No solution exists if both a and b are zero\n        else:\n            x = -n / b  # x = -n/b\n            y = x\n            return (x, y)\n    else:  # If ax \u2260 0, then y must be non-zero\n        if n == 0:\n            return None  # No solution exists if ax = 0 and n is zero\n        else:\n            x = n / a  # x = n/a\n            y = b / a  # y = b/a\n            if x < 0:  # If x is negative, then y must be negative as well\n                y = -y\n            return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Step 1: Calculate the value of x\n    x = -b // a\n    \n    # Step 2: Calculate the value of y\n    y = n // a\n    \n    # Step 3: Check if the equation is true\n    if a * x + b * y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # use the quadratic formula to find the roots of ax^2 + bx + c = 0\n    d = b**2 - 4*a*n\n    \n    if d < 0: # no real roots, no solution\n        return None\n    elif d == 0: # one real root, one solution\n        x = -b / (2*a)\n        y = x\n        return (x, y)\n    else: # two real roots, two solutions\n        x1 = (-b + (b**2 - 4*a*n)**0.5) / (2*a)\n        x2 = (-b - (b**2 - 4*a*n)**0.5) / (2*a)\n        y1 = x1\n        y2 = x2\n        return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Find two real numbers x and y such that ax + by = n\n    d = b**2 - 4 * a * n\n    if d < 0:\n        return None  # No solution exists\n\n    root1 = (-b + d**0.5) / (2 * a)\n    root2 = (-b - d**0.5) / (2 * a)\n\n    # Convert x and y to integers\n    x1 = int(root1)\n    x2 = int(root2)\n\n    # Return the result as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Find the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # If discriminant is positive\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)\n    \n    # If discriminant is zero\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        return (x1, x1)\n    \n    # If discriminant is negative\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    # If a and b are both zero, there is only one solution\n    if a == 0 and b == 0:\n        return (0, n // b)\n\n    # If a is zero and b is positive, the only solution is b\n    if a == 0 and b > 0:\n        return (b, 1)\n\n    # If a is zero and b is negative, the only solution is -b\n    if a == 0 and b < 0:\n        return (-b, -1)\n\n    # If a is positive and b is zero, the only solution is a\n    if a > 0 and b == 0:\n        return (a, 1)\n\n    # If a is negative and b is zero, the only solution is -a\n    if a < 0 and b == 0:\n        return (-a, -1)\n\n    # If a is not zero and b is positive, the only solution is x/a + y\n    if a > 0 and b > 0:\n        d = gcd(a, b)\n        return ((n // b) // d, (n % b) // d)\n\n    # If a is not zero and b is negative, the only solution is -x/a + y\n    if a < 0 and b < 0:\n        d = gcd(a, b)\n        return (-((n // -b) // d), -((n % -b) // d))\n\n    # If a and b have the same sign, the only solution is x/a - y/b\n    if a * b > 0:\n        d = gcd(abs(a), abs(b))\n        return ((n // b) // d, (-(n % b)) // d)\n\n    # If a and b have opposite signs, the only solution is y/b - x/a\n    if a * b < 0:\n        d = gcd(abs(a), abs(b))\n        return (-((n // -b) // d), (n % -b) // d)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Check if a, b and n are integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # Check if n is not equal to 0\n    if n == 0:\n        return None\n\n    # Calculate the discriminant\n    disc = b**2 - 4 * a * n\n\n    # Check if the discriminant is positive\n    if disc < 0:\n        return None\n\n    # Calculate the two solutions using the quadratic formula\n    x1 = (-b + disc**0.5) / (2 * a)\n    x2 = (-b - disc**0.5) / (2 * a)\n\n    # Check if x1 and x2 are integers\n    if not (isinstance(x1, int) and isinstance(x2, int)):\n        return None\n\n    # Check if x1 and x2 are real numbers\n    if not (isinstance(x1, (int, float)) and isinstance(x2, (int, float))):\n        return None\n\n    # Check if x1 and x2 satisfy the given equation\n    if a * x1**2 + b * x1 + n!= 0:\n        return None\n    if a * x2**2 + b * x2 + n!= 0:\n        return None\n\n    # Return the two solutions as a tuple\n    return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n\n    Args:\n    list1 (list): A list of elements to be processed.\n    list2 (list): A list of elements to be removed from `list1`.\n\n    Returns:\n    list: A new list with all elements from `list1` that are not present in `list2`.\n    \"\"\"\n    # Use set intersection to find the common elements between list1 and list2\n    common_elements = set(list1) & set(list2)\n    # Remove the common elements from list1 and return the result\n    return list(set(list1) - common_elements)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Use a loop to iterate over each element in the first list\n    for i in range(len(list1)):\n        # Check if the current element is present in the second list\n        if list1[i] in list2:\n            # If it is, remove it from the list\n            list1.pop(i)\n            i -= 1 # This is done to account for the fact that we have removed an element\n            \n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Iterate over the list2 and remove all elements present in list1\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from the first list that are present in the second list.\n\n    Parameters:\n    list1 (list): The first list to remove elements from.\n    list2 (list): The second list to search for elements to remove from the first list.\n\n    Returns:\n    list: The modified list1 with elements removed.\n    \"\"\"\n\n    # Loop through each element in the first list\n    for i in range(len(list1)):\n        # Check if the element is not in the second list\n        if list1[i] not in list2:\n            # If it's not, remove it from the first list\n            list1.pop(i)\n            # Decrement the index to account for the removal of an element\n            i -= 1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = (n - 1) // 2\n    sum = 0\n    for i in range(n):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    if n % 2 == 0:\n        x = n // 2\n    else:\n        x = (n - 1) // 2\n\n    sum = 0\n    for i in range(x+1):\n        sum += n - 2*i\n\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    # initialize the sum\n    sum_value = 0\n\n    # loop through the numbers from 0 to n // 2\n    for i in range(n // 2):\n        # calculate the sum for the current number\n        current_sum = (n - 2 * i) * (i + 1) // 2\n        # add the current sum to the sum value\n        sum_value += current_sum\n\n    # return the sum value\n    return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += n - 2 * i\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    # Initialize the sum to 0\n    total = 0\n\n    # Loop through the numbers from 1 to n // 2 (inclusive)\n    for i in range(1, n // 2 + 1):\n        # Calculate the sum of the current number and (n - 2*i)\n        current_sum = i + (n - 2 * i)\n        # Add the current sum to the total sum\n        total += current_sum\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n - 2 * sum_series(n-1)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of the series is:\", sum_series(n))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return 0\n    else:\n        return n * (n - 1) // 2 + sum_series(n - 1)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of the polygon using the formula: A = (s * l) / (4 * tan(pi/n))\n    n = int(l)\n    A = (s * l) / (4 * tan(pi/n))\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area using the formula A = s(1-1/n)\n    A = 0.5 * s * (1 - 1/l)\n\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / 2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = (s*l)/2\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l * tan(pi/l)) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/2)*tan((2*i*pi)/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i*2*pi/l\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += (s / 2) * tan(angle)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # Helper function to find the sum of the divisors of a number\n    def sum_divisors(num):\n        return sum(range(1, num + 1))\n\n    # Helper function to find the square root of a number\n    def sqrt(num):\n        return int(math.sqrt(num))\n\n    # Helper function to find the square of a number\n    def square(num):\n        return num * num\n\n    # Helper function to find the square of a divisor\n    def square_divisor(num):\n        return square(num)\n\n    # Helper function to find the sum of squares of divisors\n    def sum_squares(num):\n        div_sum = 0\n        for i in range(1, num + 1):\n            div_sum += square_divisor(i)\n        return div_sum\n\n    # Helper function to check if the sum of squares of divisors is same as the sum of squares of the two numbers\n    def check_sums(a, b):\n        return sum_squares(a) == sum_squares(b)\n\n    # Check if the sum of the divisors of n and n^2 are the same\n    return check_sums(n, square(n))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Determine the sum of divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    # Determine the sum of divisors of n-1\n    div_sum_minus_one = sum([i for i in range(1, int(math.sqrt(n-1))+1) if n-1 % i == 0])\n    # Check if the sum of divisors of n and n-1 are the same\n    if div_sum == div_sum_minus_one:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    if len(div_list) == 2 and sum(div_list) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Function to calculate the sum of divisors of a given number\n    def sum_of_divisors(num):\n        return sum(set(map(int, str(num))))\n\n    # Function to check if the sum of divisors of two numbers are same\n    def same_sum(num1, num2):\n        return sum_of_divisors(num1) == sum_of_divisors(num2)\n\n    # Check if the sum of divisors of two integers are same\n    print(same_sum(n, n))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Get the divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if n // i!= i:\n                divs.append(n // i)\n\n    # Calculate the sum of the divisors\n    div_sum = 0\n    for d in divs:\n        div_sum += d\n\n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        print(f\"{n} is a perfect number.\")\n    else:\n        print(f\"{n} is not a perfect number.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n    if n == sum([i for i in range(1, n+1) if n % i == 0]):\n        print(f\"{n} and its divisors have the same sum.\")\n    else:\n        print(f\"{n} and its divisors do not have the same sum.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # Calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of divisors of n\n    div_sum = sum([x for x in range(1, int(math.sqrt(n)) + 1) if n % x == 0])\n\n    # Calculate the sum of divisors of n-1\n    div_sum_minus_1 = sum([x for x in range(1, n + 1) if n % x == 0])\n\n    # Check if the sum of divisors of n and n-1 are same or not\n    if div_sum == div_sum_minus_1:\n        print(\"The sum of divisors of\", n, \"and\", n-1, \"are same.\")\n    else:\n        print(\"The sum of divisors of\", n, \"and\", n-1, \"are not same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    This function takes an integer as input and determines whether the sum of the divisors of the two integers is equal to the original integer.\n    \"\"\"\n    # Find the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(n**0.5)+1) if n % i == 0])\n\n    # Check if the sum of the divisors is equal to the original number\n    if div_sum == n:\n        print(\"The sum of the divisors is equal to the original number.\")\n    else:\n        print(\"The sum of the divisors is not equal to the original number.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find all the divisors of n\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if i!= n//i:\n                div_list.append(n//i)\n    div_list.append(n)\n    \n    # Calculate the sum of the divisors\n    sum_div = sum(div_list)\n    \n    # Check if the sum of the divisors is the same as n\n    if sum_div == n:\n        print(\"The sum of the divisors of\", n, \"is the same as\", n)\n    else:\n        print(\"The sum of the divisors of\", n, \"is not the same as\", n)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in str1:\n        if char.lower() in alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.upper().count(chr(97+i)) == str1.count(chr(97+i)):\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the frequency of each character in the English alphabet\n    frequency = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # Loop through each character in the string and increment its frequency in the dictionary\n    for char in str1:\n        frequency[char] += 1\n        \n    # Loop through the dictionary and count the number of characters that occur at the same position in the English alphabet\n    count = 0\n    for i in range(26):\n        if frequency[chr(i+97)] == frequency['z']:\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # initialize the dictionary to store the count of characters at the same position in the string as in the English alphabet\n    char_count = {}\n\n    # iterate through all the characters in the English alphabet\n    for i in range(97, 123):\n        # convert the current character to lowercase\n        char = chr(i).lower()\n\n        # check if the current character is present in the string\n        if char in str1:\n            # if it is present, check if it is at the same position in the string as the current character\n            if char in str1 and char.lower() == char:\n                # if it is at the same position, increment the count in the dictionary\n                if char in char_count:\n                    char_count[char] += 1\n                else:\n                    char_count[char] = 1\n\n    # return the dictionary containing the count of characters at the same position in the string as in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of each character at each position\n    count_dict = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # Check if the character is a letter (ignoring non-letter characters)\n        if char.isalpha():\n            # Convert the character to its position in the English alphabet (case insensitive)\n            pos = ord(char) - ord('a')\n            # Check if the position is already in the dictionary\n            if pos in count_dict:\n                # Increment the count for the position in the dictionary\n                count_dict[pos] += 1\n            else:\n                # Add the position to the dictionary with a count of 1\n                count_dict[pos] = 1\n\n    # Iterate through each character in the English alphabet (ignoring non-letter characters)\n    for i in range(26):\n        # Check if the position is already in the dictionary\n        if i in count_dict:\n            # Increment the count for the position in the dictionary\n            count_dict[i] += 1\n        else:\n            # Add the position to the dictionary with a count of 1\n            count_dict[i] = 1\n\n    # Print the count of each character at each position in the English alphabet\n    print(\"Count of each character at each position in the English alphabet (case insensitive):\")\n    for key in count_dict:\n        print(chr(ord('a') + key) + \": \" + str(count_dict[key]))"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Initialize an empty dictionary to store the count of each character\n    char_count = {}\n\n    # Convert the input string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is an alphabetic character, check if it already exists in the dictionary. If it does, increment its count by 1. If not, add it to the dictionary with a count of 1.\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Return the dictionary with the count of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_dict = {}\n    for i in range(26):\n        count_dict[chr(i+ord('a'))] = 0\n\n    for char in str1:\n        if char.lower() in count_dict:\n            count_dict[char.lower()] += 1\n\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # create a dictionary to store the count of characters\n    char_count = {}\n    # iterate through the string\n    for i in range(26):\n        # get the character at the current index\n        char = chr(ord('a') + i)\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # increment the count of the character in the dictionary\n            char_count[char] += 1\n        else:\n            # add the character to the dictionary with a count of 1\n            char_count[char] = 1\n    # initialize a counter variable\n    count = 0\n    # iterate through the characters in the string\n    for char in str1:\n        # check if the character is in the dictionary\n        if char in char_count:\n            # increment the counter variable\n            count += char_count[char]\n    # return the count of characters that occur at the same position in the string as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # Loop through each character in the string\n    for i in range(26):\n        # Get the character at the current position in the alphabet\n        char = chr(65 + i)\n        # Check if the character is in the string\n        if char in str1:\n            # If it is, increment the count of characters at that position in the dictionary\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Return the count of characters at each position in the alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # create a dictionary to store the count of each character\n    count_dict = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is in the dictionary\n        if char in count_dict:\n            # increment the count of the character in the dictionary\n            count_dict[char] += 1\n        else:\n            # add the character to the dictionary with a count of 1\n            count_dict[char] = 1\n\n    # loop through each character in the English alphabet (case insensitive)\n    for i in range(ord('a'), ord('z') + 1):\n        # check if the character is already in the dictionary\n        if chr(i) in count_dict:\n            # increment the count of the character in the dictionary\n            count_dict[chr(i)] += 1\n        else:\n            # add the character to the dictionary with a count of 1\n            count_dict[chr(i)] = 1\n\n    # create a list to store the counts of the characters that occur at the same position in the string as in the English alphabet\n    same_position_counts = []\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in count_dict:\n            # check if the character is in the English alphabet\n            if chr(i) in count_dict:\n                # check if the count of the character at the same position in the string is already in the list\n                if count_dict[char] in same_position_counts:\n                    # increment the count of the character at the same position in the string in the list\n                    same_position_counts[same_position_counts.index(count_dict[char]) + 1] += 1\n                else:\n                    # add the count of the character at the same position in the string to the list\n                    same_position_counts.append(count_dict[char])\n\n    # return the list of counts of the characters that occur at the same position in the string as in the English alphabet\n    return same_position_counts"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_pair_count = 0\n\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            xor_result = A[i] ^ A[j]\n\n            if xor_result == 0:\n                even_pair_count += 1\n\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_xor_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_xor_count += 1\n    return even_xor_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary format\n    binary_str = bin(n)[2:]\n    # Initialize the power of 2 to start searching from\n    power = 1\n    # Loop until the binary string is empty\n    while binary_str:\n        # Check if the power of 2 is greater than or equal to n\n        if int(binary_str[-1]) >= n:\n            # Return the power of 2\n            return power\n        # Move to the next power of 2\n        power <<= 1\n        # Remove the last bit from the binary string\n        binary_str = binary_str[:-1]\n    # If the binary string is empty, then n is already a power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result variable\n    result = 1\n    \n    # Loop until the result is greater than n\n    while result < n: \n        # Increase the result by 1\n        result = result * 2\n        \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    while n & (n-1)!= 0:\n        n = n | (n & -n)\n    return n << 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # Convert n to binary string\n    binary_str = bin(n)[2:]\n\n    # Check if binary_str is already a power of 2\n    if binary_str == '0':\n        return 1\n\n    # Find the number of zeros at the beginning\n    zeros = len(binary_str) - binary_str.lstrip('0').count('0')\n\n    # Create a binary string with zeros at the beginning\n    padded_binary_str = '0' * zeros + binary_str\n\n    # Convert padded_binary_str to decimal\n    power_of_2 = int(padded_binary_str, 2)\n\n    return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 << (n-1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to a given number n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the next power of 2 greater than or equal to the given number n.\n    \"\"\"\n    if n < 2:\n        return 2**0\n    \n    # Find the next power of 2 using binary search\n    left = 2\n    right = n\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if mid * mid >= n:\n            return mid\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            return mid\n    \n    return left"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n\n    :param n: an integer\n    :return: the smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n <= 0:\n        return None\n    \n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use binary search to find the smallest power of 2 greater than or equal to n\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if mid * mid >= n:\n            high = mid\n        else:\n            low = mid + 1\n    # Return the result\n    return high * high"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    i = 1\n    while i < n:\n        i *= 2\n    return i"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list and a number as input and returns the number of times the given number occurs in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(lst, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if the input list is valid\n    if not isinstance(list1, list):\n        return \"Input must be a list.\"\n\n    # Check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return \"Indices are out of range.\"\n\n    # Calculate the sum of the numbers within the range\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Initialize variables to store the sum and the current sum\n    sum_range = 0\n    current_sum = 0\n\n    # Iterate through the list from the first index to the second index (inclusive)\n    for i in range(m, n+1):\n        # Add the current element to the current sum\n        current_sum += list1[i-1]\n        # Add the current sum to the sum of the range so far\n        sum_range += current_sum\n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_val = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_val += i\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Use a for loop to iterate over the list and calculate the sum of numbers in the specified range\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        sum_value += list1[i-1]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (5*a**2)/4\n    return math.sqrt(s)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a + 5 * math.sqrt(3)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of one side of the pentagon\n    side_length = a / 5\n\n    # Calculate the number of sides of the pentagon using the formula for the number of triangles in a regular polygon\n    num_sides = int(math.sqrt(5) + 0.5)\n\n    # Calculate the sum of the lengths of the sides of the pentagon\n    total_side_length = side_length * num_sides\n\n    # Calculate the perimeter of the pentagon by adding the lengths of all its sides\n    perimeter = 2 * total_side_length\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a * math.sqrt(3)\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Find the semi-perimeter\n    s = (3*a**2)/2\n\n    # Find the area using the formula A = 5/4*s**2\n    A = (5/4)*s**2\n\n    # Calculate the circumference using the formula C = 5*a\n    C = 5*a\n\n    # Calculate the perimeter using the formula P = 5*a + 5*a + 5*a + 5*a + 5*a = 30*a + 30*a + 30*a + 30*a\n    P = 30*a\n\n    # Return the perimeter\n    return P"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(i) for i in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # first we convert the tuple to a list\n    test_list = list(test_tuple)\n    # we check if the length of the list is less than 2\n    if len(test_list) < 2:\n        return False\n    # we check if all the elements in the list have same data type\n    else:\n        # we convert the first element to a string\n        first_element = str(test_list[0])\n        # we iterate through the rest of the elements in the list\n        for element in test_list[1:]:\n            # we convert the element to string\n            element_str = str(element)\n            # if the data types of the first and second elements are different, we return False\n            if first_element!= element_str:\n                return False\n        # if we reach this point, all the elements in the list have same data type\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # first we get the first element of the tuple\n    first_element = type(test_tuple[0])\n    # we then loop through all the elements of the tuple\n    for element in test_tuple:\n        # we check if the element has the same data type as the first element\n        if type(element)!= first_element:\n            return False\n    # if we get to here, it means all the elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = []\n    for item in test_tuple:\n        data_types.append(type(item))\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n\n    # Check if the tuple has at least one element\n    if not test_tuple:\n        return \"Tuple is empty\"\n\n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n\n    # Loop through the rest of the tuple and check if all the elements have the same data type\n    for element in test_tuple[1:]:\n        if not isinstance(element, type(first_element)):\n            return \"All elements must be of the same data type\"\n\n    # If we make it through the loop without finding any errors, all elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # convert tuple to list\n    test_list = list(test_tuple)\n\n    # set of data types in the list\n    data_types = set()\n\n    # iterate over the list and check data type of each element\n    for element in test_list:\n        data_type = type(element).__name__\n        data_types.add(data_type)\n\n    # if all data types are same, return True\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple is empty or not\n    if not test_tuple:\n        return True\n    # Iterate over the tuple and check the data type of each element\n    for i in range(1, len(test_tuple)):\n        if not isinstance(test_tuple[i], type(test_tuple[0])):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for element in test_tuple:\n        type_list.append(type(element))\n    if len(set(type_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables to keep track of the count and candidate\n    count = 0\n    candidate = -1\n\n    # Loop through the array and update the count and candidate\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif count > 0:\n            count -= 1\n\n        # If the count becomes 0, we've found the candidate\n        if count == 0:\n            return True\n\n    # If we reach this point, we haven't found the candidate\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Returns whether the element x is the majority element in the sorted array arr of length n.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count == n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count == n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1  # check if the least significant bit is set to 1\n        n >>= 1  # move the number to the right by 1 bit\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i, c in enumerate(str):\n        if i % 2 == 0:\n            result += c\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n\n    # Split the string into a list of characters\n    char_list = list(str)\n\n    # Loop through the list and remove the odd characters\n    for i in range(len(char_list)):\n        if i % 2 == 1:\n            char_list[i] = ''\n\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str)\n    \n    # Initialize an empty string to store the resulting string\n    result = ''\n    \n    # Loop through the list of characters\n    for i in range(len(char_list)):\n        # Check if the index value of the character is odd\n        if i % 2!= 0:\n            # If it is, add the character to the resulting string\n            result += char_list[i]\n    \n    # Return the resulting string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    # Convert the string to a list of characters\n    chars = list(str)\n    # Initialize an empty list to hold the odd-indexed characters\n    odd_chars = []\n    # Loop through each character in the list\n    for i in range(len(chars)):\n        # If the current index is odd, add it to the odd_chars list\n        if i % 2 == 1:\n            odd_chars.append(chars[i])\n    # Join the odd_chars list into a string and return it\n    return ''.join(odd_chars)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(str)\n    # Create an empty string to store the characters which have odd index values\n    result = \"\"\n    # Loop through the list of characters\n    for i in range(len(lst)):\n        # If the index is odd, add the character to the result string\n        if i % 2!= 0:\n            result += lst[i]\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function finds the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set_bits = 0\n    for i in range(l, r+1):\n        set_bits |= (1 << i)\n    return (n & set_bits) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        # Base case: all bits are unset in the given range\n        return True\n    else:\n        # Recursive case: check if all bits are unset in the lower half of the range\n        if (n & l) == 0:\n            # If the bits in the given range are unset, then all bits in the upper half of the range must also be unset\n            return all_Bits_Set_In_The_Given_Range(n >> 1, r, r)\n        else:\n            # If the bits in the given range are set, then the function returns False\n            return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while l <= r:\n        if bin(l)[2:].count('1')!= bin(r)[2:].count('1'):\n            return False\n        l <<= 1\n        r >>= 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Iterate through all the numbers from l to r\n    for i in range(l, r+1):\n        # Check whether all the bits in the number are set or not\n        if i & n == n:\n            return False\n    # If all the bits in the range are set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Finding the difference between the range and 1 (i.e., l - 1)\n    diff = r - l + 1\n\n    # Checking whether the sum of all the bits in the range is equal to the number of bits in the range itself\n    if sum(bin(diff)[2:].zfill(diff.bit_length())) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r - l + 1 < 2**n: # if the range is smaller than the number of bits in n\n        return False\n    while l <= r:\n        if n == 0:\n            return True\n        n = n - 1\n        l = l | (1 << n)\n        r = r ^ (1 << n)\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through the bits of the given range\n    for i in range(l, r + 1):\n        # Count the number of unset bits\n        count += bin(n & (1 << i)).count('0')\n\n    # Check whether the count is 0 or not\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize variables for the current range and the number of unset bits\n    unset_bits = 0\n    current_range = n\n\n    # Loop through the bits in the given range\n    for bit in range(l, r+1):\n        # If the current bit is set, unset the corresponding bit in the current range\n        if n & (1 << bit):\n            current_range &= ~(1 << bit)\n            unset_bits |= 1 << bit\n        # If the current bit is not set, move to the next bit\n        else:\n            current_range <<= 1\n\n    # If all the bits in the current range have been unset, return True, else False\n    return unset_bits == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert n to a binary string\n    binary_n = bin(n)[2:]\n    # Pad binary string with leading zeros to make it of length l+1\n    padding = '0'*(l-len(binary_n))\n    binary_n = padding+binary_n\n    # Check if all the bits are set in the given range\n    all_set = True\n    for i in range(l, r+1):\n        if binary_n[i] == '0':\n            all_set = False\n            break\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a boolean variable to keep track of whether all the bits are unset in the given range or not\n    all_unset = True\n\n    # loop through the range of the given number\n    for i in range(l, r+1):\n        # if any bit is set, then all the bits are unset in the given range\n        if bin(n & (1<<i)).count('1')!= 0:\n            all_unset = False\n            break\n\n    return all_unset"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize variables to keep track of the count of negative and positive elements\n    count_negative = 0\n    count_positive = 0\n\n    # loop through the array and count the number of negative and positive elements\n    for num in arr:\n        if num < 0:\n            count_negative += 1\n        else:\n            count_positive += 1\n\n    # if there are more negative elements than positive elements, just re-arrange the array\n    if count_negative > count_positive:\n        # loop through the array and re-arrange the elements\n        for i in range(n):\n            arr[i], arr[n+count_negative-1-i] = arr[n+count_negative-1-i], arr[i]\n    # otherwise, use a two-pointer approach to re-arrange the array\n    else:\n        # initialize variables to keep track of the index of the last negative element and the index of the first positive element\n        last_negative_index = 0\n        first_positive_index = 0\n\n        # loop through the array and find the index of the last negative element\n        for i in range(n):\n            if arr[i] < 0:\n                last_negative_index = i\n\n        # loop through the array and swap elements with the first positive element until the first negative element is reached\n        for i in range(last_negative_index, n):\n            arr[i], arr[first_positive_index] = arr[first_positive_index], arr[i]\n            first_positive_index += 1\n\n    # return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a temporary array to hold positive and negative elements\n    temp = []\n    for i in range(n):\n        if arr[i] < 0:\n            temp.append(arr[i])\n        else:\n            temp.append(-arr[i])\n    \n    # swap the first n elements of the original array with the negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[temp.index(-arr[i])] = arr[temp.index(-arr[i])], arr[i]\n    \n    # print the final array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Initialize variables to store negative and positive elements\n    negative_elements = []\n    positive_elements = []\n    \n    # Separate the array into negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            positive_elements.append(arr[i])\n            \n    # Concatenate the negative and positive elements and sort them in the desired order\n    result = negative_elements + positive_elements\n    result.sort()\n    \n    # Return the re-arranged array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Initialize variables for positive and negative indices\n    pos = 0\n    neg = n\n    \n    # Swap elements at indices pos and neg\n    arr[pos], arr[neg] = arr[neg], arr[pos]\n    \n    # Increment negative index\n    neg += 1\n    \n    # Loop through the remaining elements of the array\n    for i in range(n+1, len(arr)):\n        \n        # Check if the element is negative\n        if arr[i] < 0:\n            \n            # Swap negative element with the element at the current positive index\n            arr[neg], arr[i] = arr[i], arr[neg]\n            \n            # Increment negative index\n            neg += 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize two pointers, i and j, to iterate over the array\n    i = 0\n    j = n-1\n\n    # Iterate over the array\n    while i <= j:\n\n        # If the element at index i is negative, swap it with the element at index j\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n        # Move the pointer i towards the end of the array\n        i += 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # create a dictionary to store the absolute values of the elements of the array\n    abs_dict = {}\n    for num in arr:\n        abs_dict[abs(num)] = num\n\n    # sort the keys of the dictionary in ascending order\n    sorted_keys = sorted(abs_dict.keys())\n\n    # create a new array to store the re-arranged elements of the array\n    rearranged_arr = []\n\n    # traverse through the sorted keys and add the elements to the re-arranged array based on their positions in the sorted keys\n    for i in range(n):\n        key = sorted_keys[i]\n        if key >= 0:\n            rearranged_arr.append(abs_dict[key])\n        else:\n            rearranged_arr.append(-abs_dict[key])\n\n    # return the re-arranged array\n    return rearranged_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize variables\n    negative_count = 0\n    positive_count = 0\n    negative_index = 0\n    positive_index = n\n\n    # Iterate through the array\n    for index in range(n):\n        if arr[index] < 0:\n            negative_count += 1\n            arr[negative_index], arr[index] = arr[index], arr[negative_index]\n            negative_index += 1\n        else:\n            positive_count += 1\n            arr[positive_index], arr[index] = arr[index], arr[positive_index]\n            positive_index += 1\n\n    # Rearrange the remaining elements\n    for index in range(n, len(arr)):\n        if arr[index] < 0:\n            negative_count += 1\n            arr[negative_index], arr[index] = arr[index], arr[negative_index]\n            negative_index += 1\n        else:\n            positive_count += 1\n            arr[positive_index], arr[index] = arr[index], arr[positive_index]\n            positive_index += 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initializing two pointers i and j to 0\n    i = 0\n    j = 0\n    # Looping through the array\n    while j < n:\n        # If the element at i is negative\n        if arr[i] < 0:\n            # Moving the element at j to the current position of i\n            arr[i], arr[j] = arr[j], arr[i]\n            # Increasing the value of i\n            i += 1\n            # Increasing the value of j\n            j += 1\n        else:\n            # Increasing the value of j\n            j += 1\n    # Returning the updated array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create a dictionary to store the original indexes of the first n elements\n    orig_indexes = {}\n    for i in range(n):\n        orig_indexes[i] = arr.index(i)\n\n    # Sort the array of first n elements in reverse order\n    arr_sorted = sorted(arr, reverse=True)\n\n    # Re-arrange the array by swapping the first n elements with their sorted versions\n    for i in range(n):\n        arr[i], arr_sorted[i] = arr_sorted[i], arr[i]\n\n    # Re-arrange the array by reversing the order of positive and negative elements\n    pos_idx = n\n    neg_idx = n * 2\n    while pos_idx < len(arr):\n        arr[pos_idx], arr[neg_idx] = arr[neg_idx], arr[pos_idx]\n        pos_idx += 1\n        neg_idx += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a dictionary to store the indices of negative and positive elements\n    pos_dict = {}\n    neg_dict = {}\n\n    # iterate through the array and count the number of positive and negative elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg_dict[abs(arr[i])] = i\n        else:\n            pos_dict[abs(arr[i])] = i\n\n    # iterate through the array again and insert the negative elements after the positive ones\n    i = n\n    while i < len(arr):\n        if arr[i] < 0:\n            arr[i], arr[neg_dict[abs(arr[i])]] = arr[neg_dict[abs(arr[i])]], arr[i]\n        else:\n            arr[i], arr[pos_dict[abs(arr[i])]] = arr[pos_dict[abs(arr[i])]], arr[i]\n        i += 1\n\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i =='':\n            str2 += char\n        else:\n            str2 += i\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and a character as input and replaces all the blank spaces in the string with the character and returns the modified string.\n    \"\"\"\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Initialize an empty list to store the n largest items\n    result = []\n\n    # Use a heapq to store the first n largest items from the list\n    heapq.heapify(list1)\n\n    # Add the first n largest items from the list to the result list\n    for i in range(n):\n        result.append(heapq.heappop(list1))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n    # create an empty heap (min heap) to store the n largest numbers\n    max_heap = []\n    # add the first n elements of the sorted list to the heap\n    heapq.heapify(max_heap, sorted_list[:n])\n    # add the remaining elements to the heap\n    for num in sorted_list[n:]:\n        if num > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, num)\n    # return the heap as the result\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap,num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_list = set(list1)\n    # Create a max heap of the first n elements of the list\n    heap = heapq.nlargest(n, unique_list)\n    # Return the max heap as a list\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n    # Initialize an empty list to store the n largest items\n    top_n_list = []\n    # Initialize a variable to keep track of the number of items in the list\n    count = 0\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n        # If the number of items in the list is less than or equal to n, append the item to the top_n_list\n        if count <= n:\n            top_n_list.append(sorted_list[i])\n            # Increment the count of items in the list\n            count += 1\n        # If the number of items in the list is greater than n, remove the smallest item from the top_n_list and append the next item\n        else:\n            heapq.heappop(top_n_list)\n            top_n_list.append(sorted_list[i])\n    return top_n_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    max_heap = []\n    \n    for i in range(len(list1)):\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, list1[i])\n        elif list1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, list1[i])\n    \n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    heap = []\n    for _ in range(n):\n        heapq.heappush(heap, -heapq.heappop(heap))\n    \n    # Iterate through the list and push the elements to the heap\n    for num in list1:\n        heapq.heappush(heap, -num)\n    \n    # Pop the largest n elements from the heap and return them as a list\n    return [-x for x in heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert list1 to a min heap\n    min_heap = []\n    for i in range(len(list1)):\n        heapq.heappush(min_heap, list1[i])\n    \n    # extract the n largest numbers from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(min_heap))\n        \n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*h**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Find the area of the cylinder using the formula: A = pi * r^2\n    A = math.pi * r**2\n    # Find the lateral surface area using the formula: A = pi * r^2\n    LSA = 2 * math.pi * r * h\n    return LSA\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area\n    lateral_area = 2 * r * h\n    \n    # Return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    print(\"The lateral surface area of a cylinder with radius\", r, \"and height\", h, \"is\", area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function takes in two arguments, r and h, representing the radius and height of the cylinder, respectively.\n    It calculates the lateral surface area of the cylinder using the formula:\n\n    lateral surface area = 2 * pi * r * h\n\n    and returns the result.\n    \"\"\"\n    import math\n    \n    # Calculate the lateral surface area using the given formula\n    lateral_surface_area = 2 * math.pi * r * h\n    \n    # Return the result\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*r*h\n    print(\"The lateral surface area of the cylinder is:\",lateral_surface_area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (2*3.14159*r*h) + (2*3.14159*r**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*r*h\n    print(\"Lateral surface area of a cylinder is\",area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2+h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)+(2*r*(h/3))"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Get all the even bits (starting from the least significant bit)\n    even_bits = (n & (n-1)) << 1\n    # Set the even bits to 1\n    n = n | even_bits\n    # Return the updated number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Iterate over each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # If it is, set all bits to 1\n            n |= (1 << i)\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the input number to binary\n    binary_string = bin(n)[2:]\n    # Split the binary string into even and odd bits\n    even_bits = [bit for bit in binary_string if int(bit) == 0]\n    odd_bits = [bit for bit in binary_string if int(bit) == 1]\n    # Combine even and odd bits into a list of tuples\n    even_odd_bits = [(int(bit), bit) for bit in even_bits] + [(int(bit), bit) for bit in odd_bits]\n    # Set the even bits to 1, and the odd bits to 0\n    for bit, bit_value in even_odd_bits:\n        if bit % 2 == 0:\n            binary_string = binary_string[:bit] + '1' + binary_string[bit+1:]\n        else:\n            binary_string = binary_string[:bit] + '0' + binary_string[bit+1:]\n    # Convert the binary string back to an integer\n    final_number = int(binary_string, 2)\n    return final_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the updated number\n    result = []\n    # loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # if the bit is even, set it to 1\n        if int(bit) % 2 == 0:\n            result.append('1')\n        # if the bit is odd, set it to 0\n        else:\n            result.append('0')\n    # convert the list to an integer and return it\n    return int(''.join(result), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize the even_bits variable to 0\n    even_bits = 0\n    # Loop through the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set its corresponding bit in the even_bits variable to 1\n        if int(bit) % 2 == 0:\n            even_bits = even_bits | (1 << (int(bit) - 1))\n    # Return the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0\n    \n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # Check if the bit is even\n        if int(bit) == 0:\n            # If it is, add it to the even_bits variable\n            even_bits += 1\n            \n    # Use the modulo operator to set all even bits to 1\n    even_bits = even_bits % 2\n    \n    # Return the result\n    return n | even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(n.bit_length()):\n        if n & (1 << i) == 0:\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        n &= n - 1  # set the least significant bit to 1\n        n >>= 1  # shift right by 1 bit\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of the input number\n    even_bits = 0\n    \n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it in the even_bits variable\n        if int(bit) == 0:\n            even_bits |= 1 << (len(bin(n)[2:]) - int(bit))\n    \n    # Return the new number with even bits set\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result to 0\n    result = 0\n    # Iterate through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it in the result\n        if int(bit) == 1:\n            result |= 1 << (len(bin(n)[2:]) - int(bit))\n    # Return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the current tuple is already in the dictionary\n        if tup in count_dict:\n            # If it is, increment its count by 1\n            count_dict[tup] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # Return the dictionary with the counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter()\n    for tup in test_list:\n        count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Convert the list of tuples to a set of tuples to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Create a dictionary to store the counts of each unique tuple\n    count_dict = {}\n\n    # Iterate over the unique tuples\n    for tuple in unique_tuples:\n        # Get the count of the current tuple in the list\n        count = test_list.count(tuple)\n\n        # Add the count to the dictionary for the tuple\n        count_dict[tuple] = count\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use the Counter class from the collections module to count the number of times each tuple occurs in the list\n    counter = Counter(test_list)\n    # Use the items() method to convert the dictionary to a list of tuples\n    output_list = counter.items()\n    # Use a dictionary comprehension to create a new dictionary with the unique tuples as keys and their corresponding counts as values\n    output_dict = {k: v for k, v in output_list}\n    return output_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create a dictionary to store the counts\n    counts = {}\n\n    # Loop over the list of tuples\n    for item in test_list:\n        # Check if the item is already in the dictionary\n        if item not in counts:\n            # If not, add it with a count of 1\n            counts[item] = 1\n        else:\n            # If it is, increment the count\n            counts[item] += 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # use Counter() method to count the number of occurrences of each tuple in the list\n    counts = Counter(test_list)\n    \n    # create a dictionary to map each unique tuple to its count in the list\n    unique_counts = {}\n    for count in counts.values():\n        unique_counts[counts.most_common(1)[0]] = count\n    \n    return unique_counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the count of each tuple\n    count_dict = {}\n\n    # iterate through the list of tuples\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # return the dictionary of count of each tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if len(str[i:j]) > 0: \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    substrings = [\"\".join(s) for s in itertools.product('abcdefghijklmnopqrstuvwxyz', repeat=len(str))]\n    return sum(1 for substring in substrings if substring in str)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    sequence = []\n    for i in range(n):\n        if i == 0:\n            sequence.append(2)\n            total_sequences += 1\n        else:\n            for j in range(2,m):\n                if j % 2 == 0:\n                    if j > sequence[i-1] and j <= m-sequence[i-1]:\n                        sequence.append(j)\n                        total_sequences += 1\n                        break\n                else:\n                    if j < sequence[i-1] and j >= sequence[i-1]+2:\n                        sequence.append(j)\n                        total_sequences += 1\n                        break\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(1, m // 2 + 1):\n        if i * 2 <= m:\n            for j in range(i + 1, min(n, m // i + 1)):\n                total_sequences += j\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable\n    count = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(2, m+1):\n        # Check if each element is greater than or equal to twice the previous element\n        for j in range(i-2, n-1):\n            # Check if each element is less than or equal to m\n            if i <= m and j <= m:\n                # Add 1 to the count variable\n                count += 1\n\n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables to store the sum and product of the first two elements\n    a = 0\n    b = 2 * a\n    \n    # Initialize variables to store the sum and product of the previous two elements\n    c = 0\n    d = 2 * c\n    \n    # Initialize variables to store the number of sequences found\n    count = 0\n    \n    # Loop until we have found all possible sequences\n    while True:\n        # Check if we have reached the end of the sequence\n        if b > m or d > m:\n            # Increment the count of sequences found\n            count += 1\n            # If we have found all possible sequences, exit the loop\n            if b > m or d > m:\n                break\n        \n        # Update the values of a and b and c and d\n        a = b\n        b = 2 * a\n        \n        c = d\n        d = 2 * c\n        \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables\n    count = 0\n    prev = 0\n\n    # Iterate over all possible sequences\n    for i in range(1,m+1):\n        if i >= 2*prev <= m:\n            count += 1\n            prev = i\n\n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    prev = 0\n    for i in range(1, m):\n        if i >= 2 * prev <= m:\n            count += 1\n        prev = i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    def is_valid(arr, n, m):\n        '''\n        This function checks whether the given array of length n contains only valid elements that satisfy the condition of being greater than or equal to twice the previous element but less than or equal to m.\n        '''\n        for i in range(1, n):\n            if arr[i] < 2 * arr[i-1] or arr[i] > m:\n                return False\n        return True\n\n    def count_valid_sequences(n, m):\n        '''\n        This function counts the number of valid sequences of length n for an array of length m.\n        '''\n        valid_sequences = 0\n        for i in range(1, m):\n            valid_sequences += 1\n            if i < 2 * n:\n                valid_sequences += count_valid_sequences(n, i)\n        return valid_sequences\n\n    # Calculate the number of valid sequences for m = 10, n = 3\n    valid_sequences = count_valid_sequences(3, 10)\n    print(\"Number of valid sequences for m = 10, n = 3 is:\", valid_sequences)\n\n    # Calculate the number of valid sequences for m = 100, n = 5\n    valid_sequences = count_valid_sequences(5, 100)\n    print(\"Number of valid sequences for m = 100, n = 5 is:\", valid_sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in two positive integers m and n and returns the number of possible sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # initialize variables\n    total_sequences = 0\n    prev_element = 1\n    # loop through all possible lengths from 1 to n\n    for i in range(1, n+1):\n        # loop through all possible previous elements from prev_element to m\n        for j in range(prev_element, m+1):\n            # if the current element is greater than or equal to twice the previous element and less than or equal to m, increment the total_sequences count\n            if j >= 2*prev_element:\n                total_sequences += 1\n        # update the previous element for the next iteration\n        prev_element = j\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in two positive integers m and n and finds the number of possible sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m, m + 2 * n):\n        count += 1\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    #check if the length of list1 is less than or equal to 1\n    if len(list1) <= 1:\n        return \"list1 must have at least two elements\"\n    \n    #reverse the second list to make it easier to modify it\n    list2 = list2[::-1]\n    \n    #append the elements of list2 to list1\n    list1.extend(list2)\n    \n    #reverse the list1 to make it easier to modify it\n    list1 = list1[::-1]\n    \n    #set the last element of list1 to None\n    list1[-1] = None\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    \n    # Check if the second list has the same length as the first list\n    if len(list2)!= length:\n        raise ValueError(\"Second list has a different length than the first list\")\n    \n    # Replace the last element of the first list with the elements of the second list\n    for i in range(length-1, -1, -1):\n        list1[i] = list2[i]\n        \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) < 2:\n        return None\n    else:\n        list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1] * len(list2)\n    print(list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the length of the first list is greater than the second list\n    if len(list1) > len(list2):\n        # check if the length of the first list minus one is greater than the length of the second list\n        if len(list1)-1 > len(list2):\n            # check if the first list contains at least two elements\n            if len(list1) > 1:\n                # replace the last element of the first list with the elements of the second list\n                list1[len(list1)-1] = list2\n            else:\n                # append the elements of the second list to the first list\n                list1.extend(list2)\n        else:\n            # if the first list is shorter than the second list, append the elements of the second list to the first list\n            list1.extend(list2)\n    else:\n        # if the first list is longer than the second list, append the elements of the second list to the first list\n        list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1:] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = len(str1)\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    sqrt_N = math.sqrt(N)\n    next_sqrt_N = int(math.ceil(sqrt_N)) + 1\n    return int(math.ceil(next_sqrt_N ** 2))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # find the integer part of the square root\n    int_sqrt_N = math.floor(sqrt_N)\n\n    # calculate the difference between N and the integer part of the square root\n    diff = N - int_sqrt_N**2\n\n    # find the next odd number that is greater than the difference\n    next_odd = diff + 1\n\n    # calculate the square of the next odd number\n    next_odd_sq = next_odd**2\n\n    # check if the next odd number is greater than the square root of N\n    if next_odd_sq > sqrt_N:\n        return next_Perfect_Square(next_odd)\n    else:\n        return next_odd_sq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_prime(num):\n        '''\n        Check if a number is prime or not.\n        '''\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_square(num):\n        '''\n        Check if a number is a perfect square or not.\n        '''\n        return math.sqrt(num) == int(math.sqrt(num))\n\n    def find_next_perfect_square(N):\n        '''\n        Recursive function to find the next perfect square greater than N.\n        '''\n        if is_prime(N):\n            return N + 1\n        if is_prime(N-1):\n            return N\n        if not is_square(N):\n            return find_next_perfect_square(N-1)\n        return N + 1\n\n    return find_next_perfect_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    N_squared = N**2\n    while True:\n        N = N + 1\n        N_plus_one_squared = N**2\n        if N_squared == N_plus_one_squared:\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        x = int(math.sqrt(N))**2\n        if x > N:\n            return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # initialize variables\n    a = N\n    b = int(math.sqrt(a)) + 1\n    c = b * b\n\n    while a < c:\n        a += b\n        b = int(math.sqrt(a)) + 1\n        c = b * b\n\n    return a"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # The perfect square is the square root of the given number\n    perfect_square = math.sqrt(N)\n\n    # Since the perfect square is always greater than or equal to N, we add 1 to it to get the next greater perfect square\n    next_square = perfect_square + 1\n\n    # We round the next perfect square to the nearest integer\n    next_square = round(next_square)\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of N\n    sqrtN = math.sqrt(N)\n    # Find the integer part of the square root\n    intSqrtN = int(sqrtN)\n    # Find the next integer after the square root\n    nextInt = intSqrtN + 1\n    # Calculate the square of the next integer\n    nextSquare = nextInt * nextInt\n    # Check if the next square is greater than N\n    if nextSquare > N:\n        return next_Perfect_Square(nextInt)\n    else:\n        return nextSquare"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Calculate the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # Check if sqrt_N is a perfect square\n    if math.isqrt(sqrt_N) * math.isqrt(sqrt_N) == N:\n        return sqrt_N + 1\n\n    # If sqrt_N is not a perfect square, find the next integer greater than sqrt_N\n    else:\n        return next_Perfect_Square(sqrt_N + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n\n    Parameters:\n        N: int\n            The number whose next perfect square to find.\n\n    Returns:\n        int\n            The next perfect square greater than N.\n    \"\"\"\n\n    def is_perfect_square(num):\n        \"\"\"\n        This function takes a number and checks if it's a perfect square or not.\n\n        Parameters:\n            num: int\n                The number to check.\n\n        Returns:\n            bool\n                True if the number is a perfect square, False otherwise.\n        \"\"\"\n        if num < 0:\n            return False\n        sqrt_num = int(math.sqrt(num))\n        return sqrt_num ** 2 == num\n\n    if is_perfect_square(N):\n        # if N is already a perfect square, return N + 1\n        return N + 1\n    else:\n        # if N is not a perfect square, find the next smaller perfect square\n        sqrt_N = int(math.sqrt(N))\n        while not is_perfect_square(sqrt_N):\n            sqrt_N -= 1\n\n        # find the next perfect square greater than sqrt_N\n        while not is_perfect_square(sqrt_N + 1):\n            sqrt_N += 1\n\n        # return sqrt_N + 1, since we've already found the next perfect square greater than sqrt_N\n        return sqrt_N + 1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n\n    # Initialize variables for the maximum subsequence and its end points\n    max_sum = arr[0]\n    start = 0\n    end = 0\n\n    # Iterate through the array and find the maximum subsequence\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            # If the current element is smaller than the previous element, it is the end of a decreasing subsequence, so update the maximum subsequence and its end point\n            max_sum = max(max_sum + arr[i], arr[i])\n            end = i\n        else:\n            # If the current element is larger than the previous element, it is the end of an increasing subsequence, so update the maximum subsequence and its end point\n            max_sum = max(max_sum + arr[i], arr[i])\n            start = i\n\n    # If the maximum subsequence is negative, it is bitonic, so return the negative of the maximum sum\n    if max_sum < 0:\n        return -max_sum\n    else:\n        # Otherwise, return the maximum sum\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n    \n    max_sum_increase = max_sum_decrease = float('-inf')\n    current_sum_increase = current_sum_decrease = 0\n    \n    for num in arr:\n        if num < arr[0]:\n            current_sum_increase += num\n        else:\n            current_sum_decrease += num\n            \n        max_sum_increase = max(max_sum_increase, current_sum_increase)\n        max_sum_decrease = max(max_sum_decrease, current_sum_decrease)\n        \n        if current_sum_increase - current_sum_decrease > 0:\n            return max_sum_increase - max_sum_decrease\n            \n    return max_sum_increase - max_sum_decrease"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = 0\n    curr_sum = 0\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        else:\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            curr_sum = 0\n\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # initialize variables\n    current_sum = 0\n    prev_sum = 0\n    \n    # iterate through the array and find the maximum sum of a bitonic subsequence\n    for i in range(n):\n        # add the element to the current sum\n        current_sum += arr[i]\n        \n        # if the current sum becomes negative, reset the sum to 0\n        if current_sum < 0:\n            prev_sum = 0\n            current_sum = 0\n        \n        # if the current sum is greater than the previous sum, update the maximum sum\n        elif current_sum > prev_sum:\n            prev_sum = current_sum\n            \n    return prev_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    # Traverse through the array from left to right\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here += arr[i]\n            \n        if max_ending_here < max_so_far:\n            max_so_far = max_ending_here\n            \n    # Return the maximum sum of a bitonic subsequence\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    # find the lengths of increasing and decreasing parts of the array\n    inc_len = 0\n    dec_len = len(arr) - 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            inc_len += 1\n        elif arr[i] < arr[i-1]:\n            dec_len -= 1\n\n    # find the maximum sum of increasing and decreasing parts\n    max_sum_inc = arr[0] * (inc_len + 1)\n    max_sum_dec = arr[len(arr)-1] * (dec_len + 1)\n    max_sum_bitonic = max(max_sum_inc, max_sum_dec)\n\n    # find the maximum sum of increasing and decreasing parts\n    for i in range(1, len(arr)-1):\n        if arr[i] > arr[i-1]:\n            max_sum_inc += arr[i] * (inc_len - 1)\n        elif arr[i] < arr[i-1]:\n            max_sum_dec += arr[i] * (dec_len - 1)\n        max_sum_bitonic = max(max_sum_bitonic, max(max_sum_inc, max_sum_dec))\n\n    return max_sum_bitonic"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Calculate the sum of each bitonic subsequence\n    sums = []\n    for i in range(n):\n        if i % 2 == 0:\n            sums.append(sum(arr[0:i+1]))\n        else:\n            sums.append(sum(arr[n-i:n]))\n\n    # Find the maximum sum\n    return max(sums)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize the maximum sum and minimum value of subsequence\n    max_so_far = arr[0]\n    min_subseq = arr[0]\n    \n    # Traverse through the array from the second element to the last element\n    for i in range(1, n):\n        # If the current element is greater than the previous minimum element, update the minimum element\n        if arr[i] > min_subseq:\n            min_subseq = arr[i]\n        # Update the maximum sum if the current element is greater than the current maximum sum and the minimum subsequence is also greater than the current element\n        elif arr[i] > max_so_far and min_subseq > arr[i]:\n            max_so_far = max_so_far + arr[i] - min_subseq\n            min_subseq = arr[i]\n    \n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    max_so_far = arr[0]\n    curr_sum = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum = arr[i]\n\n        if curr_sum > max_so_far:\n            max_so_far = curr_sum\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    # initialize variables\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # initialize variables for storing the maximum sum and the maximum subsequence\n    max_sum_decreasing = max_sum_increasing = arr[0]\n    max_subsequence_decreasing = max_subsequence_increasing = arr[0]\n\n    # traverse through the array\n    for i in range(1, n):\n        # check if the current element is increasing or decreasing\n        if arr[i] > arr[i-1]:\n            # update the maximum sum for decreasing and decreasing subsequences\n            max_sum_decreasing = max(max_sum_decreasing, max_sum_increasing + arr[i])\n            max_subsequence_decreasing = arr[i]\n        else:\n            # update the maximum sum for increasing and increasing subsequences\n            max_sum_increasing = max(max_sum_increasing, max_sum_decreasing + arr[i])\n            max_subsequence_increasing = arr[i]\n\n    # return the maximum sum of the bitonic subsequence\n    return max(max_sum_decreasing, max_sum_increasing)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the guess and the error and set the maximum number of iterations\n    guess = number / 2\n    error = 0.0001\n    max_iterations = 100\n    \n    # Loop until the error is smaller than the desired threshold or the maximum number of iterations is reached\n    while error > 0.0001 and max_iterations > 0:\n        # Calculate the new guess using the babylonian method\n        new_guess = guess - (guess * guess - number) / (2 * guess)\n        \n        # Check if the new guess is closer to the root\n        if abs(new_guess - guess) < abs(guess - number):\n            # If it is, update the guess\n            guess = new_guess\n        else:\n            # If not, update the error\n            error = abs(new_guess - number)\n        \n        # Decrement the maximum number of iterations\n        max_iterations -= 1\n        \n    # Return the final guess as the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2.0\n    y = (x + number / x) / 2.0\n    i = 0\n    while (y - x) / y > 1e-10:\n        x = y\n        y = (x + number / x) / 2.0\n        i += 1\n    return x, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Initialize the guess and the error\n    guess = number / 2\n    error = 1\n\n    while error > 0.00001:\n        # Compute the next guess\n        new_guess = (guess + number / guess) / 2\n\n        # Compute the error\n        error = abs(new_guess - guess)\n\n        # Update the guess\n        guess = new_guess\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    This function uses the Babylonian method for computing the square root of a number.\n    The Babylonian method is a simple algorithm that works by repeatedly squaring\n    a number until it is within a certain error of the square root.\n\n    Parameters:\n    number (float): The number to compute the square root of.\n\n    Returns:\n    float: The square root of the input number using the Babylonian method.\n\n    Example:\n    >>> babylonian_squareroot(9)\n    3.0\n    \"\"\"\n\n    # Set an initial guess for the square root\n    guess = number / 2\n\n    # Initialize a counter variable for the number of iterations\n    iterations = 0\n\n    # Loop while the difference between the guess and the square root is greater than a certain threshold\n    while abs(guess**2 - number) > 0.001:\n        # Update the guess for the square root\n        guess = (guess + number / guess) / 2\n\n        # Increment the iteration count\n        iterations += 1\n\n    # Return the final guess for the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    epsilon = 0.00001\n    num_iterations = 0\n\n    while abs(guess*guess - number) > epsilon:\n        guess = (guess + number/guess) / 2\n        num_iterations += 1\n\n    return guess, num_iterations"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x_0 = number / 2\n    x_1 = 0.0\n    i = 0\n    while abs(x_1 - x_0) > 0.00001:\n        x_2 = x_1 - (number/x_1) * (x_1 - x_0)\n        x_1 = x_0\n        x_0 = x_2\n        i += 1\n    print(\"The square root of\", number, \"using the Babylonian method is\", x_1)\n    return x_1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess * guess - number) > 0.000001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = number / 2\n    x = guess\n    dx = number / (4 * guess)\n    \n    # iterate until the difference between the last two guesses is less than or equal to \n    # a certain threshold (e.g., 0.00001)\n    while abs(dx) > 0.00001:\n        # calculate the new guess\n        x = guess - (number / (guess * guess))\n        # calculate the new dx\n        dx = number / (4 * x)\n        # update the guess\n        guess = x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2.0\n    y = number / 2.0\n    numerator = 0.0\n    denominator = 1.0\n    i = 0\n    \n    while i < 100000:\n        numerator = numerator + x / (2.0 * i + 1)\n        denominator = denominator + x / (2.0 * i + 2)\n        x = numerator / denominator\n        i = i + 1\n        \n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001  # threshold for stopping the iteration\n    guess = number / 2  # starting guess\n\n    while abs(guess * guess - number) > epsilon:\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    # Initialize two variables to keep track of the start and end of the longest palindromic subsequence found so far\n    start = 0\n    end = 0\n\n    # Iterate over each character in the string\n    for i in range(len(str)): \n        # Initialize two pointers at the start and end of the current substring\n        left = i\n        right = i\n\n        # Keep expanding the palindrome window until we reach the end of the substring\n        while (right < len(str) and str[left] == str[right]):\n            left += 1\n            right += 1\n\n        # Update the longest palindromic subsequence found so far if this substring is longer\n        if (right - left > end - start):\n            start = left\n            end = right\n\n    # Return the length of the longest palindromic subsequence found\n    return end - start"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(string):\n    \"\"\"\n    Given a string, this function will return the length of the longest palindromic subsequence.\n    \"\"\"\n    n = len(string)\n    # Create a 2D table to store the length of the longest palindromic subsequence for each substring\n    table = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Fill the table using dynamic programming\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i == j:\n                table[i][j] = 1\n            elif string[i] == string[j]:\n                table[i][j] = 2 + table[i+1][j-1]\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    return table[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # Build the LPS array\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            dp[i][i] = 2\n        else:\n            dp[i][i] = 1\n        for j in range(i-1, -1, -1):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # creating a 2D table to store lengths of longest palindromic subsequence ending at each position\n    table = [[0 for j in range(n)] for i in range(n)]\n    # initializing base cases\n    table[0][0] = 1\n    # filling the table in bottom up manner\n    for i in range(1, n):\n        for j in range(i):\n            # checking if current characters are same\n            if str[i] == str[j]:\n                table[i][j] = table[i-1][j-1] + 2\n            # checking if current characters are not same\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    return table[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # create a 2D table to store the lengths of longest palindromic subsequences \n    # for substrings of size i and 2*i \n    table = [[0] * (2*n+1) for _ in range(n+1)] \n\n    # base cases \n    for i in range(n+1): \n        table[i][i] = 1\n\n    # fill the table in bottom-up manner \n    for i in range(n-1, -1, -1): \n        for j in range(i, n): \n            if str[i] == str[j]: \n                table[i][j+1] = table[i+1][j] + 2\n            else: \n                table[i][j+1] = max(table[i+1][j], table[i][j+1])\n\n    # return the length of the longest palindromic subsequence \n    return table[0][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps = [1] * n\n\n    for i in range(1, n):\n        if str[i] == str[i - 1]:\n            lps[i] = lps[i - 1] + 1\n        else:\n            lps[i] = max(lps[i - 1], lps[i - 2])\n\n    return lps[-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D array to store the lengths of longest palindromic subsequences ending at each position\n    # Initialize all values as 0\n    dp = [[0] * n for _ in range(n)]\n\n    # Calculate the lengths of longest palindromic subsequences ending at each position\n    for i in range(n):\n        # If the character at the current position is a palindrome, the length of its longest palindromic subsequence is 1\n        if s[i] == s[i]:\n            dp[i][i] = 1\n\n        # Check for subsequences of length 2 to 2 * i\n        for j in range(2, 2 * i + 1):\n            # If the substring between the current position and i+j-1 is a palindrome,\n            # then the length of its longest palindromic subsequence is i + 1\n            if s[i - j] == s[i + j - 1]:\n                dp[i - j][i + j - 1] = j + 1\n\n    # Find the length of the longest palindromic subsequence in the given string\n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and dp[i][j] > max_len:\n                max_len = dp[i][j]\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    # create a dictionary to store the length of the longest palindromic subsequence ending at each position in the string\n    dp = {}\n    \n    # initialize the first element of the dictionary to be 0\n    dp[0] = 0\n    \n    # iterate over the characters in the string\n    for i in range(1, len(str)):\n        # check if the previous character and the current character are the same\n        if str[i] == str[i-1]:\n            # if they are, the length of the longest palindromic subsequence ending at the current position is the length of the longest palindromic subsequence ending at the previous position plus 2\n            dp[i] = dp[i-1] + 2\n            \n        # if the previous character and the current character are different, check if there's a subsequence ending at the previous position that ends at the current position and is a palindrome\n        elif str[i] == str[i-1][::-1]:\n            # if there is, update the length of the longest palindromic subsequence ending at the current position to be the length of the subsequence plus 2\n            dp[i] = dp[i-1] + 2\n            \n        # if no palindromic subsequence ending at the current position is found, initialize the length of the longest palindromic subsequence ending at the current position to be 1\n        else:\n            # if there's no previous character or if the previous character and the current character are different, set the length of the longest palindromic subsequence ending at the current position to 1\n            dp[i] = 1\n            \n    # return the length of the longest palindromic subsequence ending at the last position in the string\n    return dp[len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps_array = [1] * n\n\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            lps_array[i] = lps_array[i-1] + 1\n        else:\n            j = lps_array[i-1]\n            while j > 0 and str[i]!= str[j-1]:\n                j = lps_array[j-1]\n            lps_array[i] = j + 1\n\n    return lps_array[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # Initialize two variables to store the length of the longest palindromic subsequence\n    # and its corresponding starting index of the subsequence.\n    max_len = 1\n    max_start = 0\n    # Initialize a variable to store the length of the current longest palindromic subsequence.\n    curr_len = 1\n    # Initialize two variables to store the starting and ending indices of the current subsequence.\n    start = 0\n    end = 0\n    # Loop through the string and for each character, check if the current character is the same as the previous character.\n    # If it is, then the length of the current subsequence is one more than the length of the longest subsequence ending at the previous starting index.\n    # Update the variables max_len, max_start, curr_len, start, and end accordingly.\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n                max_start = start\n            curr_len = 1\n            start = i\n    # Check if the length of the current subsequence is greater than the length of the longest subsequence.\n    if curr_len > max_len:\n        max_len = curr_len\n        max_start = start\n    # Return the length of the longest palindromic subsequence.\n    return max_len"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/(n-1) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_n = 0\n    for i in range(1, n+1):\n        sum_of_n += 1/i\n    return sum_of_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n-1)/harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return 2*n - harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n**2) + (1/n**3) + (1/n**4) +... + (1/n**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n-1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0.0\n    for i in range(1, n+1):\n        harmonic_sum += 1.0 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    sum_harmonic = 0\n    for i in range(1, n+1):\n        sum_harmonic += 1/i\n    \n    return sum_harmonic"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Find the intersection of two arrays\n    intersection = [x for x in array_nums1 if x in array_nums2]\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array that contains the elements that are common to both arrays.\n\n    Args:\n        array_nums1 (list): The first input array.\n        array_nums2 (list): The second input array.\n\n    Returns:\n        list: A new array that contains the elements that are common to both arrays.\n    \"\"\"\n    # Use a dictionary to keep track of the frequency of each element in array_nums2\n    freq = {}\n    for num in array_nums2:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Initialize an empty array to store the common elements\n    common = []\n\n    # Iterate over each element in array_nums1 and check if it's in the dictionary of elements\n    for num in array_nums1:\n        if num in freq and freq[num] > 0:\n            common.append(num)\n            freq[num] -= 1\n\n    return common"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of elements in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Initialize an empty list to store the intersection elements\n    intersection = []\n    \n    # Iterate over the elements in array_nums2 and check if they are present in freq_dict\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n    \n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create an empty set to store the intersection of the two arrays\n    intersection_set = set()\n    # iterate through the first array and check if each element is in the second array\n    for num in array_nums1:\n        if num in array_nums2:\n            # add the element to the intersection set if it is also in the second array\n            intersection_set.add(num)\n    # convert the intersection set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in array_nums2\n    freq_dict = {}\n    for num in array_nums2:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # initialize an empty list to store the intersection\n    intersection = []\n\n    # iterate through array_nums1 and check if each element is present in the dictionary\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] -= 1\n            if freq_dict[num] == 0:\n                # remove the element from the dictionary if its frequency becomes zero\n                del freq_dict[num]\n            else:\n                # add the element to the intersection if its frequency is greater than zero\n                intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store the unique elements from both arrays\n    set_intersection = set(array_nums1) & set(array_nums2)\n    # Convert the set back to a list and return it\n    return list(set_intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create an empty set to store the intersection\n    intersection = set()\n    \n    # Iterate through each number in the first array\n    for num1 in array_nums1:\n        # Check if the number exists in the second array\n        if num1 in array_nums2:\n            # If it does, add it to the set of intersection\n            intersection.add(num1)\n    \n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the first array\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Create a new list to store the intersection of the two arrays\n    intersection = []\n\n    # Iterate over the second array and check if the frequency of each element is present in the first array\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            # If the frequency is present, add the element to the intersection list and decrement its frequency\n            intersection.append(num)\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes in two arrays as input and returns the intersection of the two arrays.\n    '''\n    intersection_list = []\n    # Loop through the first array and check if each element exists in the second array\n    for num in array_nums1:\n        if num in array_nums2:\n            # If the element exists, add it to the intersection list\n            intersection_list.append(num)\n    return intersection_list"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # create an empty list to store the result\n    result = []\n\n    # loop through each element in the original list\n    for i in range(len(list)):\n        # add the original element to the result list\n        result.append(list[i])\n\n        # add the inserted element before the current element\n        if i > 0:\n            result.insert(i, element)\n\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list.\n    The function returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(element)\n        new_list.append(lst[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    # Create an empty list to store the modified list\n    modified_list = []\n    # Loop through the list and insert the element before each element\n    for i in range(len(lst)):\n        modified_list.append(elem)\n        modified_list.append(lst[i])\n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.extend(list[:i])\n        new_list.extend(list[i:])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result[1::2]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create a new list to hold the modified list\n    modified_list = []\n\n    # Iterate through the original list and insert the element at the beginning of each element\n    for i in range(len(list)):\n        modified_list.insert(0, element)\n        modified_list.insert(0, list[i])\n\n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(cmath.rect(number))\n    return complex_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        angle = cmath.phase(number)\n        radius = abs(number)\n        polar_coordinates.append((angle, radius))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.rect(num)\n        polar_num = cmath.polar(num)\n        print(f\"Polar coordinates of {num} are {polar_num[0]:.2f} + {polar_num[1]:.2fi}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        real, imag = num.real, num.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        result.append((mag, phase))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # loop through each complex number in the list\n    for num in numbers:\n        # use the abs() function to get the modulus of the complex number\n        modulus = abs(num)\n        # use the arg() function to get the argument of the complex number (in radians)\n        argument = cmath.phase(num)\n        # convert the modulus and argument to polar coordinates and print them\n        print(\"Modulus:\", modulus)\n        print(\"Argument (in radians):\", argument)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # Display the result\n        print(\"(%.2f, %.2f)\" % (r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # convert complex number to polar coordinates\n        x, y = cmath.polar(number)\n        print('({}, {})'.format(x, y))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_complex = complex(r, theta)\n        result.append(polar_complex)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            theta = cmath.phase(num)\n            print(\"({}, {})\".format(r, theta))\n        else:\n            print(\"Invalid input\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers and converts them to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        phi = cmath.phase(num)\n        polar_num = (r, phi)\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    '''\n    This function returns the count of integer elements in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j-i == n:\n                comb.append((l[i], l[j-1]))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create an iterator for combinations with replacement\n    combo = combinations_with_replacement(l, n)\n    # convert the iterator to a list of tuples\n    result = [tuple(comb) for comb in combo]\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # generate all possible combinations with repetition\n    color_combinations = combinations_with_replacement(l, n)\n\n    # convert the combinations to a list of tuples\n    color_combinations = list(color_combinations)\n\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Helper function to generate all combinations of length n with repetition\n    def generate_combinations(lst, n):\n        for i in range(len(lst) - n + 1):\n            yield lst[i:i+n]\n\n    # Convert the list to a set to remove duplicates, then convert back to list for tuple conversion\n    set_list = list(set(l))\n    combos = list(combinations_with_replacement(set_list, n))\n\n    # Create a list of tuples with the combinations and return it\n    result = []\n    for combo in combos:\n        result.append(tuple(combo))\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # initialize a boolean array to store if a number is prime or not\n    is_prime = [True] * (n+1)\n    # initialize count to 0\n    count = 0\n    # iterate over all numbers from 2 to n\n    for i in range(2, n+1):\n        # if a number is prime, set its value to False in the boolean array\n        if is_prime[i] == True:\n            count += 1\n            # iterate over all multiples of the number from i*2 to n\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n    # return the count of prime numbers\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    \n    count = 0\n    for i in range(2, n+1):\n        if primes[i]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime or not\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2,i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the length of the tuple with the maximum length\n    max_len = max(len(test_tup1), len(test_tup2))\n\n    # Initialize variables to hold the maximum values\n    max_val1 = max_val2 = 0\n\n    # Iterate through the tuples and compare the values at each index\n    for i in range(max_len):\n        if test_tup1[i] > test_tup2[i]:\n            max_val1 = max(max_val1, test_tup1[i])\n            max_val2 = max(max_val2, test_tup2[i])\n        elif test_tup1[i] < test_tup2[i]:\n            max_val1 = max(max_val1, test_tup2[i])\n            max_val2 = max(max_val2, test_tup1[i])\n\n    # Return a tuple containing the maximum values\n    return (max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The tuples have different lengths.\")\n        return\n    \n    # Initialize variables to store the maximum elements\n    max_ele1 = max_ele2 = float('-inf')\n    \n    # Loop through the elements of the tuples and compare them\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_ele1:\n            max_ele1 = test_tup1[i]\n        if test_tup2[i] > max_ele2:\n            max_ele2 = test_tup2[i]\n    \n    # Return the maximum element of the two tuples\n    return max(max_ele1, max_ele2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if both tuples are not empty\n    if test_tup1 and test_tup2:\n        # check if both tuples have the same length\n        if len(test_tup1) == len(test_tup2):\n            # iterate over the tuples and compare the elements\n            max_tup = ()\n            for i in range(len(test_tup1)):\n                if test_tup1[i] > test_tup2[i]:\n                    max_tup += (test_tup1[i],)\n                else:\n                    max_tup += (test_tup2[i],)\n            return max_tup\n        else:\n            return \"The given tuples have different lengths.\"\n    else:\n        return \"Both tuples are empty.\""
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n    return (max_1, max_2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Loop through each element of the tuples\n    for i in range(len(test_tup1)):\n        # If the current element in test_tup1 is greater than the current element in test_tup2,\n        # swap the two elements\n        if test_tup1[i] > test_tup2[i]:\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n\n    # Return the maximized tuple\n    return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the given tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return None\n    # check if the given tuples contain only integers\n    for num in test_tup1 + test_tup2:\n        if not isinstance(num, int):\n            print(\"Error: Both tuples must contain only integers.\")\n            return None\n    # initialize the maximum value to 0\n    max_val = 0\n    # loop through the tuples to find the maximum value\n    for i in range(len(test_tup1)):\n        # check if the current element in the first tuple is greater than the current element in the second tuple\n        if test_tup1[i] > test_tup2[i]:\n            # update the maximum value\n            max_val = max(max_val, test_tup1[i])\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n\n    # Compare the elements of each tuple and find the maximum\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n\n    # Create a new tuple with the maximum elements from each tuple\n    max_tup = (max_tup1, max_tup2)\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of same length.\")\n        return\n    \n    # Check if the tuples contain only integers\n    for num in test_tup1 + test_tup2:\n        if not isinstance(num, int):\n            print(\"The two tuples contain non-integer elements.\")\n            return\n    \n    # Sort the tuples in descending order\n    sorted_tup1 = sorted(test_tup1, reverse=True)\n    sorted_tup2 = sorted(test_tup2, reverse=True)\n    \n    # Combine the sorted tuples\n    max_tup = sorted_tup1 + sorted_tup2\n    \n    # Return the maximum tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create a tuple with the two given tuples concatenated\n    concatenated_tup = test_tup1 + test_tup2\n    # Sort the concatenated tuple in descending order\n    sorted_tup = sorted(concatenated_tup, reverse=True)\n    # Return the sorted tuple as the result\n    return sorted_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    is_prime = True\n    count = 0\n    \n    # Iterate from 2 to n-1\n    for i in range(2, n): \n        # Check if i is prime\n        for j in range(2, int(i**0.5)+1): \n            if i % j == 0: \n                is_prime = False\n                break\n        # If i is prime, increment count\n        if is_prime: \n            count += 1\n            if count == n: \n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Initialize variables\n    count = 0\n    current = 2\n    prime = False\n\n    # Loop until nth newman-shanks-williams prime is found\n    while not prime and count < n:\n        # Check if current number is prime\n        if all(current % i!= 0 for i in range(2, int(current ** 0.5) + 1)):\n            prime = True\n        count += 1\n\n        # Increment current number\n        current += 1\n\n    # Return nth newman-shanks-williams prime\n    if prime:\n        return current\n    else:\n        return \"There is no {}-th newman-shanks-williams prime number.\".format(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    i = 2\n    while i <= n:\n        count += 1\n        # Check if the current number is prime\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If it's prime, check if it's a newman-shanks-williams prime number\n            is_newman_prime = True\n            for j in range(2, int(i/2) + 1):\n                if i % j == 0:\n                    is_newman_prime = False\n                    break\n            if is_newman_prime:\n                print(i)\n                count += 1\n        i += 1\n    # If n is reached, return the count of newman-shanks-williams prime numbers found\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Define the list of primes up to 200\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n\n    # Find the nth prime number\n    for i in range(n):\n        prime = 0\n        for p in primes:\n            if i % p == 0:\n                prime += 1\n                if prime == 3:\n                    break\n        if prime == 0:\n            return p\n\n    # If the loop completes without finding the nth prime number, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to keep track of the number of digits\n    num_digits = 0\n    # Loop through the number until we reach a prime number\n    while True:\n        # Check if the number is a prime number\n        is_prime = True\n        # Loop through the first n digits of the number\n        for digit in str(n):\n            # Check if the digit is not a prime number\n            if digit!= '2' and digit!= '3' and digit!= '5':\n                is_prime = False\n                break\n        # If the number is a prime number, return the number\n        if is_prime:\n            return n\n        # Otherwise, increment the number by 1\n        else:\n            n += 1\n            # Increment the number of digits by 1\n            num_digits += 1\n    # If the loop completes without finding a newman\u2013shanks\u2013williams prime number, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize a list of primes to check against\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n\n    # Iterate over the primes and count the newman-shanks-williams primes\n    for p in primes:\n        # Calculate the number of newman-shanks-williams primes less than p\n        newman_shanks_williams_count = sum([1 for i in range(1, n+1) if (2*i*p) % (i+1) == 0])\n        # Check if there are newman-shanks-williams primes less than p\n        if newman_shanks_williams_count >= n:\n            count += 1\n            # If we have found the nth newman-shanks-williams prime, return it\n            if count == n:\n                return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a function to check if a number is prime \n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False \n        return True \n\n    # Initialize the nth newman-shanks-williams prime number \n    nth_newman_prime = 2\n    # Keep incrementing the nth newman-shanks-williams prime number until n is reached \n    for i in range(3, n+1): \n        # Check if the current nth newman-shanks-williams prime number is prime \n        if is_prime(nth_newman_prime): \n            # If it is prime, increment n and stop the loop \n            n += 1 \n            break \n        # If the nth newman-shanks-williams prime number is not prime, increment it \n        nth_newman_prime += 2 "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables for the nth newman\u2013shanks\u2013williams prime number and the current prime number\n    prime = 2\n    count = 0\n\n    # Loop until we have found the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        # Check if the current prime number is a newman\u2013shanks\u2013williams prime\n        if is_prime(prime) and is_newman_shanks_williams(prime):\n            count += 1\n        # If the current prime number is not a newman\u2013shanks\u2013williams prime, increment it and try again\n        else:\n            prime += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the variables for counting the number of prime factors\n    prime_count = 0\n    prime = 2\n\n    # Iterate until the prime_count reaches n\n    while prime_count < n:\n        # Check if the prime number is divisible by any number between 2 and the square root of the prime number\n        for i in range(2, int(prime ** 0.5) + 1):\n            if prime % i == 0:\n                break\n        else:\n            # If the prime number is not divisible by any number between 2 and the square root of the prime number, add it to the count and move on to the next prime number\n            prime_count += 1\n            prime += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1:\n        return 2\n    for i in range(3, int(n**0.5)+1):\n        if n % i == 0:\n            return i\n    return n"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # create a new tuple with the same length as the first tuple\n    result_tup = ()\n    # iterate over each element in the first tuple\n    for i in range(len(test_tup1)):\n        # perform division operation between corresponding elements of the tuples\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    # return the resulting tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_result = []\n    for i in range(len(test_tup1)):\n        division_result.append(test_tup1[i] / test_tup2[i])\n    return division_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n\n    # Perform element-wise division and return the result as a tuple\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] // test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    # create an empty list to hold the result\n    result_list = []\n    # perform element-wise division and append to result list\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    # return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Lengths of the tuples are not equal.\")\n        return\n    \n    # Perform element-wise division\n    result_tup = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples should be same.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The length of the tuples must be equal')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create an empty list to store the first part of the list\n    part1 = []\n    # loop through the list and add elements to the first part until it reaches the desired length\n    while len(part1) < L:\n        part1.append(list1.pop())\n    # create an empty list to store the second part of the list\n    part2 = []\n    # loop through the list and add elements to the second part until it reaches the end\n    while len(part2) < len(list1):\n        part2.append(list1.pop())\n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_len = len(list1)\n    mid_index = list_len//2\n    \n    if L <= 0 or L >= list_len:\n        return None\n    \n    first_part = list1[:mid_index]\n    second_part = list1[mid_index:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create a new list with the same values as list1\n    new_list = list(list1)\n    \n    # Split the new list into two parts where the first part has length L\n    first_part = new_list[:L]\n    second_part = new_list[L:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes a list and an integer L as input and returns a tuple with two lists. The first list contains the first L elements of the input list, and the second list contains the remaining elements of the input list.\n    '''\n    return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        mid = L\n    else:\n        mid = int(L/2) + 1\n    mid_list = list1[:mid]\n    rest_list = list1[mid:]\n    return (mid_list, rest_list)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    mid = length // 2\n    if length % 2 == 0:\n        first_part = list1[:mid]\n        second_part = list1[mid+1:]\n    else:\n        first_part = list1[:mid+1]\n        second_part = list1[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L >= len(list1):\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError('Length of L should not be greater than length of the list')\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert the height from centimeters to inches\n    h_inches = h_age / 2.54\n    \n    # Calculate the dog's age in dog's years\n    dog_years = h_inches / 70\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_per_month = 12\n    months_per_year = 12\n    years = h_age * years_per_month * months_per_year\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7*h_age + 11\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dob = input(\"Enter the date of birth (mm/dd/yyyy): \")\n    dob = dob.split('/')\n    dob = [int(x) for x in dob]\n    current_year = int(input(\"Enter the current year: \"))\n    age_years = current_year - dob[2]\n    age_months = dob[0] - 1\n    age_days = dob[1] - 1\n    if age_months < 0 or age_days < 0:\n        age_years -= 1\n        age_months += 12\n        age_days = 31 - dob[1]\n    else:\n        age_days = 31 - dob[1]\n    dog_years = age_years + (age_months / 12)\n    dog_months = age_months % 12\n    dog_days = age_days\n    if dog_months == 0:\n        dog_months = 12\n        dog_days = 0\n    else:\n        dog_months += 1\n    dog_age_info = f\"Dog's age in dog's years: {dog_years}\\n\"\n    dog_age_info += f\"Dog's age in dog's months: {dog_months}\\n\"\n    dog_age_info += f\"Dog's age in dog's days: {dog_days}\"\n    return dog_age_info"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert height to meters\n    h_meters = h_age * 0.0254\n\n    # calculate dog's age in dog's years\n    dog_age_years = 7 * h_meters\n\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = h_age * 7\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    # convert height to meters\n    meters = h_age * 0.0254\n\n    # calculate age in years\n    age_years = meters / 100\n\n    # convert age to dog years\n    dog_years = age_years * 7\n\n    # return the result as a float rounded to 2 decimal places\n    return round(dog_years, 2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0:\n        dog_years = h_age * 7\n    else:\n        dog_years = 0\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in years\n    dog_age_years = h_age / 7\n\n    # Calculate dog's age in months\n    dog_age_months = (h_age % 7) * 12\n\n    # Calculate dog's age in weeks\n    dog_age_weeks = dog_age_months / 4\n\n    # Calculate dog's age in days\n    dog_age_days = dog_age_weeks * 7\n\n    # Return the dog's age as a tuple\n    return (dog_age_years, dog_age_months, dog_age_weeks, dog_age_days)"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        raise ValueError(\"Step must be greater than or equal to 1.\")\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize a list to hold the resulting lists\n    result = []\n    # Initialize an index variable to keep track of the current element\n    i = 0\n    # Loop through the list\n    while i < len(S):\n        # If the current element is at an even index, add it to the current list and reset the index to the next even index\n        if i % 2 == 0:\n            result[-1].append(S[i])\n            i += step\n        # If the current element is at an odd index, add it to a new list and reset the index to the next odd index\n        else:\n            result.append([S[i]])\n            i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to hold the resulting lists\n    result = []\n    # Loop through each element in the input list\n    for i in range(0, len(S), step):\n        # Create a new list containing the current element and its subsequent elements\n        new_list = S[i:i+step]\n        # Add the new list to the result list\n        result.append(new_list)\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    # if step is greater than the length of S, just return the list\n    if step > len(S):\n        return [S]\n    # if the step is less than or equal to 1, return an empty list\n    if step <= 1:\n        return []\n    # if the length of S is less than the step, just split it into the length of S chunks\n    if len(S) < step:\n        return [S]\n    # otherwise, split S into chunks of size step, and then split each chunk into lists of size step\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Loop through the list of S, splitting every nth element into a new list\n    for i in range(0, len(S), step):\n        # Append the nth element to the new list\n        result.append(S[i])\n\n    # Return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Initialize an empty list to hold the resulting lists\n    result = []\n    \n    # Loop through each element of the input list\n    for i in range(len(S)):\n        # If the current element is divisible by the step size, append a new sublist with the current element and the next element\n        if i % step == 0 and i < len(S) - 1:\n            sublist = [S[i], S[i+1]]\n            result.append(sublist)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return [[]]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # calculate the lateral surface area\n    area = 6 * l * l\n    \n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    area = l ** 2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    area = 6 * l**2\n    print(\"The lateral surface area of a cube with side length\", l, \"is\", area)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    num = 1\n    while num <= n:\n        total += num**2\n        num += 2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum_of_squares = 0\n    num = 1\n\n    while num <= n:\n        sum_of_squares += num*num\n        num += 2\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count**2\n        count += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1, 2, -2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the square of the current odd natural number\n        square = i**2\n        # Add the square to the sum of squares\n        sum_of_squares += square\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count**2\n        count += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n + 1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    elif n == 2:\n        return '**'\n    else:\n        i = 1\n        while i <= n:\n            if i == 1:\n                print('*', end='')\n            else:\n                print(' '* (n - i) + '*')\n            i += 1\n        return ''"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the function to generate then'th star number\n    def generate_star_num(n):\n        # Initialize variables\n        count = 0\n        result = ''\n        # Loop through each digit of n and add it to the result string\n        while n > 0:\n            digit = n % 10\n            result = str(digit) + result\n            n = n // 10\n        # Return the result string\n        return result\n\n    # Call the generate_star_num function to get then'th star number\n    print(\"The\", n, \"th star number is:\", generate_star_num(n))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer 'n' and returns then'th star number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (5 * n * n) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize the number of stars to print\n    num_stars = 0\n\n    # Loop through the numbers 1 to n\n    for i in range(1, n+1):\n        # Increment the number of stars by 1\n        num_stars += 1\n        \n        # Add a star for every multiple of 3\n        if num_stars % 3 == 0:\n            print('*', end='')\n        else:\n            print(' ', end='')\n        \n        # Add a newline after every multiple of 10\n        if num_stars % 10 == 0:\n            print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        num = 1\n        for i in range(1, n+1):\n            num = num * i\n        return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize a variable to store the number of stars \n    count = 0\n\n    # loop through each number from 1 to n \n    for i in range(1, n+1): \n        # if the number is divisible by 5, print the number \n        if i % 5 == 0: \n            print(i) \n            # increment the count variable \n            count += 1\n\n    # return the count variable which stores the number of stars printed \n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the first 10 star numbers\n    start_num = 1\n    end_num = 10\n    for i in range(1, n):\n        # Find the middle number of the range\n        mid_num = (start_num + end_num) // 2\n        # If the middle number is odd, then add the number of stars needed for the middle number\n        if mid_num % 2!= 0:\n            print(f\"{mid_num} stars\")\n        # If the middle number is even, then add the number of stars needed for the middle number plus 1\n        else:\n            print(f\"{mid_num + 1} stars\")\n        # Update the start and end numbers based on the middle number\n        if mid_num % 2 == 0:\n            start_num = mid_num + 1\n        else:\n            end_num = mid_num\n    # Print the final result\n    if n % 2 == 0:\n        print(f\"{end_num} stars\")\n    else:\n        print(f\"{start_num} stars\")"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the result string with a space character\n    result = \" \"\n    # loop n times\n    for i in range(1, n+1):\n        # add a star character to the result string\n        result += \"*\"\n        # add a space character to the result string\n        result += \" \"\n    # print the result string\n    print(result)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the counter variable to zero\n    count = 1\n    # initialize the result variable to empty string\n    result = \"\"\n    # loop through the range of n\n    for i in range(1, n+1): \n        # add a star to the result string\n        result += \"*\"\n        # increment the counter variable\n        count += 1\n        # if the counter variable is equal to i, add a new line character to the result string\n        if count == i: \n            result += \"\\n\"\n    # return the result string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(find_star_num(n))"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper() # Convert the character to uppercase\n    ascii_value = ord(k) # Use the ord() function to get the ascii value of the character\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        k = ord(k)\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n    \n    return even_sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum_of_squares = 0\n    count = 0\n    num = 2\n\n    while count < n:\n        sum_of_squares += num**5\n        count += 1\n        num += 2\n\n    return sum_of_squares"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum_even_power += i**5\n        count += 1\n    \n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2): \n        # Add the even natural number raised to the fifth power to the sum\n        sum += i ** 5\n        \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    for i in range(n):\n        sum_even_power += i**5\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i**5)\n    return sum(even_numbers)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize the sum to zero\n    sum_even_power = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # add the even natural number raised to the fifth power to the sum\n        sum_even_power += i ** 5\n    \n    # return the sum\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # initialize the sum variable to 0\n    power_sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        \n        # add the i^5 to the power_sum variable\n        power_sum += i**5\n        \n    # return the power_sum\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the first\", n, \"even natural numbers that are raised to the fifth power is:\", even_Power_Sum(n))"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        rear = test_list[i][-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        rear_element = tup[-1]\n        result.append(rear_element)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear for tup in test_list for rear in tup[::-1]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        return result_tup\n    else:\n        print(\"The two tuples must have the same length.\")"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    \n    # create a new tuple with the elements of the first tuple and subtracted by the elements of the second tuple\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n\n    # loop through the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return 0\n\n    # Initialize the sum variable\n    even_sum = 0\n\n    # Calculate the factorial of n\n    factorial = math.factorial(n)\n\n    # Iterate through the even indices\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient of i and n\n        coeff = math.comb(n, i)\n\n        # Check if the coefficient is even\n        if i % 2 == 0:\n            even_sum += coeff\n\n    # Return the sum of even indices\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Calculate the even index binomial coefficients up to n\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    \n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.comb(n, i)\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nresult = even_binomial_Coeff_Sum(n)\nprint(\"The sum of even index binomial coefficients is:\", result)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize variables\n    total_sum = 0\n    \n    # Iterate over the range of n\n    for i in range(1, n+1):\n        # If the index is even, add the corresponding binomial coefficient to the sum\n        if i % 2 == 0:\n            term = math.factorial(n-i+1) // (math.factorial(i)*math.factorial(n-i))\n            total_sum += term\n            \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n + 1, 2):\n        coeff = math.comb(n, i)\n        sum += coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_Coeff = 0\n    for i in range(2, n+1):\n        for j in range(0, i//2+1):\n            sum_even_binomial_Coeff += math.comb(i, 2*j)\n\n    return sum_even_binomial_Coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize sum to zero\n    even_sum = 0\n\n    # loop through all possible values of k\n    for k in range(2, n+1):\n        # loop through all possible values of j\n        for j in range(k):\n            # if j is even, add to sum\n            if j % 2 == 0:\n                even_sum += math.comb(n, j)\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    sum_even_index_binomial_coeffs = 0\n    i = 0\n\n    # Calculate sum of even index binomial coefficients\n    while i <= n:\n        term = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_index_binomial_coeffs += term\n        i += 1\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_index_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeffs = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            if j % 2 == 0:\n                sum_even_binomial_coeffs += math.comb(n, j)\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*r**2*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * r * r # Formula for the area of a cylinder\n    volume = area * h # Volume of the cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = (3/4) * 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*r*h/3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r ** 2) * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n and returns a new dictionary that only includes entries where the value of the entry is greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i-1]!= test_tup[i]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1]!= test_tup[i]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return (3 * is_num_decagonal(n//2)) + 1\n    else:\n        return (5 * is_num_decagonal(n//2)) - 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the sum variable\n    decagonal_sum = 0\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of the decagonal numbers from 1 to i\n        decagonal_sum += i * (2*i - 1) // 2\n\n    # Return the nth decagonal number\n    return decagonal_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num += i*(i+1)\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Initialize the variable to store the decagonal number\n    decagonal_num = 0\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the value of i to the decagonal number\n        decagonal_num += i\n        # Multiply by (n+1)/2 to get the correct number of steps in the sequence\n        decagonal_num *= (n+1)//2\n\n    # Return the value of the decagonal number\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b\n\nn = int(input(\"Enter a number to find its decagonal number: \"))\nprint(f\"The {n}th decagonal number is {is_num_decagonal(n)}\")"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 0\n    for i in range(1, n+1):\n        decagonal += i*i\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_helper(n, k):\n        if n == 1:\n            return k\n        else:\n            return decagonal_helper(n-1, 4*k-3)\n    \n    return decagonal_helper(n, 1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function checks whether a given number is a decagonal number or not.\n    \"\"\"\n    if n % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize the sum to 1\n    sum_decagonal = 1\n\n    # Loop from 1 to n-1\n    for i in range(1, n):\n        # Calculate the value of the current decagonal number\n        current_decagonal = sum_decagonal + i\n\n        # Check if the current decagonal number is equal to n\n        if current_decagonal == n:\n            return True\n\n        # Add the current decagonal number to the sum\n        sum_decagonal += current_decagonal\n\n    # If we make it through the loop without finding a decagonal number that matches n,\n    # then n is not a decagonal number\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += i * (i+1) // 2\n    return num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements are unique,\n    and False otherwise.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements of the list are unique, and False otherwise.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return len(unique_list) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = list(set(test_list))\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Create a set from the list to remove duplicates and check if it is empty or not\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists have different lengths.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over the elements of the two lists\n    for i in range(len(nums1)):\n        # Subtract the corresponding elements from the lists\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # create an empty list to store the result\n    result = []\n\n    # loop through each element of the lists\n    for i in range(len(nums1)):\n        # subtract the corresponding elements of the lists\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Check if the number is negative\n    if n < 0:\n        return False\n    \n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Initialize the frequency dictionary\n    freq = {}\n    \n    # Loop through the string and update the frequency dictionary\n    for digit in num_str:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Loop through the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > 1 and freq[digit] > int(digit):\n            return False\n    \n    # If all the conditions are satisfied, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n\n    # Convert the integer to a string and loop through each character\n    for digit in str(n):\n        # If the character is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # Loop through each key-value pair in the dictionary\n    for digit, count in freq.items():\n        # Check if the frequency of the digit is greater than or equal to the digit itself\n        if count > n // 10:\n            return False\n\n    # If we've made it this far, the integer passes the validation test\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    num_str = str(n)\n\n    # Create an empty dictionary to store the frequency of each digit\n    freq = {}\n\n    # Loop through each character in the string and update the frequency of each digit\n    for char in num_str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Loop through each digit in the string and check if its frequency is greater than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] < digit:\n            return False\n\n    # If no errors are found, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = []\n    for i in range(10):\n        count = n // (10 ** i)\n        digits.append(count)\n\n    for i in range(9, -1, -1):\n        if digits[i] > digits[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0]*10  # initialize frequency list\n\n    # count frequency of each digit in the integer\n    for digit in digits:\n        freq[digit] += 1\n\n    # check if frequency of each digit is less than or equal to the digit itself\n    for i in range(len(freq)):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize an empty dictionary to store the frequency of digits\n    freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already present in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # Loop through each digit in the integer again and check if its frequency is less than or equal to itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    # If all digits have a frequency of 1 or less, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    \"\"\"\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {} # initialize empty dictionary for digit frequency\n    \n    # loop through each digit in the number\n    for i in range(10): \n        # check if digit appears in the number\n        if n % 10 == i: \n            # if it does, increment its frequency in the dictionary\n            freq[i] = freq.get(i, 0) + 1\n            \n    # check if frequency of each digit is less than or equal to the digit itself\n    for digit in freq: \n        if freq[digit] > digit: \n            # if it's greater, return False\n            return False\n    \n    # if all digits have frequencies less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    # Initialize the frequency dictionary\n    freq_dict = {}\n    \n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its value\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        # Otherwise, add the digit to the dictionary with a value of 1\n        else:\n            freq_dict[digit] = 1\n    \n    # Loop through each digit in the dictionary and check if its frequency is greater than or equal to its value\n    for digit, freq in freq_dict.items():\n        if freq >= int(digit):\n            return False\n    \n    # If all digits pass the validation check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # Initialize a list of 10 zeros\n    max_freq = 0  # Initialize a variable to store the highest frequency seen so far\n    \n    # Count the frequency of each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1\n        if freq[int(digit)] > max_freq:\n            max_freq = freq[int(digit)]\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > 0 and digit!= n % 10:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(lst, elem):\n    '''\n    Checks whether all items in a list are equal to a given element.\n    '''\n    if len(lst) == 0:\n        return True\n    \n    if lst[0] == elem:\n        return check_element(lst[1:], elem)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    Check whether all items in a list are equal to the given element.\n\n    :param lst: a list\n    :param element: an element to compare with each item in lst\n    :return: True if all items in lst are equal to element, False otherwise\n    \"\"\"\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i] == element for i in range(len(list)))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'a(?:b{2,3})'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a([bB]{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*?b{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?:b{2,3}|)')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[bB]*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=[b]{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b(?:b{2}){0,1})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'\\ba(?:b{2,3})+b\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    sum_array = [0] * (n * k)\n    sum_array[0] = a[0]\n    for i in range(1, n * k):\n        sum_array[i] = sum_array[i-1] + a[i%n]\n        if i >= k:\n            if sum_array[i] > max_sum:\n                max_sum = sum_array[i]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(k):\n            if j == 0:\n                max_sum = max(max_sum, a[i])\n            elif j == k-1:\n                max_sum = max(max_sum, a[i] + a[i+1])\n            else:\n                max_sum = max(max_sum, a[i] + a[i+1] + a[i+2])\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Parameters:\n    a: list or numpy array\n        The original array.\n    n: int\n        The length of the original array.\n    k: int\n        The number of times to repeat the array.\n\n    Returns:\n    int\n        The maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Compute the sum of the first k elements of the original array\n    sum_of_first_k = sum(a[:k])\n\n    # Initialize variables to store the maximum sum of the modified array and the current sum of the modified array\n    max_sum = sum_of_first_k * k\n    current_sum = sum_of_first_k\n\n    # Iterate over the rest of the original array\n    for i in range(k, n):\n        # Update the current sum of the modified array with the current element and subtract the sum of the first k elements\n        current_sum = current_sum - sum_of_first_k + a[i]\n        # Update the maximum sum of the modified array if the current sum is greater than the maximum\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_arr = a * k\n    mod_arr = list(mod_arr)\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += mod_arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i >= k-1:\n            curr_sum -= mod_arr[i-k+1]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a modified array by repeating the given array k times\n    modified_array = []\n    for i in range(n):\n        modified_array.append(a[i]*k)\n    \n    # Find the maximum subarray sum\n    max_sum = 0\n    for i in range(len(modified_array)):\n        for j in range(i, len(modified_array)):\n            current_sum = 0\n            for k in range(i, j+1):\n                current_sum += modified_array[k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # create a modified array by repeating the original array k times\n    modified_array = []\n    for i in range(k):\n        modified_array.extend(a)\n    # sort the modified array in decreasing order\n    modified_array.sort(reverse=True)\n    # initialize the maximum sum and its index\n    max_sum = modified_array[0]\n    max_index = 0\n    # iterate through the modified array\n    for i in range(n):\n        # find the sum of the current subarray starting from the i-th element\n        subarray_sum = modified_array[0]\n        for j in range(1, k):\n            subarray_sum += modified_array[j]\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n                max_index = i - j + 1\n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    sum_arr = [0]*k\n    max_sum_arr = [0]*k\n    \n    # Add first element to sum_arr and max_sum_arr\n    sum_arr[0] = a[0]\n    max_sum_arr[0] = a[0]\n    \n    # Calculate sum of elements of array for first k elements\n    for i in range(1, k):\n        sum_arr[i] = a[i] + sum_arr[i-1]\n        max_sum_arr[i] = max(max_sum_arr[i-1], sum_arr[i])\n        \n    # Calculate maximum sum of array formed by repeating k times\n    for i in range(k, n):\n        # If current element is less than or equal to the sum of previous elements, update max_sum\n        if a[i] <= sum_arr[i-k]:\n            max_sum = max(max_sum, a[i])\n        # If current element is greater than the sum of previous elements, update sum_arr and max_sum_arr\n        else:\n            sum_arr[i%k] = a[i] + sum_arr[(i-k+k)%k]\n            max_sum_arr[i%k] = max(max_sum_arr[(i-k+k)%k], sum_arr[i%k])\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Repeat the given array k times to form the modified array\n    modified_array = [x for i in range(k) for x in a]\n    # Find the maximum sum of a contiguous array in the modified array\n    max_sum = max(sum(modified_array[:i+1]) for i in range(n))\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and the sum of the current array\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Repeat the array k times and add the values to the current sum\n    for i in range(k):\n        current_sum += a[0]\n        # Calculate the sum of the modified array\n        modified_sum = current_sum - (i * a[0])\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # create a new array of length n*k\n    modified_array = []\n    for i in range(n*k):\n        modified_array.append(a[i % n])\n\n    # find the maximum sum subarray\n    max_sum = float('-inf')\n    for i in range(n):\n        max_sum = max(max_sum, max(modified_array[i:i+k]))\n\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initializing the sum variable\n    sum_squares = 0\n    # iterating through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # adding the square of the even number to the sum variable\n        sum_squares += i**2\n    # returning the sum of squares of first n even natural numbers\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    # Initialize a variable to store the sum of squares of even natural numbers\n    sum_of_squares = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of each even natural number to the sum of squares\n        sum_of_squares += i*i\n\n    # Return the sum of squares of first n even natural numbers\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_lengths.append(len(lst))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for item in list1:\n        if len(max_list) < len(item):\n            max_list = item\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_lengths) or (len(list1[i]) == len(max_lengths) and list1[i][0] < max_lengths[0][0]):\n            max_lengths = [list1[i]]\n        elif len(list1[i]) == len(max_lengths):\n            max_lengths.append(list1[i])\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize an empty list to store the maximum length lists\n    max_list = []\n    # Loop through each element in the list of lists\n    for sublist in list1:\n        # Find the length of the current sublist\n        length = len(sublist)\n        # Check if the length is greater than the current maximum length\n        if length > len(max_list):\n            # If it is, add the sublist to the max_list\n            max_list = sublist\n    # Return the max_list\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize a list to store the maximum length for each list in the input list\n    max_lengths = []\n    # loop through each list in the input list\n    for lst in list1:\n        # find the maximum length of this list\n        max_length = max([len(x) for x in lst])\n        # add this maximum length to the list of maximum lengths for this list\n        max_lengths.append(max_length)\n    # return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize an empty list to store the maximum length of each sublist\n    max_lengths = []\n\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Initialize a variable to store the length of the current sublist\n        length = len(sublist)\n        # If the length is greater than the current maximum length, update the maximum length\n        if length > max_lengths[-1] if max_lengths else length:\n            max_lengths.append(length)\n\n    # Return the maximum length of any sublist\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths of each sublist\n    max_lengths = []\n    # Iterate through each sublist in the main list\n    for sublist in list1:\n        # Initialize an empty list to store the lengths of each element in the sublist\n        sublist_lengths = []\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # Append the length of the element to the list of lengths of each element in the sublist\n            sublist_lengths.append(len(str(element)))\n        # Find the maximum length of the sublist by using the max() function on the list of lengths\n        sublist_length = max(sublist_lengths)\n        # Append the maximum length of the sublist to the list of maximum lengths\n        max_lengths.append(sublist_length)\n    # Find the maximum length of the main list by using the max() function on the list of maximum lengths\n    max_length = max(max_lengths)\n    # Return the maximum length of the main list\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    max_length = max(lengths)\n    return [i for i in lengths if i == max_length]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1 and k == 1:\n        return 1\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(1, k + 1):\n            if i == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a 2D matrix to store the count of ways of painting the fence for different combinations of colors.\n    ways = [[0 for i in range(k+1)] for j in range(n+1)]\n    \n    # Initialize the first row and first column with 1 as there is only one way to paint the fence with one color.\n    ways[0][1] = 1\n    ways[1][0] = 1\n    \n    # Fill the rest of the matrix using the recurrence relation.\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            if ways[i-1][j] == 1:\n                ways[i][j] = ways[i-1][j]\n            elif ways[i][j-1] == 1:\n                ways[i][j] = ways[i][j-1]\n            else:\n                ways[i][j] = ways[i-1][j-1]\n    \n    # Return the count of ways of painting the fence for the given fence with n posts and k colors.\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # number of ways to paint the fence with n posts and k colors\n    ways = 0\n    # initialize a boolean array of size n to store the color status of each post\n    colors = [False] * n\n    # check all possible colors for each post\n    for i in range(n):\n        for j in range(k):\n            # if there are more than 2 adjacent posts with the same color, skip this color and try the next one\n            if colors[i] and colors[i-1] and colors[i+1]:\n                continue\n            # if the current color is valid, paint the fence with this color\n            if j == 0 and not colors[i]:\n                colors[i] = True\n                ways += 1\n            elif j == k-1 and not colors[i]:\n                colors[i] = True\n                ways += 1\n            elif j < k-1 and not colors[i-1] and not colors[i+1]:\n                colors[i] = True\n                ways += 1\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways(curr_color, curr_count, no_adjacent_same_color_posts):\n        if curr_count == n:\n            return 1\n        no_adjacent_same_color_posts += 1\n        if no_adjacent_same_color_posts > k:\n            return 0\n        \n        ways = 0\n        for i in range(k):\n            if i!= curr_color and i not in adjacent_colors:\n                ways += count_ways(i, curr_count + 1, no_adjacent_same_color_posts)\n        return ways\n    \n    adjacent_colors = [i for i in range(k)]\n    no_adjacent_same_color_posts = 0\n    return count_ways(0, 0, no_adjacent_same_color_posts)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Function to count the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    def count_ways(n, k, curr_color, curr_post, count):\n        # Base case: If the number of posts is 0, then there is 1 way to paint the fence\n        if n == 0:\n            return 1\n\n        # Recursive case:\n        # Try to paint the current post with the current color\n        ways_with_current_color = count_ways(n-1, k, curr_color, curr_post, count)\n\n        # Try to paint the current post with the next available color\n        if curr_post < n-1:\n            ways_with_next_color = count_ways(n-1, k, (curr_color + 1) % k, curr_post+1, count)\n\n        # Add the two ways to the count and return the final result\n        return ways_with_current_color + ways_with_next_color\n\n    # Call the count_ways function to find the number of ways to paint the fence with the given constraints\n    return count_ways(n, k, 0, 0, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    # initialize an empty list to store the count of ways\n    count = [] \n\n    # loop through all the possible fences with n posts\n    for i in range(2**n): \n        # initialize an empty list to store the color of each post\n        colors = [] \n\n        # loop through all the colors available\n        for j in range(k): \n            # check if the current bit of the binary number i indicates that the jth color is used\n            if (i & (1 << j)): \n                # if the jth color is used, append it to the list of colors\n                colors.append(j+1) \n\n        # check if the number of distinct colors in the current fence is at most 2\n        if len(set(colors)) <= 2: \n            # if it is, append the count of the current fence to the list\n            count.append(1) \n\n    # return the sum of all the counts\n    return sum(count)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i > j:\n                dp[i] += dp[i - j]\n            elif j == k - 1:\n                dp[i] += 1\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def helper(start, end, color_count): \n        if start > end: \n            return 1\n        \n        if color_count[color_list[start-1]] == 0: \n            return helper(start+1, end, color_count)\n        else: \n            return helper(start+1, end, color_count) + helper(start, end-1, color_count)\n\n    color_list = list(range(1, k+1))\n    return helper(1, n, [0]*k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(start, end, color_count):\n        if start == end:\n            if color_count == k:\n                ways.append(start)\n            return\n        if start + 1 <= end:\n            if color_count < k:\n                backtrack(start + 1, end, color_count + 1)\n            backtrack(start + 1, end, color_count)\n        if start - 1 >= 0:\n            if color_count < k:\n                backtrack(start - 1, end, color_count + 1)\n            backtrack(start - 1, end, color_count)\n\n    ways = []\n    backtrack(0, n - 1, 0)\n    return len(ways)\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_no_of_ways_helper(n, k, colors, num_ways, max_adj_colors):\n        if n == 0:\n            return num_ways\n        if len(colors) == 0 or len(colors) == k:\n            return 0\n        if max_adj_colors > 2:\n            return 0\n        num_ways += count_no_of_ways_helper(n-1, k, colors, num_ways, max_adj_colors)\n        for i in range(len(colors)):\n            if i > 0 and colors[i] == colors[i-1]:\n                continue\n            num_ways += count_no_of_ways_helper(n-1, k, colors[:i] + colors[i+1:], num_ways, max_adj_colors)\n        return num_ways\n\n    return count_no_of_ways_helper(n, k, [0]*k, 0, 0)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # check if m is zero, return zero if it is\n    if m == 0:\n        return 0\n\n    # calculate the number of times n needs to be divided by m\n    num_divs = n // m\n\n    # calculate the remaining remainder when n is divided by m\n    rem = n % m\n\n    # check if the remaining remainder is greater than or equal to the half of the divisor m\n    if rem >= m//2:\n        num_divs += 1\n\n    # return the quotient\n    return num_divs"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:  \n        return \"Error: Division by zero is not allowed.\"  \n    else:  \n        return n//m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n/m\n    return int(q)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #find the quotient of two numbers by dividing the larger number by the smaller number\n    quotient = n/m\n    #round down the quotient to the nearest integer using the int() function\n    quotient = int(quotient)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the length of the hypotenuse\n    hypo = math.sqrt(w**2 + h**2)\n\n    # Calculate the angle opposite the hypotenuse\n    theta = math.degrees(math.acos((w**2 + h**2 - hypo**2)/(2*w*h)))\n\n    # Calculate the third side\n    third = hypo*math.sin(math.radians(theta))\n\n    return third"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the first angle\n    a = math.sqrt(w**2 + h**2)\n    \n    # calculate the second angle\n    b = math.sqrt(w**2 + h**2 - a**2)\n    \n    # calculate the third angle\n    c = a\n    \n    # print the results\n    print(\"The third side of the right angled triangle is:\", c)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the second side\n    s = math.sqrt(w**2 + h**2)\n    # calculate the third side\n    third_side = s * math.sin(math.pi/6)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Find the semi-perimeter of the triangle\n    s = (w**2 + h**2)**0.5\n    \n    # Find the area of the triangle\n    area = (w*h)/2\n    \n    # Find the third side of the triangle using Heron's formula\n    third_side = math.sqrt(s * (s-w) * (s-h) * (s-area))\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w*w + h*h)\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the hypotenuse\n    length = math.sqrt(w**2 + h**2)\n    # Calculate the third side of the right angled triangle\n    third_side = math.sin(math.radians(60)) * length\n    # Return the third side of the right angled triangle\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        s = w\n    else:\n        s = h\n    c = math.sqrt(w**2 + h**2 - 2*w*h)\n    third_side = s + c\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"The list is empty\")\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize maxval to the first element of the list\n    maxval = listval[0]\n\n    # iterate through the rest of the list\n    for num in listval[1:]:\n        # check if the current number is greater than maxval\n        if num > maxval:\n            # if it is, update maxval to the current number\n            maxval = num\n\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize variables\n    max_val = None\n    max_type = None\n\n    # Iterate through the list and compare values\n    for val in listval:\n        if val is None:\n            # If the value is None, ignore it\n            continue\n        if type(val) is int:\n            if max_val is None or val > max_val:\n                max_val = val\n                max_type = type(val)\n        elif type(val) is float:\n            if max_val is None or val > max_val:\n                max_val = val\n                max_type = type(val)\n        elif type(val) is str:\n            if max_val is None or val > max_val:\n                max_val = val\n                max_type = type(val)\n        else:\n            # If the value is not an integer, float, or string, ignore it\n            continue\n\n    # Return the maximum value and its data type\n    return max_val, max_type"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initializing maximum value to be the first element of the list\n    max_val = listval[0]\n    # Loop through the list and compare each element with the current maximum value\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        print(\"Input should be a list!\")\n        return\n    \n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    \n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\nprint(sum_div(28))  # Output: 21"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Use a list comprehension to find all divisors of the given number\n    divisors = [i for i in range(1, number+1) if number % i == 0]\n    # Calculate the sum of the divisors and return it\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Initialize variables\n    divisor = 2\n    sum_div = 0\n\n    # Iterate through all divisors of number\n    while divisor <= number:\n        if number % divisor == 0:\n            sum_div += divisor\n        divisor += 1\n\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize sum variable to 0\n    sum_div = 0\n    \n    # loop through each number from 1 to number/2\n    for i in range(1, int(number/2)+1):\n        # check if i is a divisor of number\n        if number % i == 0:\n            # add i to sum_div if number is divisible by i\n            sum_div += i\n    \n    # return the sum of all divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # initialize sum variable to 0\n    total_div = 0\n    \n    # loop through all numbers from 1 to the number itself\n    for i in range(1, number+1):\n        \n        # check if number is divisible by i\n        if number % i == 0:\n            \n            # if number is divisible by i, add it to total_div\n            total_div += i\n            \n    # return total_div as the sum of all divisors of number\n    return total_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    # Helper function for counting inversions in two subarrays of the array\n    def count_inversions(arr, left, right): \n        if left >= right: \n            return 0\n        \n        # Find the pivot point and partition the array into three parts - elements less than pivot, elements equal to pivot, and elements greater than pivot\n        pivot_index = partition(arr, left, right)\n        \n        # Count the inversions in each of the three parts recursively\n        inversion_count_left = count_inversions(arr, left, pivot_index-1)\n        inversion_count_right = count_inversions(arr, pivot_index+1, right)\n        inversion_count_pivot = count_inversions(arr, pivot_index, right)\n        \n        # Return the total number of inversions in the entire array\n        return inversion_count_left + inversion_count_right + inversion_count_pivot - (pivot_index - left)\n    \n    # Helper function for partitioning the array into three parts - elements less than pivot, elements equal to pivot, and elements greater than pivot\n    def partition(arr, left, right): \n        pivot = arr[right] # Choose the last element as the pivot\n        i = left - 1 # Initialize the index of the first element greater than the pivot\n        for j in range(left, right): \n            if arr[j] <= pivot: \n                i += 1 # Increment the index of the first element greater than the pivot\n                arr[i], arr[j] = arr[j], arr[i] # Swap the elements if they are in the wrong order\n        arr[i+1], arr[right] = arr[right], arr[i+1] # Swap the pivot element with the element after the last element greater than the pivot\n        return i+1 # Return the index of the pivot element\n    \n    # Call the count_inversions function with the input array\n    return count_inversions(arr, 0, len(arr)-1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n\n    # sort the array in ascending order\n    arr = sorted(arr)\n\n    # initialize count variable\n    count = 0\n\n    # iterate through the array\n    for i in range(1, len(arr)):\n\n        # iterate through the range of the current element to the end of the array\n        for j in range(i):\n\n            # if the current element is less than the previous element\n            if arr[i] < arr[j]:\n                count += i - j\n\n    # return the count of inversions\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Function to merge two sorted arrays\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    # Function to merge two sorted arrays\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    # Sort the array\n    arr = merge_sort(arr)\n\n    # Count the inversions\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += len(arr) - i - j\n                break\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Traverse through the array and count inversions\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            inv_count += i\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Divide and Conquer approach\n    for i in range(n//2):\n        left = arr[:i+1]\n        right = arr[i+1:]\n        inv_count += merge(left, right)\n\n    return inv_count\n\ndef merge(left, right):\n    '''\n    Merge two sorted arrays to get a single sorted array.\n    '''\n    n1 = len(left)\n    n2 = len(right)\n    i = j = 0\n    inv_count = 0\n    merged = []\n\n    # Merge the two arrays\n    while i < n1 and j < n2:\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            inv_count += n1 - i\n\n    # Append the remaining elements of left or right array\n    merged += left[i:]\n    merged += right[j:]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Create a new array to store the sorted array\n    sorted_arr = []\n\n    # Use merge sort algorithm to sort the input array\n    merge_sort(arr, sorted_arr)\n\n    # Count the inversions in the sorted array\n    inv_count = 0\n    i = 0\n    j = len(sorted_arr) - 1\n\n    while i < len(sorted_arr) and j >= 0:\n        if sorted_arr[i] > sorted_arr[j]:\n            inv_count += len(sorted_arr) - i - 1\n            i += 1\n        else:\n            j -= 1\n\n    return inv_count\n\n\ndef merge_sort(arr, sorted_arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half, sorted_arr)\n        merge_sort(right_half, sorted_arr)\n\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                sorted_arr[k] = left_half[i]\n                i += 1\n            else:\n                sorted_arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            sorted_arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            sorted_arr[k] = right_half[j]\n            j += 1\n            k += 1\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    else:\n        mid = n // 2\n        left_inv = get_Inv_Count(arr[:mid])\n        right_inv = get_Inv_Count(arr[mid:])\n        inv = merge(arr[:mid], arr[mid:], n)\n        return left_inv + right_inv + inv\n\ndef merge(left, right, n):\n    i = j = inv = 0\n    while i < n and j < n:\n        if left[i] < right[j]:\n            arr[i], arr[j], arr[i+j] = left[i], right[j], arr[i+j]\n            i += 1\n            inv += n - i\n        else:\n            arr[i], arr[j], arr[i+j] = right[j], left[i], arr[i+j]\n            j += 1\n            inv += n - j\n    while i < n:\n        arr[i], arr[j], arr[i+j] = left[i], right[j], arr[i+j]\n        i += 1\n        j += 1\n        inv += n - i\n    while j < n:\n        arr[i], arr[j], arr[i+j] = right[j], left[i], arr[i+j]\n        i += 1\n        j += 1\n        inv += n - j\n    return inv"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sorting the array\n    arr.sort()\n\n    # Initializing the count variable\n    count = 0\n\n    # Traverse through the array\n    for i in range(len(arr)): \n        # Traverse through the array in reverse order\n        for j in range(i+1, len(arr)): \n            # If the element at index i is greater than the element at index j, increment the count variable\n            if arr[i] > arr[j]: \n                count += (j - i)\n\n    # Return the count of inversions\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1, list):\n        flattened_list = []\n        for item in list1:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n    else:\n        return list1"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened version of the list.\n\n    :param lst: The nested list to be flattened.\n    :return: A flattened version of the input list.\n    \"\"\"\n    flattened_lst = []\n    for item in lst:\n        if type(item) is list:\n            flattened_lst += flatten_list(item)\n        else:\n            flattened_lst.append(item)\n    return flattened_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    max_aggr = defaultdict(int)\n\n    for sale in stdata:\n        date, quantity, product, price = sale\n        max_aggr[product] += quantity * price\n\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the max aggregate for each month\n    max_agg = defaultdict(int)\n    # iterate over the list of tuples\n    for (date, amount) in stdata:\n        # split the date string into month and year\n        month, year = date.split('-')\n        # get the current year and month from the defaultdict\n        curr_agg = max_agg[year][int(month)]\n        # update the max aggregate for that month\n        if amount > curr_agg:\n            max_agg[year][int(month)] = amount\n    # find the maximum aggregate for each year\n    max_agg_year = max(max_agg.values(), key=len)\n    # find the maximum aggregate for the entire list\n    max_agg_all = max([max_agg[year][month] for year in max_agg for month in range(1, 13)], default=0)\n    # return the maximum aggregate for the entire list or for each year\n    return max_agg_all if len(max_agg_year) == 12 else max_agg_year"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    max_agg[''] = 0\n    for st in stdata:\n        if st[0] == '':\n            max_agg[''] = max(max_agg[''], st[1])\n        else:\n            max_agg[st[0]] = max(max_agg[st[0]], st[1])\n    max_agg = max(max_agg.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples (name, age, salary) and returns the maximum aggregate value.\n    '''\n    max_salary = 0\n    max_dict = defaultdict(int)\n\n    for name, age, salary in stdata:\n        if salary > max_salary:\n            max_salary = salary\n            max_dict = defaultdict(int)\n            max_dict[name] = salary\n        elif salary == max_salary:\n            max_dict[name] = salary\n\n    max_dict = dict(max_dict)\n    max_dict = {k: v for k, v in max_dict.items() if v == max_salary}\n    max_dict = max(max_dict.values())\n\n    return max_dict"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples representing transactions and returns the maximum aggregate.\n    '''\n\n    # create a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # iterate through the list of transactions\n    for t in stdata:\n        # extract the customer and the amount of the transaction\n        cust, amt = t\n\n        # update the maximum aggregate for the customer\n        max_aggr[cust] = max(max_aggr[cust], amt)\n\n    # find the maximum aggregate across all customers\n    max_agg = max(max_aggr.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for t in stdata:\n        for i in range(len(t)):\n            max_agg[i] = max(max_agg[i], t[i])\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    for item in stdata:\n        agg_dict[item[0]] += item[1]\n    max_agg = max(agg_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    max_val = 0\n    for _, _, value in stdata:\n        if value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    st_data = defaultdict(list)  # defaultdict to store the maximum aggregate for each customer\n    max_aggregate_list = []\n    \n    for item in stdata:\n        st_data[item[0]].append(item[1])  # append the maximum aggregate for each customer\n    \n    for customer in st_data:\n        max_agg = max(st_data[customer])  # calculate the maximum aggregate for each customer\n        max_aggregate_list.append((customer, max_agg))  # append the customer and maximum aggregate to a list\n    \n    return max_aggregate_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for i in stdata:\n        for j in i:\n            max_dict[j] += i[j]\n    return max(max_dict.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Define the base case when n is 1\n    if n == 1:\n        return 2\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Calculate the number of ways to form 2n-1 binary sequences\n    ways = 1\n    for i in range(n):\n        ways *= 2\n    \n    # Iterate through all binary sequences of length 2n-1\n    for i in range(2, ways + 1):\n        # Extract the first n bits and the last n bits of the sequence\n        first_n = bin(i)[2:n+2]\n        last_n = bin(i)[n+2:]\n        \n        # Calculate the sum of first n bits and the sum of last n bits\n        sum_first_n = int(first_n, 2)\n        sum_last_n = int(last_n, 2)\n        \n        # If the sum of first n bits is same as the sum of last n bits, increment the count\n        if sum_first_n == sum_last_n:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n): \n        for j in range(2**n): \n            if i + j == 2**(n*2): \n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    else:\n        # Count the number of sequences for each value of n\n        count_n_1 = count_binary_seq(n-1)\n        count_n_2 = count_binary_seq(n-2)\n        # Count the number of sequences for each value of (n-1) bits\n        count_n_1_bits = count_binary_seq(n-1)\n        count_n_2_bits = count_binary_seq(n-2)\n        # Count the number of sequences for each value of (n-2) bits\n        count_n_2_1 = count_binary_seq(n-2)\n        # Calculate the sum of first n bits for each sequence\n        sum_n_1 = [0, 1] * n\n        sum_n_2 = [0, 1] * n\n        # Calculate the sum of last n bits for each sequence\n        for i in range(n):\n            sum_n_1[i] = sum_n_1[i] + count_n_1_bits[i]\n            sum_n_2[i] = sum_n_2[i] + count_n_2_bits[i]\n        # Count the number of sequences that satisfy the condition\n        count = 0\n        for i in range(2**n):\n            # Check if the sum of first n bits is equal to the sum of last n bits\n            if sum_n_1[i % n] == sum_n_2[(i >> n) % n]:\n                count = count + 1\n        return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if sum(int(digit) for digit in bin(i)[2:]) == sum(int(digit) for digit in bin(i)[3:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Initialize the count and the sum of first n bits and last n bits\n    count = 0\n    sum_first_n = 0\n    sum_last_n = 0\n    \n    # Generate all possible binary sequences of length 2n\n    for i in range(2 ** n):\n        # Extract the last n bits\n        last_n = i & ((1 << n) - 1)\n        \n        # Extract the first n bits\n        first_n = i >> n\n        \n        # Calculate the sum of the first n bits\n        for j in range(n):\n            if first_n & (1 << j):\n                sum_first_n += 2 ** j\n        \n        # Calculate the sum of the last n bits\n        for j in range(n):\n            if last_n & (1 << j):\n                sum_last_n += 2 ** j\n        \n        # Compare the sum of first n bits and last n bits\n        if sum_first_n == sum_last_n:\n            count += 1\n        \n        # Reset the sum of first n bits and last n bits\n        sum_first_n = 0\n        sum_last_n = 0\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = sum(int(digit) for digit in format(i, f'0{2*n}b')[::-1])\n        last_sum = sum(int(digit) for digit in format(i, f'0{n}b'))\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n-1):\n        count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        for j in range(i, 2**n):\n            if sum(i[:n]) == sum(j[-n:]):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n+1)): \n        if sum(int(x) for x in bin(i)[2:].zfill(n)) == sum(int(x) for x in bin(i-1)[2:].zfill(n)): \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        k = i ^ (2**(n-1))\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(k)[2:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, 1 + dict_depth(d[key]))\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = max(depth, 1 + dict_depth(item))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d.keys():\n        if isinstance(d[key], dict):\n            depth = max(depth, 1 + dict_depth(d[key]))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    while d:\n        depth += 1\n        d = d.values()\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the maximum depth\n    max_depth = 0\n    \n    # Recursively traverse the dictionary\n    def traverse(d, depth):\n        # Increase the depth by 1\n        new_depth = depth + 1\n        \n        # Check if the new depth is greater than the current maximum\n        if new_depth > max_depth:\n            max_depth = new_depth\n        \n        # Recursively traverse the sub-dictionaries\n        for k, v in d.items():\n            if isinstance(v, dict):\n                traverse(v, new_depth)\n    \n    # Call the recursive function to traverse the dictionary\n    traverse(d, 0)\n    \n    # Return the maximum depth found\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k in d:\n        if isinstance(d[k], dict):\n            depth += 1\n            if depth >= 1:\n                return depth + dict_depth(d[k])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n        return depth\n    elif isinstance(d, list):\n        depth = max(dict_depth(v) for v in d)\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after rotations.\n    \n    Args:\n    arr (list): A list of integers representing the array.\n    ranges (list): A list of two integers representing the range of values to rotate around.\n    rotations (int): The number of rotations to perform.\n    index (int): The index of the element to find.\n    \n    Returns:\n    The integer at the given index after rotations.\n    \"\"\"\n    # Calculate the range of possible values to rotate around\n    if ranges[0] < ranges[1]:\n        start, end = ranges\n    else:\n        start, end = ranges[::-1]\n        \n    # Calculate the rotation step\n    step = (end - start) // rotations\n    \n    # Calculate the value of the element to rotate to\n    value = arr[index]\n    \n    # Rotate the array by the given number of rotations\n    for _ in range(rotations):\n        arr.insert(0, arr.pop())\n        \n    # Find the element at the given index\n    element_index = arr.index(value)\n    \n    # Return the element at the given index after rotations\n    return arr[element_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # find the number of rotations to be performed\n    num_rotations = 0\n    for i in range(len(ranges)) :\n        if index >= ranges[i][0] and index <= ranges[i][1] :\n            num_rotations = i + 1\n            break\n\n    # find the number of elements to be rotated before the element at the given index is found\n    num_elements = 0\n    for i in range(len(arr) - 1, -1, -1) :\n        if index < arr[i] :\n            num_elements = i + 1\n            break\n\n    # perform the required rotations to find the element at the given index\n    if num_rotations == 0 :\n        return arr[index]\n    else :\n        rotations_done = 0\n        result = []\n        for i in range(len(arr)) :\n            if i == index :\n                if rotations_done < num_rotations :\n                    result.append(arr[i])\n                    rotations_done += 1\n                else :\n                    result.append(arr[i - num_rotations])\n            else :\n                result.append(arr[i])\n        return result[-1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n\n    # Find the minimum value in the array\n    min_value = min(arr)\n\n    # Find the minimum range index\n    min_range = arr.index(min_value)\n\n    # Update the ranges dictionary with minimum range value and its index\n    for i in range(min_range):\n        if ranges[i][0] < min_value:\n            ranges[i] = (min_value,i)\n    \n    # Calculate the number of elements in each range after rotations\n    new_ranges = []\n    for i in range(len(ranges)):\n        rot_count = (ranges[i][0] - min_value) % rotations\n        if rot_count == 0:\n            new_ranges.append(ranges[i])\n        else:\n            new_ranges.append((ranges[i][0] - rot_count,ranges[i][1]))\n    \n    # Find the element at the given index after rotations\n    for i in range(len(new_ranges)-1):\n        if new_ranges[i][1] <= index <= new_ranges[i+1][1]:\n            return new_ranges[i][0] + rotations - (index - new_ranges[i][1])\n    \n    # If the element cannot be found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after a specified number of rotations.\n\n    Parameters:\n        arr (list): The list of elements to rotate.\n        ranges (list): A list of tuples containing the start and end indices for each range.\n        rotations (int): The number of rotations to perform.\n        index (int): The index of the element to find after rotating.\n\n    Returns:\n        The element at the specified index after rotating the list.\n    \"\"\"\n\n    # Iterate through each range\n    for i in range(len(ranges)):\n        # Get the start and end indices for this range\n        start_index = ranges[i][0]\n        end_index = ranges[i][1]\n\n        # If the current index is within this range, and after rotating by rotations,\n        # return the element at the specified index\n        if start_index <= index <= end_index and (end_index - start_index) % rotations == 0:\n            return arr[start_index + (index - start_index) % rotations]\n\n    # If no element is found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    if index < 0 or index >= len(arr):\n        return None\n    arr = arr[rotations:] + arr[:rotations]\n    for i in range(len(ranges)):\n        arr = arr[ranges[i][0]:ranges[i][1]] + arr[ranges[i][1]:ranges[i][0]]\n    if index >= len(arr):\n        return None\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of rotation ranges, and the number of rotations, \n    and returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Initialize variables for the current rotation and the final element\n    curr_rotation = 0\n    curr_element = None\n    \n    # Loop through the list of rotation ranges\n    for i in range(len(ranges)):\n        # Check if the current rotation satisfies the given condition\n        if curr_rotation == rotations:\n            # If it does, set the final element to the element at the given index\n            curr_element = arr[index]\n            # Stop the loop since we've found the element\n            break\n        \n        # Increment the current rotation count\n        curr_rotation += ranges[i]\n    \n    # Return the final element\n    return curr_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Define the number of rotations\n    n = rotations\n\n    # Initialize the list to store the elements in the order after rotations\n    result = []\n\n    # Initialize the current index\n    current_index = index\n\n    # Loop through the rotations\n    for i in range(n):\n        # Get the range of the current rotation\n        start_range, end_range = ranges[i]\n\n        # Initialize the subarray to store the elements in the current rotation\n        subarray = arr[start_range:end_range + 1]\n\n        # Initialize the number of elements to skip\n        skip_count = 0\n\n        # Loop through the subarray\n        for j in range(start_range, end_range + 1):\n            # If the element at the current index is not in the subarray, skip it\n            if j!= current_index:\n                skip_count += 1\n\n                # Move to the next element\n                current_index = (current_index + 1) % len(arr)\n\n                # If we've skipped too many elements, exit the loop\n                if skip_count == n:\n                    break\n\n        # Append the element at the current index to the result\n        result.append(arr[current_index])\n\n    # Return the element at the final index\n    return result[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, list of ranges, number of rotations and an index to find the element.\n    The function returns the element at the given index after number of rotations.\n    \"\"\"\n    for i in range(rotations):\n        arr = [arr[arr.index(j)] for j in range(len(arr)) if j not in ranges[i]]\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): The list of integers to search in.\n    ranges (list): The list of ranges for each element.\n    rotations (list): The list of rotations for each element.\n    index (int): The index to search for after number of rotations.\n\n    Returns:\n    int: The element at the given index after the number of rotations.\n    \"\"\"\n\n    # Calculate the index of the element at the given index after rotations\n    next_index = index\n    for _ in range(rotations):\n        next_index = (next_index + 1) % len(arr)\n\n    # Calculate the element at the next index\n    next_element = arr[next_index]\n\n    # Find the corresponding range and rotation for the next element\n    for i, (r, rotation) in enumerate(zip(ranges, rotations)):\n        if arr[next_index] == r:\n            range_index = i\n            break\n\n    # Calculate the index of the next element after rotation\n    next_next_index = (next_index + rotation + 1) % len(arr)\n\n    # Find the corresponding range and rotation for the next element after rotation\n    for i, (r, rotation) in enumerate(zip(ranges, rotations)):\n        if arr[next_next_index] == r:\n            range_next_index = i\n            break\n\n    # Return the next element after rotation\n    return arr[next_next_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    \"\"\"\n    This function takes an array, a list of rotation ranges and a rotation index as inputs and returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Get the current rotation value and corresponding index\n    rot_value = rotations[index-1]\n    rot_index = rot_value-1\n    \n    # Calculate the index of the element to be found\n    find_index = (rot_index+index) % len(arr)\n    \n    # Find the element at the calculated index\n    find_element = arr[find_index]\n    \n    return find_element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\bp\\w+', words)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.match(pattern, word):\n            return [word, words[words.index(word)+1]]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    match = re.search(pattern, words, re.IGNORECASE)\n    if match:\n        return words[match.start():match.end()], words[match.start()-1:match.start()]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'\\Ap\\w+')\n\n    # Use the pattern to find all words starting with 'p' in the list of words\n    matches = pattern.findall(words)\n\n    # Check if there are at least two matches\n    if len(matches) >= 2:\n        # Return the two matches\n        return matches[:2]\n    else:\n        # If there are not enough matches, return an empty list\n        return []"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^\\w+p\\w+$'\n    for word in words:\n        if re.search(pattern, word):\n            return [word, word.replace('p', 'q')]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if matches:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Use regular expression to find words starting with 'p'\n    pattern = re.compile(r'^p\\w+$')\n    matches = re.findall(pattern, words)\n\n    # If there are two words starting with 'p', return them\n    if len(matches) == 2:\n        return matches\n\n    # If there are not two words starting with 'p', return None\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return 'No matching words found'"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize an array to store the maximum sum of increasing subsequence from prefix until ith index\n    max_sum_arr = [0] * (n+1)\n\n    # Initialize an array to store the previous index of the maximum sum of increasing subsequence from prefix until ith index\n    prev_index_arr = [-1] * (n+1)\n\n    # Initialize an array to store the start index of the maximum sum of increasing subsequence from prefix until ith index\n    start_index_arr = [-1] * (n+1)\n\n    # Initialize the maximum sum of increasing subsequence from prefix to index 0\n    max_sum_arr[0] = 0\n\n    # Initialize the previous index of the maximum sum of increasing subsequence from prefix to index 0\n    prev_index_arr[0] = -1\n\n    # Initialize the start index of the maximum sum of increasing subsequence from prefix to index 0\n    start_index_arr[0] = -1\n\n    # Initialize the maximum sum of increasing subsequence from prefix to index i\n    max_sum_arr[index] = a[index]\n\n    # Initialize the previous index of the maximum sum of increasing subsequence from prefix to index i\n    prev_index_arr[index] = index-1\n\n    # Initialize the start index of the maximum sum of increasing subsequence from prefix to index i\n    start_index_arr[index] = index\n\n    # Calculate the maximum sum of increasing subsequence from prefix until i-1\n    for i in range(1, index):\n        if a[i] > a[i-1]:\n            max_sum_arr[i] = max_sum_arr[i-1] + a[i]\n            prev_index_arr[i] = prev_index_arr[i-1]\n            start_index_arr[i] = start_index_arr[i-1]\n        elif a[i] < a[i-1]:\n            max_sum_arr[i] = max_sum_arr[i-1]\n            prev_index_arr[i] = i-1\n            start_index_arr[i] = i\n\n    # Calculate the maximum sum of increasing subsequence from prefix to i+1 and k\n    for i in range(index+1, n+1):\n        if a[i] > a[i-1]:\n            max_sum_arr[i] = max_sum_arr[i-1] + a[i]\n            prev_index_arr[i] = prev_index_arr[i-1]\n            start_index_arr[i] = start_index_arr[i-1]\n        elif a[i] == a[i-1]:\n            if i == k:\n                max_sum_arr[i] = max_sum_arr[i-1] + a[i]\n                prev_index_arr[i] = prev_index_arr[i-1]\n                start_index_arr[i] = start_index_arr[i-1]\n            else:\n                if max_sum_arr[i-1] + a[i] > max_sum_arr[i]:\n                    max_sum_arr[i] = max_sum_arr[i-1] + a[i]\n                    prev_index_arr[i] = prev_index_arr[i-1]\n                    start_index_arr[i] = start_index_arr[i-1]\n\n    # Return the maximum sum of increasing subsequence from prefix until kth index\n    return max_sum_arr[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[0], 1\n    \n    max_sum = 0\n    max_length = 0\n    max_subseq = []\n    \n    for i in range(index):\n        if a[i] <= a[k]:\n            if i == 0:\n                max_sum = max(max_sum, a[0] + a[k])\n                max_length = 2\n            elif i == 1:\n                max_sum = max(max_sum, a[0] + a[k], a[1] + a[k])\n                max_length = 2\n            else:\n                max_sum = max(max_sum, a[0] + a[k], a[i] + a[k])\n                max_length = i+1\n            \n            max_subseq = [a[0], a[k]] + max_subseq\n    \n    if a[index] <= a[k]:\n        if index == 0:\n            max_sum = max(max_sum, a[0] + a[k])\n            max_length = 2\n        elif index == 1:\n            max_sum = max(max_sum, a[0] + a[k], a[1] + a[k])\n            max_length = 2\n        else:\n            max_sum = max(max_sum, a[0] + a[k], a[index] + a[k])\n            max_length = index+1\n        \n        max_subseq = [a[0], a[k]] + max_subseq\n    \n    return max_sum, max_length"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    \n    dp = [0] * n\n    dp[0] = a[0]\n    \n    for i in range(1, n):\n        if k > i:\n            dp[i] = max(dp[i-1], a[i] + dp[i-1])\n        else:\n            dp[i] = max(dp[i-1], a[i])\n            \n    return dp[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n\n    if index == 0:\n        if k < n and a[k] > a[index]:\n            return a[k]\n        return 0\n\n    if a[index] > a[index - 1]:\n        left = max_sum_increasing_subseq(a, n, index - 1, k)\n    else:\n        left = max_sum_increasing_subseq(a, n, index - 1, k) + a[index - 1]\n\n    if a[index] > a[index - 2]:\n        right = max_sum_increasing_subseq(a, n, index - 2, k)\n    else:\n        right = max_sum_increasing_subseq(a, n, index - 2, k) + a[index - 2]\n\n    return max(left, right)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return 0\n    \n    if k == index:\n        return a[k]\n    \n    if k < index:\n        return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1))\n    \n    else:\n        return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1)) + a[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n - 1:\n        return 0\n    if a[index] <= a[index + 1]:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    if index == 0:\n        return a[k]\n    \n    max_sum = float('-inf')\n    for i in range(index):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    \n    if k > index - 1:\n        max_sum += a[k]\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the result and current maximum sum\n    max_sum = 0\n    curr_sum = 0\n    \n    # Initialize the prefix sum array\n    prefix_sum = [0] * (n + 1)\n    \n    # Iterate through the prefix sum array\n    for i in range(1, n + 1):\n        # Calculate the prefix sum for the current index\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n        \n        # If the current index is less than or equal to k and the current sum is greater than the current maximum sum\n        if i <= k and curr_sum > max_sum:\n            # Update the current maximum sum\n            max_sum = curr_sum\n            \n            # Update the starting index\n            start_index = i - k + 1\n            \n            # Update the ending index\n            end_index = i\n    \n    # If the maximum sum is zero, return an empty list\n    if max_sum == 0:\n        return []\n    \n    # Initialize the result array\n    result = []\n    \n    # Iterate through the prefix sum array\n    for i in range(start_index, end_index + 1):\n        # If the current prefix sum is equal to the current maximum sum, add the current index to the result array\n        if prefix_sum[i] == max_sum:\n            result.append(i)\n    \n    # Reverse the result array to get the decreasing subsequence\n    return result[::-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        if a[i] > a[index]:\n            if i < k:\n                curr_sum += a[i]\n            else:\n                curr_sum += a[k]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize max_sum to negative infinity\n    max_sum = float('-inf')\n    \n    # Initialize left, right pointers for subsequence\n    left = 0\n    right = 0\n    \n    # Initialize prefix sum\n    prefix_sum = a[0]\n    \n    # Traverse through the array from the ith index to the end\n    for i in range(index, n):\n        # Update prefix sum\n        prefix_sum += a[i]\n        \n        # If prefix_sum becomes less than k, update max_sum\n        if prefix_sum < k:\n            max_sum = max(max_sum, prefix_sum)\n        else:\n            # Update left and right pointers for the longest increasing subsequence\n            while right < n and prefix_sum - k > a[right]:\n                right += 1\n            \n            # Update max_sum\n            max_sum = max(max_sum, prefix_sum - a[right])\n            \n            # Move the left pointer to the right until the prefix sum becomes less than k\n            left = right\n            prefix_sum = prefix_sum - a[left]\n    \n    # Return max_sum\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Check if the tuple is empty\n    if len(tuplex) == 0:\n        return\n\n    # Get the first element of the tuple\n    element = tuplex[0]\n\n    # If the element is a list, recursively call the function on the element and add it to the colon\n    if isinstance(element, list):\n        colon = deepcopy(element)\n        colon.append(colon_tuplex(tuplex[1:],m,n))\n        return colon\n\n    # If the element is a tuple, recursively call the function on the element and add it to the colon\n    if isinstance(element, tuple):\n        colon = deepcopy(element)\n        colon = colon_tuplex(colon,m,n)\n        return colon\n\n    # If the element is a number, add it to the colon\n    if isinstance(element, (int, float)):\n        colon = deepcopy(element)\n        return colon\n\n    # If the element is not a number or list/tuple, return the element as is\n    return element"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return deepcopy(tuplex[m:m+n])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # copy the tuple to avoid modifying the original\n    tuplex = deepcopy(tuplex)\n    # get the number of rows and columns in the tuple\n    rows, cols = len(tuplex), len(tuplex[0])\n    # get the number of elements to add to the colon\n    num_elems = m * n - rows * cols\n    # create a list to store the new colon\n    new_colon = []\n    # iterate over the columns\n    for col in range(cols):\n        # get the indices of the elements in the current column\n        indices = [row * cols + col for row in range(rows)]\n        # sort the indices in ascending order\n        indices.sort()\n        # add the elements to the new colon in the desired order\n        for i in range(num_elems):\n            new_colon.append(tuplex[indices[i]])\n    return tuple(new_colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    for i in range(m):\n        col[i] = tuple(col[i][j] for j in range(n))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a copy of the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n    # create a list of lists to hold the new colon\n    new_colon = []\n    # create a list to keep track of the indices of the elements we've added to the new colon\n    added_indices = []\n    # loop over each element in the tuple\n    for i in range(len(tuplex)):\n        # if we haven't added any elements yet, add the first element\n        if not added_indices:\n            new_colon.append(new_tuplex[i])\n            added_indices.append(i)\n        # if we've already added a maximum number of elements, add the next element\n        elif i - added_indices[-1] >= m:\n            new_colon.append(new_tuplex[i])\n            added_indices.append(i)\n        # if we've already added m elements, add the next element if the difference between i and the last added index is less than n\n        elif i - added_indices[-1] == m-1 and i - added_indices[-1] < n:\n            new_colon.append(new_tuplex[i])\n            added_indices.append(i)\n    # return the new colon as a tuple\n    return tuple(new_colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a nested tuple and returns a new tuple that has\n    m copies of the original tuple repeated n times.\n    '''\n    if m == 1:\n        return tuplex\n    else:\n        # Copy the original tuple\n        new_tuplex = deepcopy(tuplex)\n        # Colonize the new tuple\n        new_tuplex_colonized = [tuplex[0]] + [new_tuplex[i] for i in range(m)] + [tuplex[-1]]\n        # Repeat the colonized tuple n times\n        new_tuplex_colonized_repeated = [new_tuplex_colonized] * n\n        # Return the repeated colonized tuple\n        return new_tuplex_colonized_repeated"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    # iterate over each element in the tuple\n    for i in range(m):\n        # create a new tuple with one element set to None\n        col = (None,) * (n-1)\n        # insert each element of tuplex into the new tuple\n        for j in range(n):\n            col[j] = tuplex[i][j]\n        colon.append(col)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # loop through each element in the tuple and add a new element\n    for i in range(m):\n        tuplex_copy = tuplex_copy + (n,)\n\n    return tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon separated string of a tuple of integers.\n    '''\n    col = []\n    for i in range(m):\n        if i == n-1:\n            col.append(str(tuplex[i]))\n        else:\n            col.append(str(tuplex[i]) + ':')\n    return ':'.join(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            if i < m-1 or j < n-1:\n                new_tuplex[i][j] = (new_tuplex[i][j][0], new_tuplex[i][j][1]+1)\n            else:\n                new_tuplex[i][j] = (new_tuplex[i][j][0]+1, new_tuplex[i][j][1])\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    max_product_indices = []\n    for i in range(N):\n        for j in range(i+1, N):\n            product = 1\n            for k in range(len(nums1)):\n                product *= max(nums1[k], nums2[k])\n            if product > max_product:\n                max_product = product\n                max_product_indices = [i, j]\n    return max_product, max_product_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the product of the first N elements of each list\n    product1 = 1\n    product2 = 1\n    for i in range(N):\n        product1 *= nums1[i]\n        product2 *= nums2[i]\n\n    # Return the two largest products\n    return max(product1, product2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Parameters:\n    nums1 (list): a list of integers\n    nums2 (list): a list of integers\n    N (int): the number of products to find\n\n    Returns:\n    list: a list of the largest products N times from nums1 and nums2, sorted in descending order\n    \"\"\"\n\n    # Initialize the result list and a list to store the products\n    result = []\n    products = []\n\n    # Iterate over the number of products to find\n    for _ in range(N):\n        # Select a random number from nums1 and nums2\n        num1 = nums1[int(len(nums1) * random.random())]\n        num2 = nums2[int(len(nums2) * random.random())]\n\n        # Compute the product of num1 and num2\n        product = num1 * num2\n\n        # If the product is greater than any of the products in the result list, add it to the list\n        if product > max(products):\n            products = [product]\n            result.append(product)\n\n        # Otherwise, check if the product is already in the result list and update it if it is\n        elif product in products:\n            products[products.index(product)] = product\n\n        # Otherwise, add the product to the result list if it is smaller\n        else:\n            products.append(product)\n            result.append(product)\n\n    # Sort the result list in descending order\n    result.sort(reverse=True)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize two lists to store the largest products\n    largest1 = []\n    largest2 = []\n\n    # Loop through the two lists of numbers and find the maximum product and append it to the corresponding list\n    for i in range(N):\n        max1 = nums1[0]\n        max2 = nums2[0]\n\n        for num1 in nums1:\n            for num2 in nums2:\n                if num1 * num2 > max1:\n                    max1 = num1\n                if num2 * num1 > max2:\n                    max2 = num2\n\n        # Append the maximum product to the corresponding list\n        if max1 > max2:\n            largest1.append(max1)\n            largest2.append(max2)\n        else:\n            largest1.append(max2)\n            largest2.append(max1)\n\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # initialize variables for the largest products and counters\n    largest_product = float('-inf')\n    count = 0\n    \n    # iterate over the lists and calculate the products of the largest N elements from each list\n    for i in range(len(nums1)-N+1):\n        product = 1\n        for j in range(N):\n            product *= nums1[i+j]\n        if product > largest_product:\n            largest_product = product\n            count = 1\n        else:\n            if product == largest_product:\n                count += 1\n    \n    # print the results\n    print('The largest', N, 'product(s) are:', largest_product, 'with', count, 'occurrences')\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum product list\n    max_products = []\n\n    # Iterate over the first N elements of the first list\n    for i in range(N):\n        # Initialize the product of the first element with the second element\n        current_product = nums1[i] * nums2[0]\n\n        # Iterate over the remaining N-i elements of the first list\n        for j in range(i+1, N):\n            # Update the current product with the current element of the first list\n            current_product = max(nums1[i] * nums1[j], nums2[i] * nums2[j], current_product)\n\n        # Append the maximum product to the list\n        max_products.append(current_product)\n\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    largest_product = [0] * N\n    max_index = 0\n\n    # Iterate through the lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the product of the selected factors\n            product = nums1[i] * nums2[j]\n\n            # Update the largest and maximum product found so far\n            if product > max_product:\n                max_product = product\n                largest_product[max_index] = product\n                max_index = 0\n            elif product == max_product:\n                max_index += 1\n\n    # Return the largest N products\n    return largest_product[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products and the index of each product in the two lists\n    largest_products = []\n    index_nums1 = 0\n    index_nums2 = 0\n\n    # Calculate the largest products for each factor combination\n    while index_nums1 < len(nums1) and index_nums2 < len(nums2):\n        product = nums1[index_nums1] * nums2[index_nums2]\n        if len(largest_products) < N:\n            largest_products.append(product)\n            index_nums1 += 1\n            index_nums2 += 1\n        else:\n            # Remove the smallest product from the list\n            if product > largest_products[0]:\n                largest_products.pop(0)\n                index_nums1 += 1\n            else:\n                index_nums2 += 1\n\n    # Return the largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n\n    # Iterate over the first N elements of both lists\n    for i in range(N):\n        # Calculate the product of the i-th largest element of nums1 and the i-th largest element of nums2\n        current_product = nums1[i] * nums2[i]\n\n        # Update the largest products if the current product is greater than the previous largest product\n        if current_product > largest_product1:\n            largest_product1 = current_product\n\n        # Update the largest products if the current product is greater than the previous largest product\n        if current_product > largest_product2:\n            largest_product2 = current_product\n\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    largest_products = []\n    for i in range(N):\n        if i < len(nums1):\n            factor1 = nums1[i]\n        else:\n            factor1 = 1\n        if i < len(nums2):\n            factor2 = nums2[i]\n        else:\n            factor2 = 1\n        product = factor1 * factor2\n        largest_products.append(product)\n    return largest_products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n\nprint(maximum(5,7))  # Output: 7\nprint(maximum(3,2))  # Output: 3\nprint(maximum(0,0))  # Output: 0"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n\n    :param str1: A string that contains characters.\n    :return: A tuple of characters from the input string.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes a number as input and sets the left most unset bit in the number to 1.\n    Returns the updated number.\n    '''\n    # Initialize the rightmost unset bit to 0\n    unset_bit = 0\n    # Iterate from rightmost bit to leftmost bit\n    for i in range(31, -1, -1):\n        # If the i-th bit is 0, set the unset_bit to 1 and exit the loop\n        if not n & (1 << i):\n            unset_bit = 1\n            break\n    # Set the unset bit to 1 in the number and return the updated number\n    return n | (1 << unset_bit)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in an integer n.\n    '''\n    bit_mask = 1\n    while (n & bit_mask) == 0: \n        bit_mask <<= 1\n    n |= bit_mask\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize a variable to store the unset bits\n    unset_bits = 0\n\n    # Iterate through each bit in the binary representation of n\n    for i in range(31, -1, -1):\n        # Check if the i-th bit is set to 1\n        if (n >> i) & 1:\n            # If it is, unset the i-th bit\n            n &= ~(1 << i)\n            # Break out of the loop since we have unset the i-th bit\n            break\n\n    # If we have not unset the leftmost unset bit, we need to unset the 0th bit\n    if unset_bits == 0:\n        n &= ~(1 << 0)\n\n    # Return the updated value of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n:\n        if not n & 1:\n            return n\n        n >>= 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the binary representation of the input number n\n    binary_rep = bin(n)[2:]\n    \n    # Iterate through the binary representation and set the leftmost unset bit to 1\n    for i in range(len(binary_rep)):\n        if binary_rep[i] == '0':\n            binary_rep = binary_rep[:i] + '1' + binary_rep[i+1:]\n            break\n    \n    # Convert the binary representation back to an integer\n    result = int(binary_rep, 2)\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result variable\n    result = 0\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the current bit is 1, set the corresponding bit in the result variable to 1\n        if bit == '1':\n            result |= (1 << int(bit))\n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # check if the number is negative\n    if n < 0:\n        n = abs(n) # make the number positive to get the leftmost unset bit\n\n    # iterate over all bits in the number\n    for i in range(32):\n        # if the bit is set, continue to the next bit\n        if n & (1 << i):\n            continue\n\n        # otherwise, set the bit to 1 and exit the loop\n        n |= (1 << i)\n        break\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function will set the left most unset bit in a given integer.\n    '''\n\n    # Initialize a variable to store the number of set bits in the binary representation of n\n    num_set_bits = 0\n\n    # Initialize a variable to store the number of bits in the binary representation of n\n    num_bits = 0\n\n    # Loop through each bit in the binary representation of n\n    while n > 0:\n        n = n & (n - 1)  # clear the rightmost bit set\n        num_bits += 1\n\n    # Loop through each bit in the binary representation of n\n    while num_set_bits < num_bits - 1:\n        # Set the leftmost unset bit to 1\n        n = n | (1 << num_set_bits)\n        num_set_bits += 1\n\n    # Return the modified integer n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1\n    while mask & n:\n        mask <<= 1\n    return mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to True\n    left_most_unset = True\n    \n    # Iterate over the bits of the integer\n    for bit in bin(n)[2:]:\n        # If the current bit is unset, set it to True\n        if bit == '0':\n            left_most_unset = True\n            # Exit the loop as the leftmost unset bit is found\n            break\n        # If the current bit is set, set it to False\n        else:\n            left_most_unset = False\n    \n    # Convert the boolean value to a decimal\n    left_most_unset = int(left_most_unset)\n    \n    # Shift the integer to the left by the position of the leftmost unset bit\n    return left_most_unset << n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the Pythagorean theorem.\n\n    Parameters:\n    r: float, the radius of the cone\n    h: float, the height of the cone\n\n    Returns:\n    volume: float, the volume of the cone\n    '''\n\n    # Calculate the base of the pyramid\n    base = math.sqrt(r**2 + h**2)\n\n    # Calculate the volume of the cone\n    volume = (1/3) * math.pi * (r**2 + h**2 + base**2)\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with a given radius and height.\n    '''\n    # calculating the volume of a cone\n    V = (1/3) * math.pi * (r**2) * h\n    \n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Compute the volume of the cone using Heron's formula\n    volume = (1/3) * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\n\nprint(volume_cone(5, 10)) # Output: 163.03577409681703"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone given its radius and height.\n    '''\n    # Convert the height from meters to centimeters\n    h = h * 100\n\n    # Using the formula for the volume of a sphere, find the volume of the cone\n    volume = (1/3) * math.pi * r**2 * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments - radius r and height h.\n    It returns the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h / 3"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r ** 2 * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    while n > 1: \n        n = n // 2 # divide n by 2 until it becomes 1\n    return n # return the last value of n, which is the highest power of 2 that is less than or equal to n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Start with the highest power of 2\n    max_power = 1\n\n    # Loop until the next highest power of 2 is larger than n\n    while max_power <= n:\n        # Increment the max_power\n        max_power *= 2\n\n    # Return the highest power of 2 that is less than or equal to n\n    return max_power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**int(n.bit_length() - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 found so far\n    max_power = 0\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is a power of 2\n        if i & (i-1) == 0:\n            # If it is, update the highest power of 2 found so far\n            if i > max_power:\n                max_power = i\n    # Return the highest power of 2 found so far\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Base case: if n is 1, the highest power of 2 is 1\n    if n == 1:\n        return 1\n\n    # Otherwise, find the highest power of 2 that is a factor of n\n    max_pow = 1\n    while max_pow <= n:\n        max_pow *= 2\n\n    # Return the highest power of 2 found\n    return max_pow"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n //= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable to store the highest power of 2\n    highest = 1\n    \n    # Loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # If i is a power of 2, check if it is greater than highest\n        if i & (i-1) == 0:\n            highest = i\n    \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 found so far\n    highest = 0\n    \n    # Loop through all powers of 2 up to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n == 2**i:\n            # If n is already a power of 2, return i\n            return i\n        elif n < 2**i:\n            # If n is less than the current power of 2, break out of the loop\n            break\n        # If n is greater than or equal to the current power of 2, increment i\n        else:\n            i += 1\n    \n    # If the loop completes without finding a power of 2, return -1 to indicate failure\n    return -1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == 1:\n            return 1\n        if i == 2:\n            return i\n        if i % 2 == 0:\n            i = i//2\n        else:\n            i = i*2\n    return 0"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize variables\n    highest = 0\n    power = 1\n    \n    # loop through all powers of 2 from 1 to n\n    while power <= n:\n        # check if power is greater than current highest power\n        if power > highest:\n            highest = power\n        # increase power\n        power <<= 1\n    \n    # return highest power of 2 less than or equal to n\n    return highest"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        lucas = 2\n        for i in range(2, n+1):\n            lucas = (lucas**2 + 1) % 10**9\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    This function finds the nth lucas number.\n    '''\n    if n == 0 or n == 1: \n        return n\n    else:\n        lucas = [0, 1]\n        for i in range(2, n+1): \n            lucas.append(lucas[i-1] + lucas[i-2])\n        return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n, memo={}):\n    '''\n    Write a function to find then'th lucas number using memoization technique.\n    '''\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        memo[n] = find_lucas(n-1, memo) + find_lucas(n-2, memo)\n        return memo[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) "
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th Lucas number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return (4*find_lucas(n-1) + find_lucas(n-2)) % 28"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Apply the format string to the element\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string % item)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Use zip function to combine multiple lists into a single list of tuples\n    all_tuples = zip(l1, l2, l3)\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # Loop through each tuple and add it as a key and the corresponding value to the nested dictionary\n    for item in all_tuples:\n        key, value = item\n        # If the key is already in the nested dictionary, add the value to it\n        if key in nested_dict:\n            nested_dict[key].append(value)\n        # Otherwise, create a new dictionary for the key and add the value to it\n        else:\n            nested_dict[key] = [value]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create empty dictionary to store the result\n    result = {}\n    # loop through the lists\n    for i in range(len(l1)):\n        # loop through the elements of each list\n        for j in range(len(l1[i])):\n            # if the element is not already in the dictionary, add it with an empty list as value\n            if l1[i][j] not in result:\n                result[l1[i][j]] = []\n            # add the element to the corresponding list in the dictionary\n            result[l1[i][j]].append(l2[i][j])\n        # loop through the elements of each list\n        for j in range(len(l3[i])):\n            # if the element is not already in the dictionary, add it with an empty list as value\n            if l3[i][j] not in result:\n                result[l3[i][j]] = []\n            # add the element to the corresponding list in the dictionary\n            result[l3[i][j]].append(l3[i][j])\n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create empty dictionary to store the final nested dictionary\n    final_dict = {}\n    \n    # Loop through each list\n    for i in range(len(l1)):\n        \n        # Add the i-th list to the final dictionary with the i-th key\n        final_dict[i] = l1[i]\n        \n        # Loop through each element in the i-th list\n        for j in range(len(l2[i])):\n            \n            # Add the j-th element of the i-th list to the nested dictionary\n            final_dict[i][j] = l2[i][j]\n            \n            # Loop through each element in the j-th element of the i-th list\n            for k in range(len(l3[i][j])):\n                \n                # Add the k-th element of the j-th element of the i-th list to the final dictionary\n                final_dict[i][j][k] = l3[i][j][k]\n    \n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define a nested dictionary to store the converted data\n    nested_dict = {}\n    # Loop through each list and convert it to nested dictionary\n    for i in range(len(l1)):\n        nested_dict[str(i)] = {'name': l1[i], 'age': l2[i], 'city': l3[i]}\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                result[l1[i]][l2[j]][l3[k]] = [l1[i], l2[j], l3[k]]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # create an empty dictionary\n    result = {}\n\n    # iterate through the three lists\n    for i in range(len(l1)):\n        # add the first element of each list as a new key in the result dictionary\n        result[l1[i]] = {}\n\n        # iterate through the second list and add each element as a new value to the key in the result dictionary\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i*len(l2) + j]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create a dictionary to hold the output\n    result = {}\n    \n    # Loop through each list in the input\n    for i, lst in enumerate([l1, l2, l3]):\n        # Loop through each item in the list\n        for item in lst:\n            # Split the key and value by the first occurrence of ':'\n            key, value = item.split(':')\n            # Create a nested dictionary if the key doesn't exist yet\n            if key not in result:\n                result[key] = {}\n            # Add the value to the nested dictionary\n            result[key][value] = i + 1\n            \n    # Return the nested dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        item = {}\n        item['key1'] = l1[i]\n        item['key2'] = l2[i]\n        item['key3'] = l3[i]\n        result.append(item)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        subdict = l3[i]\n        result[key] = value\n        for subkey, subvalue in subdict.items():\n            result[key][subkey] = subvalue\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        if n % 2 == 0:\n            return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n        else:\n            return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n + get_max_sum(n/2))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def helper(n):\n        if n <= 1:\n            return n\n        else:\n            return max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n\n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n == 1:\n        return n\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n\n    return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def fibonacci(n):\n        if n == 0 or n == 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n    \n    def max_sum(n):\n        if n < 6:\n            return n*fibonacci(n)\n        else:\n            return max_sum(n/2) + max_sum(n/3) + max_sum(n/4) + max_sum(n/5) + n\n    \n    return max_sum(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 15\n    elif n == 5:\n        return 24\n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        sum_1 = get_max_sum(n/2)\n        sum_2 = get_max_sum(n/3)\n        sum_3 = get_max_sum(n/4)\n        sum_4 = get_max_sum(n/5)\n        return max(sum_1 + sum_2 + sum_3 + sum_4, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def helper(num):\n        if num == 1:\n            return 1\n        else:\n            return max(helper(num//2), helper(num//3), helper(num//4), helper(num//5)) + num\n        \n    return helper(n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize a variable to store the maximum length\n    max_len = 0\n\n    # Loop through each element in the input list\n    for item in input_list:\n        # Calculate the length of the current item\n        item_len = len(str(item))\n\n        # If the length of the current item is greater than the maximum length, update the maximum length\n        if item_len > max_len:\n            max_len = item_len\n\n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list)) :]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    # Initialize variables\n    max_length = 0\n    max_list = []\n\n    # Loop through each element in the input list\n    for element in input_list:\n        # Check if the length of the element is greater than the current max length\n        if len(element) > max_length:\n            # If it is, update the max length and the corresponding max list\n            max_length = len(element)\n            max_list = [element]\n        # If the length of the element is equal to the current max length, add it to the max list\n        elif len(element) == max_length:\n            max_list.append(element)\n\n    # Return the max list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    # Iterate through each element of the input list\n    for i in input_list:\n        # If the length of the current element is greater than the current maximum length\n        if len(str(i)) > max_length:\n            # Update the maximum length and corresponding list element\n            max_length = len(str(i))\n            max_list = [i]\n        # Otherwise, if the length of the current element is equal to the current maximum length\n        elif len(str(i)) == max_length:\n            # Append the current element to the corresponding list element\n            max_list.append(i)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize the maximum length as 0\n    max_len = 0\n    # Initialize an empty list to store the lists with the maximum length\n    max_lists = []\n    # Iterate through each element in the input list\n    for item in input_list:\n        # Get the length of the current element\n        current_len = len(item)\n        # If the current length is greater than the maximum length, update both max_len and max_lists\n        if current_len > max_len:\n            max_len = current_len\n            max_lists = [item]\n        # If the current length is equal to the maximum length, append the current element to max_lists\n        elif current_len == max_len:\n            max_lists.append(item)\n    # Return the list with maximum length\n    return max_lists"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to keep track of the elements in the tuple\n    seen = set()\n    # Loop through each element in the tuple\n    for elem in test_tup:\n        # If the element is already in the set, return False\n        if elem in seen:\n            return False\n        # Add the element to the set\n        seen.add(elem)\n    # If no duplicate elements were found, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set from the tuple and convert it back to a tuple\n    unique_tuple = tuple(set(test_tup))\n    # Check if the original and unique tuples are the same\n    return test_tup == unique_tuple"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set_tup = set(test_tup)\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Use a set to remove duplicates from the tuple\n    test_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # find the first character in the string that has a frequency of 1\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n    \n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency by 1\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    \n    # loop through the dictionary and find the first non-repeating character\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Find the first character with a frequency of 1\n    for char in freq:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the string and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            del char_count[char]\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string again\n    for char in str1:\n        # If the character is not the first non-repeating character, return it\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for i in range(len(str1)):\n        if char_count[str1[i]] == 1:\n            return str1[i]\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # calculate the midpoint of the sorted array\n    midpoint = len(sorted_numbers) // 2\n    \n    # if there are an odd number of elements, the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[midpoint]\n    \n    # if there are an even number of elements, the median is the average of the middle two numbers\n    else:\n        return (sorted_numbers[midpoint - 1] + sorted_numbers[midpoint]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the list\n    n = len(sorted_numbers)\n\n    # If the list has an odd number of elements, the median is the middle element\n    if n % 2 == 1:\n        median = sorted_numbers[n // 2]\n    # If the list has an even number of elements, the median is the average of the two middle elements\n    else:\n        median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle index\n    middle_index = len(sorted_numbers) // 2\n\n    # If the length of the sorted numbers is odd,\n    # the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        median = sorted_numbers[middle_index]\n    # If the length of the sorted numbers is even,\n    # the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in non-increasing order\n    a = sorted([a, b, c])[1]\n    b = sorted([a, b, c])[2]\n    c = sorted([a, b, c])[0]\n    # Calculate the median\n    median = (a + b + c) / 3\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the numbers in ascending order\n    num_list = sorted([a, b, c])\n    # find the index of the middle number\n    mid = len(num_list) // 2\n    # if the number of elements is odd, the median is the middle element\n    if len(num_list) % 2 == 1:\n        return num_list[mid]\n    # if the number of elements is even, the median is the average of the middle two elements\n    else:\n        return (num_list[mid-1] + num_list[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # Calculate the length of the list\n    length = len(sorted_list)\n    \n    # If the length is odd, the median is the middle number\n    if length % 2 == 1:\n        return sorted_list[length // 2]\n    \n    # If the length is even, the median is the average of the two middle numbers\n    else:\n        middle_left = length // 2\n        middle_right = middle_left - 1\n        return (sorted_list[middle_left] + sorted_list[middle_right]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    nums = [a, b, c]\n    nums.sort()\n\n    # Calculate the median\n    n = len(nums)\n    if n % 2 == 0:\n        median = (nums[n//2 - 1] + nums[n//2]) / 2\n    else:\n        median = nums[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Get the length of the list\n    n = len(numbers)\n\n    # If the length of the list is odd\n    if n % 2 == 1:\n        # Return the middle number\n        return numbers[n // 2]\n\n    # If the length of the list is even\n    else:\n        # Return the average of the middle two numbers\n        return (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the median\n    if sorted_list[len(sorted_list) // 2] == sorted_list[len(sorted_list) // 2 - 1]:\n        median = (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2]) / 2\n    else:\n        median = sorted_list[len(sorted_list) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers\n    sorted_list = sorted([a, b, c])\n\n    # Find the length of the list\n    length = len(sorted_list)\n\n    # Calculate the median\n    if length % 2 == 0:\n        median = (sorted_list[length//2] + sorted_list[length//2-1]) / 2\n    else:\n        median = sorted_list[length//2]\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_digits = sum(map(int, str(num)))\n        result.append(sum_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize an empty list to store the sum of digits\n    digit_sums = []\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and then to a list of digits\n        num_digits = [int(digit) for digit in str(num)]\n        # sum the digits and append it to the list of digit sums\n        digit_sums.append(sum(num_digits))\n    # return the list of digit sums\n    return digit_sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    total_sum = []\n    # Loop through each number in the list\n    for num in nums:\n        # Compute the sum of digits of the current number\n        digit_sum = sum(int(digit) for digit in str(num))\n        # Append the sum of digits to the total_sum list\n        total_sum.append(digit_sum)\n    # Return the total_sum list\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        # convert the number to a string and split it into its digits\n        digits = [int(digit) for digit in str(num)]\n        # add up the digits\n        total_sum += sum(digits)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(d) for d in str(num))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string\n        num_str = str(num)\n        # convert the string to a list of digits\n        num_digits = [int(digit) for digit in num_str]\n        # compute the sum of the digits\n        num_sum = sum(num_digits)\n        # print the sum\n        print(\"Sum of digits of\", num, \"is\", num_sum)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to a string and then to a list of digits\n        digits = list(str(num))\n        \n        # Iterate through each digit and add it to the total\n        for digit in digits:\n            total += int(digit)\n    \n    # Return the total\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(num) for num in str(nums))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Returns:\n    A tuple containing the mathematical bitwise xor operation of the two input tuples.\n    \"\"\"\n\n    # Initialize variables to store the bitwise xor results for each tuple element\n    xor_result1 = 0\n    xor_result2 = 0\n\n    # Iterate through each element in the two input tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the corresponding elements in the two input tuples\n        xor_result1 |= test_tup1[i] ^ test_tup2[i]\n        xor_result2 |= test_tup2[i] ^ test_tup1[i]\n\n    # Return the bitwise xor result for each tuple element as a tuple\n    return (xor_result1, xor_result2)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the first element of the first tuple\n    result_tup = (test_tup1[0],)\n    \n    # Loop through the remaining elements in the first tuple\n    for i in range(1, len(test_tup1)):\n        # Perform the bitwise xor operation between the current element of the first tuple and the result tuple\n        result_tup += (test_tup1[i] ^ result_tup[-1],)\n        \n    # Loop through the remaining elements in the second tuple\n    for i in range(1, len(test_tup2)):\n        # Perform the bitwise xor operation between the current element of the second tuple and the result tuple\n        result_tup += (test_tup2[i] ^ result_tup[-1],)\n        \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum ^= test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Calculate the bitwise xor of the corresponding elements of the tuples\n        xor_val = test_tup1[i] ^ test_tup2[i]\n        # Add the result to the result list\n        result.append(xor_val)\n    # Return the result list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] ^ test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    result = tuple(i ^ j for i, j in zip(test_tup1, test_tup2))\n\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Perform bitwise XOR operation across the two tuples\n    xor_result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # initialize an empty dictionary to store the frequency of each tuple\n    freq = {}\n    # loop through the list and count the frequency of each tuple\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    # return the total number of unique tuples\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    '''\n    # Create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n\n    # Loop through the list of tuples\n    for item in test_list:\n        # Check if the tuple is already in the dictionary\n        if item in freq_dict:\n            # Increment the count of the tuple\n            freq_dict[item] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            freq_dict[item] = 1\n\n    # Return the total count of unique tuples\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create a dictionary to store the unique tuples and their frequency\n    freq_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it with a frequency of 1\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[tup] += 1\n\n    # Return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Initialize an empty set to store the unique tuples\n    unique_tuples = set()\n\n    # Iterate over each element in the list\n    for element in test_list:\n        # Convert the element to a tuple and add it to the set\n        unique_tuples.add(tuple(element))\n\n    # Return the length of the set (which is the number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    unique_freq = len(freq_dict)\n    return unique_freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = list(set(test_list))\n    count = len(unique_list)\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    seen = set()\n    for item in test_list:\n        if tuple(item) not in seen:\n            seen.add(tuple(item))\n    return len(seen)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return freq_dict"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples is not equal.\")\n        return None\n    \n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = tuple([0] * len(test_tup1[0]))\n    \n    # Iterate over the first tuple and add the elements with the same index from both tuples\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            result_tup[j] += test_tup1[i][j] + test_tup2[i][j]\n            \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    res = []\n    for i in range(len(test_tup1)):\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        res.append(tup1_elem + tup2_elem)\n    return res"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # initializing the result tuple with zero\n    result_tup = (0,) * len(test_tup1)\n\n    # iterating through each index in the tuple\n    for i in range(len(test_tup1)):\n        # adding the i-th element of the first tuple and the i-th element of the second tuple\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = []\n        for i in range(len(test_tup1)):\n            if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            else:\n                result.append(test_tup1[i] + test_tup2[i])\n        return tuple(result)\n    else:\n        print(\"The number of elements in the two tuples are not equal.\")"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples should have same number of elements!\")\n    else:\n        result_tuple = []\n        for i in range(len(test_tup1)):\n            result_tuple.append(test_tup1[i] + test_tup2[i])\n        return result_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # initialize result tuple with length of the longer tuple\n    result_tup = (0,) * max(len(test_tup1), len(test_tup2))\n    # loop through each index of the result tuple\n    for i in range(len(result_tup)):\n        # add the elements at the same index of the two input tuples\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        row1 = test_tup1[i]\n        row2 = test_tup2[i]\n        temp = []\n        for j in range(len(row1)):\n            temp.append(row1[j] + row2[j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a list to store the result of addition of each pair of elements of the two tuples\n    result = []\n    # loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # loop through each element of the current tuple\n        for j in range(len(test_tup1[i])):\n            # add the corresponding elements of the two tuples and store the result in the list\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    # return the list containing the result of addition of each pair of elements of the two tuples\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments a and b and returns their minimum value.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f'{tuplex} exists in {tuple1}.')\n    else:\n        print(f'{tuplex} does not exist in {tuple1}.')"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(tuplex, \"exists in tuple1\")\n    else:\n        print(tuplex, \"does not exist in tuple1\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): the tuple to search in\n    tuple1 (tuple): the tuple to search for\n\n    Returns:\n    bool: True if the element exists in tuple1, False otherwise.\n    \"\"\"\n    return tuple1 in tuplex"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the number is even or not\n    if x % 2 == 0:\n        # If the number is even, then its parity is odd\n        return \"The parity of the given number is odd.\"\n    else:\n        # If the number is odd, then its parity is even\n        return \"The parity of the given number is even.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns True if it is odd, else False. \n    The parity of a number is defined as the number of odd (positive) divisors of the number.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        if x % i == 0:\n            count += 1\n    if count % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Initialize the parity variable\n    parity = 'Even'\n\n    # Check if the number is even or odd\n    if x % 2 == 0:\n        parity = 'Even'\n    else:\n        parity = 'Odd'\n\n    # Return the parity variable\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns True if the parity of the input is odd, \n    and False otherwise.\n    '''\n    # check if the input is even\n    if x % 2 == 0:\n        return False\n    # if the input is odd, then it has an even number of ones\n    else:\n        # count the number of ones in the binary representation of x\n        count = 0\n        while x > 0:\n            count += x & 1\n            x >>= 1\n        # return True if there is an even number of ones, False otherwise\n        if count % 2 == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2==0:\n        print(\"The parity of\",x,\"is even.\")\n    else:\n        print(\"The parity of\",x,\"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    result = []\n    for digit in digits:\n        while digits.count(digit) > 1:\n            result.append(digit)\n            digits.remove(digit)\n        result.append(digit)\n        digits.remove(digit)\n    return int(''.join(map(str, result)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the given number to a string\n    num_str = str(n)\n    # get the length of the number\n    num_len = len(num_str)\n    # initialize the result variable\n    result = 0\n    # iterate over the digits of the number from right to left\n    for i in range(num_len - 1, -1, -1):\n        # convert the current digit to an integer\n        digit = int(num_str[i])\n        # get the position of the current digit in the result\n        digit_pos = (num_len - i)\n        # add the current digit to the result at the correct position\n        result += digit * 10 ** digit_pos\n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the given number to a string\n    num_str = str(n)\n\n    # create a list of digits in the number\n    num_list = list(num_str)\n\n    # sort the digits in descending order\n    num_list.sort(reverse=True)\n\n    # convert the sorted list of digits back to a string\n    new_num_str = ''.join(num_list)\n\n    # convert the new string back to an integer\n    new_num = int(new_num_str)\n\n    # return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    max_num = 10 ** len(str(n))\n    if n == max_num - 1:\n        return n + 1\n\n    # find the smallest number with the same last digit as n\n    last_digit = n % 10\n    smaller_num = max_num\n    for i in range(10):\n        num = i * 10 + last_digit\n        if num < smaller_num:\n            smaller_num = num\n\n    # rearrange the digits of n to match the last digit of smaller_num\n    num = n\n    digits = []\n    while num!= 0:\n        digits.append(num % 10)\n        num //= 10\n    digits.reverse()\n    new_num = 0\n    for digit in digits:\n        new_num = 10 * new_num + digit\n    new_num = new_num % max_num\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # convert the number to a string\n    num_str = str(n)\n    # initialize the result to be an empty string\n    result = ''\n    # iterate over the digits in the number\n    for digit in num_str:\n        # if the digit is odd, add it to the result\n        if int(digit) % 2!= 0:\n            result += digit\n        # if the digit is even, add it to the beginning of the result\n        else:\n            result = digit + result\n    # convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Define the digits of the given number\n    num_str = str(n)\n    \n    # Check if the given number is already the biggest possible number\n    if num_str == '9' * len(num_str):\n        return '1' * len(num_str)\n    \n    # Define the digits of the next bigger number\n    new_num = []\n    for i in range(len(num_str)):\n        if num_str[i] == '0':\n            new_num.append('9')\n        else:\n            new_num.append(int(num_str[i]) + 1)\n    \n    # Convert the new digits to a string and return it\n    return ''.join(map(str, new_num))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Create a list of characters from the number\n    num_list = list(num)\n    # Rearrange the digits of the number\n    num_list[0], num_list[-1] = num_list[-1], num_list[0]\n    num_list[1], num_list[-2] = num_list[-2], num_list[1]\n    num_list[2], num_list[-3] = num_list[-3], num_list[2]\n    # Convert the rearranged list back to a string and convert to an integer\n    num_str = ''.join(num_list)\n    next_bigger = int(num_str)\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number to a string\n    num = str(n)\n\n    # Reverse the digits of the number\n    num_rev = num[::-1]\n\n    # Convert the reversed number to a list of digits\n    num_list = [int(digit) for digit in num_rev]\n\n    # Create a list of pairs of digits that are adjacent in the original number\n    pairs = []\n    for i in range(len(num_list)-1):\n        if num_list[i] + 1 == num_list[i+1]:\n            pairs.append((num_list[i], num_list[i+1]))\n\n    # Find the largest pair of digits that are adjacent to each other in the original number\n    max_pair = (0, 0)\n    for pair in pairs:\n        if pair[0] > max_pair[0]:\n            max_pair = pair\n\n    # If the largest pair of digits is the only pair of digits, swap the digits to get the next bigger number\n    if len(pairs) == 1:\n        num_list[max_pair[0]], num_list[max_pair[1]] = num_list[max_pair[1]], num_list[max_pair[0]]\n        num_str = ''.join(str(digit) for digit in num_list)\n        return int(num_str)\n\n    # If there are multiple pairs of adjacent digits, take the minimum of the two and swap them to get the next bigger number\n    min_pair = (0, 0)\n    for pair in pairs:\n        if pair[0] < min_pair[0]:\n            min_pair = pair\n\n    num_list[max_pair[0]], num_list[min_pair[0]] = num_list[min_pair[0]], num_list[max_pair[0]]\n    num_str = ''.join(str(digit) for digit in num_list)\n    return int(num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Get the digits of the given number\n    digits = [int(digit) for digit in str(n)]\n\n    # Sort the digits in decreasing order\n    digits.sort(reverse=True)\n\n    # Create a new number with the sorted digits\n    new_number = int(''.join(map(str, digits)))\n\n    # Add 1 to the new number and return it\n    return new_number + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Remove leading zeroes\n    while n and n[0] == '0':\n        n = n[1:]\n\n    # Convert number to list of digits\n    digits = list(map(str, n))\n\n    # Rearrange digits in reverse order\n    digits.reverse()\n\n    # Convert list of digits back to string\n    n = int(''.join(digits))\n\n    # Find next bigger number\n    while True:\n        n += 1\n        if rearrange(n) > n:\n            return n\n\ndef rearrange(n):\n    '''\n    Write a function to rearrange the digits of a given number such that they become the next bigger number.\n    '''\n\n    # Remove leading zeroes\n    while n and n[0] == '0':\n        n = n[1:]\n\n    # Convert number to list of digits\n    digits = list(map(str, n))\n\n    # Rearrange digits in reverse order\n    for i in range(len(digits)):\n        for j in range(i + 1, len(digits)):\n            if int(digits[i]) * 10 + int(digits[j]) > int(digits[j]) * 10 + int(digits[i]):\n                digits[i], digits[j] = digits[j], digits[i]\n\n    # Convert list of digits back to string\n    n = int(''.join(digits))\n\n    return n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize an empty heap\n    min_heap = []\n\n    # Loop through the input arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add the current pair to the heap\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n            # If the heap is full, remove the smallest pair\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Extract the k smallest pairs from the heap and return them as a list of tuples\n    return [(pair[1], pair[0]) for pair in heapq.nsmallest(k, min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n    # Iterate through each element in the first array\n    for i in range(len(nums1)):\n        # Iterate through each element in the second array\n        for j in range(len(nums2)):\n            # Calculate the sum of the current pair\n            pair_sum = nums1[i] + nums2[j]\n            # If the pair is smaller than the smallest element in the heap, add it to the heap\n            if len(min_heap) < k or pair_sum < min_heap[0][0]:\n                heapq.heappush(min_heap, (pair_sum, (nums1[i], nums2[j])))\n    # Extract the k smallest elements from the heap\n    result = []\n    for _ in range(k):\n        pair_sum, pair = heapq.heappop(min_heap)\n        result.append(pair)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    min_heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1, num2))\n\n            if len(heap) > k:\n                min_heap.append(heapq.heappop(heap))\n\n        if len(min_heap) == k:\n            result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap of size k\n    min_heap = []\n    for num in nums1 + nums2:\n        heapq.heappush(min_heap, num)\n\n        # if the heap size exceeds k, pop the smallest element from it\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # extract the k smallest elements from the heap\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    # reverse the result to get the k largest pairs\n    return result[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Combine both lists into a single list\n    nums = nums1 + nums2\n    \n    # Use a min heap to keep track of the k smallest elements\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        elif num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    # Return the k smallest elements\n    result = []\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert lists to heaps\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n    for num in nums2:\n        heapq.heappush(min_heap, num)\n\n    # find k smallest pairs\n    result = []\n    while k > 0:\n        # extract smallest values from heaps\n        num1 = heapq.heappop(min_heap)\n        num2 = heapq.heappop(min_heap)\n\n        # check if the sum is already in the result list\n        if num1 + num2 in result:\n            continue\n\n        # add the sum to the result list\n        result.append(num1 + num2)\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a list of tuples where each tuple contains the sum and the indices of the two numbers\n    sums_indices = [(nums1[i] + nums2[j], (i, j)) for i in range(len(nums1)) for j in range(len(nums2))]\n    # Use heapq to sort the list by the sum and the indices of the numbers\n    heapq.heapify(sums_indices)\n    # Initialize an empty list to store the k smallest pairs\n    k_smallest_pairs = []\n    # Keep track of the number of pairs found so far\n    pairs_found = 0\n    # Iterate over the sorted list and add the smallest pairs until we have found k pairs\n    while pairs_found < k:\n        # Pop the smallest pair and add it to the list of k smallest pairs\n        smallest_sum, (i, j) = heapq.heappop(sums_indices)\n        k_smallest_pairs.append((nums1[i], nums2[j], smallest_sum))\n        pairs_found += 1\n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # convert the two lists into sets to avoid duplicates\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n\n    # initialize a min heap to store the smallest k pairs\n    min_heap = []\n\n    # loop through the numbers in the first list and the second list\n    for num1 in nums1_set:\n        for num2 in nums2_set:\n            # check if the current pair of numbers is a valid pair\n            if (num1 + num2) in nums2_set:\n                # add the current pair of numbers to the heap if it is smaller than the current smallest pair\n                if len(min_heap) < k or (num1 + num2) < min_heap[0][0] + min_heap[0][1]:\n                    heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n    # extract the smallest k pairs and return the result\n    result = []\n    for i in range(k):\n        pair = heapq.heappop(min_heap)\n        result.append(pair[1])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            else:\n                curr_dist, curr_pair = heapq.heappop(heap)\n                if num1 + num2 < curr_dist:\n                    heapq.heappush(heap, (num1 + num2, (num1, num2)))\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n            if len(pairs) == k:\n                break\n    heapq.heapify(pairs)\n    result = []\n    while pairs:\n        pair = heapq.heappop(pairs)\n        result.append(pair)\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    list1.sort()\n    n = len(list1)\n    min_product = float('inf')\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare to min_product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product and list of tuples\n    min_product = float('inf')\n    min_tuples = []\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples and check if it's smaller than the current minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_tuples = [(list1[i], list1[j])]\n            elif product == min_product:\n                min_tuples.append((list1[i], list1[j]))\n\n    return min_tuples"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of any pair of tuples in the list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be infinity\n    min_product = float('inf')\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current pair of tuples\n            product = list1[i][0] * list1[j][1]\n            # Update the minimum product if the current product is smaller than the previous minimum product\n            min_product = min(min_product, product)\n    # Return the minimum product\n    return min_product\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval[1:]:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize min value as the first element of the list\n    min_val = listval[0]\n\n    # Iterate over the rest of the list\n    for i in range(1, len(listval)):\n        # If the current element is smaller than the min value, update it\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(lst):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[0], min_val(lst[1:]))"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input should be a list.\")\n    if len(listval) == 0:\n        raise ValueError(\"List should not be empty.\")\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Convert the list to a list of tuples, where each tuple contains a value and its type\n    list_of_tuples = [(x, type(x)) for x in listval]\n    # Sort the list of tuples by value in ascending order\n    sorted_list = sorted(list_of_tuples, key=lambda x: x[0])\n    # Extract the minimum value and its type from the sorted list\n    min_val_type = sorted_list[0]\n    min_val = min_val_type[0]\n    # Return the minimum value and its type as a tuple\n    return (min_val, min_val_type[1])"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list of mixed data types as input and returns the minimum value in the list.\n    \"\"\"\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list.\")\n\n    min_val = float('inf')\n\n    for val in listval:\n        if isinstance(val, int):\n            if val < min_val:\n                min_val = val\n        elif isinstance(val, float):\n            if val < min_val:\n                min_val = val\n        elif isinstance(val, str):\n            if len(val) < len(min_val):\n                min_val = val\n        else:\n            raise TypeError(\"Input contains an unsupported data type.\")\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    This function takes in a heterogeneous list as input and returns the minimum value in the list.\n    '''\n    if not listval:\n        return \"List is empty.\"\n    else:\n        min_val = float('inf')\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    # find the minimum value in the list\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'_(.)', r'\\1', word)\n    return word[:1].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all underscores to spaces and capitalize the first letter of the result\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word).title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    # Convert snake_case to CamelCase\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = ''.join([word.capitalize() for word in words])\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake_case to CamelCase\n    camel_word = re.sub('_(.)', lambda match: match.group(1).upper(), word)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Split the given word into words separated by underscores\n    words = word.split('_')\n    \n    # Initialize the result variable as an empty string\n    camel_word = ''\n    \n    # Iterate over the words\n    for i, word in enumerate(words):\n        # If the current word is not the first one in the list\n        if i > 0:\n            # Convert the word to camel case\n            camel_word += word.title()\n        # If the current word is the first one in the list\n        else:\n            # Add the word as is\n            camel_word += word\n            \n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Convert snake case to camel case\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.upper()\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by snake case and capitalize the first letter\n    camel_case_word = [word[0].upper()] + [word[i:i+1].capitalize() for i in range(1, len(word))]\n    # Convert the list to a string and return it\n    return ''.join(camel_case_word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2!= 0: # checking if the number is odd\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element of the list.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element from the list.\n    If the list has less than n elements, it returns None.\n    '''\n    if len(lst) < n:\n        return None\n    else:\n        return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return [x[n-1] for x in list1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element of the list.\n    '''\n    try:\n        if n < 1 or n > len(list1):\n            raise ValueError\n        else:\n            return list1[n-1]\n    except ValueError:\n        return \"Error: Index out of range!\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        # Check if n is a valid integer\n        if not isinstance(n, int) or n < 1:\n            raise ValueError('n must be a positive integer.')\n        # Check if the list is not empty\n        if not list1:\n            raise ValueError('List is empty.')\n        # Check if the nth element exists in the list\n        if n > len(list1):\n            raise ValueError('n is greater than the length of the list.')\n        # Extract the nth element from the list\n        return list1[n-1]\n    except ValueError as ve:\n        # If any exception is raised, print an error message and exit\n        print(f'Error: {ve}')\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists and checks if any value in the first list exists in the second list or not.\n\n    Args:\n        list1 (list): list of values.\n        list2 (list): list of values.\n\n    Returns:\n        bool: True if any value in list1 exists in list2, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n        list1 (list): First sequence of values to check.\n        list2 (list): Second sequence of values to check.\n\n    Returns:\n        bool: True if any value in the first sequence exists in the second sequence, otherwise False.\n    \"\"\"\n    # Create a set to store the unique values in list1\n    set1 = set(list1)\n\n    # Iterate over the values in list2 and check if any of them exist in set1\n    for value in list2:\n        if value in set1:\n            return True\n\n    # If no overlapping values are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes in two lists as arguments and returns True if any element of list1 exists in list2 and False otherwise.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Convert lists to sets to eliminate duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n\n    # Check if any value in list1 exists in list2\n    for val in list1:\n        if val in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Check whether any value in list1 is present in list2\n    for element in list1:\n        if element in list2:\n            return True\n    # If no value found in list1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any common value between the two lists and False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns a boolean value indicating whether any value \n    in the first list exists in the second list or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # set to empty set to store unique values from list1\n    unique_list1 = set(list1)\n    # iterate through list2 to find overlapping values\n    for value in list2:\n        if value in unique_list1:\n            return True\n    # if no overlapping values found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns True if there is a common value\n    in any of the sequences, and False otherwise.\n    '''\n    # Sort the two input sequences\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    # Check if the two sorted sequences have any common values\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            return True\n    # If no common values are found, return False\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2 and arr[i]!= max1:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -float('inf')\n    first_max = -float('inf')\n    second_max = -float('inf')\n\n    for i in arr:\n        if i > max_product:\n            second_max = max_product\n            max_product = i\n        elif i > first_max and i!= max_product:\n            second_max = first_max\n            first_max = i\n        elif i > second_max and i!= max_product and i!= first_max:\n            second_max = i\n\n    return [max_product, second_max]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple with two integers representing the pair with the highest product.\n    \"\"\"\n    # First, we sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n\n    # Next, we iterate through the sorted array and find the pair with the highest product\n    for i in range(len(sorted_arr)):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] * sorted_arr[j] > max_product:\n                max_product = sorted_arr[i] * sorted_arr[j]\n                pair = (sorted_arr[i], sorted_arr[j])\n\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    else:\n        max_product = float('-inf')\n        second_max_product = float('-inf')\n        max_pair = (float('-inf'), float('-inf'))\n        second_max_pair = (float('-inf'), float('-inf'))\n\n        for i in range(len(arr)):\n            if arr[i] > max_product:\n                second_max_product = max_product\n                max_product = arr[i]\n                max_pair = second_max_pair\n                second_max_pair = (float('-inf'), float('-inf'))\n            elif arr[i] > second_max_product and arr[i]!= max_product:\n                second_max_product = arr[i]\n                second_max_pair = max_pair\n                max_pair = (float('-inf'), float('-inf'))\n\n        return second_max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (float('-inf'), float('-inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_pair[0]:\n                max_pair = (product, arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple containing the two indices of the pair with the highest product.\n    '''\n    highest = arr[0]\n    highest_product = arr[0] * arr[1]\n\n    for i in range(1, len(arr)):\n        current_product = arr[i] * arr[i+1]\n        if current_product > highest_product:\n            highest = i\n            highest_product = current_product\n\n    return (highest, highest+1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max1*max2, min1*min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # initialize two variables to store the maximum product\n    max1 = arr[0]\n    max2 = arr[0]\n\n    # loop through the array and update max1 and max2 based on the product of the previous maximum and the current element\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    # return the maximum product\n    return max1 * max2"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of lists where each inner list contains tuples that share the same first element as the first tuple in the input list.\n\n    For example, if the input list is [(1, 2), (3, 4), (1, 2), (5, 6)], the output will be [[(1, 2), (1, 2)], [(3, 4)], [(5, 6)]].\n    \"\"\"\n\n    # Create a dictionary to store the count of each unique first element\n    element_count = {}\n\n    # Iterate over the input list of tuples\n    for tup in Input:\n        # Get the first element of the tuple\n        first_element = tup[0]\n        # If the first element is already in the dictionary, increment its count\n        if first_element in element_count:\n            element_count[first_element] += 1\n        # If the first element is not in the dictionary, add it with a count of 1\n        else:\n            element_count[first_element] = 1\n\n    # Create an empty list to store the result\n    result = []\n\n    # Iterate over the keys in the dictionary (i.e., the unique first elements)\n    for key in element_count:\n        # Create an empty list to store the tuples that share this first element\n        temp_list = []\n        # Iterate over the input list of tuples again\n        for tup in Input:\n            # If the first element of the tuple matches the current key, append it to the temporary list\n            if tup[0] == key:\n                temp_list.append(tup)\n        # If there are any tuples with this first element, add them to the result list as a new inner list\n        if temp_list:\n            result.append(temp_list)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique_elements = set()\n    for item in Input:\n        unique_elements.add(item[0])\n    common_elements = []\n    for item in Input:\n        if item[0] in unique_elements and item not in common_elements:\n            common_elements.append(item)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a dictionary to store count of each first element in the list\n    first_count = {}\n    # loop through the list of tuples\n    for t in Input: \n        # get the first element of the tuple\n        first = t[0]\n        # if the first element is already in the dictionary, increment its count\n        if first in first_count:\n            first_count[first] += 1\n        # if the first element is not in the dictionary, add it with a count of 1\n        else:\n            first_count[first] = 1\n    # create a list of tuples containing the first element and its count\n    first_list = [(key, value) for key, value in first_count.items()]\n    # sort the list by count in descending order\n    first_list.sort(key=lambda x: x[1], reverse=True)\n    # print the first element with the highest count\n    print(first_list[0][0])"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    common_element = None\n    count = 0\n    for item in Input:\n        if len(item) > 1:\n            count += 1\n            if count == 1:\n                common_element = item[0]\n            elif item[0] == common_element:\n                common_element = None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i][0] == Input[j][0]:\n                    common_elements.append(Input[i][0])\n                    break\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of common first element in the list.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through the list of tuples\n    for tup in Input:\n        \n        # Get the first element of the tuple\n        first_element = tup[0]\n        \n        # Check if this first element is already in the common_elements list\n        if first_element in common_elements:\n            \n            # If it is, add the tuple to the corresponding list\n            if first_element in common_elements[common_elements.index(first_element)]:\n                common_elements[common_elements.index(first_element)].append(tup)\n            else:\n                common_elements.append([tup])\n        \n        # If the first element is not in the common_elements list, add it to the list\n        else:\n            common_elements.append([tup])\n            \n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Set empty dictionary to store common elements\n    common_elements = {}\n\n    # Iterate through the input list of tuples\n    for i in Input:\n        # Get the first element of the tuple\n        first_element = i[0]\n\n        # Check if the first element is already in the common_elements dictionary\n        if first_element in common_elements:\n            # If it is, increment its count\n            common_elements[first_element] += 1\n        else:\n            # If it isn't, add it to the dictionary with a count of 1\n            common_elements[first_element] = 1\n\n    # Find the maximum count and return the corresponding key in the dictionary\n    max_count = max(common_elements.values())\n    return [k for k, v in common_elements.items() if v == max_count]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i][0] == Input[j][0]:\n                    common_first_element.append(Input[i])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n\n    # Convert the list of tuples to a set to remove duplicates\n    set_of_tuples = set(Input)\n\n    # Initialize an empty list to store the common first element\n    common_first = []\n\n    # Iterate over the set of tuples and check if the first element is in common_first\n    for tup in set_of_tuples:\n        if tup[0] in common_first:\n            continue\n        else:\n            common_first.append(tup[0])\n\n    # Return the common first element\n    return common_first"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n\n    for i in lst: \n        if len(str(i)) > max_len: \n            max_len = len(str(i)) \n            max_elem = i \n\n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an argument and returns the element \n    of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n\n    # Finding the length of the list\n    n = len(lst)\n\n    # Initializing variables\n    max_length = 0\n    max_elem = ''\n\n    # Iterating through the list\n    for i in range(n):\n        # Checking the length of the current element\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_elem = lst[i]\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an input and returns the element of the list having the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an argument and returns the element of the list having the maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_len:\n            max_len = len(str(lst[i]))\n            max_elem = lst[i]\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list as input and rounds every element of the list using the round() function. \n    It then calculates the sum of all the rounded numbers and prints the result multiplied by the length of the list.\n    '''\n    total = 0\n    for num in lst:\n        total += round(num)\n    result = total * len(lst)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_numbers = [i for i in range(2, 2*n+1, 2)]\n    cube_sum = sum([i**3 for i in even_numbers])\n    return cube_sum\n\nn = int(input(\"Enter the number of even natural numbers you want to find the cube sum for: \"))\ncube_sum = cube_Sum(n)\nprint(\"The cube sum of first\", n, \"even natural numbers is\", cube_sum)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 0\n    while i < n:\n        cube_sum += i*i*i\n        i += 2\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    while count < n:\n        sum_of_cubes += (2*count+1)**3\n        count += 1\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n\n    # Initialize a variable to store the cube sum\n    cube_sum = 0\n\n    # Iterate through the first n even natural numbers\n    for i in range(n):\n        # Calculate the cube of the current even natural number\n        cube = i ** 3\n\n        # Add the cube to the cube sum\n        cube_sum += cube\n\n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of cubes of even natural numbers\n    even_cube_sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the cube of the even natural number\n        cube = i ** 3\n        # Add the cube to the even cube sum\n        even_cube_sum += cube\n    # Return the even cube sum\n    return even_cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of first\",n,\"even natural numbers is:\", cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n    return sum_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Join the elements of the tuple with the delimiter\n    concatenated_string = delimiter.join(str(i) for i in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n\n    # iterate over each element in the tuple\n    for element in test_tup:\n        # concatenate the element with the delimiter\n        result = result + delimiter + str(element)\n\n    # remove the first delimiter from the result string\n    result = result[len(delimiter):]\n\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Concatenates each element of a tuple by a delimiter.\n\n    Parameters:\n    test_tup (tuple): a tuple of strings or other elements to concatenate.\n    delimiter (str): the delimiter to use between the elements.\n\n    Returns:\n    str: the concatenated string.\n    \"\"\"\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i)\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return \" \".join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    result = result[:-1] # Remove the last delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    sum_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        count += 1\n    average = sum_cubes/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    #initializing variables\n    sum = 0\n    count = 0\n\n    #finding the sum of cubes of the first n natural numbers\n    for i in range(1,n+1):\n        sum += i**3\n        count += 1\n\n    #finding the average of cubes\n    avg = sum/count\n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n        count += 1\n    return sum_cube/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0  \n    for i in range(1, n+1):  \n        total += i*i*i  \n    average = total/n  \n    return average  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cube = i**3\n        cubes.append(cube)\n    average = sum(cubes)/len(cubes)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    return sum_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n        count += 1\n    return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    # initialize sum to zero and count to zero\n    sum = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # calculate cube of i and add to sum\n        sum += i ** 3\n        # increment count\n        count += 1\n\n    # calculate and return average of cubes\n    return sum / count"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for string in test_tuple:\n        rear_indices.append(len(string) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for item in test_tuple:\n        rear_tuple.append(item[-1])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(len(test_tuple[i]) - 1)\n    return rear_indices"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    if not nums:\n        return []\n    new_list = []\n    for num in nums:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regex pattern to match the date format\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\n    \n    # Use the re.search() method to search for a match in the string\n    match = re.search(pattern, dt)\n    \n    # Check if a match was found\n    if match:\n        # Extract the year, month, and day values from the match object\n        year = match.group(\"year\")\n        month = match.group(\"month\")\n        day = match.group(\"day\")\n        \n        # Define the new date format using f-strings\n        new_format = \"{day:02}-{month:02}-{year}\"\n        \n        # Use the new date format to convert the date string\n        new_dt = new_format.format(day=day, month=month, year=year)\n        \n        # Return the new date string\n        return new_dt\n    else:\n        # If no match was found, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date format from yyyy-mm-dd to dd-mm-yyyy\n    dt = re.sub('-', '/', dt)\n    # Reverse the order of the date and month\n    new_dt = dt[6:8] + '-' + dt[4:6] + '-' + dt[0:4]\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:4] + '-' + dt[4:2] + '-' + dt[2:0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date format from yyyy-mm-dd to dd-mm-yyyy\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    dt_new = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return dt_new"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regex pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.sub() method to replace the matched pattern with new format\n    dt_new = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return dt_new"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the pattern to match the date string\n    match = re.match(pattern, dt)\n    # If a match was found, extract the date components and convert to dd-mm-yyyy format\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern for date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    # Use re.match() to check if the input matches the pattern\n    match = re.match(pattern, dt)\n    if match:\n        # Convert date to dd-mm-yyyy format using split() and join() methods\n        date_list = dt.split('-')\n        year, month, day = date_list\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\2-\\1-\\3', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the date format in the given string\n    match = re.match(pattern, dt)\n    # If no match found, return the original date string\n    if not match:\n        return dt\n    # Extract the year, month and day from the matched groups\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    # Convert the day, month and year to the desired format\n    new_date = f'{day}-{month}-{year}'\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date_match = re.search(pattern, dt)\n    if date_match:\n        year = date_match.group(1)\n        month = date_match.group(2)\n        day = date_match.group(3)\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        print('Invalid date format.')"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list\n\nmy_list = [64, 34, 25, 12, 22, 11, 90]\nsorted_list = shell_sort(my_list)\nprint(sorted_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Step 1: Do increment sequence for different sizes of increments\n    inc = n // 2\n    while inc > 0:\n        # Step 2: Sort array using the increment value\n        for i in range(inc, n):\n            temp = my_list[i]\n            j = i\n            while j >= inc and my_list[j - inc] > temp:\n                my_list[j] = my_list[j - inc]\n                j -= inc\n            my_list[j] = temp\n        # Step 3: Decrement the increment value and repeat steps 2 and 3\n        inc //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n\n    n = len(my_list)\n\n    # Find the largest gap\n    gap = n // 2\n    while gap > 0:\n        # Perform insertion sort for this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            # Move elements of arr[0..i-1], that are greater than key,\n            # to one position ahead of their current position\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n\n        # Reducing the gap to find the next one\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns their elementwise and tuples.\n    '''\n    and_tup = tuple(elem1 & elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tups = []\n    for i in range(len(test_tup1)):\n        and_tups.append((test_tup1[i] & test_tup2[i], test_tup1[i] & test_tup2[i]))\n    return and_tups"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result += (test_tup1[i], test_tup2[i])\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Args:\n        test_tup1 (tuple): A tuple of integers.\n        test_tup2 (tuple): A tuple of integers.\n\n    Returns:\n        A tuple of the same length as test_tup1 containing the elementwise and tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples are of unequal length.\")\n        return\n\n    # Extract the elementwise and tuples from the two input tuples\n    and_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"There are no real solutions to the equation.\"\n    elif discriminant == 0:\n        return \"There is only one real solution to the equation.\"\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix of the parabola is x = {:.2f} and x = {:.2f}.\".format(x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # If the discriminant is positive, there is a real root\n    if disc > 0: \n        # Find the two real roots\n        x1 = (-b + disc**0.5) / (2*a) \n        x2 = (-b - disc**0.5) / (2*a) \n\n    # If the discriminant is zero, there is a single real root\n    elif disc == 0: \n        x1 = x2 = -b / (2*a) \n\n    # If the discriminant is negative, there are no real roots\n    else: \n        return \"There are no real roots\"\n\n    # Sort the roots in ascending order\n    if x1 > x2: \n        x1, x2 = x2, x1 \n\n    # Return the directrix\n    return x1 "
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d < 0:\n        return None\n    elif d == 0:\n        return -b / (2*a)\n    else:\n        return (-b - (b**2 - 4*a*c)**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is:\", root1)\n        print(\"The other directrix is:\", root2)\n    elif discriminant == 0:\n        root1 = -b/(2*a)\n        root2 = -b/(2*a)\n        print(\"The directrix is:\", root1)\n    else:\n        print(\"The equation of the parabola has no real roots.\")\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta > 0:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n    elif delta == 0:\n        x1 = x2 = -b / (2 * a)\n    else:\n        x1 = None\n        x2 = None\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return \"The directrix does not exist.\"\n    \n    elif discriminant == 0:\n        return (-b)/(2*a)\n    \n    else:\n        root = (-b + math.sqrt(discriminant))/(2*a)\n        return root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    if b**2 - 4*a*c < 0: \n        return \"The directrix does not exist.\" \n\n    else: \n        x = (-b + (b**2 - 4*a*c)**0.5)/(2*a) \n        y = (-b - (b**2 - 4*a*c)**0.5)/(2*a) \n        return \"The directrix of the parabola is {}.\".format(x)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"The directrix does not exist\")\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is\", root1)\n        print(\"The directrix is\", root2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # If the intersection is not empty, there is a common element\n    if intersection:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element, False otherwise.\n    '''\n    common = []\n    for num in list1:\n        if num in list2 and num not in common:\n            common.append(num)\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # set to empty set to avoid duplicates\n    common_set = set()\n\n    # iterate through list1 and check if each element is in list2\n    for element in list1:\n        if element in list2:\n            common_set.add(element)\n\n    # if common set is empty, return False\n    if not common_set:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2 and element not in common:\n            common.append(element)\n    return True if len(common) > 0 else False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if both lists are non-empty\n    if not list1 or not list2:\n        return False\n    \n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there is at least one common element in the sets\n    return len(set1 & set2) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in list1:\n        if i in list2 and not common:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for element in list1:\n        if element in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    return math.sqrt(area)\n\nprint(median_trapezium(5, 7, 12)) # output: 8.449208887556912"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Find the height of the trapezium\n    height = 0.5 * (area1 + area2)\n    \n    # Find the length of the trapezium\n    length = 0.5 * (base1 + base2)\n    \n    # Find the area of the semi-perimeter of the trapezium\n    semi_perimeter_area = 0.5 * (base1 * (height - height/3) + base2 * (height - height/3))\n    \n    # Find the area of the trapezium\n    total_area = area1 + area2\n    \n    # Find the perimeter of the trapezium\n    perimeter = length + 2 * height\n    \n    # Find the area of the trapezium using Heron's formula\n    area = 0.5 * perimeter * (perimeter - length)\n    \n    # Find the length of the trapezium using Heron's formula\n    trapezium_length = 2 * height * area / (length + 2 * height)\n    \n    # Calculate the median length of the trapezium\n    median_length = 0.5 * (trapezium_length + trapezium_length * (1 - 2 * abs(trapezium_length - 0.5 * (base1 + base2))))\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    half_height = height / 2\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    length1 = area ** 0.5\n    length2 = area - length1\n    median = 0.5 * (length1 + length2)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the length of the trapezium by adding the two bases and the height\n    length = base1 + base2 + height\n\n    # Calculate the area of the trapezium by the formula: area = (base1 + base2) * height / 2\n    area = (base1 + base2) * height / 2\n\n    # Calculate the base of the trapezium that is shorter than the other two bases\n    shorter_base = min(base1, base2)\n\n    # Calculate the length of the shorter base\n    shorter_length = length - 2 * shorter_base\n\n    # Calculate the length of the longer base\n    longer_length = shorter_length + 2 * shorter_base\n\n    # Find the area of the shorter base using the formula: area_shorter = shorter_length * shorter_base\n    area_shorter = shorter_length * shorter_base\n\n    # Find the area of the longer base using the formula: area_longer = longer_length * longer_base\n    area_longer = longer_length * longer_base\n\n    # Calculate the length of the trapezium that is shorter than the other two bases\n    median_shorter = shorter_length * area_shorter / area\n\n    # Calculate the length of the trapezium that is longer than the other two bases\n    median_longer = longer_length * area_longer / area\n\n    # Return the median of the two lengths\n    return (median_shorter + median_longer) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * (base1 + base2) * height\n    length1 = 0.5 * (base1 + area)\n    length2 = 0.5 * (base2 + area)\n    length_median = 0.5 * (length1 + length2)\n    return length_median\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the lengths of the sides of the trapezium\n    side1 = 0.5 * base1\n    side2 = 0.5 * base2\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2)\n    \n    # Calculate the length of the base of the trapezium\n    base = math.sqrt(area / math.tan(math.pi/3))\n    \n    # Calculate the length of the hypotenuse of the trapezium\n    hypotenuse = 0.5 * math.sqrt(area)\n    \n    # Find the length of the side that is shorter\n    if side1 <= side2:\n        shorter_side = side1\n    else:\n        shorter_side = side2\n    \n    # Calculate the difference between the shorter side and the hypotenuse\n    shorter_length = hypotenuse - shorter_side\n    \n    # Find the length of the longer side\n    if shorter_side == side1:\n        longer_side = side2\n    else:\n        longer_side = side1\n    \n    # Calculate the length of the trapezium's center\n    center_length = 0.5 * (longer_side + shorter_side)\n    \n    # Calculate the median length of the trapezium\n    median_length = center_length + shorter_length\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * base1 + 0.5 * base2\n    \n    # Calculate the length of the smaller base\n    smaller_base = min(base1, base2)\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * (smaller_base * height)\n    \n    # Calculate the length of the larger base\n    larger_base = max(base1, base2)\n    \n    # Calculate the distance of the two bases from the center of the trapezium\n    center_distance = trapezium_length / 2\n    \n    # Find the two points of intersection of the two parallelograms\n    intersection_point1 = 0.5 * area + center_distance\n    intersection_point2 = 0.5 * area - center_distance\n    \n    # Calculate the length of the shorter base\n    shorter_base = max(larger_base, 0.5 * area - center_distance)\n    \n    # Calculate the distance of the two bases from the center of the trapezium\n    center_distance = trapezium_length / 2\n    \n    # Find the two points of intersection of the two parallelograms\n    intersection_point3 = 0.5 * area - center_distance\n    intersection_point4 = 0.5 * area + center_distance\n    \n    # Calculate the length of the longer base\n    longer_base = min(smaller_base, 0.5 * area + center_distance)\n    \n    # Calculate the distances of the two bases from the intersection point\n    base1_distance = 0.5 * (intersection_point1 - shorter_base)\n    base2_distance = 0.5 * (intersection_point2 - longer_base)\n    \n    # Calculate the distances of the two bases from each other\n    base1_to_base2_distance = 0.5 * (intersection_point2 - intersection_point1)\n    base2_to_base1_distance = 0.5 * (intersection_point4 - intersection_point3)\n    \n    # Calculate the angle of the parallelogram formed by the two bases\n    angle = 2 * (0.5 * (intersection_point2 - intersection_point1)) / trapezium_length\n    \n    # Determine the side of the trapezium that has the shorter base\n    if intersection_point1 < shorter_base:\n        side1 = base1\n        side2 = base1_distance\n        side3 = base2\n        side4 = base2_distance\n    elif intersection_point2 < longer_base:\n        side1 = base2\n        side2 = base2_distance\n        side3 = base1\n        side4 = base1_distance\n    else:\n        # Intersection is in the middle of the trapezium\n        side1 = base1\n        side2 = base1_distance\n        side3 = base2\n        side4 = base2_distance\n    \n    # Calculate the area of the trapezium formed by the two parallelograms\n    trapezium_area = 0.5 * (side1 * height + side2 * height + side3 * height + side4 * height)\n    \n    # Calculate the length of the trapezium formed by the two parallelograms\n    trapezium_length = (trapezium_area / trapezium_area) ** 0.5\n    \n    # Calculate the median length of the trapezium\n    median_length = (side1 + side2 + side3 + side4) / 4\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Find the length of the two shorter sides\n    side1 = min(base1, base2)\n    side2 = max(base1, base2)\n\n    # Calculate the length of the trapezium\n    trapezium_length = (side1 + side2) * height\n\n    # Sort the sides in descending order\n    sides = sorted([side1, side2], reverse=True)\n\n    # Calculate the length of the median\n    median_length = (sides[0] + sides[1]) / 2\n\n    # Calculate the difference between the length of the median and the length of the trapezium\n    diff = abs(trapezium_length - median_length)\n\n    # If the difference is less than half of the length of the median, the median is between the two shorter sides\n    if diff < median_length / 2:\n        return sides[0]\n\n    # If the difference is greater than half of the length of the median, the median is between the two longer sides\n    else:\n        return sides[1]"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height/2\n    length1 = half_height * base1\n    length2 = half_height * base2\n    if length1 > length2:\n        median = length2\n    else:\n        median = length1\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    :param base1: the length of the first base of the trapezium\n    :type base1: float\n    :param base2: the length of the second base of the trapezium\n    :type base2: float\n    :param height: the height of the trapezium\n    :type height: float\n    :return: the median length of the trapezium\n    :rtype: float\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2) * height\n\n    # Calculate the difference between the areas of the trapezium\n    difference = area - 0.5 * perimeter\n\n    # Calculate the median length of the trapezium\n    median = difference / 2\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(num)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes two arguments:\n    arr: a list of integers representing the array\n    number: an integer representing the number that needs to be checked\n\n    It returns a boolean value indicating whether the number is greater than the elements in the array or not.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{number} is greater than {element}\")\n            break"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            print(f\"{i} is greater than {number}\")\n            break"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(?<=a)[bB]*')\n    return pattern.search(text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns True if the string has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\w+b\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba.*\\bb\\b')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string\n    n = str(n)\n    # find the length of the string\n    length = len(n)\n    # return the last digit of the string\n    return int(n[length-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    # check if the number is an integer\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    # if the number is negative, convert it to positive\n    if n < 0:\n        n = abs(n)\n    # get the last digit of the number\n    digit = n % 10\n    return digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a list containing the negative numbers of the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a list containing all the negative numbers in the original list.\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            new_str += char\n        elif char.isspace():\n            new_str += \" \"\n        elif char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            if int(char) % 2!= 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_list = []\n    for char in str1:\n        if int(char) % 2 == 1:\n            odd_list.append(char)\n    return ''.join(odd_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalpha() and (char.islower() or char.isupper())])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Convert the string to a list\n    string_list = list(string)\n    # Loop through the list and remove odd characters\n    for i in range(len(string_list)):\n        if string_list[i].isdigit():\n            string_list.pop(i)\n    # Convert the list back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in string:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalpha() and char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # convert string to list of characters\n    str_list = list(str1)\n\n    # loop through each character in the list\n    for i in range(len(str_list)):\n        # if the character is odd, remove it from the list\n        if str_list[i] % 2!= 0:\n            str_list.pop(i)\n            i -= 1\n\n    # convert the list back to a string and return it\n    return ''.join(str_list)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    This function takes a list of tuples as input and returns a dictionary\n    with the number of occurrences of each bidirectional tuple pair.\n\n    Example:\n    >>> count_bidirectional([(1, 2), (2, 3), (3, 4), (2, 4)])\n    {((2, 4), (1, 2)): 1, ((2, 3), (1, 2)): 1, ((2, 2), (1, 2)): 2}\n    \"\"\"\n    count_dict = {}\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            pair = (test_list[i], test_list[j])\n            if pair in count_dict:\n                count_dict[pair] += 1\n            else:\n                count_dict[pair] = 1\n    return count_dict"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and test_list[j] < test_list[i]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result += i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n\n    Parameters:\n    L (list): a list of multiple integers\n\n    Returns:\n    int: the sum of all integers in L\n    \"\"\"\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_int = 1\n    for num in L:\n        single_int *= num\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize an empty list to store the single integer digits\n    single_digits = []\n    \n    # Loop through the list of integers\n    for num in L:\n        # Initialize a counter for the number of digits in the integer\n        digit_count = 0\n        \n        # Loop through each digit of the integer and add it to the counter\n        while num > 0:\n            num, remainder = divmod(num, 10)\n            digit_count += 1\n        \n        # Add the digit count to the list of single integer digits\n        single_digits.append(digit_count)\n    \n    # Join the list of single integer digits into a single integer\n    result = int(''.join(str(digit_count) for digit_count in single_digits))\n    \n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    single = 0\n    for num in L:\n        if num == 0:\n            multiple = 0\n        elif num < 0:\n            if multiple == 0:\n                single = single - num\n            else:\n                single = single + num\n        elif num > 0:\n            if multiple == 0:\n                single = single + num\n            else:\n                single = single + multiple\n    return single"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns a list containing\n    the first adverb and its position(s) in the sentence.\n\n    Input:\n    text: a string containing the sentence to be processed.\n\n    Output:\n    A list containing the first adverb and its position(s) in the sentence.\n    If no adverbs are found, the function returns an empty list.\n    '''\n\n    # Define the regular expression pattern to search for adverbs\n    pattern = re.compile(r'\\b(?:in|about|after|before|above|below|behind|behind|above|below|out|near|toward|across|behind|in|over|under|on|to|by|during|as|through|throughout|about|before|after|behind|behind|above|below|out|near|toward|across|behind|in|over|under|on|to|by|during|as|through|throughout|about|before|after|behind|behind|above|below|out|near|toward|across|behind|in|over|under|on|to|by|during|as|through|throughout|about|before|after|behind|behind|above|below|out|near|toward|across|behind|in|over|under|on|to|by|during|as|through|throughout|about|before|after|behind|behind|above|below|out|near|toward|across|behind|in|over|under|on|to|by|during|as|through|throughout|about|before|after|behind|behind|above|below|out|near|toward|across|behind|in|over|under|on|to|by|during|as|through|throughout)\\b')\n\n    # Use the regular expression search method to find all matches in the text\n    matches = pattern.finditer(text)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Iterate through the matches and add them to the adverbs list\n    for match in matches:\n        adverb = match.group(0)\n        position = match.start()\n        adverbs.append((adverb, position))\n\n    # Return the adverbs list\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w+\\b', text)\n    for i, adv in enumerate(adverbs):\n        print(f'{adv} is at position {i+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns a list of tuples, where each tuple contains an adverb and its position in the sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w+\\b', text)\n    adverb_positions = []\n\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((adverb, i))\n\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(adverb)\\b')\n    \n    # Find all the matches of the pattern in the given text\n    matches = pattern.findall(text)\n    \n    # Initialize an empty dictionary to store the adverb and its positions\n    adverb_positions = {}\n    \n    # Iterate over each match and add the adverb and its position to the dictionary\n    for i, match in enumerate(matches):\n        adverb_positions[match] = i\n    \n    # Return the dictionary with adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b(?:(?:imm|late|early|mid|finally|only|mostly|soo)\\b|enough|perhaps|just|surely|finally|surely|really|almost|somewhat|thoroughly|pretty|really|almost|very|mostly|just|only|a little|enough|just enough|not a lot|not too much|enough to be|enough to be at least|even if|in fact|as much as|just a little|just a bit|just a little bit|even if|a little|little|some|somewhat|little|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little bit|not a lot|not too much|enough to be at least|enough to be|enough to be|enough to be|a lot|a bit|a little"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b(?:in|on|at|to|from|of|by|under)\\b', text.lower())\n\n    # Check if there are any adverbs\n    if not adverbs:\n        return \"No adverbs found in the sentence.\"\n\n    # Sort the adverbs by their position in the sentence\n    adverbs.sort()\n\n    # Print the first adverb and its position in the sentence\n    print(f\"The first adverb is '{adverbs[0]}' and it appears at position {adverbs[0].find(' ')} in the sentence.\")\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for adverbs\n    pattern = r'\\b([a-z]+)\\s*([a-z]+)\\b'\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Initialize a dictionary to store the adverbs and their positions\n    adverbs = {}\n\n    # Iterate over the matches and extract the adverb and its position\n    for match in matches:\n        adverb = match.group(1)\n        position = match.span()[0]\n\n        # Add the adverb to the dictionary and its position to the list\n        if adverb in adverbs:\n            adverbs[adverb].append(position)\n        else:\n            adverbs[adverb] = [position]\n\n    # Return a list of tuples containing the adverbs and their positions\n    return adverbs.items()"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define the regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function will take a given sentence and return the position of all the adverbs in that sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b([a-zA-Z]+)\\b\\s*(?:[.,!?])\\s*(?:[a-zA-Z]+\\s+)*[a-zA-Z]+'\n    \n    # Use the regular expression pattern to find all occurrences of the adverb in the text\n    adverbs = re.findall(pattern, text)\n    \n    # If there are no adverbs, return an empty list\n    if not adverbs:\n        return []\n    \n    # Initialize a list to store the adverb and its position in the sentence\n    positions = []\n    \n    # Loop through each adverb found\n    for i, adverb in enumerate(adverbs):\n        # Append the adverb and its position to the positions list\n        positions.append((adverb, i))\n    \n    # Sort the positions list based on the position of the adverb in the sentence\n    positions.sort(key=lambda x: x[1])\n    \n    # Return the sorted positions list\n    return positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * math.pi * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 12 * l + 8\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # find the length of one side of the cube\n    s = 2 * l\n    # find the area of the cube\n    area = 6 * l ** 2\n    # find the volume of the cube\n    vol = l ** 3\n    # calculate the surface area using Heron's formula\n    surface_area = (2 * l * s + l ** 2 * vol) / 3\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    total_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        total_count += 1\n\n    return pos_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0\n\n    total_positive = 0\n    for num in nums:\n        if num > 0:\n            total_positive += 1\n\n    return total_positive / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    total_count = len(arr)\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ration of positive numbers in the array.\n    '''\n    positive_nums = array('i', [num for num in nums if num > 0])\n    return len(positive_nums) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    positive_count = 0\n    total_count = len(nums)\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n\n    ratio = positive_count / total_count\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    total = len(arr)\n\n    for i in range(total):\n        if arr[i] > 0:\n            count += 1\n\n    if count > 0:\n        return count / total\n    else:\n        return 0"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Initialize the array to store the count of positive and negative numbers\n    positive_counts = array('i', [0, 0])\n    \n    # Iterate through the array and count the positive and negative numbers\n    for num in nums:\n        if num > 0:\n            positive_counts[0] += 1\n        else:\n            positive_counts[1] += 1\n\n    # Find the ratio of positive and negative numbers and return it as a float\n    return float(positive_counts[0]) / (positive_counts[0] + positive_counts[1])"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    This function counts the number of positive integers in the array.\n    \"\"\"\n    # Initialize an empty array to store the positive integers\n    positive_arr = array('i')\n    \n    # Iterate through the array and add the positive integers to the array\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n            \n    # Calculate the ration of positive integers in the array\n    pos_count = len(positive_arr)\n    neg_count = len(nums) - pos_count\n    pos_ratio = pos_count / neg_count\n    \n    return pos_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number present in the list.\n    If the list contains only positive numbers, then it will return None.\n    \"\"\"\n    largest = None\n    for num in lst:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as an input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = float('-inf')\n    for num in list1: \n        if num < 0: \n            neg_num = max(neg_num, num) \n    return neg_num "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function finds the largest negative number in a given list.\n\n    Parameters:\n    list1 (list): A list of integers.\n\n    Returns:\n    int: The largest negative number in the list.\n    \"\"\"\n    # Initialize largest negative number to the first element of the list\n    largest = list1[0]\n\n    # Iterate over the remaining elements of the list\n    for num in list1[1:]:\n        # Check if the current number is negative and larger than the current largest number\n        if num < 0 and num > largest:\n            largest = num\n\n    # Return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    max_neg = list1[0] # initialize max_neg with the first element of the list\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg: # if the current element is negative and greater than max_neg, update max_neg\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize a variable to store the largest negative number\n    largest_num
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number found in the list.\n    '''\n    largest_num = list1[0] # initialize largest negative number to be the first element of the list\n\n    # iterate through the list and compare each element with the current largest negative number\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n\n    return largest_num"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])-K+1):\n            if sum(test_list[i][j:j+K]) == 0:\n                test_list[i] = test_list[i][:j]\n                break\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a tuple list and a value K as input and returns a new list with each tuple in the \n    original list trimmed by K.\n    \"\"\"\n    new_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(len(tup)) if i % K!= 0)\n        new_list.append(trimmed_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1][K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) <= K:\n            trimmed_list.append(tup)\n        else:\n            trimmed_list.append(tup[:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(x[i:i+K]) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Trim each tuple by k in the given tuple list\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + tuple(test_list[i][K:]))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tup[:K]\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = (test_list[i][j][0], test_list[i][j][1]+K)\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples should have the same length.\")\n    result = [test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))]\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length\")\n        return\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] * test_tup2[i])\n        return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n    test_tup1 (tuple): First tuple to be multiplied.\n    test_tup2 (tuple): Second tuple to be multiplied.\n\n    Returns:\n    tuple: Tuple containing the elements of test_tup1 multiplied by elements of test_tup2.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count = Counter(lst)\n    return {key: count[key] for key in tup}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    count = {}\n    for item in lst:\n        if item in cnt:\n            count[item] = cnt[item]\n        else:\n            count[item] = 0\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in lst: \n        count_dict[item] = tup.count(item)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes in a tuple and a list as input. \n    It returns a Counter object which contains the count of occurrence of all elements of the list in the tuple.\n    \"\"\"\n    count = Counter(tup)\n    count.subtract(Counter(lst))\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(tup)\n    count_dict_lst = Counter(lst)\n    count_dict_lst_dict = count_dict.copy()\n    count_dict_lst_dict.update(count_dict_lst)\n    print(count_dict_lst_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup) \n    count = Counter() \n    for i in range(len(lst)): \n        if lst[i] in counter: \n            count[lst[i]] = counter[lst[i]] \n    return count.most_common() \n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    count_tup = [] \n    for i in tup: \n        count_tup.append(count[i]) \n    return tuple(count_tup) "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary where each key represents an element of the tuple and its value represents the number of times that element appears in the list. \n    '''\n    count_dict = Counter(tup)  # count the frequency of each element in the tuple\n    for element in lst:          # iterate over the list\n        if element in count_dict:   # check if the element is present in the dictionary\n            count_dict[element] += 1    # increment the count if it is\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Use Counter() method to count the occurrences of each element in the list\n    cnt = Counter(lst)\n    # Iterate over the tuple elements and check if they are in the list\n    for elem in tup:\n        if elem in cnt:\n            # If yes, increment the count of the element in the tuple\n            cnt[elem] += 1\n    # Return the updated tuple with the count of each element\n    return tup, cnt"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = Counter(lst) \n    count_list = list(count_dict.items()) \n\n    count_list = [tup + (count,) for tup in count_list] \n\n    return count_list"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(n):\n        p = p * (4*i*i + 2*i + 1) // (4*i*i - 2*i + 1)\n        sum += p\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(sum([int(x) for x in str(i**3)]))\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize the sum of perrin numbers to 0\n    perrin_sum = 0\n    \n    # Loop through each number between 1 and n\n    for num in range(1, n+1):\n        # Calculate the sum of the perrin numbers\n        perrin_sum += num\n        \n    # Return the sum of perrin numbers\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(i*(i+1))\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(i * (i + 1))\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    # initialize the sum to zero\n    total = 0\n    \n    # loop through each digit in the number\n    for digit in str(n):\n        # convert the digit to an integer\n        digit = int(digit)\n        \n        # add the digit to the sum\n        total += digit\n        \n        # calculate the next perrin number\n        next_perrin = (total * 10 + 1) % 10\n        \n        # add the next perrin number to the sum\n        total += next_perrin\n    \n    # return the total sum of perrin numbers\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # initialize the sum\n    sum = 0\n    # loop n times\n    for i in range(n):\n        # calculate the sum of perrin numbers\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum_p = 1\n    while p <= n:\n        sum_p += p\n        p += 1\n    return sum_p"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[0]:\n            result.append(l[i][:l[0]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a size as input.\n    It extracts the specified size of strings from the list and returns a new list of extracted strings.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = str_list[:l]\n    return str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Create an empty list to store extracted strings\n    extracted_strings = []\n\n    # Iterate over the given list of string values\n    for s in l:\n        # Check if the current string is of the specified size\n        if len(s) == l[0]:\n            # Append the current string to the extracted_strings list\n            extracted_strings.append(s)\n\n    # Return the extracted_strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and the size of the strings as input,\n    and returns a list of strings of specified size from the input list.\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].index(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) <= size:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), l):\n        result.append(\" \".join(l[i:i+l]))\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Remove all whitespaces from the string\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expression\n    pattern = r'\\s+'\n    text1 = re.sub(pattern, '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Define a regular expression pattern to match whitespace characters\n    pattern = re.compile(r'\\s+')\n    # Use the search() method to search for all non-overlapping matches of the pattern in the text\n    result = pattern.sub('', text)\n    # Return the resulting string without any whitespaces\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regex\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (sale_amount - actual_cost) / actual_cost * 100\n    if loss_percentage > 0:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount < 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of its even factors.\n    '''\n    # initialize a variable to keep track of the sum of even factors\n    sum_of_factors = 0\n    \n    # loop through the range of numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # check if i is evenly divisible by n\n        if n % i == 0:\n            # if it is, add it to the sum of factors\n            if i % 2 == 0:\n                sum_of_factors += i\n    \n    # return the sum of factors\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    count = 0\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n % i == 0:\n                total += i\n    if count % 2 == 0:\n        total += n\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    i = 2\n\n    while i * i <= n:\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n        i += 1\n\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenFactors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                evenFactors.append(i)\n    return sum(evenFactors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                even_sum += i\n            if n/i%2 == 0:\n                even_sum += n/i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # initialize a variable to store the sum of even factors\n    sum_even_factors = 0\n    \n    # loop through all numbers from 2 to the square root of the input number\n    for i in range(2, int(math.sqrt(n))+1): \n        # if the input number is divisible by i, add i to the sum of even factors\n        if n % i == 0: \n            if i % 2 == 0: \n                sum_even_factors += i\n    \n    # return the sum of even factors\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    \n    # Initialize sum variable to zero \n    sum = 0 \n    \n    # Loop through all the odd numbers from 3 to n (excluding n) \n    for i in range(3, n, 2): \n\n        # Check if i is even \n        if i % 2 == 0: \n\n            # If i is even, add it to the sum \n            sum += i\n            \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Iterate through all numbers from 2 to n-1\n    for i in range(2, n+1) : \n\n        # Check if i is even\n        if i % 2 == 0 : \n\n            # Add i to sum\n            sum += i\n\n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number n as input and returns the sum of even factors of n.\n    '''\n    sum = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i \n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern to match a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # Use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Print the matches\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # Define the regular expression pattern\n    pattern = r'\\b[a-zA-Z]+z\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Print the matches\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z|Z)\\w+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[zZ]\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regular expression pattern to match words containing 'z'\n    pattern = r'\\b[a-z]*z\\b'\n    # Use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Convert the given month number to the corresponding month name\n    month_name = [\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n        \"August\", \"September\", \"October\", \"November\", \"December\"\n    ][monthnum2-1]\n\n    # Check whether the month name has 31 days or not\n    if month_name in [\"February\", \"April\", \"June\", \"September\", \"November\"]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError('Invalid month number.')"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum2 in ['04', '06', '09', '11']:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    monthnum = monthnum2.strip()\n    days_in_month = {\n        '1': 31, '3': 31, '5': 31, '7': 31, '8': 31, '10': 31, '12': 31,\n        '2': 28, '4': 30, '6': 30, '9': 30, '11': 30\n    }\n    if monthnum in days_in_month:\n        if days_in_month[monthnum] == 31:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        if monthnum2 % 4 == 0:\n            if monthnum2 % 100 == 0:\n                if monthnum2 % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return True if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0) else False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = 1000000\n    min_sublist = None\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns a list containing the sublist with minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n                \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an argument and returns the sublist with the minimum length. \n    '''\n\n    # initialize a variable to store the length of the minimum sublist \n    min_len = float('inf') \n\n    # loop through the list and calculate the length of each sublist \n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if len(lst[i:j+1]) < min_len: \n                min_len = len(lst[i:j+1]) \n\n    # create a new sublist for the minimum sublist \n    min_sublist = [] \n\n    # loop through the original list again and add the elements to the new sublist if their length is equal to the minimum sublist length \n    for i in range(len(lst)): \n        if len(lst[i:i+min_len]) == min_len: \n            min_sublist.append(lst[i]) \n\n    # return the minimum sublist \n    return min_sublist "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize minimum length and current sublist\n    min_len = float('inf')\n    current_sublist = []\n    # loop through each element in the list\n    for i in lst:\n        # add the element to the current sublist if its length is smaller than the minimum length\n        if len(current_sublist) < min_len:\n            current_sublist = [i]\n        # if the length of the current sublist is equal to the minimum length, add the element to the list\n        elif len(current_sublist) == min_len:\n            current_sublist.append(i)\n        # if the length of the current sublist is greater than the minimum length, update the minimum length and reset the current sublist\n        else:\n            min_len = len(current_sublist)\n            current_sublist = [i]\n    # return the current sublist with minimum length\n    return current_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist that has the minimum length.\n    '''\n    min_len = float('inf') #initialize minimum length to infinity\n    sublist = None #initialize sublist to None\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            sublist = i\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    # Initialize variables\n    min_sublist = []\n    min_length = float('inf')\n    \n    # Loop through all sublists in the given list\n    for i in range(len(lst)):\n        # Loop through all possible sublists with length up to i+1\n        for j in range(len(lst[i])):\n            # Create a sublist of length i+1\n            sublist = lst[i][:j+1]\n            # Check if the sublist has length less than min_length\n            if len(sublist) < min_length:\n                # Update min_sublist and min_length\n                min_sublist = sublist\n                min_length = len(sublist)\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)): \n        if len(lst[i]) < min_len: \n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize variables\n    min_sublist = lst\n    min_length = len(lst)\n\n    # Loop through the list and find the sublist with minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j]\n            length = len(sublist)\n            if length < min_length:\n                min_sublist = sublist\n                min_length = length\n\n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize minimum sublist length and current sublist length\n    min_length = float('inf')\n    curr_length = 0\n\n    # Loop through each sublist of the list\n    for sublist in lst:\n        # Update current sublist length\n        curr_length = len(sublist)\n\n        # Check if current sublist is shorter than minimum sublist\n        if curr_length < min_length:\n            # Update minimum sublist length\n            min_length = curr_length\n            # Store current sublist as minimum sublist\n            min_sublist = sublist\n\n    # Return minimum sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and returns a new string with uppercase substrings removed.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    return uppercase_pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'[A-Z]'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'\\b[A-Z]\\w+\\b', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a pattern to match uppercase substrings\n    pattern = re.compile(r'([A-Z]+)')\n    \n    # Find all occurrences of uppercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # Loop through all matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z].*[A-Z]'\n\n    # use the re.sub() method to remove all uppercase substrings from the string\n    result = re.sub(pattern, '', string)\n\n    # return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = r'(?i)\\b[A-Z][a-z]*\\b'\n    # use re.findall to find all uppercase substrings in the string\n    substrings = re.findall(pattern, str1)\n    # loop through the list of substrings and remove them from the string\n    for substring in substrings:\n        str1 = re.sub(substring, '', str1)\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub('([a-z])([A-Z])', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Using regular expressions to remove uppercase substrings\n    uppercase_pattern = re.compile('[A-Z]+')\n    result = re.sub(uppercase_pattern, '', string)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a list containing the first element of each sublist in the original list.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        for j in i:\n            result.append(j)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a list of the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize the count variable to zero\n    count = 0\n    # loop through each character in the string\n    for char in str:\n        # if the character is uppercase, increment the count\n        if char.isupper():\n            count += 1\n    # return the count of upper case characters\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n\n    :param string: the string to be analyzed\n    :return: the count of upper case characters in the string\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    '''\n    This function counts the number of uppercase letters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = list1[i:j]\n            combinations.append(combination)\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n    \n    # Loop through each element of the input list\n    for i in range(len(list1)):\n        # Define a list to store the current combination\n        current_combination = []\n        \n        # Loop through each element of the input list again\n        for j in range(len(list1)):\n            # If the current element is not equal to the current element of the current combination, add it to the current combination\n            if j!= i:\n                current_combination.append(list1[j])\n        \n        # Add the current combination to the combinations list\n        combinations.append(current_combination)\n    \n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1) - i + 1):\n            yield list1[j:j+i]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Generate the base case for the recursive algorithm\n    if len(list1) == 1:\n        yield [list1[0]]\n    else:\n        # Generate all combinations of the first element\n        for x in combinations_list(list1[1:]):\n            # Append the first element to each combination\n            for combo in x:\n                yield [list1[0]] + combo"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def helper(curr, result):\n        if not curr:\n            result.append(''.join(curr))\n            return\n        for i in range(len(list1)):\n            if i > 0 and curr[0] == curr[i-1]:\n                continue\n            helper(curr[:i] + curr[i+1:], result)\n\n    helper(list1, [])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)+1):\n                result.append(list1[i:j])\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize the list to store the combinations\n    combinations = []\n    # loop through each element in the list\n    for i in range(len(list1)):\n        # initialize a variable to keep track of the current combination\n        current_combination = []\n        # loop through the remaining elements of the list\n        for j in range(len(list1)-1, i, -1):\n            # add the current element to the current combination\n            current_combination.append(list1[j])\n        # add the current combination to the list of combinations\n        combinations.append(current_combination)\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here *= arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n\n    :param arr: A list of integers representing the input array.\n    :return: An integer representing the maximum product subarray.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = 1\n            \n        if current_product > max_product:\n            max_product = current_product\n            start = i\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = arr[i]\n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    \n    for num in arr:\n        curr_product = max(num, curr_product*num)\n        max_product = max(max_product, curr_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_product = arr[0]\n    current_product = 1\n    for i in range(1, len(arr)):\n        current_product = max(current_product * arr[i], arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if all values are of same type\n    if type(dict.values()[0]) == type(dict.values()[1]):\n        # if values are same type, check if all values are same\n        for value in dict.values():\n            if value!= dict.values()[0]:\n                return False\n    else:\n        return False\n\n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if dict[key]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input. The function \n    checks if all the values in the dictionary are same. If all values are \n    same, it returns True, else it returns False.\n    '''\n\n    if len(dict)!= n:\n        return False\n\n    for value in dict.values():\n        if len(set(value)) == 1:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if key in dict.keys()[-n:] and dict[key]!= dict[dict.keys()[-n:]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 1\n    for i in dict.values():\n        if count == 1:\n            prev = i\n        else:\n            if i!= prev:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # convert the dictionary into a set to remove duplicates\n    values = set(dict.values())\n    # check if the length of the set is 1\n    if len(values) == 1:\n        # if so, all values are the same, so return True\n        return True\n    # if the length is greater than 1, all values are different, so return False\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    all_values = dict.values()\n    if len(all_values) == 1:\n        return True\n    for value in all_values:\n        if value!= all_values[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    value_set = set()\n    for value in dict.values():\n        value_set.add(value)\n    if len(value_set) == 1 and n in value_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    all_values = list(dict.values())\n    if len(all_values) == 1:\n        return True\n    elif len(all_values) > 1:\n        all_values.remove(all_values[0])\n        for value in all_values:\n            if value!= all_values[0]:\n                return False\n        return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # create an empty dictionary\n    dict2 = {}\n    # loop through each key in the dictionary\n    for key in dict1:\n        # if the value of the key is not an empty string, add it to the new dictionary\n        if dict1[key]!= \"\":\n            dict2[key] = dict1[key]\n    # return the new dictionary with empty items removed\n    return dict2"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    # create a dp array to store the maximum product formed by multiplying all the subsequences\n    dp = [0] * n\n    # initialize dp[i] to the product of arr[0] and arr[i]\n    dp[0] = arr[0] * arr[1]\n    # iterate through the array starting from index 2\n    for i in range(2, n):\n        # if the element is greater than the previous element, update dp[i]\n        if arr[i] > arr[i-1]:\n            dp[i] = max(dp[i-1] * arr[i], dp[i])\n        # if the element is less than the previous element, update dp[i]\n        else:\n            dp[i] = max(dp[i-1] * arr[i], dp[i-1])\n    # find the maximum product from the dp array\n    max_prod = max(dp[i] for i in range(n))\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)   \n    if n == 0:   \n        return 0   \n    if n == 1:   \n        return arr[0]   \n    if arr[0] >= arr[1]:   \n        return max(arr[0] * arr[1], max_product(arr[1:]))   \n    else:   \n        return max(arr[1] * arr[0], max_product(arr[0:]))   "
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # create a dictionary to store the maximum product for each prefix of the array\n    max_products = {}\n\n    # iterate over each prefix of the array\n    for i in range(1, len(arr) + 1):\n        # initialize the maximum product for the current prefix to negative infinity\n        max_product_prefix = float('-inf')\n\n        # iterate over each subarray of length i in the array\n        for subarr in arr[:i]:\n            # calculate the product of all numbers in the subarray\n            product = 1\n            for num in subarr:\n                product *= num\n\n            # update the maximum product for the current prefix\n            if product > max_product_prefix:\n                max_product_prefix = product\n\n        # update the maximum product for the entire array\n        if i == len(arr) and max_product_prefix > max_products.get(i - 1, float('-inf')):\n            max_products[i] = max_product_prefix\n\n    # return the maximum product for the entire array\n    return max(max_products.values())"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    for i in range(1, n):\n        dp[i] = max(arr[i], arr[i] * dp[i-1])\n        max_product_ending_here = max(max_product_ending_here, dp[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        if i == 0:\n            current_product = arr[i]\n            max_product = arr[i]\n        elif i == 1:\n            current_product = arr[i]\n            max_product = max(current_product, arr[i])\n        else:\n            current_product *= arr[i]\n            max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(n):\n        if arr[i] > 0:\n            max_ending_here = max(max_ending_here * arr[i], max_ending_here)\n            min_ending_here = min(min_ending_here * arr[i], min_ending_here)\n        else:\n            if max_ending_here > 1:\n                max_so_far = max(max_so_far, max_ending_here)\n            max_ending_here = 1\n            min_ending_here = 1\n\n    if max_ending_here > 1:\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize max_ending_here and min_ending_here variables\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # Initialize max_so_far and min_so_far variables\n    max_so_far = max_ending_here\n    min_so_far = min(arr[0], arr[1])\n    \n    for i in range(1, n):\n        # Update max_ending_here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n        \n        # Update min_ending_here\n        if arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            min_ending_here = min_ending_here * arr[i]\n        \n        # Update max_so_far\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if min_ending_here < min_so_far:\n            min_so_far = min_ending_here\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n    if n == 2:\n        return max(arr[0] * arr[1], arr[1] * arr[0])\n\n    # Initialize the maximum product and the current product with the first two elements of the array\n    max_product = arr[0] * arr[1]\n    curr_product = arr[0] * arr[1]\n\n    # Iterate over the array from the second element and calculate the maximum product formed by the increasing subsequence\n    for i in range(2, n):\n        # If the current element is less than the previous element, the maximum product can be achieved by swapping the current and previous elements\n        if arr[i] < arr[i - 1]:\n            curr_product = arr[i] * arr[i - 1]\n            max_product = max(max_product, curr_product)\n        else:\n            # If the current element is greater than or equal to the previous element, the maximum product can be achieved by just multiplying the current element with the previous element\n            curr_product = arr[i]\n            max_product = max(max_product, curr_product)\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Initialize two pointers at the beginning and end of the array\n    i, j = 0, n - 1\n\n    # Initialize variables to store the maximum product and the length of the subsequence\n    max_product_so_far = arr[0] * arr[1]\n    max_subsequence_length = 1\n\n    # Iterate through the array from the second element to the last element\n    while i < j:\n        # Calculate the current product of the subsequence\n        current_product = arr[i] * arr[j]\n\n        # If the current product is greater than the maximum product so far, update the maximum product and length\n        if current_product > max_product_so_far:\n            max_product_so_far = current_product\n            max_subsequence_length = j - i + 1\n\n        # If the current product is negative, move the left pointer to the right until the current product becomes positive\n        if current_product < 0:\n            i += 1\n\n        # If the current product is positive, move the right pointer to the left until the current product becomes negative\n        else:\n            j -= 1\n\n    # If the maximum product so far is negative, set it to zero\n    if max_product_so_far < 0:\n        max_product_so_far = 0\n\n    return max_product_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(zip(*test_tup)[0])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    pairwise_sum = 0\n    for i in range(n - 1):\n        pairwise_sum += test_tup[i] + test_tup[i + 1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # initialize variables\n    prev_elem = test_tup[0]\n    sum_of_neighboring_pairs = 0\n    count = 0\n\n    # loop through the tuple, adding up the pairwise elements\n    for elem in test_tup:\n        sum_of_neighboring_pairs += prev_elem + elem\n        prev_elem = elem\n        count += 1\n\n    # return the sum of the pairwise additions\n    return sum_of_neighboring_pairs"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define a list comprehension to iterate over all pairs of adjacent elements in the tuple\n    adjacent_pairs = [(test_tup[i], test_tup[i+1]) for i in range(len(test_tup)-1)]\n    \n    # Define a function to calculate the sum of two numbers\n    def sum_of_two(a, b):\n        return a + b\n    \n    # Use the list comprehension to apply the function to the adjacent pairs and sum them\n    pairwise_sum = sum([sum_of_two(a, b) for a, b in adjacent_pairs])\n    \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables to store the sum of the pairs\n    first_sum = 0\n    second_sum = 0\n    \n    # iterate through the tuple using a for loop\n    for i in range(len(test_tup)-1):\n        # add the current element to the sum of the previous elements\n        first_sum += test_tup[i]\n        # add the next element to the sum of the previous elements\n        second_sum += test_tup[i+1]\n    \n    # return the sum of the two sums\n    return first_sum + second_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    n = len(test_tup)\n    for i in range(1, n):\n        total += test_tup[i] - test_tup[i-1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define the size of the tuple\n    size = len(test_tup)\n    # Initialize the sum of the pairwise additions\n    pairwise_sum = 0\n    # Loop through the tuple and add the pairwise additions\n    for i in range(size-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    # Return the sum of the pairwise additions\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    if len(test_tup) < 2:\n        return None\n\n    pairwise_sum = 0\n\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup) - 1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod *= num\n        prod %= n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a modulo number as input and returns the product of the array modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_remainder(arr, n):\n    \"\"\"\n    Find the product of the array multiplication modulo n using matrix exponentiation.\n    \"\"\"\n    # Create a matrix of size len(arr) x len(arr)\n    matrix = [[0 for _ in range(len(arr))] for _ in range(len(arr))]\n\n    # Populate the matrix with the values in the array\n    for i in range(len(arr)):\n        matrix[i][i] = arr[i]\n\n    # Create a matrix of size n x n\n    identity = [[1, 0], [0, 1]]\n    matrix = [identity] + matrix\n\n    # Perform matrix exponentiation to calculate the product modulo n\n    product = [1]\n    for _ in range(len(matrix) - 1):\n        matrix = [[matrix[i][j] * product[j] for j in range(len(matrix[i]))] for i in range(len(matrix))]\n        product = [[matrix[i][j] for j in range(len(matrix[i]))] for i in range(len(matrix))]\n\n    # Calculate the remainder using the last element of the product matrix\n    remainder = product[-1][0] % n\n\n    # Calculate the result using the remainder and the original array\n    result = [0] * len(arr)\n    for i in range(len(arr)):\n        result[i] = (remainder * arr[i]) % n\n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as input and returns the product of the array modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product*num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result to 1\n    result = 1\n    \n    # Calculate the product of the array elements modulo n\n    for num in arr:\n        result = (result * num) % n\n    \n    return result"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list l as an input parameter and returns a boolean value indicating whether the list contains consecutive numbers or not.\n    \"\"\"\n\n    # Create a new list to store the numbers in the original list\n    num_list = []\n\n    # Loop through each element in the original list\n    for i in l:\n        # If the current element is not equal to the previous element, add it to the new list\n        if i!= num_list[-1]:\n            num_list.append(i)\n\n    # Check if the length of the new list is equal to the length of the original list\n    if len(num_list) == len(l):\n        # If it is, return True, indicating that the list contains consecutive numbers\n        return True\n    else:\n        # If it isn't, return False, indicating that the list doesn't contain consecutive numbers\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    # initialize variables\n    consecutive = True\n    current_num = l[0]\n\n    # loop through the list\n    for i in range(1, len(l)):\n        # check if the current number is the next consecutive number\n        if l[i] - current_num!= 1:\n            consecutive = False\n            break\n        # update the current number for the next iteration\n        current_num = l[i]\n\n    # return the result\n    return consecutive"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n\n    # check if the list is empty or not\n    if len(l) == 0:\n        return True\n\n    # initialize variables for the first and second elements of the list\n    prev = l[0]\n    curr = l[1]\n\n    # loop through the rest of the list\n    for i in range(2, len(l)):\n        # check if the current element is greater than the previous element\n        if curr > prev:\n            # if it is, return False as there are consecutive numbers\n            return False\n        # if it is not, update the variables for the next iteration\n        prev = curr\n        curr = l[i]\n\n    # if the loop finishes without returning False, it means there are no consecutive numbers\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list and checks whether the numbers are consecutive or not.\n    '''\n\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n        else:\n            continue\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Create a set from the first list and convert it to a list\n    set1 = set(test_list1)\n    list1 = list(set1)\n\n    # Create a set from the second list and convert it to a list\n    set2 = set(test_list2)\n    list2 = list(set2)\n\n    # Loop through the first list and find all the common elements with the second list\n    intersection = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            intersection.append(list1[i])\n\n    # Return the tuple intersection\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create an empty set to store the unique elements of the first list\n    unique_elements1 = set()\n    # loop through the first list and add each element to the set\n    for element in test_list1:\n        unique_elements1.add(element)\n    # create an empty set to store the unique elements of the second list\n    unique_elements2 = set()\n    # loop through the second list and add each element to the set\n    for element in test_list2:\n        unique_elements2.add(element)\n    # find the intersection of the two sets and return it as a list\n    return list(unique_elements1.intersection(unique_elements2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a dictionary to store the unique tuples of list1\n    dict1 = {}\n    # loop through each tuple in list1\n    for item in test_list1:\n        # if the tuple is not already in the dictionary, add it\n        if item not in dict1:\n            dict1[item] = True\n    \n    # create a dictionary to store the unique tuples of list2\n    dict2 = {}\n    # loop through each tuple in list2\n    for item in test_list2:\n        # if the tuple is not already in the dictionary, add it\n        if item not in dict2:\n            dict2[item] = True\n    \n    # find the intersection of the dictionaries\n    intersection = dict1.keys() & dict2.keys()\n    \n    # create a list to store the unique tuples in the intersection\n    result_list = []\n    # loop through each tuple in the intersection\n    for item in intersection:\n        # if the tuple is in both dictionaries, add it to the result list\n        if item in dict1 and item in dict2:\n            result_list.append(item)\n    \n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in test_list1:\n        if i in test_list2:\n            result.append(i)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of the elements in test_list2\n    test_set2 = set(test_list2)\n    # Create an empty set to store the elements in test_list1 that also appear in test_list2\n    intersection_set = set()\n    # Iterate through each element in test_list1\n    for elem1 in test_list1:\n        # If the element is in test_set2, add it to the intersection_set\n        if elem1 in test_set2:\n            intersection_set.add(elem1)\n    # Convert the intersection_set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # use set() to remove duplicates from test_list1\n    unique_list1 = set(test_list1)\n    # use set() to remove duplicates from test_list2\n    unique_list2 = set(test_list2)\n    # find the intersection of unique_list1 and unique_list2\n    intersection = unique_list1.intersection(unique_list2)\n    # convert the intersection to a list\n    intersection_list = list(intersection)\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n\n    # Create an empty set to store the intersection of the two sets\n    set_intersection = set()\n\n    # Loop through each element in the first set\n    for element in set_list1:\n        # Check if the element is also in the second set\n        if element in set_list2:\n            # If it is, add it to the intersection set\n            set_intersection.add(element)\n\n    # Return the intersection set as a list\n    return list(set_intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Combine the two lists into one list\n    combined_list = test_list1 + test_list2\n\n    # Use a set to remove duplicates\n    unique_list = list(set(combined_list))\n\n    # Find the intersection of the two lists\n    intersection_list = [x for x in combined_list if x in unique_list]\n\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Remove duplicates from list1\n    list1 = list(set(test_list1))\n\n    # Create an empty list to store the intersection\n    result = []\n\n    # Iterate over list1 and check if each element is also in list2\n    for element1 in list1:\n        if element1 in test_list2:\n            result.append(element1)\n\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets for faster search\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    result_set = set1.intersection(set2)\n    # Convert the result set back to a list\n    result_list = list(result_set)\n    # Sort the list in ascending order of the first element\n    result_list.sort(key=lambda x: x[0])\n    return result_list"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch,newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the current character is the specified character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with the characters replaced\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Args:\n    str1 (str): A string to be processed.\n    ch (str): The character to be replaced.\n    newch (str): The character that will replace the old character.\n\n    Returns:\n    str: The processed string.\n    \"\"\"\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the current character matches the old character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # check if the current character is the target character\n        if str1[i] == ch:\n            # replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create an empty string to store the modified string\n    modified_str = \"\"\n    # loop through each character in the original string\n    for char in str1:\n        # if the character matches the search character, replace it with the replacement character\n        if char == ch:\n            modified_str += newch\n        else:\n            modified_str += char\n    # return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # use Counter to count the frequency of each value in the dictionary\n    count = Counter(dict1.values())\n    # sort the dictionary by value using sorted() method\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    # create a new dictionary with sorted key-value pairs\n    sorted_dict = {k: v for k, v in sorted_dict}\n    # return the new dictionary with sorted key-value pairs\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    This function takes a dictionary as input and returns a sorted dictionary based on its values.\n    \"\"\"\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(counter):\n    \"\"\"\n    Sort a dictionary by value.\n\n    Args:\n    counter (Counter): A Counter object containing the items to sort.\n\n    Returns:\n    list: A list of tuples sorted by value in descending order.\n    \"\"\"\n\n    sorted_items = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # create a new dictionary from the sorted Counter object\n    sorted_dict = {k: v for k, v in sorted_counter}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n\n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return dict(sorted_dict)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        print(\"Array must have at least 2 elements.\")\n        return\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the maximum and minimum values in the array\n    max_value = max(nums)\n    min_value = min(nums)\n\n    # find the sum of the maximum and minimum values\n    return max_value + min_value"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n\n    Args:\n        nums (list): list of integers\n\n    Returns:\n        tuple: a tuple containing the sum of the largest and smallest value in the array, respectively.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    return (largest + smallest,)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return None\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    # find the sum of the largest and smallest value\n    big_sum = nums[0] + nums[1]\n    small_sum = nums[0] + nums[2]\n    return big_sum, small_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return \"Array is empty\"\n    elif len(nums) == 1:\n        return \"The largest value is:\", nums[0], \"and the smallest value is:\", nums[0]\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            if num < smallest:\n                smallest = num\n        return \"The largest value is:\", largest, \"and the smallest value is:\", smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of the largest and smallest values.\n    \"\"\"\n    # Get the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest values in the array\n    max_value = max(nums)\n    min_value = min(nums)\n    # calculate the sum of the largest and smallest values\n    total_sum = max_value + min_value\n    return total_sum"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case using the lower() method\n    lower_string = string.lower()\n    # Return the converted string\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Convert a given string to lower case using the lower() method.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]'\n    \n    # Use the re.sub() method to replace all lowercase substrings with an empty string\n    str2 = re.sub(pattern, '', str1)\n    \n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Compile a regular expression pattern to match lowercase letters\n    pattern = re.compile(r'[a-z]+')\n\n    # Find all lowercase substrings in the string\n    lowercase_substrings = pattern.findall(string)\n\n    # Remove the substrings from the string\n    for substring in lowercase_substrings:\n        string = string.replace(substring, '', 1)\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]')\n    # Use the pattern to find all lowercase substrings in the string\n    lowercase_substrings = pattern.findall(str1)\n    # Remove all lowercase substrings from the string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n\n    Args:\n    str1 (str): A string containing lowercase substrings\n\n    Returns:\n    str: A string with lowercase substrings removed\n    \"\"\"\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return lowercase.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings from the string using regex\n    pattern = r'\\b[a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Use re.sub() function to remove matched substrings from the string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # First we convert the number to a string so we can extract the first digit\n    num_str = str(n)\n\n    # Then we return the first digit of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n\n    # converting the number to a string\n    num = str(n)\n    \n    # getting the first digit of the string\n    first = num[0]\n    \n    # returning the first digit\n    return first\n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    n = str(n)\n    # extract the first character of the string\n    first_digit = n[0]\n    # return the first character of the string as the result\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns its first digit.\n    \"\"\"\n    # extract the first digit from the input number\n    first_digit = str(n)[0]\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = 0\n    while n > 0:\n        first_digit = n % 10\n        n = n // 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # convert the first character of the string to an integer\n    first_char = ord(num_str[0]) - ord('0')\n    # return the first character as an integer\n    return first_char"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number into a string\n    n_str = str(n)\n    # Find the first character in the string\n    first_char = n_str[0]\n    # Convert the first character into an integer and return it\n    return int(first_char)"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns only the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd integers.\n    '''\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            odd_list.append(list[i])\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # creating a new empty list for odd numbers\n    odd_list = []\n    # iterating over the list of integers\n    for num in list:\n        # checking if the number is odd\n        if num % 2 == 1:\n            # adding the odd number to the new list\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n):\n        return n * (n+1) ** 2 // 6\n    \n    # Function to calculate the sum of the first n natural numbers\n    def sum_of_natural_numbers(n):\n        return n * (n+1) // 2\n    \n    # Calculating the sum of cubes of the first n natural numbers\n    sum_of_cubes_n = sum_of_cubes(n)\n    \n    # Calculating the sum of the first n natural numbers\n    sum_of_natural_numbers_n = sum_of_natural_numbers(n)\n    \n    # Calculating the difference between the two sums\n    difference = sum_of_cubes_n - sum_of_natural_numbers_n\n    \n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # Function to calculate the sum of cubes of a list of numbers\n    def sum_of_cubes(lst):\n        return sum([x**3 for x in lst])\n    \n    # Function to calculate the sum of a list of numbers\n    def sum_of_list(lst):\n        return sum(lst)\n    \n    # Find the sum of cubes of the first n natural numbers\n    cubes_sum = sum_of_cubes(range(1, n+1))\n    \n    # Find the sum of the first n natural numbers\n    lst_sum = sum_of_list(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    diff = abs(cubes_sum - lst_sum)\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = 0\n    natural_numbers_sum = 0\n    for i in range(1, n+1):\n        cubes_sum += i**3\n        natural_numbers_sum += i\n    return abs(cubes_sum - natural_numbers_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        sum_of_numbers += i\n    \n    difference = sum_of_cubes - sum_of_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of cubes of first n natural numbers\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    \n    # calculate the sum of first n natural numbers\n    sum_n = 0\n    for i in range(1, n+1):\n        sum_n += i\n    \n    # calculate the difference between the two sums\n    difference = cube_sum - sum_n\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = 0\n    for i in range(1, n+1):\n        cubes_sum += i**3\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n\n    # Calculate the difference between the two sums\n    difference = abs(cubes_sum - sum_of_numbers)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    difference = sum_cubes - sum_natural\n    print(\"The difference between the sum of cubes of the first {} natural numbers and the sum of the first {} natural numbers is: {}\".format(n, n, difference))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i*i*i for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # find the sum of the first n natural numbers\n    sum_n = sum(range(1, n+1))\n\n    # find the sum of the cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n\n    # calculate the difference\n    diff = sum_n - sum_cubes\n\n    # return the result\n    return diff"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor_value = 0\n    \n    for i in range(N):\n        xor_value ^= A[i]\n        \n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value ^= A[j] - A[i]\n            if xor_value % 2!= 0:\n                count += 1\n                xor_value = 0\n                \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor_sum = 0\n        for j in range(i+1, N):\n            xor_sum += A[i] ^ A[j]\n        if xor_sum % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Initialize count to zero\n    count = 0\n    \n    # Loop through each number in the list\n    for i in range(N):\n        # Loop through each number after the current number\n        for j in range(i+1, N):\n            # Calculate the xor of the current and next numbers\n            xor = A[i] ^ A[j]\n            \n            # If the xor is odd, increment the count\n            if xor % 2!= 0:\n                count += 1\n    \n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum = xor_sum ^ A[i]\n    for i in range(N):\n        if ((xor_sum ^ A[i]) & 1) == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = \"\"\n\n    # iterate through each character in the input string\n    for char in string:\n        # check if the character is uppercase\n        if char.isupper():\n            # if it is, add a lowercase version of the character to the result\n            result += char.lower()\n        else:\n            # if it's lowercase, add an uppercase version of the character to the result\n            result += char.upper()\n\n    # return the final result\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Convert the string to lowercase\n    lower_string = string.lower()\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the lowercase string\n    for char in lower_string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert the character to lowercase\n            result += char.lower()\n        else:\n            # Convert the character to uppercase\n            result += char.upper()\n    # Return the final result\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isupper() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        elif char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # create empty lists to store the digits of the two numbers\n    digits1 = []\n    digits2 = []\n\n    # convert the numbers to lists of digits\n    while n1:\n        digits1.append(n1 % 10)\n        n1 //= 10\n\n    while n2:\n        digits2.append(n2 % 10)\n        n2 //= 10\n\n    # calculate the sum of the per-digit differences\n    result = 0\n    for i in range(max(len(digits1), len(digits2))):\n        result += abs(digits1[i] - digits2[i])\n\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    num1 = abs(n1)\n    num2 = abs(n2)\n    difference = num1 - num2\n\n    per_digit_difference = 0\n    while difference > 0:\n        per_digit_difference += difference % 10\n        difference //= 10\n\n    return per_digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    n1_list = [int(digit) for digit in str(n1)]\n    n2_list = [int(digit) for digit in str(n2)]\n\n    # Calculate the absolute difference between the two lists of digits\n    digit_diff = [abs(n1_list[i] - n2_list[i]) for i in range(len(n1_list))]\n\n    # Calculate the sum of the absolute differences\n    sum_digit_diff = sum(digit_diff)\n\n    return sum_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the input integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Find the length of the strings\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n\n    # Initialize the sum of differences to 0\n    diff_sum = 0\n\n    # Iterate over each digit of the two numbers\n    for i in range(min(n1_len, n2_len)):\n        # Calculate the difference between the corresponding digits of the two numbers\n        diff = int(n1_str[i]) - int(n2_str[i])\n\n        # Add the difference to the sum of differences\n        diff_sum += diff\n\n    # Add the difference between the remaining digits of the longer number to the sum of differences\n    if n1_len > n2_len:\n        for i in range(n2_len, n1_len):\n            diff = int(n1_str[i])\n            diff_sum += diff\n    elif n2_len > n1_len:\n        for i in range(n1_len, n2_len):\n            diff = int(n2_str[i])\n            diff_sum += diff\n\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    # Get the digits of n1 and n2 and store them in lists\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Initialize the sum to 0\n    distance = 0\n\n    # Iterate over the digits of both numbers\n    for i in range(len(digits1)):\n        # Calculate the absolute difference between the corresponding digits\n        diff = abs(digits1[i] - digits2[i])\n\n        # Add the difference to the sum\n        distance += diff\n\n    # Return the sum\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert both numbers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Initialize the sum of differences to 0\n    sum_diff = 0\n\n    # Iterate over each pair of digits in the lists\n    for i in range(len(digits1)):\n        diff = abs(digits1[i] - digits2[i])\n        sum_diff += diff\n\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n\n    # calculate the per-digit difference between the two lists of digits\n    digit_diff = [(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits)]\n\n    # calculate the sum of the per-digit differences\n    digit_sum = sum(digit_diff)\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        digit_diff = abs(n1%10 - n2%10)\n        sum_diff += digit_diff\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert integers to lists of digits\n    l1 = [int(d) for d in str(n1)]\n    l2 = [int(d) for d in str(n2)]\n\n    # calculate the per-digit difference between the two lists\n    diff_sum = 0\n    for i in range(len(l1)):\n        diff_sum += abs(l1[i] - l2[i])\n\n    # return the sum of the per-digit differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    \n    # calculate the per-digit difference between the two lists\n    diff = [abs(a - b) for a, b in zip(n1_digits, n2_digits)]\n    \n    # sum the per-digit differences\n    total_diff = sum(diff)\n    \n    return total_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = i + 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Loop through the list and calculate the maximum sum subarray\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if i >= size - size:\n            current_sum -= a[start]\n            start += 1\n\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the list\n    for i in range(size):\n        current_sum += a[i]\n\n        # Update the maximum sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Decrement the current sum if it goes below 0\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    i = 0\n    while i < len(a) - size + 1:\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n        i += 1\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return a[start:start+max_sum+1]\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        while current_sum > max_sum and i < len(a) - 1:\n            current_sum -= a[start]\n            start += 1\n        if current_sum > max_sum:\n            max_sum = current_sum\n            end = i\n\n    return a[end:end + size]\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return 0\n\n    max_sum = float('-inf')\n    current_sum = 0\n    end = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            end = i\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for element in test_tup1:\n        union_list.append(element)\n    for element in test_tup2:\n        if element not in union_list:\n            union_list.append(element)\n    return sorted(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Merging the two tuples into a single tuple\n    union_tup = test_tup1 + test_tup2\n    # Using set() method to remove duplicates from the tuple\n    unique_tup = set(union_tup)\n    # Using sorted() method to sort the unique tuple in ascending order\n    sorted_tup = sorted(unique_tup)\n    # Outputting the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # First, we need to remove duplicates from both tuples\n    unique_tup1 = list(set(test_tup1))\n    unique_tup2 = list(set(test_tup2))\n\n    # Then, we can concatenate the two sets and sort it to get the final output\n    result_set = set(unique_tup1 + unique_tup2)\n    final_list = sorted(list(result_set))\n\n    return final_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = test_tup1 + test_tup2 # creating a new list with all elements from both tuples\n    union_list = list(set(union_list)) # removing duplicates from the list using the set() function\n    union_list.sort() # sorting the list in ascending order\n    print(union_list) # outputting the sorted list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # Convert the list to a set to remove duplicates\n    unique_list = list(set(combined_list))\n    # Sort the list in ascending order\n    sorted_list = sorted(unique_list)\n    # Convert the sorted list back into a tuple and return it\n    return tuple(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two lists using the + operator\n    union_list = test_tup1 + test_tup2\n\n    # Sort the union list in ascending order\n    union_list.sort()\n\n    # Return the sorted union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for element in test_tup1:\n        union.append(element)\n    for element in test_tup2:\n        if element not in union:\n            union.append(element)\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples\n    union_set = test_tup1.union(test_tup2)\n    # convert the union set to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # return the sorted union list\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n\n    # Create a set from the combined tuple\n    unique_set = set(combined_tup)\n\n    # Convert the set to a list and sort it\n    sorted_list = sorted(list(unique_set))\n\n    # Output the sorted list as a tuple\n    print(tuple(sorted_list))"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n    current_length = 0\n\n    for i in lst:\n        current_length += 1\n\n        if current_length > max_length:\n            max_length = current_length\n        elif current_length == max_length:\n            max_length = max(max_length, current_length)\n\n        if i == 0:\n            current_length = 0\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list of sublists and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        sub_list = lst[i]\n        for j in range(i+1, len(lst)):\n            if j == i+1:\n                continue\n            sub_list.append(lst[j])\n        max_length = max(max_length, len(sub_list))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            sublist_length = len(sublist)\n            if sublist_length > max_length:\n                max_length = sublist_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    temp = []\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            temp = []\n            temp.append(lst[i])\n        else:\n            temp.append(lst[i])\n        if len(temp) > max_length:\n            max_length = len(temp)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            if len(lst[i:j+1]) > length:  \n                length = len(lst[i:j+1])  \n    return length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if maxLength < len(lst[i:j+1]):\n                maxLength = len(lst[i:j+1])\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            max_length = max(max_length, len(sub_lst))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initializing max_len to 0 and longest_sublist to an empty list\n    max_len = 0\n    longest_sublist = []\n\n    # iterating through the list\n    for i in range(len(lst)):\n        # initializing current_len to 0 and current_sublist to an empty list\n        current_len = 0\n        current_sublist = []\n        # iterating through the list from index i to the end\n        for j in range(i, len(lst)):\n            # appending each element of the current sublist to the current_sublist\n            current_sublist.append(lst[j])\n            # appending the length of the current sublist to the current_len\n            current_len += 1\n            # checking if the current_len is greater than the max_len\n            if current_len > max_len:\n                # updating the max_len and longest_sublist\n                max_len = current_len\n                longest_sublist = current_sublist\n\n    # returning the length of the longest sublist\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=[^\"])([^\\s]*)(?=[\"\\.,])'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    pattern = r'(?<=\")(.*?)(?=\")' # r'(?<=\")(.*?)(?=\")' - This pattern matches anything between double quotation marks (\")\n    values = re.findall(pattern, text) # re.findall(pattern, text) - This finds all occurrences of the pattern in the text and returns a list of matching values\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        value = match.strip('\"')\n        if value:\n            values.append(value)\n    return values\n\ntext = \"The value is between \"\"quotation marks\"\".\"\nresult = extract_values(text)\nprint(result)  # Output: ['quotation marks']"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?P<start>\"|\\'|\\(|\\[|\\{)(?P<value>.+?)(?P=start)')\n    matches = pattern.finditer(text)\n    values = []\n    for match in matches:\n        start_char = match.group('start')\n        value = match.group('value')\n        end_char = match.group(0)\n        if start_char == '\"' or start_char == \"'\":\n            value = value.strip('\"')\n        values.append((start_char, value, end_char))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    arr.sort()\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # create an empty list to store the characters\n    characters = []\n    # loop through each character in the string\n    for char in word:\n        # add the character to the list\n        characters.append(char)\n    # return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize a variable to hold the sum of the digits\n    total = 0\n    # Iterate over the digits and add each to the total\n    for digit in digits:\n        total += digit\n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Check if the input is a non-negative integer\n    if n < 0:\n        return \"The input should be a non-negative integer.\"\n    # Convert the integer to a string and then to a list of digits\n    digits = list(str(n))\n    # Initialize the sum variable to 0\n    total = 0\n    # Iterate over the digits and add them to the sum\n    for digit in digits:\n        total += int(digit)\n    # Return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then convert each character to an integer.\n    digits = [int(d) for d in str(n)]\n    # Use a loop to add up the digits.\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    while n >= 10:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        n = sum\n    return n"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each character in the string and add it to the sum\n    for digit in num_str:\n        digit = int(digit)\n        sum_of_digits += digit\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n\n    # Convert the integer to a string\n    s = str(n)\n\n    # Initialize a variable to store the sum of the digits\n    total = 0\n\n    # Loop through each character in the string\n    for i in s:\n        # Add the integer value of the character to the total\n        total += int(i)\n\n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # Check if the list is already sorted\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an input and returns True if the list is sorted, False otherwise.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    # Function to check whether a list is sorted or not\n    def is_sorted(lst):\n        # Check if the list is empty\n        if len(lst) == 0:\n            return True\n        # Check if the last element is smaller than the second last element\n        elif lst[-1] < lst[-2]:\n            return False\n        # Recursively check the list for sub-lists\n        else:\n            return is_sorted(lst[:-1])\n    \n    # Check if the input list is empty\n    if len(list1) == 0:\n        return True\n    # Check if the first element is smaller than the second element\n    elif list1[0] > list1[1]:\n        return False\n    # Recursively check the list for sub-lists\n    else:\n        return is_sorted(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    n = len(lst)\n    if n == 0 or n == 1:\n        return True\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list and checks whether it is sorted or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # loop through each sublist in the list1\n    for sublist in list1:\n        # convert the sublist to a string and sort it using sorted()\n        sublist = ''.join(sorted(sublist))\n        # convert the sorted string back to a list and append it to the original sublist\n        list1[list1.index(sublist)].append(sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create an empty list to store the sorted sublists\n    sorted_sublists = []\n    \n    # Iterate over each sublist in the original list\n    for sublist in list1:\n        # Convert the sublist to a string\n        sublist_str = str(sublist)\n        \n        # Split the sublist into a list of strings\n        sublist_list = sublist_str.split()\n        \n        # Sort the sublist in ascending order\n        sublist_list.sort()\n        \n        # Convert the sorted sublist back to a list\n        sublist_list = list(sublist_list)\n        \n        # Add the sorted sublist to the sorted_sublists list\n        sorted_sublists.append(sublist_list)\n    \n    # Return the sorted_sublists list\n    return sorted_sublists"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    # Create a set to remove duplicates from the given list of numbers\n    unique_nums = set(nums)\n    # Return a list containing only the unique numbers from the list\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): a list of lists containing numbers\n\n    Returns:\n        list: the list of unique numbers without duplicates\n    \"\"\"\n    # create a set of all the numbers from all the lists\n    all_nums = set(sum(nums, []))\n\n    # convert the set back to a list and return it\n    return list(all_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): A list of lists containing integers.\n\n    Returns:\n        list: A list containing unique integers from all the input lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Check if the input is a list of lists\n    if not all(isinstance(sublist, list) for sublist in nums):\n        raise ValueError(\"Input must be a list of lists\")\n\n    # Initialize an empty set to store unique numbers\n    unique_set = set()\n\n    # Loop through each list of numbers\n    for sublist in nums:\n        # Loop through each number in the list\n        for num in sublist:\n            # Check if the number is not already in the set\n            if num not in unique_set:\n                # Add the number to the set\n                unique_set.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n\n    # Convert all the lists to sets to remove duplicates\n    unique_lists = [set(num) for num in nums]\n\n    # Convert the set of sets back to a list of lists\n    unique_nums = [list(num) for num in unique_lists]\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n\n    Parameters:\n        nums (list): List of lists containing unique integers\n\n    Returns:\n        list: List of unique integers\n    \"\"\"\n    # Create a set to store unique integers\n    unique_nums = set()\n\n    # Loop through each list in the original list of lists\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # Add each unique number to the set\n            unique_nums.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for number in unique_list:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(lst):\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    product = 1\n    for num in unique_lst:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Convert the list to a set to remove duplicate values\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = sorted(list(set(list_data)))\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # create a set to store unique numbers in the list\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the radius of the cylinder\n    radius = r\n\n    # Calculate the height of the cylinder\n    height = h\n\n    # Calculate the surface area of the cylinder\n    surface_area = 2*math.pi*radius*radius + 2*math.pi*radius*height + 2*math.pi*radius + 2*math.pi*height + 2*math.pi\n    \n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    return 2 * pi * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * math.pi * r * r + 2 * math.pi * r * h + math.pi * r * h + math.pi * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h + 2 * r * r\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * (3.14 * r ** 2) + 2 * 3.14 * r * h + (3.14 * h ** 2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846\n    surface_area = 2 * pi * r * h\n    print(\"The surface area of a cylinder of radius\", r, \"and height\", h, \"is:\", surface_area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    surface_area = 2 * pi * r ** 2 + 2 * pi * h ** 2 + 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    if len(A) > len(B):\n        return A in B\n    else:\n        return B in A"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    Args:\n        A: list of integers\n        B: list of integers\n\n    Returns:\n        bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n    if not A:  # if A is empty, B must be also empty or B must be a sublist of A\n        return not B\n    if not B:  # if B is empty, A must be also empty or A must be a sublist of B\n        return False\n\n    if A[0] == B[0]:  # if the first elements of A and B are equal, check recursively\n        return is_Sub_Array(A[1:], B[1:])\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if the list B is sublist of A\n    if all(x in A for x in B): \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B as input and returns True if A is a sublist of B and False otherwise.\n    '''\n    i,j = 0,0 # Initialize two pointers i and j to 0\n    while j < len(B): # Loop through the second list B\n        if A[i] == B[j]: # Check if the current element of A matches the current element of B\n            i += 1 # Increment the pointer of A\n        j += 1 # Increment the pointer of B\n    return i==len(A) # If the two pointers meet at any point, then the first list is a sublist of the second list."
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False \n    i = 0 \n    j = 0 \n    while j < len(B): \n        if B[j] == A[i]: \n            i += 1 \n            j += 1 \n        else: \n            i = 0 \n            j += 1 \n    return i == len(A) "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if both lists have the same length\n    if len(A)!= len(B): \n        return False\n\n    # Initialize variables to keep track of start and end of the sublist\n    start = 0\n    end = 0\n\n    # Iterate through the list A and check if each element is present in B\n    for i in range(len(A)): \n        while end < len(B) and A[i]!= B[end]: \n            end += 1\n\n        if end == len(B): \n            return True\n        else: \n            start = end + 1\n            end = start\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A: \n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B): # check if length of A is less than or equal to length of B\n        return False # return False if length of A is less than length of B\n    \n    for i in range(len(A)-len(B)+1): # loop through each possible starting index of B\n        if A[i:i+len(B)] == B: # check if the current sublist matches B\n            return True # return True if the current sublist matches B\n    \n    return False # return False if no sublist matches"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if both lists are of same length\n    if len(A)!= len(B):\n        return False\n\n    # Initialize two pointers i and j\n    i, j = 0, 0\n\n    while j < len(B):\n        # If the value of A[i] is equal to B[j], increment both i and j\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n\n        # If i reaches the end of A, the B list is a sublist of A list\n        if i == len(A):\n            return True\n\n    # If the loop completes without finding a match, the B list is not a sublist of A list\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    last_digit = factorial%10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize factorial\n    factorial = 1\n    \n    # loop through the number of digits in the number\n    for i in range(1, len(str(n))+1):\n        # multiply factorial by (i choose n-i)\n        factorial *= i\n        \n        # divide the factorial by 10 to get last digit\n        last_digit = factorial // 10\n        \n    # return last digit of factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the result variable\n    factorial = 1\n    # loop through each digit of the number\n    for digit in str(n):\n        # multiply the factorial by the corresponding digit\n        factorial *= int(digit)\n    # return the last digit of the factorial\n    return int(factorial % 10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return \"Factorial is not defined for negative numbers.\"\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n < 0:\n        return None\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n//10) + n % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the last digit of its factorial.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved elements\n    interleaved_list = []\n\n    # loop through each element in each list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Lists must have the same length.\"\n\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n\n    # Iterate through each element in the list and add it to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # loop through each list in turn\n    for i in range(len(list1)):\n        # append the first element of the list to the interleaved list\n        interleaved_list.append(list1[i])\n        # append the second element of the list to the interleaved list\n        interleaved_list.append(list2[i])\n        # append the third element of the list to the interleaved list\n        interleaved_list.append(list3[i])\n\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n        \n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n        \n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n        \n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n        \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar_list.append(item)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar.append(elem1)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of all the unique elements in both tuples\n    unique_set = set(test_tup1 + test_tup2)\n    # create a set of all the common elements in both tuples\n    common_set = set(test_tup1) & set(test_tup2)\n    # create a set of all the elements in the first tuple but not in the second tuple\n    first_set = set(test_tup1) - set(test_tup2)\n    # create a set of all the elements in the second tuple but not in the first tuple\n    second_set = set(test_tup2) - set(test_tup1)\n    # create a set of all the dissimilar elements by union of the first and second sets\n    dissimilar_set = unique_set - common_set - first_set - second_set\n    # return a list of the dissimilar elements\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Loop through each element in the first tuple\n    for elem in test_tup1:\n        # If the element is not in the second tuple, add it to the dissimilar list\n        if elem not in test_tup2:\n            dissimilar.append(elem)\n\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    uneven_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            uneven_tuple.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            uneven_tuple.append(item)\n    return uneven_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements = []\n    for elem in test_tuple:\n        if type(elem) == tuple:\n            even_elements.extend(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            even_elements.append(elem)\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for element in test_tuple:\n        if not even_fnc(element):\n            uneven_elements.append(element)\n    return uneven_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    # Define a function to check if an element is even or odd\n    def is_even(x):\n        return x % 2 == 0\n\n    # Create a list of the even elements in the tuple using the even_fnc function\n    even_list = [x for x in test_tuple if even_fnc(x)]\n\n    # Return the even list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            sub_tuple = even_fnc(item)\n            for sub_item in sub_tuple:\n                new_tuple.append(sub_item)\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize an empty list to store even elements\n    even_list = []\n    \n    # Iterate through each element in the tuple\n    for element in test_tuple:\n        # Check if the element is even\n        if even_fnc(element):\n            # If the element is even, add it to the even_list\n            even_list.append(element)\n    \n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            sub_result = even_ele(item, even_fnc)\n            if sub_result:\n                result.extend(sub_result)\n        elif even_fnc(item):\n            result.append(item)\n    return result\n\ndef is_even(num):\n    return num % 2 == 0\n\ntest_tuple = (1, (2, 3, 4, (5, 6, 7, (8, 9, 10))), 11, 12, 13)\nresult = even_ele(test_tuple, is_even)\nprint(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        return x % 2 == 0\n    \n    # Flatten the nested tuple and filter out the odd elements\n    filtered_tuple = list(filter(is_even, [i for sublist in test_tuple for i in sublist]))\n    \n    # Recursively call the even_fnc function on the flattened tuple\n    even_tuple = even_fnc(filtered_tuple)\n    \n    # Return the even tuple\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, (list, tuple)):\n            result.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return result\n\ndef even_func(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate the area of each square and store in a list\n    square_area = []\n    for i in range(4):\n        square_area.append(b**2)\n\n    # add up the areas of the four squares to get the total area of the pyramid\n    pyramid_area = sum(square_area)\n\n    # calculate the surface area of the pyramid using the formula for a square pyramid\n    surface_area = 2*pyramid_area + 6*(b**2)\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s + 6 * b * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the area of the base\n    area_base = b * b\n\n    # Calculate the area of the pyramid\n    area_pyramid = (b * b) + (s * s)\n\n    # Calculate the surface area\n    surface_area = 2 * area_pyramid - area_base\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of a square pyramid using Heron's formula\n    area = (b**2 * s) / 2\n    \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in the base edge and height of a square pyramid as input, and returns the surface area of the pyramid.\n    '''\n    # calculating the height of the pyramid\n    h = s/2\n    # calculating the area of the base\n    a = b * b\n    # calculating the area of the pyramid\n    A = (b+h)*(b+h)\n    # adding the areas and returning the result\n    return A-a"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 6*b*b + 6*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 6 * b * s + 2 * b * (s ** 2) + (4 * s ** 2)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the square pyramid\n    surface_area = (b**2 + s**2) * (s + 2*b)\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of each side of the square pyramid\n    area_a = b * b\n    area_b = b * b\n    area_c = s * s\n\n    # Calculate the total area of the pyramid\n    area_total = area_a + area_b + area_c\n\n    # Calculate the surface area of the pyramid\n    surface_area = 2 * area_total\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # finding the side of the pyramid\n    a = b * 2\n\n    # finding the surface area of the pyramid\n    area = (b * s) + (b * s) + (a * b) + (a * b) + (b * s)\n    area = area / 2\n\n    # returning the surface area of the pyramid\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    \n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(1, num+1):\n            catalan += (factorial(num)/(factorial(i)*factorial(num-i)))\n        return catalan\n\ndef factorial(n):\n    '''\n    This function returns the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    # Catalan numbers are calculated using the formula:\n    # C(n, k) = (n+1)!/(k!(n-k)!)\n    if n < 0 or n > 100:\n        raise ValueError(\"n must be between 0 and 100\")\n    catalan = 1\n    for k in range(1, n+1):\n        catalan *= (n+1)/(k*(n-k+1))\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n - 1) * catalan_number(n-1) / (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        print(\"Number must be non-negative\")\n        return\n    \n    # Calculate the nth Catalan number using the formula\n    catalan = 0.5 * (1 + 2 * math.cos(2 * math.pi * num / num))\n    \n    # Return the nth Catalan number\n    return int(catalan)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        return \"Catalan numbers are not defined for negative integers.\"\n    elif n == 0:\n        return 1\n    else:\n        k = [0]*(n+1)\n        k[0] = 1\n        k[1] = 1\n        for i in range(2, n+1):\n            for j in range(i):\n                k[i] += k[j] * k[i-j-1]\n        return k[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # Initialize the result array\n    result = [1] * 2 * num + [0]\n\n    # Calculate the catalan numbers using the formula\n    for i in range(1, num+1):\n        result[2*i] = 4*i*result[i] - result[i-1]\n\n    return result[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(2*num-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (4 * catalan_number(n-1) - catalan_number(n-2)) // n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with ly in the given text and returns a tuple containing the adverb and its position.\n    '''\n    # create a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n    # use re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # check if any matches are found\n    if matches:\n        # get the first match\n        first_match = matches[0]\n        # get the position of the first match in the text\n        position = text.find(first_match)\n        # return a tuple containing the adverb and its position\n        return (first_match, position)\n    else:\n        # if no matches are found, return None\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b' # using regular expression to match adverbs ending with \"ly\"\n    matches = re.findall(pattern, text) # find all the matches in the text\n    positions = [] # initialize an empty list to store positions of the matches\n    \n    for match in matches:\n        positions.append(text.index(match)) # add the position of each match to the positions list\n    \n    return positions # return the positions list"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"I love you. That's a good adverb.\"\nresult = find_adverbs(text)\nprint(result)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Use re.findall() to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n    \n    # Print the results\n    print(matches)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b(\\w*)ly\\b'\n\n    # Use re.findall() method to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches found, return None\n    if not matches:\n        return None\n\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n\n    # Loop through all the matches and add their positions to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n\n    # Sort the positions list in ascending order\n    positions.sort()\n\n    # Return the positions list\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'(?<=[^\\w\\s-])ly(?=[^\\w\\s-])'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[A-Za-z]+ly\\b'\n\n    # find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # create a dictionary to store the positions of each matched adverb\n    positions = {}\n\n    # iterate over the matches and update the positions dictionary\n    for i, match in enumerate(matches):\n        # remove the matched word from the text and store the remaining text in a new variable\n        remaining_text = re.sub(r'\\b' + match + r'\\b', '', text)\n        # add the position of the matched word to the positions dictionary\n        positions[i] = remaining_text.index(match)\n\n    # return the dictionary of positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to find adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use the re.findall() method to find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # If there are matches, return a list of tuples with the adverb and its positions\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n\n    # If no matches are found, return an empty list\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the pattern for finding adverbs ending with ly\n    pattern = r'\\b[a-z]*ly\\b'\n\n    # Use the `re.findall` function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n\n    # Loop over all matches and append their positions to the positions list\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        positions.append((start, end))\n\n    # Return the list of positions of all adverb ends\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes in a string and returns a list of tuples containing the first adverb ending with ly and its starting and ending positions in the string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        start_pos = match.start()\n        end_pos = match.end()\n        results.append((match.group(), start_pos, end_pos))\n    return results"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items and a number n,\n    this function will return the n most expensive items in the list.\n    '''\n    # create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, float('-inf'))\n\n    # iterate through the items in the list and update the min heap\n    for item in items:\n        if item < min_heap[0]:\n            heapq.heappushpop(min_heap, item)\n\n    # return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n and returns the n most expensive items from the list.\n    '''\n    # Create a min heap with the n largest items and their indices\n    min_heap = [(-price, index) for index, price in enumerate(items)][:n]\n    heapq.heapify(min_heap)\n\n    # Remove the n largest items and their indices from the heap and from the list\n    for i in range(n):\n        heapq.heappop(min_heap)\n        del items[min_heap[0][1]]\n\n    return items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of n elements\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n    # remove the smallest element from the heap and add the next smallest element\n    for i in range(n, len(items)):\n        if items[i] < heap[0]:\n            heapq.heappushpop(heap, items[i])\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): a list of tuples, where each tuple contains an item and its cost\n        n (int): the number of items to return\n\n    Returns:\n        list: a list of tuples, where each tuple contains an item and its cost\n    \"\"\"\n    # Sort the dataset by cost in ascending order\n    items.sort(key=lambda x: x[1])\n\n    # Create a min heap of size n\n    min_heap = []\n    for _ in range(n):\n        heapq.heappush(min_heap, heapq.heappop(items)[1])\n\n    # Pop the top n items from the min heap and return them\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n and returns a list of the n most expensive items.\n    '''\n    heap = [] # initialize an empty heap\n    for item in items:\n        heapq.heappush(heap, item) # add each item to the heap\n        if len(heap) > n: # if we have more than n items in the heap, remove the least expensive one\n            heapq.heappop(heap) # remove the least expensive item\n    return [heapq.heappop(heap) for _ in range(n)] # return the n most expensive items from the heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items and a number n, find the n most expensive items in the dataset.\n    \"\"\"\n    # Create a min-heap of size n to store the top n expensive items\n    heap = []\n    for item in items:\n        # If the heap is full, remove the smallest item from the heap\n        if len(heap) == n:\n            heapq.heappop(heap)\n        # Add the current item to the heap\n        heapq.heappush(heap, item)\n    # Extract the top n most expensive items from the heap and return them as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-item for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    heap = []\n    for item in items:\n        # Check if the heap is full (i.e., if its size is equal to n)\n        if len(heap) == n:\n            # If it is, remove the smallest item from the heap\n            heapq.heappop(heap)\n        # Add the current item to the heap\n        heapq.heappush(heap, item)\n    # Return a list of the n most expensive items\n    return [heap[0] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the dataset in decreasing order of price\n    items.sort(reverse=True, key=lambda x: x[1])\n    # Create a min-heap of n items\n    heap = []\n    # Add the first n items to the heap\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n    # Return the top n items from the heap\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # Add the first part to the end of the second part\n    result = second_part + first_part\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) >= n:\n        return l[n:] + l[:n]\n    else:\n        return []"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at nth element and add the first part to the end\n    mid = len(l)//2\n    left = l[:mid]\n    right = l[mid:]\n    if n > len(left):\n        return left + [right]\n    else:\n        return left + [right[n-1]] + right[:n-1]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element and add the first part to the end\n    new_list = l[:n] + [l[n]] + l[n+1:]\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == len(l):\n        return [l[0]]\n    else:\n        return l[n-1:] + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"Error: List length is less than the given index\"\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        raise ValueError('n must be less than the length of the list')\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the list is empty or has less than n elements\n    if len(l) < n:\n        print(\"The list should have at least\", n, \"elements.\")\n        return\n    \n    # split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    \n    # add the first part to the end of the second part\n    new_list = part2 + part1\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return l\n    \n    new_list = []\n    for i in range(n):\n        new_list.append(l[i])\n    \n    new_list.append(l[n])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    # Splitting the list at the nth element\n    new_list = l[:n] + l[n+1:]\n    return new_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list in ascending order\n    nums.sort()\n    # find the difference between the largest and smallest values\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    min_val = nums[0]\n    max_val = nums[0]\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return abs(max(nums) - min(nums))"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    max_val = nums[0]\n    min_val = nums[0]\n    \n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list in descending order\n    nums.sort(reverse=True)\n    # return the difference between the first and last elements\n    return nums[0] - nums[-1]"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(int(a), int(b) + 1):\n        if i**2 == int(i**2):\n            print(i, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        for j in range(a, i):\n            if i ** 2 == j ** 2 + i:\n                print(i, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store perfect squares\n    squares = []\n    # Loop through numbers between a and b\n    for num in range(a, b+1):\n        # Check if the square is a perfect square\n        square = num ** 0.5\n        # If the square is a perfect square, add it to the list\n        if square.is_integer():\n            squares.append(square)\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize variables\n    perfect_squares = []\n    # loop through a range of integers from a to b\n    for i in range(a, b + 1):\n        # check if i is a perfect square\n        if i ** 0.5 + 0.5 ** 0.5 == int(i ** 0.5 + 0.5 ** 0.5):\n            perfect_squares.append(i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 0 or b < 0:\n        return 'Invalid input. Both numbers must be non-negative integers.'\n    squares = []\n    for i in range(a, b+1):\n        square = i*i\n        if square == i**2:\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # check if a is less than 0 or greater than b\n    if a < 0 or a > b:\n        print(\"Error: a should be between 0 and b\")\n        return\n    \n    # initialize variables to store the number of perfect squares\n    perfect_squares_count = 0\n    square_number = 1\n    \n    # loop through the given range of numbers\n    while square_number <= b:\n        # if a is a perfect square of square_number, increment count and continue loop\n        if a == square_number ** 2:\n            perfect_squares_count += 1\n            square_number += 1\n        # if a is greater than the square of square_number, increment square_number and continue loop\n        elif a > square_number ** 2:\n            square_number += 1\n        # if a is less than the square of square_number, decrement square_number and continue loop\n        else:\n            square_number -= 1\n    \n    # print the number of perfect squares between a and b\n    print(\"Number of perfect squares between\", a, \"and\", b, \"is\", perfect_squares_count)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a variable to keep track of the perfect squares found\n    perfect_squares = []\n    # Loop through all the numbers between a and b (inclusive)\n    for i in range(a, b+1):\n        # Check if the square of the current number is equal to the next number\n        if i*i == b:\n            # If it is, add it to the list of perfect squares\n            perfect_squares.append(i)\n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        if i**2 == a:\n            count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = a\n    while i <= b:\n        j = i\n        while j*j <= b:\n            squares.append(j*j)\n            j += 1\n        i += 1\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert theta to radians\n    theta = cmath.pi * theta / 180.0\n    \n    # Calculate x and y components of the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Return the rectangular coordinates as a tuple\n    return (x.real, x.imag, y.real, y.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x ** 2 + y ** 2)\n    theta = cmath.phase(x + y * 1j)\n    return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(complex(x, y))\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    return r, theta"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    # convert r to rectangular coordinates\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    \n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): Radius of the circle.\n    theta (float): Angle in radians.\n\n    Returns:\n    x (float): x-coordinate of the point.\n    y (float): y-coordinate of the point.\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.tan(y/x)\n    return r, theta"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes the radius r and angle theta in radians,\n    and returns the corresponding x and y coordinates of a point in rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Finding the length of the list\n    length = len(newList)\n    \n    # Checking if the length of the list is greater than or equal to 2\n    if length >= 2:\n        \n        # Interchanging the first and last elements of the list\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        \n        # Printing the modified list\n        print(\"Modified list:\", newList)\n        \n        # Returning the modified list\n        return newList\n    \n    else:\n        \n        # Printing an error message if the length of the list is less than 2\n        print(\"Error: The length of the list should be greater than or equal to 2.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the input list is valid\n    if not isinstance(newList, list):\n        print(\"The input is not a valid list.\")\n        return\n    \n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements.\")\n        return\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # print the updated list\n    print(\"Updated list:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # find the length of the list\n    length = len(newList)\n    # swap the first and last elements of the list\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Checking if the length of the list is more than 1\n    if len(newList) > 1:\n        # Assigning the last element to a variable\n        last_element = newList[-1]\n        # Assigning the first element to the last index of the list\n        newList[-1] = newList[0]\n        # Assigning the last element to the first index of the list\n        newList[0] = last_element\n    else:\n        # If the list has only one element, it is already interchanged.\n        pass\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list has more than one element\n    if len(newList) > 1:\n\n        # Use slicing to swap the first and last elements\n        newList = newList[:1] + newList[1:][::-1] + newList[:1]\n\n        # Print the updated list\n        print(newList)\n\n    else:\n        print(\"List must have at least two elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"The new list is:\", newList)\n    else:\n        print(\"The list must have at least two elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        # swap the first and last elements\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"List must have at least two elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    # create a copy of the list to avoid modifying the original list\n    original_list = list(newList)\n    # swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return original_list"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least 2 elements\n    if len(newList) < 2: \n        print(\"The list must have at least 2 elements!\")\n        return\n\n    # swap the first and last elements\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initializing variables\n    coeff_sum = 0\n    # Iterating through all possible combinations of k elements from 0 to n-1\n    for i in range(n-k+1):\n        # Finding the product of consecutive k elements\n        coeff = 1\n        for j in range(k):\n            coeff *= (n-i+j)/(j+1)\n        # Adding the product of consecutive k elements to the sum\n        coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k): \n    \"\"\"\n    Write a Python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    else:\n        return (n * binomial_Coeff(n - 1, k - 1)) // k + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n-k:\n        return 0\n\n    sum = 0\n    for i in range(k):\n        sum += (n-i) * (i+1)\n\n    for j in range(1, n-k+1):\n        sum -= (j-1) * (j+k-1)\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    if n < k:\n        return 0\n\n    result = 1\n    for i in range(k, n + 1):\n        result *= i\n\n    return result // factorial(k)\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0\n    elif k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k or k < 0: \n        return 0\n    elif k == 0 or k == n: \n        return 1\n    else: \n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base case for n = 0\n    if n == 0:\n        return 1\n\n    # Base case for k = 0\n    if k == 0:\n        return 0\n\n    # Base case for k = n\n    if k == n:\n        return 1\n\n    # Recursive case for n > 0 and k > 0\n    return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    :param n: The total number of elements in the sequence.\n    :param k: The number of elements in the subsequence that should be summed up.\n    :return: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize variables to hold the binomial coefficients\n    coeff = []\n    num_terms = n - k + 1\n    for i in range(num_terms):\n        coeff.append(1)\n\n    # Calculate the product of the binomial coefficients\n    product = 1\n    for i in range(len(coeff)):\n        product *= coeff[i]\n\n    return product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    elif k > n // 2:\n        return binomial_Coeff(n, n - k)\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*(127\\.0\\.0\\.1|::1)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    pattern = r'^(0\\d{1}|1\\d{1}|2[0-4]\\d|25[0-5])(\\.\\d{1,2}){3}$'\n    return re.sub(pattern, r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+(?=\\d)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')\n    if pattern.match(ip):\n        return re.sub(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', ip, flags=re.MULTILINE)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d{1,3}\\.){3}\\d{1,3}$'\n    match = re.match(pattern, ip)\n    if match:\n        return re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\.?','',ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Define a regular expression pattern for an IP address\n    pattern = r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n    # Use the re.search() method to search for the pattern in the input string\n    match = re.search(pattern, ip)\n    if match:\n        # Extract the matched substring from the input string\n        match_str = match.group(0)\n        # Use a list comprehension to remove any leading zeroes from each octet\n        return '.'.join(str(int(octet) if int(octet)!= 0 else '') for octet in match_str.split('.'))\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even = list1[i]\n            odd = list1[i+1]\n            break\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"List should have at least two elements.\"\n    elif list1[0] % 2 == 0 and list1[1] % 2 == 0:\n        return \"The first even and first odd numbers are equal.\"\n    elif list1[0] % 2 == 0 and list1[1] % 2 == 1:\n        return \"The first even number is the first odd number minus one.\"\n    elif list1[0] % 2 == 1 and list1[1] % 2 == 0:\n        return \"The first odd number is the first even number minus one.\"\n    else:\n        return \"No valid difference found.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    if len(lst) < 2:\n        return \"List must have at least two elements.\"\n    elif len(lst) == 2:\n        if lst[0] % 2 == 0 and lst[1] % 2 == 0:\n            return lst[0] - lst[1]\n        else:\n            return \"No even-odd difference found.\"\n    else:\n        evens = [x for x in lst if x % 2 == 0]\n        odds = [x for x in lst if x % 2!= 0]\n        if len(evens) == 0 or len(odds) == 0:\n            return \"No even-odd difference found.\"\n        else:\n            return evens[0] - odds[0]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even and first odd numbers in the list\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    # Calculate the difference of the first even and first odd numbers\n    diff = abs(even_num - odd_num)\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    even = lst[0]\n    odd = lst[1]\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    even = 0\n    odd = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    \n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    even_num = [x for x in list1 if x % 2 == 0][0]\n    odd_num = [x for x in list1 if x % 2!= 0][0]\n\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables to store the even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # Loop through the list and count the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    \n    # Return the difference between the even and odd numbers\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                break\n        elif first_odd is None:\n            first_odd = num\n        else:\n            break\n    \n    if first_even is None or first_odd is None:\n        return None\n    \n    return first_even - first_odd"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the binary strings to integers\n    n1 = int(str1, 2)\n    n2 = int(str2, 2)\n\n    # Find the number of swaps required to convert n1 to n2\n    swaps = 0\n    while n1!= n2:\n        if n1 > n2:\n            n1 = (n1 << 1) ^ 1  # XOR swap\n            swaps += 1\n        else:\n            n2 = (n2 << 1)  # logical shift swap\n            swaps += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum number of swaps\n    min_swaps = 0\n\n    # While the binary representation of the numbers are not equal\n    while num1!= num2:\n        # If the binary representation of num1 has a larger value, swap the bits\n        if num1 > num2:\n            num1 = (num1 >> 1) + (num1 & 1) + (num2 & 1)\n            num2 = num1 >> 1\n        # If the binary representation of num2 has a larger value, swap the bits\n        else:\n            num2 = (num2 >> 1) + (num2 & 1) + (num1 & 1)\n            num1 = num2 >> 1\n\n        # Increment the minimum number of swaps\n        min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert the first number to the second number.\n\n    Parameters:\n        str1: A binary number represented as a string.\n        str2: A binary number represented as a string.\n\n    Returns:\n        int: The minimum number of swaps required to convert the first number to the second number.\n    \"\"\"\n\n    # Convert strings to lists of integers\n    list1 = [int(x) for x in str1]\n    list2 = [int(x) for x in str2]\n\n    # Initialize variables for keeping track of swaps and swapped elements\n    swaps = 0\n    swapped = [False] * len(list1)\n\n    # Loop through the two lists and swap elements if they are different\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            # Check if the element is already swapped\n            if swapped[i]:\n                continue\n            # Swap the element with the next element that is not already swapped\n            j = (i + 1) % len(list1)\n            while swapped[j]:\n                j = (j + 1) % len(list1)\n            list1[i], list1[j] = list1[j], list1[i]\n            swapped[i], swapped[j] = True, True\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2): \n    # Convert the binary strings into integers \n    num1 = int(str1, 2) \n    num2 = int(str2, 2) \n\n    # Initialize a variable to keep track of the minimum number of swaps \n    min_swaps = float('inf') \n\n    # Iterate over the bits of the binary numbers \n    for i in range(32): \n        # Calculate the XOR of the i-th bit of num1 and num2 \n        xor = num1 ^ num2 \n        # Calculate the parity of the i-th bit of num1 \n        parity = xor & 1 \n        # Calculate the parity of the i-th bit of num2 \n        parity2 = (num2 >> i) & 1 \n        # Calculate the minimum number of swaps required to change the i-th bit of num1 to the parity of num2 \n        min_swaps = min(min_swaps, abs(parity - parity2)) \n        # Calculate the minimum number of swaps required to change the i-th bit of num2 to the parity of num1 \n        min_swaps = min(min_swaps, abs(parity2 - parity)) \n\n    # Return the minimum number of swaps \n    return min_swaps "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # convert strings to lists of characters\n    char1 = list(str1)\n    char2 = list(str2)\n\n    # create a dictionary to store the number of swaps required for each character\n    swap_count = {}\n\n    # iterate through the characters of both strings\n    for i in range(len(char1)):\n        # if the characters are different, add the character to the dictionary and its index\n        if char1[i]!= char2[i]:\n            swap_count[char1[i]] = i\n\n    # initialize the minimum swap count to the length of the strings\n    min_swap = len(str1)\n\n    # iterate through the characters of the first string and check if the character is in the dictionary\n    for i in range(len(char1)):\n        # if the character is in the dictionary, update the minimum swap count\n        if char1[i] in swap_count:\n            # calculate the difference between the indices of the characters in the two strings\n            swap_diff = swap_count[char1[i]] - i\n\n            # if the difference is smaller than the current minimum swap count, update the minimum swap count\n            if swap_diff < min_swap:\n                min_swap = swap_diff\n\n    return min_swap"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    # Count the number of 1's in str1 and str2\n    count1 = 0\n    count2 = 0\n    for i in range(n):\n        if str1[i] == '1':\n            count1 += 1\n        if str2[i] == '1':\n            count2 += 1\n    # Calculate the minimum number of swaps required\n    swaps = 0\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            swaps += min(i, j)\n            if str1[i] == '1':\n                i += 1\n            else:\n                j += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists of bits\n    bin1 = list(map(int, bin(int(str1, 2))[2:].zfill(len(str1) * 4)))\n    bin2 = list(map(int, bin(int(str2, 2))[2:].zfill(len(str2) * 4)))\n\n    # Initialize variables to store the number of swaps required and the carry over\n    swaps = 0\n    carry = 0\n\n    # Compare the two binary numbers from right to left and swap bits if necessary\n    for i in range(len(bin1) - 1, -1, -1):\n        if bin1[i]!= bin2[i]:\n            # Check if the bits need to be swapped\n            if carry:\n                # If there is a carry over, swap the bits and increment the swaps count\n                bin1[i], bin1[i + 1] = bin1[i + 1], bin1[i]\n                swaps += 1\n                carry = 0\n            else:\n                # If there is no carry over, swap the bits and increment the swaps count\n                bin1[i], bin1[i + 1] = bin1[i + 1], bin1[i]\n                swaps += 1\n\n    # If there is a carry over, add it to the last bit\n    if carry:\n        bin1[-1] += carry\n        swaps += 1\n\n    # Convert the list of bits back to a binary string and return the result\n    return str(bin(int(''.join(map(str, bin1)), 2))[2:].zfill(len(bin1) * 4)), swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n\n    # Find the length of the binary strings\n    length1 = len(binary1)\n    length2 = len(binary2)\n\n    # Initialize the count of swaps\n    count = 0\n\n    # Compare the binary strings character by character\n    for i in range(min(length1, length2)):\n        # If the characters are different, increment the count of swaps\n        if binary1[i]!= binary2[i]:\n            count += 1\n\n    # If the length of the strings is not equal, the number of swaps is equal to the length of the shorter string\n    return count + min(length1, length2)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables to keep track of swaps required\n    swap_count = 0\n    # keep track of the number of set bits in each binary number\n    set_bits1 = 0\n    set_bits2 = 0\n\n    # iterate through each bit of both binary strings\n    for i in range(32):\n        # check if the current bit is set in both binary strings\n        if ((num1 >> i) & 1) == ((num2 >> i) & 1):\n            # if it is, increment the set_bits counter for each binary string\n            set_bits1 += ((num1 >> i) & 1)\n            set_bits2 += ((num2 >> i) & 1)\n        else:\n            # if it's not, increment the swap_count counter\n            swap_count += set_bits1 - set_bits2\n            # reset the set_bits counters for both binary strings\n            set_bits1 = 0\n            set_bits2 = 0\n            # check if the current bit is set in only one binary string\n            if ((num1 >> i) & 1) == 1:\n                # if it is, swap the current bit in the other binary string\n                num2 = (num2 ^ (1 << i))\n            else:\n                # if it's not, swap the current bit in the first binary string\n                num1 = (num1 ^ (1 << i))\n            # increment the swap_count counter again to account for the swapped bit\n            swap_count += 1\n\n    # return the minimum number of swaps required\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    # find the length of the shorter string\n    if len(str2) < len(str1):\n        n = len(str2)\n\n    # create a boolean matrix to store whether a digit of the first string is present in the second string\n    dp = [[False for j in range(n+1)] for i in range(n+1)]\n\n    # fill the matrix with the required information\n    for i in range(n+1):\n        for j in range(n+1):\n            if i == 0 and j == 0:\n                dp[i][j] = True\n            elif i == 0:\n                dp[i][j] = dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i][j-1]\n\n    # find the number of swaps required to convert the first string to the second string\n    count = 0\n    for i in range(n+1):\n        for j in range(n+1):\n            if str1[i-1] == '1' and str2[j-1] == '0':\n                if dp[i-1][j]:\n                    count += 1\n            elif str1[i-1] == '0' and str2[j-1] == '1':\n                if dp[i][j-1]:\n                    count += 1\n\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize size variable to zero\n    size = 0\n    # Iterate through each element in the tuple\n    for element in tuple_list:\n        # Calculate the size of the element in bytes\n        element_size = sys.getsizeof(element)\n        # Add the size of the element to the size variable\n        size += element_size\n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0]) * len(tuple_list[0])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_bytes = sys.getsizeof(tuple_list)\n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    max_size = 0\n    for tup in tuple_list:\n        size = sys.getsizeof(tup)\n        max_size = max(max_size, size)\n    return max_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the middle index of both arrays\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    # check if the middle element of arr1 is less than the kth element\n    if arr1[mid1] < k:\n        # if so, find the kth element in arr2\n        return find_kth(arr2, arr1, k - arr1[mid1])\n    # if arr1[mid1] >= k, then the kth element must be in arr1\n    else:\n        # find the kth element in arr1\n        if k < len(arr1) + len(arr2):\n            # if k is less than len(arr1) + len(arr2), then we need to find it in arr2\n            return find_kth(arr1, arr2, k - arr1[mid1])\n        else:\n            # if k is greater than len(arr1) + len(arr2), then we need to find it in both arrays\n            return min(find_kth(arr1, arr2, k - arr1[mid1]), find_kth(arr1, arr2, k - arr1[mid1] - len(arr1)))"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1)!= len(arr2):\n        return None\n\n    for i in range(min(len(arr1), len(arr2))):\n        if arr1[i]!= arr2[i]:\n            return arr1[i]\n\n    return arr1[-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a number k and returns the kth smallest element from the first array.\n    \"\"\"\n    # Initialize two pointers at the beginning of the arrays\n    i, j = 0, 0\n    \n    # Initialize a variable to keep track of the current position in the kth smallest element\n    kth_pos = -1\n    \n    # Loop until we have found the kth smallest element\n    while i < len(arr1) and j < len(arr2):\n        # If the current element in the first array is smaller than the current element in the second array, increment the first pointer\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If the current element in the first array is greater than the current element in the second array, increment the second pointer\n        else:\n            j += 1\n            \n        # If the current position is equal to k, return the current element\n        if kth_pos == k - 1:\n            return arr1[kth_pos]\n        \n        # If the current position is greater than k, move the kth_pos pointer back to the previous element\n        kth_pos += 1\n        \n    # If we have reached the end of one of the arrays before finding the kth smallest element, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n\n    # Find the minimum length of the two arrays\n    if m < n:\n        arr1, arr2, m, n = arr2, arr1, n, m\n\n    # Merge the two sorted arrays\n    i = 0\n    j = 0\n    kth = []\n    while i < m and j < n:\n        if arr1[i] <= arr2[j]:\n            kth.append(arr1[i])\n            i += 1\n        else:\n            kth.append(arr2[j])\n            j += 1\n\n    # Add the remaining elements of the first array\n    kth += arr1[i:]\n\n    # Add the remaining elements of the second array\n    kth += arr2[j:]\n\n    # Return the kth element\n    return kth[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n\n    # Initialize two pointers for the merged array\n    i = j = 0\n\n    # Initialize a variable to store the kth element\n    kth_element = None\n\n    # Traverse the merged array\n    while i < len(merged_arr) and j < len(merged_arr):\n        # If the current element from arr1 is smaller, increment the i pointer\n        if merged_arr[i] < merged_arr[j]:\n            i += 1\n        # If the current element from arr2 is smaller, increment the j pointer\n        else:\n            j += 1\n\n        # If we have reached the kth element, set its value and break the loop\n        if k == 1:\n            kth_element = merged_arr[i-1]\n            break\n\n        # If we have not reached the kth element, decrement k and repeat the loop\n        k -= 1\n\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    while i < len(arr1):\n        if arr1[i] == arr2[j]:\n            return arr1[i]\n        i += 1\n    while j < len(arr2):\n        if arr1[i] == arr2[j]:\n            return arr2[j]\n        j += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth smallest element in two sorted arrays.\n    \"\"\"\n    # Initialize two pointers for both arrays\n    i = 0\n    j = 0\n\n    # Initialize the index of the kth smallest element\n    kth_index = 0\n\n    # Initialize the variable to keep track of the current index\n    curr_index = 0\n\n    # Iterate through both arrays\n    while i < len(arr1) and j < len(arr2):\n        # Compare the current elements of both arrays\n        if arr1[i] < arr2[j]:\n            arr1[kth_index], arr1[i] = arr1[i], arr1[kth_index]\n            kth_index += 1\n            i += 1\n        else:\n            arr2[kth_index], arr2[j] = arr2[j], arr2[kth_index]\n            kth_index += 1\n            j += 1\n\n    # If there are still elements in the remaining array, append them to the correct array\n    if i < len(arr1):\n        arr1[kth_index:] = arr1[i:]\n    else:\n        arr2[kth_index:] = arr2[j:]\n\n    # Return the kth smallest element\n    return arr1[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # check if the number is negative\n    if number < 0:\n        return False\n    \n    # convert the number to a string\n    number_str = str(number)\n    \n    # calculate the sum of the squares of the digits\n    sum_of_squares = sum(int(digit) ** len(number_str) for digit in number_str)\n    \n    # compare the sum of squares to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and get its digits\n    digits = [int(digit) for digit in str(number)]\n    # Find the sum of the cubes of the digits\n    cube_sum = sum(digit**3 for digit in digits)\n    # Compare the number with the cube sum\n    if number == cube_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(num):\n    num_str = str(num)\n    sum_of_squares = 0\n    for digit in num_str:\n        square = int(digit) ** 2\n        sum_of_squares += square\n    return sum_of_squares == num\n\ndef armstrong_number(num):\n    if is_armstrong_number(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the given number to a list of digits\n    num_digits = [int(digit) for digit in str(number)]\n    # Find the sum of the cubes of the digits\n    cube_sum = sum([digit**3 for digit in num_digits])\n    # Check whether the given number is equal to the cube sum\n    return number == cube_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether a given number is armstrong or not.\n    \"\"\"\n    num_str = str(number)\n    if len(num_str)!= len(set(num_str)):\n        # Number has duplicate digits\n        return False\n\n    num_dict = {}\n    for digit in num_str:\n        num_dict[digit] = num_dict.get(digit, 0) + 1\n\n    total = 0\n    for key, value in num_dict.items():\n        total += int(key) ** value\n\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function checks whether a given number is armstrong or not.\n    \"\"\"\n    if n < 10:\n        return False\n    else:\n        total = 0\n        temp = n\n        while temp > 0:\n            digit = temp % 10\n            total += digit ** 3\n            temp //= 10\n        return n == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    temp = num\n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n\n    if num == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    temp = num\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    \n    if num == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(n):\n    # check if the number is less than 10\n    if n < 10:\n        return False\n\n    # calculate the sum of the cubes of each digit\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit ** 3\n        n //= 10\n\n    # compare the sum with the original number\n    return sum == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Check if the input is a positive integer\n    if type(number)!= int or number < 0:\n        return False\n    \n    # Convert the input number to a string\n    number_str = str(number)\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through each digit of the number string\n    for digit in number_str:\n        # Convert the digit to an integer and add it to the counter variable\n        count += int(digit) ** len(number_str)\n    \n    # Check if the counter variable is equal to the input number\n    if count == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    count_of_numbers = 0\n    for i in range(1, number + 1):\n        sum_of_numbers += i\n        count_of_numbers += 1\n    average = sum_of_numbers / count_of_numbers\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of first\", number, \"natural numbers:\", sum)\n    print(\"Average of first\", number, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total/count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        print(\"Invalid input\")\n        return\n    \n    total = 0\n    count = 0\n    \n    for i in range(1, number+1):\n        total += i\n        count += 1\n    \n    average = total / count\n    print(\"The sum of first\", number, \"natural numbers is\", total)\n    print(\"The average of first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total/count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n): \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first character that appears more than once in the string.\n    If no such character is found, it returns None.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # convert the string to a list of characters\n    str_list = list(str1)\n\n    # create a dictionary to store the count of each character\n    char_count = {}\n\n    # loop through the characters in the list\n    for char in str_list:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # find the first repeated character in the dictionary\n    for char, count in char_count.items():\n        if count > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    # Convert the string to a set to remove duplicates\n    unique_chars = set(str1)\n    # Check if the length of the set is equal to the length of the string\n    if len(unique_chars) == len(str1):\n        # If it is, iterate over the string and check if each character appears more than once\n        for char in str1:\n            if str1.count(char) > 1:\n                # If it appears more than once, return the character\n                return char\n        # If no character appears more than once, return None\n        return None\n    # If the length is different, there are no repeated characters\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Convert the string to a set to remove duplicates\n    unique_chars = set(str1)\n    # Iterate through the set and find the first repeated character\n    for char in unique_chars:\n        if str1.count(char) > 1:\n            return char\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # loop through each character in the string again, and return the first character with a count greater than 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    # if no character has a count greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the character counts\n    char_counts = {}\n    # iterate over the string and count the occurrences of each character\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    # find the first repeated character by iterating over the dictionary and checking if the count is greater than 1\n    for char, count in char_counts.items():\n        if count > 1:\n            return char\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Helper function to check if a given integer is a lucid number.\n    '''\n    num_digits = len(str(n))\n    if num_digits == 1:\n        return True\n    for i in range(2, num_digits+1):\n        if n%i!= 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 2\n\n    while i <= n:\n        is_lucid = True\n        j = 2\n\n        while j * j <= i:\n            if i % j == 0:\n                is_lucid = False\n                break\n            j += 1\n\n        if is_lucid:\n            lucid_numbers.append(i)\n\n        i += 1\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [2]  # start with 2 as it is the first prime number\n    i = 3  # start iterating from 3\n    \n    while i <= n:\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            ludic_numbers.append(i)\n        i += 2\n        \n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        flag = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    A lucid number is a positive integer that can be expressed as the sum of its own digits.\n    '''\n    digits_sum = 0\n    while n > 0:\n        digits_sum += n % 10\n        n //= 10\n    return digits_sum == n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            for j in range(2, i//2+1):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n):\n        # Check if the number is a lucid number\n        is_lucid = True\n        for j in range(2, i):\n            # If the number is divisible by any number between 2 and the square root of the number, it's not a lucid number\n            if i % j == 0:\n                is_lucid = False\n                break\n        # If the number is a lucid number, append it to the list\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    i = 1\n    while i <= n:\n        if all(j % i!= 0 for j in range(i, n+1)):\n            lucid_nums.append(i)\n        i += 1\n    return lucid_nums"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string by spaces\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words together with spaces\n    reversed_string =''.join(reversed_words)\n    # Return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split() # split the string by spaces\n    words.reverse() # reverse the list of words\n    s =''.join(words) # join the words back into a string separated by spaces\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # Split the string into words\n    reversed_words = words[::-1]  # Reverse the list of words\n    return''.join(reversed_words)  # Join the words back into a string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Split the string into a list of words\n    reversed_words = [] # Create an empty list to store the reversed words\n    for word in words: # Iterate over each word\n        reversed_words.append(word[::-1]) # Reverse the word and add it to the list of reversed words\n    return''.join(reversed_words) # Join the list of reversed words into a string with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them back into a string\n    reversed_words =''.join([word[::-1] for word in words])\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    # split the string by spaces and reverse the resulting list\n    return''.join(s.split()[::-1])"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # check if the number is divisible by any number between 2 and its square root\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nprint(is_prime(num))"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_num(num):\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    This function checks if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180*degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][2]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Use re.search() to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return the matching substring, start index, and end index\n    if match:\n        return match.group(), match.start(), match.end()\n\n    # If the pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    return matches[0], matches[0].start(), matches[0].end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    regex = re.compile(pattern)\n    # Find all matches\n    matches = regex.findall(text)\n    # Iterate over the matches and return the information\n    for match in matches:\n        return match[0], match.start(0), match.end(0)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    for match in matches:\n        return match, text.find(match), text.find(match) + len(match)\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the pattern\n    regex_pattern = re.compile(pattern)\n\n    # Find all matches\n    matches = regex_pattern.findall(text)\n\n    # If there are matches, return them\n    if matches:\n        # Loop through all matches and return the substring, start index, and end index\n        for match in matches:\n            substring = match.group(0)\n            start_index = match.start()\n            end_index = match.end()\n            yield substring, start_index, end_index\n    else:\n        # If there are no matches, return None\n        yield None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2**n - 1) // (n - 1) + 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input: n should be a positive integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result = result * 2 * i\n        return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 21\n    else:\n        for i in range(2, n):\n            a = i - 1\n            b = i * (i - 1) // 2\n            c = 1\n            d = 1\n            for j in range(i):\n                a, b, c, d = b, d, c, a + b + c\n            if n == i:\n                return d - c\n        return None\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of nth bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * bell_Number(n//2) + 1\n    else:\n        return 2 * bell_Number((n-1)//2) - 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function returns the nth Bell number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = (2*bell*i) % n\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The nth Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Initialize the first term of the series to 1\n    series = [1]\n\n    # Initialize the second term of the series to 1\n    series.append(1)\n\n    # Loop through the remaining terms of the series\n    for i in range(2, n):\n        # Compute the next term in the series\n        next_term = series[i-1] + series[i-2]\n        # Append the next term to the series\n        series.append(next_term)\n\n    # Return the nth term in the series\n    return series[n-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a positive integer L as input and returns a list with the same elements but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i!= k:\n            list1[i], list1[k] = list1[k], list1[i]\n            k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and removes the kth element from the list.\n    '''\n    if L == 1:\n        return list1\n    else:\n        return [x for i, x in enumerate(list1) if i!= L-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L\n    if k > n:\n        return []\n\n    # create a new list without the k'th element\n    list2 = []\n    for i in range(n):\n        if i!= k - 1:\n            list2.append(list1[i])\n\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input and returns a new list with the same elements,\n    but the k'th element removed.\n    '''\n    new_list = list1[:k-1] + list1[k:]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    count = 0\n    for i in range(len(list1)):\n        if count!= L:\n            new_list.append(list1[i])\n            count += 1\n        else:\n            count += 1\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(lst, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1  # k is the index of the element to be removed\n    lst.pop(k)  # remove the kth element from the list\n    return lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[:-1]\n    else:\n        return list1[:L-1] + [list1[L-1]] + remove_kth_element(list1[L:], L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1[:L] + list1[L+1:]\n    return list2"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) > N - 1:\n            max_value = max(max_value, row[N - 1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # check if matrix is valid\n    if len(test_list) == 0 or len(test_list[0]) == 0:\n        raise ValueError(\"Input matrix is empty\")\n\n    # check if N is valid\n    if N < 1 or N > len(test_list[0]):\n        raise ValueError(\"N is out of range\")\n\n    # initialize max value to 0\n    max_val = 0\n\n    # iterate through rows and find max value of nth column\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Finding the length of the matrix\n    m = len(test_list)\n    # Finding the length of the 1st row\n    n = len(test_list[0])\n    # If the n is not an integer or less than 1, return None\n    if not isinstance(N, int) or N < 1:\n        return None\n    # If the n is greater than or equal to the length of the 1st row, return None\n    if N >= n:\n        return None\n    # Initializing the variable to store the max value\n    max_value = None\n    # Looping through the rows of the matrix\n    for i in range(m):\n        # If the value of then'th column is greater than the current max value, updating the max value\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    # Returning the max value of then'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize max_val to the value of the first element of the first row\n    max_val = test_list[0][0]\n    # Loop through the remaining rows\n    for i in range(1, len(test_list)):\n        # Compare the value of then'th column of the current row to max_val\n        if test_list[i][N] > max_val:\n            # Update max_val if necessary\n            max_val = test_list[i][N]\n    # Return the max_val\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if i == 0:\n            max_value = max(test_list[i][N])\n        else:\n            if max_value < test_list[i][N]:\n                max_value = test_list[i][N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the length of the longest row in the matrix\n    max_row_length = max(len(row) for row in test_list)\n\n    # initialize an empty list to store the max values of each column\n    col_maxes = []\n\n    # iterate through each column\n    for i in range(max_row_length):\n        # initialize a variable to store the max value of the current column\n        max_val = float('-inf')\n\n        # iterate through each row in the matrix\n        for row in test_list:\n            # check if the value at the current position in the row is greater than the max value seen so far\n            if row[i] > max_val:\n                max_val = row[i]\n\n        # add the max value of the current column to the list of max values\n        col_maxes.append(max_val)\n\n    # return the list of max values of each column\n    return col_maxes"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first row (which is the number of columns)\n    num_cols = len(test_list[0])\n    # Initialize an empty list to store the max values of each column\n    col_maxes = [0] * num_cols\n    # Loop through each row in the matrix\n    for row in test_list:\n        # Check if the current row has the desired column\n        if N >= len(row):\n            # If it doesn't, print an error message and return None\n            print(\"Error: N is greater than the number of columns in the matrix.\")\n            return None\n        # Get the value of then'th column in the current row\n        col_val = row[N-1]\n        # If it's greater than the current maximum value for that column, update the max value\n        if col_val > col_maxes[N-1]:\n            col_maxes[N-1] = col_val\n    # Return the maximum value in then'th column\n    return col_maxes[N-1]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first row\n    row_length = len(test_list[0])\n    \n    # Initialize an empty list to store the max values of each column\n    max_values = []\n    \n    # Loop through the columns of the matrix\n    for i in range(row_length):\n        # Initialize a variable to store the max value of the nth column\n        nth_column_max = 0\n        \n        # Loop through the rows of the matrix\n        for j in range(len(test_list)):\n            # If the value in the nth column is greater than the current max value, update the max value\n            if test_list[j][i] > nth_column_max:\n                nth_column_max = test_list[j][i]\n        \n        # Add the max value of the nth column to the list of max values\n        max_values.append(nth_column_max)\n    \n    # Return the maximum value of the nth column\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_col = []\n    for i in range(len(test_list)):\n        max_col.append(max(test_list[i][N-1]))\n    return max_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Create a list to store the max value of each column\n    max_list = []\n\n    # Loop through each row of the matrix\n    for row in test_list:\n        # Loop through each column of the row\n        for i in range(len(row)):\n            # If the current column is then'th column, compare its value with the current max value\n            if i == N-1 and max_list:\n                if row[i] > max_list[0]:\n                    max_list[0] = row[i]\n            # If the current column is not then'th column, compare its value with the previous max value\n            else:\n                if i > 0 and max_list:\n                    if row[i] > max_list[0]:\n                        max_list[0] = row[i]\n                # If the current column is the first column or the max_list is empty, compare its value with the current max value\n                else:\n                    if row[i] > max_list[0]:\n                        max_list = [row[i]]\n\n    # Return the max value of then'th column\n    return max_list[0]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(0, len(lst), 2):\n        merged_list.append([lst[i][0], lst[i+1][0]])\n        merged_list.append([lst[i][1], lst[i+1][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        return [test_list[0][0]] + cummulative_sum([list(x[1:]) for x in test_list[1:]])"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cumulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cumulative_sum += val\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        if isinstance(item, tuple):\n            cum_sum += sum(item)\n        else:\n            cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total = 0\n    for tup in test_list:\n        for val in tup:\n            total += val\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Calculate the cumulative sum of all values in a list of tuples.\n\n    :param test_list: A list of tuples.\n    :return: The cumulative sum of all values in the list.\n    \"\"\"\n    cum_sum = 0\n    for item in test_list:\n        for value in item:\n            cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError('Input must be a list')\n    if not all(isinstance(i, tuple) for i in test_list):\n        raise TypeError('Each element in the list must be a tuple')\n\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum\n    cumulative_sum = 0\n    \n    # iterate over each element in the tuple list\n    for element in test_list:\n        # add the element to the cumulative sum\n        cumulative_sum += element\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize empty list to hold averages\n    avg_list = []\n    # loop through each tuple in nums\n    for num_tuple in nums:\n        # loop through each value in the tuple\n        for num in num_tuple:\n            # add the value to the sum\n            total += num\n        # divide the total by the number of values in the tuple to get the average\n        avg = total / len(num_tuple)\n        # append the average to the list of averages\n        avg_list.append(avg)\n        # reset the total for the next tuple\n        total = 0\n    # return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples as input and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        if len(nums[i]) > 0:\n            total = sum(nums[i])\n            average = total / len(nums[i])\n            average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        num_list = list(num_tuple)\n        sum_list = sum(num_list)\n        average = sum_list/len(num_list)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        average_list.append(avg)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to hold the averages\n    avg_list = []\n    \n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # create an empty list to hold the values in the tuple\n        val_list = []\n        \n        # loop through each value in the tuple\n        for val in tup:\n            # append the value to the value list\n            val_list.append(val)\n        \n        # calculate the average of the values in the tuple\n        avg = sum(val_list) / len(val_list)\n        \n        # append the average to the average list\n        avg_list.append(avg)\n        \n    # return the averages as a list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [[sum(row) / len(row) for row in sub_tuple] for sub_tuple in nums]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    avg_list = []\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Compute the average of the tuple elements and append it to the list of average values\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    # Return the list of average values\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length!\")\n        return\n\n    # perform element-wise modulo\n    result_tup = tuple(i % j for i, j in zip(test_tup1, test_tup2))\n\n    # print the result\n    print(\"Result:\", result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of the tuples must be equal\")\n        return\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    elif d < 0:\n        return -1\n\n    jump_count = 0\n    left_steps = max(1, (d // 2) + 1)\n\n    while left_steps <= steps:\n        right_steps = steps - left_steps\n        if right_steps >= d:\n            left_steps += right_steps\n            jump_count += 1\n        else:\n            left_steps = right_steps + 1\n\n    return jump_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    min_steps = steps\n    jumps = 1\n\n    # Loop until the minimum number of jumps is achieved\n    while min_steps > 0:\n        # Calculate the number of steps required to reach d from origin\n        new_steps = min(min_steps, steps - d)\n\n        # Update the minimum number of steps\n        min_steps -= new_steps\n\n        # Update the number of jumps\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # initialize variables\n    current_pos = 0\n    current_level = 0\n    jumps = 0\n    max_jumps = 0\n    \n    # check if the steps value is valid\n    if steps <= 0:\n        return -1\n    \n    # move to the starting point\n    current_pos = (0, 0)\n    current_level = 0\n    \n    # loop through the steps\n    for i in range(steps):\n        # if the current position is equal to (d, 0), then we have reached the goal\n        if current_pos == (d, 0):\n            return jumps\n        \n        # check if we can move to the next position\n        if current_pos[0] >= d:\n            # check if the next position is valid\n            if current_pos[1] < current_level:\n                # if the next position is not valid, then we can only jump one more position\n                jumps += 1\n            else:\n                # if the next position is valid, then we can jump to the next position or the current level\n                jumps += 1\n                current_level = current_pos[1]\n        \n        # move to the next position\n        current_pos = (current_pos[0] + 1, current_pos[1])\n    \n    # if we reach the end of the loop without finding the goal, then there is no valid path\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Check if the given length is greater than or equal to 2\n    if steps < 2:\n        return -1\n\n    # Create an array to store the steps taken in each step\n    steps_taken = [0] * steps\n\n    # Initialize the steps taken to 0\n    steps_taken[0] = 0\n\n    # Initialize the minimum jumps required\n    min_jumps = 0\n\n    # Loop through the steps\n    for i in range(1, steps):\n\n        # If the current step is 1, check if the next step is 1 as well\n        if i == 1:\n            if steps_taken[i] + 1 <= d:\n                steps_taken[i+1] = steps_taken[i] + 1\n                min_jumps = 1\n            elif steps_taken[i] + 1 > d:\n                steps_taken[i+1] = steps_taken[i] + 1\n                min_jumps += 2\n        elif i == steps - 1:\n            if steps_taken[i] + 1 <= d:\n                steps_taken[i-1] = steps_taken[i] + 1\n                min_jumps = 1\n            elif steps_taken[i] + 1 > d:\n                steps_taken[i-1] = steps_taken[i] + 1\n                min_jumps += 2\n        else:\n            # If the current step is 2, check if the previous step is 1 as well\n            if steps_taken[i] + 1 <= d:\n                steps_taken[i+1] = steps_taken[i] + 1\n                min_jumps = 1\n                if steps_taken[i+1] + 1 <= d:\n                    steps_taken[i+2] = steps_taken[i+1] + 1\n                    min_jumps = 2\n            elif steps_taken[i] + 1 > d:\n                steps_taken[i+1] = steps_taken[i] + 1\n                min_jumps += 2\n                if steps_taken[i+1] + 1 <= d:\n                    steps_taken[i+2] = steps_taken[i+1] + 1\n                    min_jumps = 2\n\n    # Return the minimum jumps required\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize the variable to store the number of jumps required\n    jump_count = 0\n\n    # Initialize the variable to store the current position in the 2d plane\n    pos = (0, 0)\n\n    # Loop through each step\n    for step in range(steps):\n        # Calculate the distance to reach the next step\n        distance = abs(pos[0] - d)\n\n        # If the distance is greater than or equal to the step size, update the position and increment the jump count\n        if distance >= step:\n            pos = (pos[0] + d, pos[1])\n            jump_count += 1\n        else:\n            # If the distance is less than the step size, update the position and continue the loop\n            pos = (pos[0] + step, pos[1])\n\n    # Return the number of jumps required\n    return jump_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Create a list to store the height of the nodes\n    height = [0] * (steps + 1)\n\n    # Initialize the height of the nodes to 0\n    height[0] = 0\n\n    # Traverse through the list of nodes\n    for i in range(1, steps + 1): \n        # Calculate the height of the current node\n        height[i] = max(height[i-1] + 1, d)\n\n        # Check if the height of the current node is greater than the given distance\n        if height[i] > d: \n            # Return the number of jumps required to reach the point of form (d, 0)\n            return i\n\n    # If the height of the last node is less than or equal to the given distance\n    return steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d > steps:\n        return 0\n    if d == 0:\n        return 1\n    if d == 1:\n        return steps\n    if d == 2:\n        return steps//2\n    if d == 3:\n        return steps//3\n    if d == 4:\n        return steps//4\n    if d == 5:\n        return steps//5\n\n    num_jumps = 0\n    if d == 6:\n        num_jumps = 1\n    elif d == 7:\n        num_jumps = 2\n    elif d == 8:\n        num_jumps = 3\n    elif d == 9:\n        num_jumps = 4\n    elif d == 10:\n        num_jumps = 5\n\n    return num_jumps + min_Jumps(steps - 1, d + 1)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    def min_jumps_recursive(current_pos, remaining_steps, distance_to_goal):\n        if remaining_steps == 0:\n            return 1\n        elif distance_to_goal == 0:\n            return 0\n        elif distance_to_goal > 0:\n            if current_pos[0] >= d:\n                return min_jumps_recursive(current_pos, remaining_steps - 1, distance_to_goal)\n            else:\n                return min_jumps_recursive(current_pos[0] + 1, remaining_steps - 1, distance_to_goal - 1)\n\n    return min_jumps_recursive(0, steps, d)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    steps = [0] + steps\n    dp = [float('inf')] * (steps[-1] + 1)\n    dp[0] = 0\n\n    # Fill the dp table\n    for i in range(1, steps[-1] + 1):\n        if i % d == 0:\n            dp[i] = min(dp[i], dp[i - d] + 1)\n        else:\n            dp[i] = min(dp[i], dp[i - 1] + 1)\n\n    # Return the minimum number of jumps required\n    return dp[-1]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    i = 0\n    jumps = 0\n    # Loop until the position is (d, 0)\n    while i < steps:\n        # Check if the position is on the right side of the screen\n        if i % d == 0:\n            # Add a jump\n            jumps += 1\n            # Increment the position\n            i += d\n        else:\n            # Increment the position\n            i += 1\n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of the lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: The length of the lists are not equal.\")\n        return\n\n    # divide each element of the lists element wise\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] // nums2[i])\n        else:\n            print(\"Error: The second list contains zero, cannot divide by zero.\")\n            return\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #check if lists have same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have same length.\")\n    #create a new list to store the result\n    result = []\n    #loop through the lists and divide each element\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Divide each element of the two lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = []\n    new_str = \"\"\n\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            new_str += char\n\n    while nums:\n        new_str += nums.pop()\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initialize variables\n    num_list = []\n    new_str = ''\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the number list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, append it to the new string\n        else:\n            new_str += char\n    # loop through the number list and append it to the new string in reverse order\n    for num in num_list[::-1]:\n        new_str += num\n    # return the new string\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    return ''.join([c for c in test_str if not c.isdigit()]) + ''.join([c for c in test_str if c.isdigit()])"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize the number counter and result string\n    num_counter = 0\n    result_str = \"\"\n\n    # iterate over each character in the input string\n    for char in test_str:\n        # if the character is a number, append it to the result string and increment the number counter\n        if char.isdigit():\n            result_str += char\n            num_counter += 1\n        # otherwise, add the character to the result string and do nothing with the number counter\n        else:\n            result_str += char\n\n    # add the numbers to the end of the result string and return it\n    return result_str + ''.join(['0'] * num_counter)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # create a list of characters and convert the string to a list of characters\n    chars = list(test_str)\n\n    # create an empty string to store the numbers\n    num_str = \"\"\n\n    # loop through the list of characters\n    for char in chars:\n\n        # check if the character is a number\n        if char.isdigit():\n\n            # add the number to the number string\n            num_str += char\n\n    # return the updated string with all the numbers moved to the end\n    return test_str[:-len(num_str)] + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store the numbers\n    num_str = \"\"\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the number string\n            num_str += char\n        else:\n            # add the non-number character to the beginning of the string\n            test_str = char + test_str\n    # return the new string with all numbers moved to the end\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # remove all non-numeric characters from the string\n    test_str = ''.join(filter(str.isdigit, test_str))\n    # initialize variables for storing numbers and letters\n    numbers = ''\n    letters = ''\n    # iterate through the string and check if each character is a digit or a letter\n    for char in test_str:\n        # if the character is a digit, append it to the numbers variable\n        if char.isdigit():\n            numbers += char\n        # if the character is a letter, append it to the letters variable\n        elif char.isalpha():\n            letters += char\n    # join the letters and numbers variables together and return the result\n    return letters + numbers"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    nums = []\n    result = []\n\n    # Loop through the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Add the number to the nums list\n            nums.append(char)\n        else:\n            # Otherwise, add the character to the result list\n            result.append(char)\n\n    # Add all the numbers from the nums list to the end of the result list\n    result += nums\n\n    # Join the result list into a string and return it\n    return ''.join(result)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    new_str = \"\"\n    \n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            new_str += char\n    \n    for num in nums:\n        new_str += num\n    \n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the given list in non-decreasing order\n    a = sorted(a)\n\n    # Initialize variables to keep track of the current largest subset and the size of the largest subset\n    current_largest_subset = []\n    current_size = 0\n\n    # Iterate through the sorted list\n    for num in a:\n        # Add the current number to the current largest subset if it's divisible by the previous number\n        if num % current_largest_subset[-1] == 0:\n            current_largest_subset.append(num)\n            current_size += 1\n        # Otherwise, add the current number to a new subset\n        else:\n            current_largest_subset = [num]\n            current_size = 1\n\n    # Return the size of the largest subset\n    return current_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 1\n    i = 0\n    while i < len(a) - 1:\n        if a[i] + a[i+1] == 2*a[-1]:\n            max_size += 1\n            i += 1\n        else:\n            a[i] += a[i+1]\n            a.pop(i+1)\n            i = 0\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort() # sort the list in ascending order\n    n = len(a)\n    max_size = 1\n    \n    # iterate through the list and check if the difference between the current element and the next element is divisible by n\n    for i in range(n-1):\n        if a[i+1] - a[i] % n == 0:\n            max_size += 1\n        else:\n            break\n            \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a dictionary to store the number of pairs that can be formed using that number as a divisor\n    divisor_count = {}\n    \n    # Create a list to store the largest subset of pairs that can be formed using all the numbers in the list\n    largest_subset = []\n    \n    # Iterate through the numbers in the list and add them to the divisor_count dictionary\n    for num in a:\n        if num in divisor_count:\n            divisor_count[num] += 1\n        else:\n            divisor_count[num] = 1\n    \n    # Iterate through the divisor_count dictionary to find the largest subset of pairs that can be formed\n    for key, value in divisor_count.items():\n        if value == 1:\n            largest_subset.append(key)\n        elif value > 1:\n            # Create a list of pairs that can be formed using the current number as a divisor\n            pairs = [(key, i) for i in range(1, key+1)]\n            \n            # Check if the pairs form a valid subset of the current largest_subset\n            valid_subset = True\n            for pair in pairs:\n                if pair not in largest_subset:\n                    valid_subset = False\n                    break\n            \n            # If the pairs form a valid subset, update the largest_subset with the new pairs\n            if valid_subset:\n                largest_subset = largest_subset + pairs\n                \n    # Return the length of the largest subset\n    return len(largest_subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    n = len(a)\n    max_subset_size = 0\n    max_subset = []\n\n    # Iterate through the list\n    for i in range(n):\n        # Find the first pair of numbers that are divisible\n        j = i + 1\n        while j < n and a[i] % a[j]!= 0:\n            j += 1\n\n        # Update the maximum subset size\n        if j - i > max_subset_size:\n            max_subset_size = j - i\n            max_subset = a[i:j]\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in descending order\n    a.sort(reverse=True)\n    \n    # Initialize variables to keep track of the largest subset size and the start index of the current subset\n    max_size = 0\n    start = 0\n    \n    # Iterate over the sorted list of numbers\n    for i in range(len(a)):\n        # Calculate the end index of the current subset\n        end = i\n        \n        # Initialize a variable to keep track of the current subset size\n        current_size = 0\n        \n        # Iterate over the remaining numbers after the current subset start index\n        for j in range(i+1, len(a)):\n            # Calculate the current subset size by adding the number before and the number after the current subset start index\n            current_size += a[j]\n            \n            # Check if the current subset size is greater than the maximum subset size so far\n            if current_size > max_size:\n                # Update the maximum subset size and the start index of the current subset\n                max_size = current_size\n                start = i\n        \n        # If the current number is not divisible by any number in the current subset, skip it\n        if a[i] % a[start:end+1]!= 0:\n            continue\n        \n        # Update the maximum subset size if necessary\n        if current_size > max_size:\n            max_size = current_size\n    \n    # Return the largest subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # create a boolean array to check if each number is divisible by k\n    is_divisible = [False] * n\n\n    # initialize the largest subset with a single number\n    largest_subset = [a[0]]\n\n    # iterate through the array, starting with the second number\n    for i in range(1, n):\n        # if the current number is not divisible by k, append it to the largest subset\n        if a[i] % largest_subset[-1]!= 0:\n            largest_subset.append(a[i])\n        # otherwise, update the largest subset to include the current number\n        else:\n            largest_subset = [largest_subset[-1]]\n\n    return len(largest_subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a set to store the numbers of the subset\n    subset = set()\n    # Initialize the maximum size of the subset to 0\n    max_size = 0\n    \n    # Loop through each number in the list\n    for num in a:\n        # If the number is divisible by the first number in the set, add it to the subset\n        if num % a[0] == 0 and num not in subset:\n            subset.add(num)\n            # Update the maximum size of the subset if the size of the subset is larger\n            max_size = max(max_size, len(subset))\n        # If the number is not divisible by the first number in the set, remove the first number from the subset\n        else:\n            subset.discard(a[0])\n    \n    # Return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize two pointers, left and right, to start from the first and last element of the list, respectively\n    left = 0\n    right = len(a) - 1\n    \n    # Initialize two variables to store the maximum size and the current size of the largest subset found so far\n    max_size = 0\n    current_size = 1\n    \n    # Iterate through the list from left to right and right to left\n    while left < right:\n        # If the difference between the elements at left and right is divisible by 2, then the current subset is a pair\n        if a[left] - a[right] % 2 == 0:\n            current_size += 1\n            \n            # Update the maximum size if the current size is greater than the current maximum size\n            if current_size > max_size:\n                max_size = current_size\n        else:\n            # If the difference between the elements at left and right is not divisible by 2, then the current subset is not a pair\n            # Reset the current size to 1 to start a new subset\n            current_size = 1\n        \n        # If the current size is greater than the maximum size, then update the maximum size to be equal to the current size\n        if current_size > max_size:\n            max_size = current_size\n        \n        # Move the left pointer to the right if the current size is less than the maximum size\n        if current_size < max_size:\n            left += 1\n        \n        # Move the right pointer to the left if the current size is less than the maximum size\n        if current_size < max_size:\n            right -= 1\n    \n    # Return the maximum size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n    n = len(a)\n    # initialize the maximum size to 1\n    max_size = 1\n    # initialize a set to store the indices of the elements in the current subset\n    current_subset = set()\n    # iterate over the sorted list\n    for i in range(n):\n        # check if the current element is divisible by the first element of the current subset\n        if a[i] % a[current_subset.pop()] == 0:\n            # if it is, update the maximum size and add the current element to the current subset\n            max_size = max(max_size, len(current_subset) + 1)\n        # otherwise, add the current element to the current subset\n        current_subset.add(i)\n    # return the maximum size\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists\n    merged = arr1 + arr2\n\n    # Sort the merged list\n    sorted_merged = sorted(merged)\n\n    # Get the length of the sorted list\n    length = len(sorted_merged)\n\n    # Calculate the median index\n    median_index = length // 2\n\n    # If the length is odd, the median is the middle element\n    if length % 2 == 1:\n        return sorted_merged[median_index]\n    # If the length is even, the median is the average of the two middle elements\n    else:\n        return (sorted_merged[median_index - 1] + sorted_merged[median_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted arrays into a single sorted array\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # calculate the median index\n    median_index = n // 2\n\n    # return the median value\n    if n % 2 == 0:\n        return (merged_arr[median_index - 1] + merged_arr[median_index]) / 2\n    else:\n        return merged_arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists and returns their median.\n\n    :param arr1: The first sorted list.\n    :param arr2: The second sorted list.\n    :param n: The size of the list.\n\n    :return: The median of the two lists.\n    \"\"\"\n    # Concatenate the two lists\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Check if the size of the list is odd\n    if n % 2 == 1:\n        return arr[n // 2]\n    else:\n        # If the size of the list is even, find the median of two middle numbers\n        mid1 = n // 2 - 1\n        mid2 = n // 2\n        return (arr[mid1] + arr[mid2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n    # Sort the concatenated list\n    arr.sort()\n    # Find the median\n    if n % 2 == 0:\n        # If n is even, take the average of the middle two numbers\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        # If n is odd, take the middle number\n        median = arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Find the median\n    sorted_list = sorted(merged_list)\n    mid = len(sorted_list) // 2\n\n    if n % 2 == 0:\n        # Find the average of middle two elements\n        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        # Find the middle element\n        median = sorted_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists into a single list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Calculate the midpoint of the sorted list\n    midpoint = n // 2\n    \n    # If the length of the sorted list is odd, the median is the middle element\n    if n % 2 == 1:\n        median = sorted_list[midpoint]\n    # If the length of the sorted list is even, the median is the average of the two middle elements\n    else:\n        median = (sorted_list[midpoint-1] + sorted_list[midpoint]) / 2\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Find the mid index of the merged list\n    mid = n // 2\n    # Check if the length of the merged list is odd or even\n    if n % 2 == 0:\n        # If it's even, return the average of the two middle elements\n        return (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        # If it's odd, return the middle element\n        return merged_list[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    # merge two sorted arrays into a single sorted array\n    merged_arr = arr1 + arr2\n\n    # find the middle index of the merged array\n    mid = n // 2\n\n    # if the length of the array is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged_arr[mid]\n\n    # if the length of the array is even, the median is the average of the middle two elements\n    else:\n        return (merged_arr[mid] + merged_arr[mid - 1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    # Sort the two arrays\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (arr1[n//2 - 1] + arr1[n//2]) / 2\n    else:\n        median = arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three parameters:\n    - arr1: the first sorted list of size n\n    - arr2: the second sorted list of size n\n    - n: the size of the two lists\n\n    The function returns the median of the two sorted lists. If the two lists are of different sizes, the function will\n    raise an error.\n    '''\n\n    # Check if the two lists are of the same size\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"The two lists must be of the same size.\")\n\n    # Initialize the two variables to keep track of the left and right bounds of the current window\n    left1 = 0\n    left2 = 0\n    right1 = n - 1\n    right2 = n - 1\n\n    # Initialize the variables to keep track of the sum of all elements in the current window\n    window1 = 0\n    window2 = 0\n\n    # Initialize the variable to keep track of the total number of elements in the current window\n    count1 = 0\n    count2 = 0\n\n    # Initialize the variable to keep track of the current median value\n    median = 0\n\n    # Loop through the two lists and compute the sum and count of all elements in the current window\n    while left1 <= right1 and left2 <= right2:\n        window1 += arr1[left1]\n        window2 += arr2[left2]\n        count1 += 1\n        count2 += 1\n        if count1 > right1 - left1 or count2 > right2 - left2:\n            # Calculate the new positions of the left and right bounds of the window\n            if count1 > count2:\n                right1 -= 1\n            else:\n                right2 -= 1\n\n            # Update the sum and count of the new window\n            window1 -= arr1[left1]\n            window2 -= arr2[left2]\n            count1 -= 1\n            count2 -= 1\n\n        # Calculate the new median value\n        if count1 > count2:\n            median = window1 / count1\n        else:\n            median = window2 / count2\n\n        # Move the left bounds of the current window one position to the right\n        left1 += 1\n        left2 += 1\n\n    # If the size of one of the lists is less than the size of the other, adjust the left bound of the current window\n    if len(arr1) < n:\n        left1 = 0\n    if len(arr2) < n:\n        left2 = 0\n\n    # Calculate the new median value\n    if count1 > count2:\n        median = window1 / count1\n    else:\n        median = window2 / count2\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase\n    string = string.upper()\n    # Return the uppercase string\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    for char in string:\n        if char.isupper():\n            return True\n    return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert the string to uppercase\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return string\n    else:\n        return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase = string.upper()\n    return uppercase"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first_last = newList[1:3]\n        newList[1:3] = newList[0:2]\n        newList[0:2] = first_last\n    else:\n        print(\"List must have at least two elements to be swapped.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList) \n    first = newList[0] \n    last = newList[n-1] \n    newList[0] = last \n    newList[n-1] = first \n    return newList "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n\n    # if the length is less than 2, there is no need to swap\n    if length < 2:\n        return newList\n    \n    # if the length is greater than 2, we need to swap the first and last element\n    # and then return the new list\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Interchange the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"Error: The list must have at least 2 elements.\")\n        return\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # print the new list\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return swap_List(newList[1:])"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Initialize a temporary variable to store the last element of the list\n    temp = newList[-1]\n    \n    # Reverse the first two elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Reverse the first two elements of the list using another method\n    # newList[:] = newList[::-1][:2]\n    # newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Finally, append the temporary variable to the end of the list\n    newList.append(temp)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Getting the length of the list\n    length = len(newList)\n    # Interchanging the first and last element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (2 * r)**0.5\n\n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - r) * (s - 2 * r))\n\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    import cmath\n\n    # Calculate the semi-circle area\n    c = (r ** 2) / 2\n    \n    # Calculate the area of the largest triangle\n    area = math.sqrt(c * (1 + math.cos(math.pi/3)))\n    \n    # Calculate the area of the smallest triangle\n    a = 0.5 * r ** 2\n    \n    # Calculate the area of the largest inscribed triangle\n    largest_triangle_area = (3 / 4) * a * math.sqrt(2)\n    \n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of a right triangle with sides of length 2r\n    area = 0.5 * r**2\n    # calculate the perimeter of a right triangle with sides of length 2r\n    perimeter = 4 * r\n    # calculate the area of a semicircle with radius r\n    semicircle_area = math.pi * r**2\n    # find the length of the longest side of a triangle that can be inscribed in the semicircle\n    longest_side = semicircle_area / (2 * area)\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = longest_side * longest_side / perimeter\n    # return the area of the largest triangle\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # First we calculate the semi-perimeter\n    s = 2 * r\n\n    # Then we calculate the area of the largest triangle that can be inscribed in a semicircle\n    area = (3 * s ** 2) / (4 * math.tan(math.pi / 3))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # calculate the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n    \n    # calculate the area of the triangle using Heron's formula\n    a = math.sqrt(s*(s-3)*(s-4)*(s-5))\n    \n    # return the area of the largest triangle\n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the semi-circle's circumference\n    circumference = 2 * 3.14159 * r\n    \n    # Find the largest area possible for a triangle inscribed in the semi-circle\n    area = circumference / 3\n    \n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # area of a triangle = 1/2 * base * height\n    # area of a rectangle = base * height\n    # area of a semicircle = pi * radius^2\n    # area of a triangle with base and height = 1/2 * base * height\n    # area of a rectangle with base and height = base * height\n    # area of a semicircle with radius = pi * radius^2\n    \n    # calculating the area of a triangle\n    # finding the base and height of the triangle\n    # base = 1/2 * r^2\n    # height = 1/2 * r^2\n    # area of triangle = 1/2 * r^2 * r^2\n    # area of triangle = pi * r^4\n    \n    # calculating the area of a rectangle\n    # finding the base and height of the rectangle\n    # base = 1/2 * r^2\n    # height = 1/2 * r^2\n    # area of rectangle = base * height\n    # area of rectangle = pi * r^4\n    \n    # finding the radius of the semicircle\n    # radius = sqrt(1/2 * r^2)\n    # radius = r\n    \n    # area of semicircle = pi * r^2\n    # area of semicircle = pi * r^4\n    \n    # area of the largest triangle inscribed in the semicircle\n    # triangle 1: base = 1/2 * r^2, height = 1/2 * r^2\n    # triangle 2: base = 1/4 * r^2, height = 3/4 * r^2\n    # triangle 3: base = 1/4 * r^2, height = 1/4 * r^2\n    # triangle 4: base = 3/4 * r^2, height = 1/4 * r^2\n    # triangle 5: base = 1/4 * r^2, height = 3/4 * r^2\n    # triangle 6: base = 1/4 * r^2, height = 1/4 * r^2\n    \n    # area of triangle 1 = 1/2 * r^2 * r^2\n    # area of triangle 2 = 1/4 * r^2 * r^2\n    # area of triangle 3 = 1/4 * r^2 * r^2\n    # area of triangle 4 = 3/4 * r^2 * r^2\n    # area of triangle 5 = 1/4 * r^2 * r^2\n    # area of triangle 6 = 1/4 * r^2 * r^2\n    \n    # total area of the triangles = sum of areas of all six triangles\n    # total area of the triangles = pi * r^4\n    \n    # solving the quadratic equation for the area of the largest triangle\n    # a = 1\n    # b = 4 * pi * r^2\n    # c = pi * r^4\n    # discriminant = b^2 - 4ac\n    \n    # discriminant = 16 * pi * r^4 - 4 * pi * r^2\n    \n    # discriminant = 32 * pi * r^2 - 16 * pi * r^4\n    \n    # discriminant = 32 * pi^2 * r^4 - 16 * pi^2 * r^2\n    \n    # discriminant = 64 * pi^2 * r^2 - 32 * pi^2 * r^4\n    \n    # discriminant = 32 * pi^2 * r^2 - 16 * pi^2 * r^4\n    \n    # discriminant = 32 * pi^2 * r^2 - 64 * pi^2 * r^2\n    \n    # discriminant = 32 * pi^2 * r^2 - 32 * pi^2 * r^2\n    \n    # discriminant = 0\n    \n    # the largest triangle inscribed in the semicircle is triangle 6\n    # area of triangle 6 = 1/4 * r^2 * r^2\n    # area of triangle 6 = pi * r^4\n    \n    # area of the largest triangle inscribed in the semicircle = pi * r^4\n    \n    return 1/4 * r**2 * r**2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula to calculate the area of a triangle using Heron's formula\n    def heron_formula(a, b, c):\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Function to find the two angles of the largest triangle\n    def find_angle(a, b):\n        return math.acos((a**2 + b**2 - r**2) / (2 * a * b))\n\n    # Find the semi-perimeter of the largest triangle\n    def find_perimeter(a, b):\n        return 2 * (a + b)\n\n    # Main function to find the area of the largest triangle\n    def find_largest_area():\n        # Find the semi-perimeter of the largest triangle\n        a = r / 2\n        b = r / 2\n\n        # Calculate the area of the largest triangle\n        area = heron_formula(a, b, 0)\n\n        # Find the angle of the largest triangle\n        angle = find_angle(a, b)\n\n        # Find the perimeter of the largest triangle\n        perimeter = find_perimeter(a, b)\n\n        # Find the area of the second largest triangle\n        second_area = heron_formula(0, perimeter, r)\n\n        # Find the angle of the second largest triangle\n        second_angle = find_angle(perimeter, r)\n\n        # Calculate the area of the largest triangle\n        largest_area = area + second_area\n\n        # Return the area of the largest triangle\n        return largest_area\n\n    return find_largest_area()"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = math.sqrt(s * (s - 3 * math.sqrt(s * s + 9)))\n\n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the length of the perimeter of the largest triangle that can be inscribed in a semicircle\n    a = r\n    b = r * math.sin(math.pi / 3)\n    c = r * math.cos(math.pi / 3)\n    s = (a + b + c) / 2\n    perimeter = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Find the area of the largest triangle that can be inscribed in a semicircle\n    area = math.sqrt(3) * (perimeter * r ** 2) / 4\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end=len(array)-1\n    for i in range(start,end+1):\n        if array[i]!=i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    :param array: A list of natural numbers\n    :param start: (optional) The starting index for the search\n    :param end: (optional) The ending index for the search\n    :return: The smallest missing number\n    \"\"\"\n    # Check if the array is empty\n    if len(array) == 0:\n        return None\n\n    # If no start and end indices are provided, assume the first and last elements\n    if start is None and end is None:\n        start = 0\n        end = len(array) - 1\n\n    # If no start index is provided, assume the start index is 0\n    if start is None:\n        start = 0\n\n    # If no end index is provided, assume the end index is the last element\n    if end is None:\n        end = len(array) - 1\n\n    # Iterate through the array, checking for missing numbers\n    for i in range(start, end + 1):\n        # Check if the current element is missing\n        if i + 1 not in array:\n            return i + 1\n\n    # If no missing number is found, return None\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): List of natural numbers.\n        start (int): Starting index of the array.\n        end (int): Ending index of the array.\n\n    Returns:\n        int: Smallest missing number from the array.\n\n    Examples:\n        >>> find_First_Missing([1, 2, 4, 6, 8, 10])\n        3\n        >>> find_First_Missing([1, 3, 5, 7, 9])\n        2\n        >>> find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        11\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1\n\n    return end + 1 + start\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array) - 1\n    while start<=end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n    It takes an array of natural numbers and an optional start and end index as arguments.\n    If start and end index are not provided, it finds the first missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Args:\n    array (list): A sorted list of natural numbers.\n\n    Optional Args:\n    start (int): The starting index of the array. Default value is 0.\n    end (int): The ending index of the array. Default value is None, which means the last element of the array is used.\n\n    Returns:\n    int: The smallest missing number from the array.\n\n    Raises:\n    TypeError: If the input argument is not a list.\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input argument should be a list\")\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # If the start and end arguments are not provided, set them to the first and last indices of the array\n    if not end:\n        end = len(array) - 1\n\n    # Loop through the array and check if each number is greater than the previous number\n    for i in range(start,end+1):\n        if array[i] < array[i-1]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \n    Args:\n    array (list): A list of natural numbers sorted in ascending order.\n    start (int): The starting index of the range of numbers to search. Defaults to 0.\n    end (int): The ending index of the range of numbers to search. Defaults to the end of the list.\n    \n    Returns:\n    int: The smallest missing number in the array.\n    \n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if i == array[i]:\n            continue\n        else:\n            return i"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list containing only the even numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    Given a list of numbers, returns a new list containing only the even numbers.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as an argument, and returns a list of even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    rows = [ele[0]-1, ele[0], ele[0]+1,\n            ele[1]-1, ele[1], ele[1]+1]\n    cols = [ele[1]-1, ele[1], ele[1]+1,\n            ele[0]-1, ele[0], ele[0]+1]\n    adj = [(rows[i], cols[i]) for i in range(len(rows)) if 0 <= rows[i] < len(sub) and 0 <= cols[i] < len(sub[0])]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x, y-1), (x+1, y), (x, y+1), (x-1, y)]\n    if sub:\n        sub += adj\n    else:\n        sub = adj\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adj = []\n    if row > 0 and col > 0:\n        adj.append((row - 1, col - 1))\n    if row > 0:\n        adj.append((row - 1, col))\n    if row > 0 and col < 9:\n        adj.append((row - 1, col + 1))\n    if col > 0:\n        adj.append((row, col - 1))\n    if col < 9:\n        adj.append((row, col + 1))\n    if row < 9 and col > 0:\n        adj.append((row + 1, col - 1))\n    if row < 9:\n        adj.append((row + 1, col))\n    if row < 9 and col < 9:\n        adj.append((row + 1, col + 1))\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    for adj in adjacent:\n        if adj not in sub:\n            sub.append(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n    if x > 0:\n        adj.append((x-1, y))\n    if x > 0 and y < len(sub)-1:\n        adj.append((x-1, y+1))\n    if y > 0:\n        adj.append((x, y-1))\n    if x < len(sub)-1:\n        adj.append((x+1, y-1))\n    if x < len(sub)-1 and y < len(sub)-1:\n        adj.append((x+1, y))\n    if x < len(sub)-1 and y > 0:\n        adj.append((x+1, y+1))\n    if y < len(sub)-1:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n\n    # Define the eight adjacent coordinates\n    adjs = [(row+1, col), (row-1, col), (row, col+1), (row, col-1), \n            (row+1, col+1), (row-1, col-1), (row+1, col-1), (row-1, col+1)]\n\n    # Filter out duplicates and coordinates not within the grid\n    return list(set(adjs))"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    # get all the adjacent coordinates\n    if x-1 >= 0:\n        sub.append((x-1, y))\n    if x+1 < n:\n        sub.append((x+1, y))\n    if y-1 >= 0:\n        sub.append((x, y-1))\n    if y+1 < m:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # Define the adjacent coordinates of a given coordinate tuple\n    if ele[0] > 0 and ele[1] > 0:\n        sub.append((ele[0]-1, ele[1]-1))\n    if ele[0] > 0 and ele[1] < len(ele)-1:\n        sub.append((ele[0]-1, ele[1]+1))\n    if ele[0] < len(ele)-1 and ele[1] > 0:\n        sub.append((ele[0]+1, ele[1]-1))\n    if ele[0] < len(ele)-1 and ele[1] < len(ele)-1:\n        sub.append((ele[0]+1, ele[1]+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x-1 >= 0 and (x-1, y) not in sub:\n        sub.append((x-1, y))\n    if x+1 < len(matrix) and (x+1, y) not in sub:\n        sub.append((x+1, y))\n    if y-1 >= 0 and (x, y-1) not in sub:\n        sub.append((x, y-1))\n    if y+1 < len(matrix[0]) and (x, y+1) not in sub:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extract the x and y coordinates of the element from the tuple\n    x, y = ele\n    \n    # Create a list to store the adjacent coordinates\n    adj = []\n    \n    # Loop through all the elements and check if they are adjacent to the element\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            # If the element is not already in the list and if it's within the bounds of the matrix, add it to the list\n            if (i, j)!= ele and (0 <= i < n) and (0 <= j < n):\n                adj.append((i, j))\n    \n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert the input string to lowercase\n    text = text.lower()\n    # iterate over each character in the string\n    for i in range(len(text)):\n        # if the character is a whitespace character\n        if text[i] in [' ', '\\n', '\\t']:\n            # replace it with an underscore\n            text = text[:i] + '_' + text[i+1:]\n        # if the character is an underscore\n        elif text[i] == '_':\n            # replace it with a whitespace character\n            text = text[:i] +'' + text[i+1:]\n    # return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the given string to lowercase\n    text = text.lower()\n    # Replace all whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Reverse the replaced text\n    text = text[::-1]\n    # Replace all underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    # Convert the resulting string back to uppercase\n    text = text.upper()\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    # replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscore\n    text = text.replace(\" \", \"_\")\n    # Replace underscore with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    zero_indices = []\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_indices.append(i)\n    \n    # Reverse the order of the indices\n    zero_indices.reverse()\n    \n    # Move the zeroes to the end of the list\n    for i in range(len(zero_indices)):\n        num_list.pop(zero_indices[i])\n        num_list.insert(len(num_list) - 1 - i, 0)\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    if zero_index!= -1:\n        for i in range(len(num_list) - 1, zero_index - 1, -1):\n            num_list[i], num_list[i + 1] = num_list[i + 1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            zero_index = index\n            break\n    if zero_index!= -1:\n        for i in range(len(num_list)-1, zero_index, -1):\n            num_list[i], num_list[i-1] = num_list[i-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            break\n        i += 1\n\n    if i < len(num_list):\n        j = i - 1\n        while j >= 0:\n            if num_list[j]!= 0:\n                break\n            j -= 1\n\n        while j >= 0:\n            num_list[j+1] = num_list[j]\n            j -= 1\n        num_list[j+1] = 0\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers, one at the start of the list and the other at the end\n    start = 0\n    end = len(num_list) - 1\n\n    # Iterate through the list while the start pointer is less than the end pointer\n    while start < end:\n        # If the current element is zero, move it to the end of the list\n        if num_list[start] == 0:\n            # Move the current element to the end of the list\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            # Move the start pointer to the right\n            start += 1\n            # Move the end pointer to the left\n            end -= 1\n        # If the current element is not zero, move it to the next position\n        else:\n            start += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize a counter to keep track of the index of the first non-zero number\n    first_nonzero_index = 0\n    \n    # iterate through the list\n    for i in range(len(num_list)):\n        # if the current number is not zero, move it to the first non-zero index and increment the index\n        if num_list[i]!= 0:\n            num_list[first_nonzero_index], num_list[i] = num_list[i], num_list[first_nonzero_index]\n            first_nonzero_index += 1\n    \n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers, one for the beginning and one for the end of the list\n    i = 0\n    j = len(num_list) - 1\n\n    # loop through the list\n    while i < j:\n        # check if the current element is zero\n        if num_list[i] == 0:\n            # if it is, move the current element to the end of the list\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # move the pointers to the next elements\n            i += 1\n            j -= 1\n        else:\n            # if it's not, move the pointer to the next element\n            i += 1\n\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    This function takes two parameters, an array of n integers and an integer n.\n    It calculates the sum of xor of all pairs of numbers in the array and returns the result.\n    '''\n    # Initialize the sum variable to zero\n    sum_xor = 0\n    # Loop through the array\n    for i in range(n): \n        # Loop through the rest of the array\n        for j in range(i+1,n): \n            # Add the XOR of i and j to sum_xor\n            sum_xor += arr[i] ^ arr[j]\n    # Return the sum of xor of all pairs of numbers in the array\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor = sum_xor ^ arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\n    :param arr: a list of integers\n    :param n: the length of the list\n    :return: the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR all pairs of numbers and add them up\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += (arr[i] ^ arr[i+1])\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n % 2 == 0:\n        xor_sum = 0\n        for i in range(n//2):\n            xor_sum += arr[i] ^ arr[n-i-1]\n        return xor_sum\n    else:\n        xor_sum = 0\n        for i in range(n//2):\n            xor_sum += arr[i] ^ arr[n-i-1]\n        xor_sum += arr[n//2]\n        return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    sum_of_xor = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_of_xor += arr[i] ^ arr[j]\n\n    return sum_of_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    sum = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    \n    return sum\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and sorts it using the heap sort algorithm.\n    '''\n    # Build the max heap from the input iterable\n    hq.heapify(iterable)\n    \n    # Extract the max element from the heap and remove it\n    sorted_list = [hq.heappop(iterable)]\n    \n    # Iterate over the remaining elements of the input iterable and extract and insert them into the heap\n    while iterable:\n        # Extract the max element from the heap and remove it\n        max_value = hq.heappop(iterable)\n        \n        # If the new max element is smaller than the current max element, swap them\n        if max_value > sorted_list[-1]:\n            sorted_list[-1], max_value = max_value, sorted_list[-1]\n        \n        # If the heap is not empty, insert the new max element into the heap\n        if iterable:\n            hq.heappush(iterable, max_value)\n            \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using the heap sort algorithm.\n    \"\"\"\n    # create a max-heap from the given iterable\n    max_heap = []\n    for item in iterable:\n        heapq.heappush(max_heap, -item)\n    # extract the elements from the max-heap in sorted order\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the list to a heap\n    heap = [None] * len(iterable)\n    hq.heapify(heap, iterable)\n    \n    # Remove elements from the heap and add them to a new list\n    sorted_list = []\n    while len(heap) > 0:\n        sorted_list.append(heapq.heappop(heap))\n    \n    # Convert the sorted list to a normal list and return it\n    return list(sorted_list)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n\n    # Create a max heap from the iterable\n    hq.heapify(iterable)\n\n    # Extract elements from the heap and append to a new list\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Create a max-heap from the given iterable\n    hq.heapify(iterable)\n\n    # Pop the max element from the heap and add it to the end of the sorted list\n    sorted_list = [hq.heappop(iterable)]\n\n    # Repeat the above process until the heap is empty\n    while iterable:\n        # Pop the max element from the heap\n        max_element = hq.heappop(iterable)\n\n        # Add the max element to the end of the sorted list and repeat the process\n        hq.heappush(sorted_list, max_element)\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the Heap Sort algorithm.\n    '''\n    # Create a max heap from the given list\n    hq.heapify(iterable)\n\n    # Iterate through the list and extract the maximum element\n    # from the heap and append it to the sorted list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        iterable = iterable[1:]\n\n        # Extract the maximum element from the heap and replace it\n        # with the last element in the list\n        if iterable:\n            hq.heappop(iterable)\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    sorted_list = []\n\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a max-heap from the iterable\n    heap = hq.nsmallest(len(iterable), iterable)\n    # Build the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a heap sort algorithm.\n    '''\n    heap = [None] * len(iterable)\n    for i, item in enumerate(iterable):\n        heap[i] = item\n    hq.heapify(heap)\n    for i in range(len(heap) - 1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heapify(heap[:i])\n    return [heap[i] for i in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n\n    # Convert the given list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # Extract elements from the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss\n\n    Input:\n        actual_cost (int) - the actual cost of the sale\n        sale_amount (int) - the amount being sold\n\n    Output:\n        bool - True if the sale has no profit and no loss, False otherwise\n    '''\n\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount:\n        return \"No profit and no loss\"\n    else:\n        return \"Profit and loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount: # if actual cost is greater than sale amount, it's profitable\n        return False\n    elif sale_amount > actual_cost: # if sale amount is greater than actual cost, it's not profitable\n        return False\n    else: # if actual cost and sale amount are equal, it's neither profitable nor not profitable\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    This function will take in two parameters: actual_cost and sale_amount.\n    \n    The function should return True if the given amount has no profit and no loss, and False otherwise.\n    \n    A profit is a profitable sale that increases the value of the sale (or loss).\n    \n    A loss is a sale that reduces the value of the sale (or profit).\n    \n    In this case, a sale has no profit if the cost of the sale is equal to the value of the sale.\n    \n    A sale has no loss if the sale amount is less than the actual cost of the sale.\n    \n    If the given amount has a profit or loss, the function should return False.\n    \"\"\"\n    \n    if actual_cost == sale_amount:\n        return True\n    elif sale_amount < actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Checks whether the given amount has no profit and no loss.\n\n    :param actual_cost: The actual cost of the sale.\n    :type actual_cost: int\n    :param sale_amount: The amount to be sold.\n    :type sale_amount: int\n    :return: True if the given amount has no profit and no loss, False otherwise.\n    :rtype: bool\n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        profit = sale_amount - actual_cost\n        return profit > 0 and profit < sale_amount"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # Check if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        return \"No profit and no loss\"\n    else:\n        return \"Profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost == sale_amount:\n        print(\"The given amount has no profit and no loss\")\n    elif actual_cost > sale_amount:\n        print(\"The given amount has no profit and loss\")\n    else:\n        print(\"The given amount has profit and no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit > 0:\n        print(\"No profit and no loss\")\n    elif profit == 0:\n        print(\"No profit\")\n    else:\n        print(\"No loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0:\n        return True\n    else:\n        if actual_cost <= sale_amount:\n            return False\n        else:\n            return noprofit_noloss(actual_cost - sale_amount, sale_amount)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill in celsius\n    w = (v * 1.60934) / (t + 273.15)\n\n    # calculate the wind chill in fahrenheit\n    wc = math.ceil(w * 9/5 + 32) - 32\n\n    # round the wind chill to the nearest integer\n    wci = math.ceil(wc)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Fahrenheit\n    t_f = (t * 1.8) + 32\n\n    # Calculate the wind chill index\n    c = 0.62197189 * v ** 0.16 + 17.625 * math.log(t_f) - 4.3794117 * t_f\n\n    # Calculate the rounded wind chill index\n    c = round(c)\n\n    return c"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill_temp = t + 0.6219 * (t - 273.15) - 11.37 * math.log(v)\n    return math.ceil(chill_temp)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert the wind velocity to knots\n    v *= 1.94384449244172\n\n    # Calculate the heat index using the formula\n    ci = 35.74 + 0.6215 * t - 35.75 * math.exp(t / 33.86) + 0.4275 * v - 44.79 * math.exp(v / 1461.5)\n\n    # Calculate the wind chill index rounded to the nearest integer\n    wci = math.ceil(ci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 3.6 # convert km/h to m/s\n    c = 1.8 # convert celsius to fahrenheit\n    temp_f = (t * 9/5) + 32\n\n    # calculate the wind chill in fahrenheit\n    wc = (temp_f - 32) * (17/24) + 25\n\n    # calculate the wind chill in celsius\n    wc_c = (temp_f - 32) * (5/9)\n\n    # calculate the wind chill index\n    wci = wc / wc_c\n\n    # round the wind chill index to the nearest integer\n    wci_int = round(wci)\n\n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c_p = 1004.6\n    c_v = 86.4\n    # convert celsius to fahrenheit\n    t = (t * 9/5) + 32\n    \n    # calculate the wind chill temperature\n    wc = t - (0.0065 * (v**2)) + (0.017 * v) - (0.00037 * t)\n    # calculate the wind chill depression index\n    wci = math.floor(wc / 10) * 10\n    # calculate the wind chill temperature in fahrenheit\n    wcif = (wc - wci) * 9/5 + 32\n    \n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < 0:\n        print(\"Error: Temperature should be a non-negative number.\")\n        return\n    if v < 0:\n        print(\"Error: Wind speed should be a non-negative number.\")\n        return\n    if v > 100:\n        print(\"Error: Wind speed should be less than or equal to 100 km/h.\")\n        return\n    \n    # Calculate wind chill index\n    k = 1.3\n    if t < 0:\n        print(\"Error: Temperature should be a non-negative number.\")\n        return\n    if v < 0:\n        print(\"Error: Wind speed should be a non-negative number.\")\n        return\n    if v > 100:\n        print(\"Error: Wind speed should be less than or equal to 100 km/h.\")\n        return\n    w = v * math.sin(math.radians(t)) / 10\n    wc = k * (w - 273.15)\n    \n    # Round wind chill index to the next integer\n    if wc > 140:\n        wc_rounded = 140\n    elif wc > 120:\n        wc_rounded = 120\n    elif wc > 100:\n        wc_rounded = 100\n    elif wc > 80:\n        wc_rounded = 80\n    elif wc > 60:\n        wc_rounded = 60\n    elif wc > 40:\n        wc_rounded = 40\n    elif wc > 20:\n        wc_rounded = 20\n    else:\n        wc_rounded = 0\n    \n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert to Fahrenheit\n    t = (t * 1.8) + 32\n    \n    # Calculate the dew point temperature\n    def dew_point(t, v):\n        return 243.04*(1.0001*t/(v+0.0001))\n    \n    # Calculate the wind chill index\n    def wci(t, v):\n        return int(round((237.3 + (0.6215*t)-(11.37*math.log(v*0.001)))/0.2373))\n    \n    # Calculate the temperature difference between the actual and predicted temperature\n    t_diff = t - dew_point(t, v)\n    \n    # Calculate the wind chill index\n    wci_temp = wci(t_diff, v*0.001)\n    \n    return wci_temp"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert to Fahrenheit\n    t = (t * 1.8) + 32\n    \n    # calculate wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * math.log(t) + 0.4275 * (v**2)\n    \n    # round to the nearest integer\n    wci_int = round(wci)\n    \n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    :param v: wind velocity in km/h\n    :type v: float\n    :param t: temperature in celsius\n    :type t: float\n    :return: wind chill index rounded to the next integer\n    :rtype: int\n    '''\n    # convert celsius to fahrenheit\n    t = t * 1.8 + 32\n    # convert wind velocity to m/s\n    v = v * 1000\n    # calculate wind chill\n    wch = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * v\n    # calculate the wind chill index rounded to the nearest integer\n    wci = round(wch)\n    return wci"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create a new list to store the names that pass the filter condition\n    valid_names = []\n    # loop through the names in the sample_names list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip to the next name\n            continue\n        # if the name passes the filter condition, add it to the valid_names list\n        valid_names.append(name)\n    # sum the lengths of the valid names\n    total_length = sum(len(name) for name in valid_names)\n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n\n    # Initialize the sum of the lengths of names to 0\n    total_len = 0\n\n    # Loop through each name in the sample names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip the name and move on to the next one\n            continue\n        # If the name doesn't start with a lowercase letter, add its length to the total\n        total_len += len(name)\n\n    # Return the total length of the names after removing the lowercase names\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if not name[0].islower()] # create a list of names that do not start with a lowercase letter\n    lengths = [len(name) for name in names] # calculate the length of each name\n    return sum(lengths) # return the sum of the lengths of the remaining names"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():  # Check if the first character of the name is uppercase\n            continue  # If it is, skip the name and move on to the next one\n        else:\n            total_length += len(name)  # If it's not uppercase, add the length of the name to the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize the sum variable to 0\n    sum_length = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n\n            # If it does, skip it and continue to the next name\n            continue\n\n        # Otherwise, add the length of the name to the sum variable\n        sum_length += len(name)\n\n    # Return the total length of the names that passed the test\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create a new list that contains only the uppercase names from the original list\n    upper_names = [name for name in sample_names if name[0].isupper()]\n    # initialize a variable to store the total length of the names\n    total_length = 0\n    # loop through the uppercase names and add their length to the total length\n    for name in upper_names:\n        total_length += len(name)\n    # return the total length of the uppercase names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names that start with a lowercase letter\n    lower_names = []\n    # Loop through the sample_names list\n    for name in sample_names:\n        # Check if the first letter of the name is lowercase\n        if name[0].islower():\n            # If it is, add the name to the lower_names list\n            lower_names.append(name)\n    # Initialize a variable to store the sum of the lengths of the non-lowercase names\n    length_sum = 0\n    # Loop through the lower_names list again and add the length of each name to the length_sum\n    for name in lower_names:\n        length_sum += len(name)\n    # Return the length_sum\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def is_lowercase(name):\n        '''\n        Helper function to check if a name starts with a lowercase letter.\n        '''\n        return name[0].islower()\n    \n    return sum(len(name) for name in sample_names if not is_lowercase(name))"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Using regular expressions to remove the parenthesis from the string\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # use regular expression to remove parenthesis and inbetween characters\n    regex = re.compile(r'\\([^)]*\\)')\n    return regex.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern for finding the parenthesis and what is between them\n    pattern = re.compile(r'\\([^)]*\\)')\n    \n    # Use the search method to search for the pattern in the string\n    result = pattern.sub('', items)\n    \n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern for matching parenthesis\n    pattern = r'\\([^)]*\\)'\n\n    # Use the re.sub() function to remove all matches of the pattern from the string\n    result = re.sub(pattern, '', items)\n\n    # Return the cleaned string\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\(.+\\))'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern for parenthesis\n    pattern = r'\\([^()]*\\)'\n\n    # Use the re.sub() method to replace all occurrences of the pattern with an empty string\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize the first two nonagonal numbers\n    nonagonal = 1\n    nonagonal_prev = 2\n    \n    # Iterate from 2 to n-1\n    for i in range(2, n):\n        # Calculate the nth nonagonal number\n        nonagonal = (nonagonal_prev ** 2) + i\n        \n        # Update the values for the next iteration\n        nonagonal_prev = nonagonal\n        \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    nonagonal_numbers = [1]\n    for i in range(2, n+1):\n        nonagonal_numbers.append(nonagonal_numbers[-1] * 2 - 1)\n    return nonagonal_numbers[-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer n as input and returns True if it is a non-agonal number, otherwise False.\n    A non-agonal number is a number that is not a multiple of 6 or 8.\n    '''\n    if n % 6 == 0 or n % 8 == 0:\n        return False\n    return True\n\ndef nth_nonagonal(n): \n    '''\n    This function takes an integer n as input and returns the nth non-agonal number.\n    '''\n    count = 0\n    current_number = 1\n    while count < n:\n        if is_nonagonal(current_number):\n            count += 1\n        current_number += 1\n    return current_number - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = 0\n    first_row = 1\n    second_row = 2\n    for i in range(n):\n        nonagonal_number += (first_row + second_row)\n        first_row += 1\n        second_row += 1\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return 4 * n * (n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # If n is even, return 0\n    if n % 2 == 0:\n        return 0\n    # If n is odd, return n(n-1)/2\n    else:\n        return n * (n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*n - 1) * (2*n + 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(n-1):\n        a = b**2\n        b += 1\n    return a\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"th nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(?<![\\w\\s])(z)([^\\w\\s])(?!\\w)\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[a-z][^a-z]*z[^a-z]*[a-z]'\n    regex = re.compile(pattern)\n    matches = regex.findall(text)\n    return bool(matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-word characters from the text\n    text = re.sub('[^a-zA-Z\\s]', '', text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Check if the first and last words contain 'z'\n    if 'z' in words[0] and 'z' in words[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-alphanumeric characters except the ones at the start and end of the word\n    text = re.sub(r'[^a-zA-Z0-9_]', '', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Check if the middle word contains 'z'\n    for word in words:\n        if 'z' in word.lower():\n            return True\n\n    # If no 'z' was found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Find all the words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Loop through each word and check if it contains 'z' except at the start and end of the word\n    for word in words:\n        if word.endswith('z') and word.startswith('z') and word[1:-1]!= 'z':\n            return True\n\n    # If we've gone through all the words without finding any z's, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<=\\w)(?=z)(?=\\W)\"\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Loop through each word\n    for word in words:\n        # Check if the word starts with 'z' and ends with 'z'\n        if word[0] == 'z' and word[-1] == 'z':\n            # If it does, return True\n            return True\n    \n    # If none of the words start with 'z' and end with 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = text.split()\n    # Iterate over the words\n    for i in range(len(words)):\n        # Check if the middle characters are 'z'\n        if words[i][0] == 'z' and words[i][-1] == 'z':\n            # Check if the middle characters are not at the start or end of the word\n            if i!= 0 and i!= len(words)-1:\n                # If they are not, return True\n                return True\n    # If we make it here, we haven't found a pair of 'z's\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # check if k is valid\n    if k < 0 or k >= len(input):\n        return \"Invalid position\"\n\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input): \n        return input \n    else: \n        # reverse first k elements of the array \n        input[:k] = input[:k][::-1] \n        # reverse the rest of the array \n        input[k:] = input[k:][::-1] \n        # return the reversed array \n        return input "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        print(\"Invalid input\")\n        return None\n    else:\n        input.reverse()\n        return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    else:\n        return reverse_Array_Upto_K(input[::-1], k+1) + [input[-k-1]] + reverse_Array_Upto_K(input[:-1], k)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    for i in range(k, n):\n        input[i], input[i-k] = input[i-k], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes two parameters:\n    1. The input array: list\n    2. The position: int\n    \n    It reverses the elements of the input array upto the given position.\n    '''\n    \n    # Checking if the position is valid\n    if k >= len(input):\n        print(\"Invalid position\")\n        return\n    \n    # Reversing the array from the starting position to the given position\n    input[:k] = input[:k][::-1]\n    \n    # Printing the reversed array\n    print(\"Reversed array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    n = len(input)\n    temp = []\n    \n    # Traverse through the array from the first position to k-1\n    for i in range(k):\n        temp.append(input[i])\n        \n    # Traverse through the array from k to n-1\n    for i in range(k, n):\n        temp.append(input[i])\n        \n    # Reverse the reversed part of the array\n    temp.reverse()\n    \n    # Traverse through the array from 0 to k-1 again to reverse the entire array\n    for i in range(k):\n        input[i] = temp.pop()\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1, -1, -1): \n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(0, k):\n        left = 0\n        right = len(input) - 1\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # checking if the position is valid\n    if k > len(input) or k < 0:\n        print(\"Invalid position entered\")\n        return None\n    else:\n        # creating a new array to store the reversed elements\n        reversed_array = input[:k]\n        # reversing the first k elements of the input array\n        for i in range(k, len(input)):\n            reversed_array.append(input[i])\n        # reversing the array again to store the remaining elements\n        for i in range(len(reversed_array)-1, k-1, -1):\n            input[i] = reversed_array[i]\n        # returning the modified input array\n        return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup = new_tup + tuple(test_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary into a list of key-value pairs\n    new_list = test_dict.items()\n    \n    # Combine the tuple and dictionary into a new list\n    new_list.extend(test_tup)\n    \n    # Convert the list back into a tuple\n    new_tuple = tuple(new_list)\n    \n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        test_tup = (value,) + test_tup\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    \n    # Add the dictionary to the list\n    test_list.append(test_dict)\n    \n    # Convert the list back to a tuple\n    result_tup = tuple(test_list)\n    \n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create a new dictionary with the items from the test_dict\n    new_dict = {**test_dict}\n    # add the new dictionary to the test_tup\n    return (test_tup + (new_dict,),)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup + (test_dict,))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    dict_list = list(test_dict.items())\n\n    # Combine the tuple and dictionary into a new tuple\n    new_tup = tuple(test_tup + dict_list)\n\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tuple = new_tuple + (key, value)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    new_tuple = new_tuple + (test_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the updated values of the existing dictionary\n    updated_dict = test_dict.copy()\n    updated_dict.update(test_tup[1])\n    # Create a new tuple with the updated values of the original tuple\n    new_tup = test_tup[0], updated_dict\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n    max_average = float('-inf')\n    total_cost = 0\n    path = []\n\n    def helper(i, j, current_cost):\n        if i == N - 1 and j == N - 1:\n            nonlocal max_average, total_cost, path\n            average = current_cost / (N - 1)\n            max_average = max(max_average, average)\n            total_cost += current_cost\n            path.append((i, j))\n            return\n\n        if i < N - 1 and not visited[i + 1][j] and cost[i][j] < cost[i + 1][j]:\n            visited[i + 1][j] = True\n            helper(i + 1, j, current_cost + cost[i][j])\n            visited[i + 1][j] = False\n\n        if j < N - 1 and not visited[i][j + 1] and cost[i][j] < cost[i][j + 1]:\n            visited[i][j + 1] = True\n            helper(i, j + 1, current_cost + cost[i][j])\n            visited[i][j + 1] = False\n\n        if i < N - 1 and j < N - 1 and not visited[i + 1][j + 1] and cost[i][j] + min(cost[i + 1][j], cost[i][j + 1]) < cost[i + 1][j + 1]:\n            visited[i + 1][j + 1] = True\n            helper(i + 1, j + 1, current_cost + cost[i][j] + min(cost[i + 1][j], cost[i][j + 1]))\n            visited[i + 1][j + 1] = False\n\n    helper(0, 0, 0)\n    return max_average, total_cost, path\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n\n    N = len(cost)\n    total_cost = 0\n    visited = 0\n    max_average = float('-inf')\n    current_path = [0] * N\n    current_path_cost = 0\n\n    for i in range(N):\n        current_path[i] = 0\n        current_path_cost = cost[0][i]\n\n    for i in range(1, N):\n        current_path_cost += cost[i][current_path[i]]\n        visited += 1\n\n        if current_path_cost == 0:\n            current_path_cost = cost[i][current_path[i]]\n            continue\n\n        current_path[i] = 1 if current_path_cost > 0 else 0\n        current_path_cost = cost[i][current_path[i]]\n\n        if current_path_cost == 0:\n            current_path_cost = cost[i][current_path[i]]\n            continue\n\n        current_path_cost += cost[i][current_path[i] + 1]\n        visited += 1\n\n        if current_path_cost == 0:\n            current_path_cost = cost[i][current_path[i] + 1]\n            continue\n\n        current_path_cost += cost[i][current_path[i] + 2]\n        visited += 1\n\n        if current_path_cost > max_average:\n            max_average = current_path_cost\n\n    return max_average / visited"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + cost[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + cost[i][j])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + cost[i][j])\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    return max_avg / (N*N - 1)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    def maxAverage(i, j, total_cost, visited):\n        # Base case: if we have visited all cells, return total cost divided by visited cells\n        if i == N - 1 and j == N - 1:\n            return total_cost / visited\n        # Base case: if we can't move right, return the maximum average of the downward path\n        if j == N - 1:\n            return max(maxAverage(i, j + 1, total_cost + cost[i][j + 1], visited + 1), \n                       maxAverage(i + 1, j + 1, total_cost, visited))\n        # Base case: if we can't move down, return the maximum average of the rightward path\n        if i == N - 1:\n            return max(maxAverage(i + 1, j, total_cost + cost[i + 1][j], visited + 1), \n                       maxAverage(i + 1, j + 1, total_cost, visited))\n        # Recursive case: if we can move right or down, return the maximum average of the upward path\n        return max(maxAverage(i + 1, j, total_cost + cost[i + 1][j], visited + 1), \n                   maxAverage(i, j + 1, total_cost + cost[i][j + 1], visited + 1), \n                   maxAverage(i + 1, j + 1, total_cost, visited))\n    return maxAverage(0, 0, 0, 0)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize the DP table with zeros\n    dp = [[0]*N for _ in range(N)]\n    # Initialize the starting cell with 0\n    dp[0][0] = cost[0][0]\n    # Fill the DP table using dynamic programming\n    for i in range(1, N):\n        for j in range(1, N):\n            # If we can move right, add the cost of the current cell to the DP table\n            if j < N-1:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            # If we can move down, add the cost of the current cell to the DP table\n            if i < N-1:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + cost[i][j])\n    # Initialize the maximum average to the starting cell\n    max_avg = dp[N-1][N-1]\n    # Find the maximum average over all paths\n    for i in range(N):\n        for j in range(N):\n            # If the current cell is the bottom right cell, compute its average\n            if i == N-1 and j == N-1:\n                path_avg = dp[i][j] / (N*N)\n            # If the current cell is part of a path, check if it's the maximum average\n            elif i > 0 and j > 0 and dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the dimensions of the matrix\n    N = len(cost)\n    M = len(cost[0])\n\n    # Initialize variables for the maximum average and the current path\n    max_avg = 0\n    current_path = [[0, 0]]\n\n    # Loop through each cell in the matrix\n    for i in range(N):\n        for j in range(M):\n            # Calculate the sum of the cost of the visited cells in the current path\n            current_cost = sum([cost[k][j] for k in range(i)]) + sum([cost[i][l] for l in range(j)])\n\n            # Check if the current path is longer than the current maximum average\n            if len(current_path) > 1 and current_cost > max_avg:\n                # If it is, check if the new path is shorter\n                if len(current_path) + 1 < len(current_path):\n                    # If it is, update the maximum average and the current path\n                    max_avg = current_cost\n                    current_path = [[i, j]]\n                else:\n                    # If it is not, update the maximum average and the current path\n                    max_avg = current_cost\n                    current_path.append([i, j])\n            else:\n                # If the current path is not longer than the maximum average, update the maximum average and the current path\n                max_avg = current_cost\n                current_path = [[i, j]]\n\n    # Calculate the average of the path\n    total_cost = sum([cost[k][j] for k in range(current_path[-1][0]+1, N)]) + sum([cost[i][l] for l in range(current_path[-1][1]+1, M)])\n    avg_cost = total_cost / len(current_path)\n\n    return avg_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    # Step 1: Sort the cost matrix in non-decreasing order\n    sorted_cost = sorted(cost, key=lambda x: sum(x))\n\n    # Step 2: Initialize variables\n    max_avg = 0\n    current_avg = 0\n    current_path = []\n\n    # Step 3-5: Traverse the sorted cost matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Step 3: Add the cell (i,j) to the current path if not in it\n            if (i,j) not in current_path:\n                current_path.append((i,j))\n\n            # Step 4-6: Compute the current average and update the max_avg if necessary\n            current_avg = current_avg + cost[i][j]\n            current_avg = current_avg / (i+j+1)\n            if current_avg > max_avg:\n                max_avg = current_avg\n                current_path = [(i,j)]\n\n            # Step 7: Remove the last cell from the current path\n            current_path.pop()\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for i in range(N)]\n    max_avg = float('-inf')\n    \n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n    \n    for k in range(1, N):\n        for i in range(1, N):\n            for j in range(1, N):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                continue\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    \n    return max_avg/((N-1)*(N-1))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for i in range(N)]\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[0][0]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + cost[i][j]\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Initialize variables\n    max_path_sum = 0\n    max_average = 0\n    max_path = []\n\n    # Calculate the total sum of all the paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == len(cost)-1 and j == len(cost[0])-1:\n                max_path_sum = cost[i][j]\n            else:\n                if i == len(cost)-1:\n                    max_path_sum += cost[i][j]\n                elif j == len(cost[0])-1:\n                    max_path_sum += cost[i][j]\n                else:\n                    max_path_sum += cost[i][j] + min(cost[i+1][j], cost[i][j+1])\n    \n    # Calculate the maximum average\n    max_average = max_path_sum / (len(cost)*len(cost[0]))\n    \n    # Find the path with the maximum average\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == len(cost)-1 and j == len(cost[0])-1:\n                continue\n            if i == len(cost)-1:\n                if j == len(cost[0])-1:\n                    max_path = [cost[i][j]]\n                else:\n                    max_path = [cost[i][j]] + max_path\n            elif j == len(cost[0])-1:\n                if i == len(cost)-1:\n                    max_path = [cost[i][j]]\n                else:\n                    max_path = [cost[i][j]] + max_path\n            else:\n                if i == len(cost)-1:\n                    max_path = [cost[i][j]] + max_path\n                elif j == len(cost[0])-1:\n                    max_path = [cost[i][j]] + max_path\n                else:\n                    max_path = [cost[i][j]] + max_path\n    \n    return max_average, max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,info in students.items():\n        height,weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Filter out the students with height and weight less than the minimum\n    filtered_students = {name: student for name, student in students.items() if student[0] > h and student[1] > w}\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter students with height and weight above the given minimal values\n    filtered_students = {name: height_and_weight for name,height_and_weight in students.items() if height_and_weight[0] > h and height_and_weight[1] > w}\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a dictionary to store the counts of the values in both lists\n    count_dict = {}\n    for i in range(len(nums1)):\n        # Check if the value in nums1 is already in the dictionary\n        if nums1[i] in count_dict:\n            # If it is, increment the count for that value\n            count_dict[nums1[i]] += 1\n        else:\n            # If it's not, add the value to the dictionary with a count of 1\n            count_dict[nums1[i]] = 1\n            \n    # Loop through nums2 and check if the value is in the dictionary with a count of 1\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict and count_dict[nums2[i]] == 1:\n            # If it is, increment the count for that value and store the index in a list\n            count_dict[nums2[i]] += 1\n            indices.append(i)\n            \n    # Return the list of indices where the values in the lists are the same\n    return indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]) for j in range(i+1, len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            counter += 1\n    return counter"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a dictionary to store the frequency of each element in both lists\n    freq_dict = {}\n    for num in nums1 + nums2:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Initialize two lists to store the indices where the lists have the same values\n    indices = []\n    for index, value in enumerate(nums1 + nums2):\n        if value in freq_dict and freq_dict[value] == 1:\n            indices.append(index)\n            freq_dict[value] -= 1\n    \n    # Return the count of indices where the lists have the same values\n    return len(indices)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize variables for sum and result\n    result = 0\n    digit_sum = 0\n    \n    # Convert base to a string\n    base_str = str(base)\n    \n    # Loop through the string from right to left\n    for i in range(len(base_str)-1, -1, -1):\n        # Convert the current digit to an integer and add it to the sum\n        digit_sum += int(base_str[i])\n        \n        # Check if the digit sum is equal to the power\n        if digit_sum == power:\n            # Calculate the sum of the digits to the power of the power\n            result += digit_sum ** power\n            \n            # Reset the sum of digits to zero\n            digit_sum = 0\n            \n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    for i in range(power):\n        sum += int(base_str[i])\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit ** power\n        base //= 10\n        power -= 1\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the sum of digits of base\n    digits_sum = 0\n    while base > 0:\n        digits_sum += base % 10\n        base //= 10\n    # Calculate the sum of digits to the power of power\n    power_sum = 0\n    for _ in range(power):\n        power_sum += digits_sum\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    base_digits = [int(digit) for digit in str(base)]\n    for i in range(power):\n        digit_sum = sum(base_digits)\n        result += digit_sum\n        base_digits = [digit_sum // 10, digit_sum % 10]\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n\n    sum_of_digits = 0\n\n    # Loop through each digit of the base\n    for digit in str(base):\n        # Convert each digit to an integer and add it to the sum_of_digits\n        sum_of_digits += int(digit) ** power\n\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    digit_sum = 0\n    for digit in base_str:\n        digit_sum += int(digit)\n    return digit_sum ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        total += base % 10\n        power //= 10\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through each digit of the base and add to sum\n    for digit in str(base):\n        sum += int(digit) ** power\n    # return the sum\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as an argument and extracts values between quotation marks \" \" of the string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\\b\"|\\B)\"(.*?)(?=\\b\"|\\B)'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    pattern = r'\"([^\"]*)\"' # regular expression to match quotation marks and their contents\n    result = re.findall(pattern, text1) # find all the matches of the pattern in the text1 string\n\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1 # get the length of the tuple minus one (since we want to multiply each element with its previous element)\n    result = [] # initialize the result list\n    for i in range(N): # loop through all the elements in the tuple except for the last one\n        result.append(test_tup[i] * test_tup[i+1]) # multiply the i-th and (i+1)-th elements and append the result to the result list\n    result.append(test_tup[-1] * test_tup[0]) # multiply the last element with the first element of the tuple and append the result to the result list\n    return tuple(result) # return the result tuple"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(N))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = [0] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3])\n    for i in range(N):\n        result_tup = (test_tup[0] * result_tup[0], test_tup[1] * result_tup[1], test_tup[2] * result_tup[2])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1 # Since we start from index 1 to N\n    result_tup = () # Initialize an empty tuple to hold the result\n    \n    # Loop over the elements of the input tuple\n    for i in range(1,N+1):\n        # Add the product of the i-th and (i+1)-th elements to the result tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the elements of the first list\n    for i in range(len(lst1)):\n        # Add the corresponding elements from the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists [a_1,...,a_n] and [b_1,...,b_n] as input and returns the sum of the two lists.\n    '''\n    # creating a new list to store the sum\n    result = []\n    # iterating over the two lists\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # returning the sum list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for group in groupby(nums):\n        if not group[0] == next(group, None):\n            result.append(group[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(sorted(nums)):\n        if key == nums[-1]:\n            result.extend(list(group))\n        else:\n            result.append(key)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(sorted(nums)):\n        if key == nums[len(group)-1]:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    groups = sorted(set(nums))\n    return [list(g) for k, g in groupby(groups) if k == nums[0]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    # Use itertools.groupby to group the list by adjacent elements.\n    grouped = groupby(enumerate(nums), lambda x: x[0] - x[1])\n    \n    # Filter out the grouped elements that are not consecutive duplicates.\n    non_consecutive_duplicates = (k for k, g in grouped if len(list(g)) > 1)\n    \n    # Convert the filtered elements back to a list.\n    return list(non_consecutive_duplicates)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(enumerate(nums), lambda x: x[1] == x[0])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n\n    # group the list by its values\n    grouped = groupby(nums)\n\n    # iterate over the grouped items\n    for item, group in grouped:\n\n        # if there are more than one items in the group, remove them\n        if len(list(group)) > 1:\n            nums.remove(item)\n\n    # return the updated list\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(x[1] for x in groupby(sorted(set(nums))))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = (math.pi/4) * r * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # calculate the base area of the cone\n    base_area = (math.pi*(r**2))\n\n    # calculate the height of the cone\n    cone_height = h\n\n    # calculate the lateral surface area of the cone\n    lateral_surface_area = (base_area * (cone_height/2))\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula: Lateral Surface Area = 2*(r+h)*sin(theta)\n    lateral_surface_area = 2*(r+h)*math.sin(math.pi/3)\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to calculate the lateral surface area of a cone\n    surface_area = math.pi * r**2 * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi * r**2 * h) / 3\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using formula 1\n    lateral_surface = math.pi * r**2 * h\n    \n    # Return the lateral surface area\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone\n    lateral_area = math.pi * (r**2) + math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius r and height h.\n    The formula for the lateral surface area of a cone is given by:\n    LSA = pi/2 * r^2 * h\n    '''\n    LSA = math.pi/2 * r**2 * h\n    return LSA"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match any of the three special characters\n    pattern = r'[\\s,\\.]'\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]', '', text).replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r\"[\\s,.]\"\n    text = re.sub(pattern, \":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern for replacing special characters\n    pattern = r'[\\s,.]+'\n    \n    # replace special characters with colon\n    result = re.sub(pattern, ':', text)\n    \n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r'\\s+|,+|\\.\\s+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for matching special characters\n    pattern = re.compile(r'\\s|,|\\.')\n    \n    # Replace all occurrences of special characters with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[^a-zA-Z0-9]', '', text)  # remove non-alphanumeric characters\n    text = re.sub(r'\\s+', ':', text)  # replace multiple spaces with a single colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[,.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', text).replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,\\. ]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize a variable to keep track of the index of the first occurrence of x\n    first_occurrence = -1\n    \n    # Iterate through the array A starting from the first index\n    for i in range(len(A)):\n        # If we find x at index i, update the first_occurrence variable to i and break out of the loop\n        if A[i] == x:\n            first_occurrence = i\n            break\n    \n    # Return the first_occurrence variable if it's not -1, indicating that x was found in A\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes in two arguments: the sorted array A and the number x.\n    It returns the index of the first occurrence of x in A if it exists, else it returns -1.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if i < len(A) and A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # Check if the number to be found is the first occurrence of x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Initialize a variable to store the index of the first occurrence of x\n    first_occurrence_index = -1\n\n    # Loop through the array and keep track of the index of the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence_index = i\n            break\n\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    if i == n or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            low = mid + 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    if A[low]!= x:\n        return -1\n    else:\n        return low"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the first occurrence index\n    first_occurrence_index = -1\n\n    # Iterate through the array\n    for i in range(len(A)):\n        # If the current element is equal to the given number\n        if A[i] == x:\n            # Set the first occurrence index to the current index\n            first_occurrence_index = i\n            # Break out of the loop\n            break\n\n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    result = 0\n    \n    # calculate the product of first element and all elements after first element\n    first_prod = 1\n    for i in range(1, n):\n        first_prod *= arr[i]\n    \n    result += first_prod\n    \n    # calculate the sum of products of sublists of length 1\n    for i in range(n):\n        result += arr[i] * arr[i]\n    \n    # calculate the sum of products of sublists of length 2\n    for i in range(n - 1):\n        result += arr[i] * arr[i + 1] * arr[i + 2]\n    \n    # calculate the sum of products of sublists of length 3\n    for i in range(n - 2):\n        result += arr[i] * arr[i + 1] * arr[i + 2] * arr[i + 3]\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + arr[i - 1] * dp[i - 2]\n    return dp[-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    prefix_prod = [0] * (n + 1)\n    suffix_prod = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n        suffix_prod[i] = suffix_prod[i - 1] * arr[n - i]\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            prod *= (suffix_prod[j] - prefix_prod[j])\n\n    return prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0]*(n+1) for i in range(n+1)]\n    \n    for i in range(1,n+1):\n        for j in range(i):\n            dp[i][j] = dp[i-1][j]*arr[j] + dp[i-1][j+1]*arr[j+1]\n    \n    # Initialize the result array\n    result = [0]*n\n    \n    # Calculate the sum of products of all sublists\n    for i in range(n):\n        result[i] = dp[n][i]\n    \n    # Calculate the sum of products of all sublists\n    for i in range(n-1):\n        result[i] += dp[n][i+1]\n    \n    # Return the sum of products of all sublists\n    return sum(result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Initialize variables to store the sum of products and the list of subarrays\n    subarray_sum = 0\n    subarray_prod = 1\n    subarray = []\n    \n    # Traverse the given list\n    for i in range(len(arr)):\n        \n        # If the current element is greater than the previous element, then add the product of subarray and the current element to the subarray_sum and subarray_prod respectively.\n        if arr[i] > arr[i-1]:\n            subarray_sum += subarray_prod * arr[i]\n            subarray_prod *= arr[i]\n            subarray.append(arr[i])\n        \n        # If the current element is less than or equal to the previous element, then reset the subarray_prod to 1 and add the current element to the subarray.\n        else:\n            subarray_prod = 1\n            subarray.append(arr[i])\n    \n    # Return the sum of products of all possible subarrays\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 1000000007\n\n    # Finding cumulative sum of array\n    cum_sum = [0] * (n + 1)\n    for i in range(n):\n        cum_sum[i+1] = (cum_sum[i] + arr[i]) % mod\n\n    # Finding maximum subarray ending at i\n    max_ending_at = [0] * n\n    max_ending_at[0] = arr[0]\n    for i in range(1, n):\n        max_ending_at[i] = max(max_ending_at[i-1], cum_sum[i] - cum_sum[i-1])\n\n    # Finding sum of products of all possible sublists\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            if max_ending_at[i-1] - max_ending_at[j] >= 0:\n                dp[i][j] = (dp[i][j] + dp[i-1][j] * dp[i-1][j-max_ending_at[i-1]-1]) % mod\n\n    # Returning the sum of products of all possible sublists\n    return dp[n][0]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n\n    # Initialize variables\n    prod = [1] * n\n    prefix_prod = [1] * n\n\n    # Calculate product of first element\n    prod[0] = arr[0]\n    prefix_prod[0] = arr[0]\n\n    # Calculate product of sublists from 1 to n-1\n    for i in range(1, n):\n        prod[i] = prod[i-1] * arr[i]\n        prefix_prod[i] = prod[i]\n\n    # Find sum of products of sublists of all possible lengths from 1 to n\n    result = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            result += prod[j] * prefix_prod[i-j]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # create a 2D table to store sum of products of subarrays\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    # initialize the first row and first column of the table with the values of the list itself\n    for i in range(1, n+1):\n        dp[i][0] = arr[i-1]\n    for j in range(1, n+1):\n        dp[0][j] = 0\n    # fill the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + arr[i-1]*arr[j-1]\n    # find the sum of products of all subarrays\n    subarray_prod = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            subarray_prod += dp[i][j]\n    return subarray_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    sub_sums = [0] * len(arr)\n    sub_prods = [1] * len(arr)\n\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sub_sums[j] += arr[j]\n            sub_prods[j] *= arr[j]\n\n    total_sum = sum(sub_sums)\n    total_prod = 1\n\n    for i in range(len(arr)):\n        total_prod *= sub_prods[i]\n\n    return total_sum * total_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    prefix_prod = [0] * (n + 1)\n    prefix_prod[0] = 1\n    for i in range(1, n + 1):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += prefix_prod[j + 1] * prefix_prod[n - j]\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # initialize a variable for the toggled bits\n    toggled_bits = 0\n    \n    # iterate through each bit of the number\n    for i in range(31):\n        # check if the bit is not the first or last bit\n        if i not in [0, 30]:\n            # toggle the bit\n            toggled_bits ^= (1 << i)\n    \n    # return the toggled bits\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # First bit to toggle is the least significant bit (LSB)\n    first_bit = n & 1\n    # First bit is already set, no need to toggle it\n    if first_bit == 1:\n        return n\n    # Find the index of the first set bit\n    index = 0\n    while n & (1 << index) == 0:\n        index += 1\n    # Toggle bits from LSB to MSB excluding first and last bits\n    for i in range(index + 1, n.bit_length() - 1):\n        if n & (1 << i):\n            n ^= (1 << i)\n    # Toggle bits from MSB to LSB excluding first and last bits\n    for i in range(n.bit_length() - 2, index - 1, -1):\n        if n & (1 << i):\n            n ^= (1 << i)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # To toggle the middle bits of the number except the first and the last bit\n    n = n ^ ((n & 0x55555555) ^ ((n & 0xAAAAAAAA) << 1))\n    # To shift the middle bit to the left\n    n = n ^ ((n & 0xAAAAAAAA) >> 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Initialize the first and last bits to 0\n    first_bit = 0\n    last_bit = 0\n\n    # Extract the first and last bits from the number\n    first_bit = n & 1\n    last_bit = n >> 1\n\n    # Toggle all the other bits\n    n = n ^ (first_bit << 1) ^ (last_bit << 31)\n\n    # Set the first and last bits to the original value\n    n = n | (first_bit << 1) | (last_bit << 31)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # set first and last bit to 1\n    n = n | (1 << 31) | (1 << 30)\n    # set first and last bit to 0\n    n = n & ~(1 << 1) & ~(1 << 0)\n    # toggle bits except the first and the last bit\n    n = n ^ ((n & 0x55555555) << 1) & ~(0xAAAAAAAA) & ~(0x33333333)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bits to 1\n    first_bit = 1 << 0\n    last_bit = 1 << (n-1)\n    # Combine the first and last bits to create the toggle bits\n    toggle_bits = first_bit | last_bit\n    # XOR the given number with the toggle bits to get the updated number\n    updated_number = n ^ toggle_bits\n    # Return the updated number\n    return updated_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Bitwise XOR with 1 to toggle the bits\n    # except the first and the last bit\n    n ^= 1 << 6 | 1 << 7\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # initialize variables\n    first_bit = n & 1  # get the first bit\n    last_bit = n & (2**32-1)  # get the last bit\n    toggled_bit = first_bit ^ last_bit  # toggle the middle bit\n    \n    # set the middle bit\n    n = n ^ toggled_bit\n    \n    # return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # extract the first and last bits of n\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # calculate the middle bits\n    middle_bits = n & ~(1 << 31)\n    \n    # calculate the inverted middle bits\n    inverted_middle_bits = ~middle_bits\n    \n    # calculate the new number by toggling the middle bits\n    new_n = first_bit ^ inverted_middle_bits\n    \n    # return the new number\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # Split the integer into two parts: the first and the last bits\n    first_bits = (n & 0x55555555)\n    last_bits = (n & 0xAAAAAAAA)\n    \n    # Toggle the first and last bits\n    toggled_bits = (first_bits ^ last_bits)\n    \n    # Combine the first and the toggled bits and the last bits\n    result = (first_bits | toggled_bits) & 0xFFFFFFFF\n    \n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = bisect.bisect_left(a, x)\n    if left!= len(a) and a[left] == x:\n        return left\n    else:\n        return left + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # find the index of the leftmost element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # if x is equal to the leftmost element, return index\n    if a[index] == x:\n        return index\n    # otherwise, return index - 1 (since bisect_left returns the index of the first element greater than or equal to x)\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Given a sorted list `a` and a value `x`, this function returns the index `i` such that `a[i-1] < x <= a[i]` or `i == len(a)` if `x` is not in the list.\n\n    The function uses binary search to find the left insertion point of `x` in `a`.\n\n    The time complexity of this algorithm is O(log n), where n is the length of the sorted list.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index!= 0 and a[index - 1]!= x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re "
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Find the smallest number that can be represented with n digits \n    a = 10**(n-1) \n    # Initialize the smallest triangular number and its index \n    min_num = math.floor(math.sqrt(a)) * a\n    min_index = 0\n    # Initialize the loop counter and the loop variable \n    i = 1\n    j = a // i\n    while j <= min_num: \n        # Check if the triangular number is greater than min_num \n        if i*j > min_num: \n            break\n        # If the triangular number is greater than or equal to min_num, check if it is smaller than min_num \n        elif i*j >= min_num: \n            min_num = i*j\n            min_index = i*j // a \n        # Increment the loop variable and check if it is within the triangular number range \n        i += 1\n        j = a // i\n    return min_index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the index of smallest triangular number with n digits\n    count = 0\n    while True:\n        triangular_num = count * (count + 1)\n        if triangular_num.is_integer():\n            if triangular_num.bit_length() == n:\n                return count\n            count += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits. \n    '''\n\n    # Calculate the number of digits in the triangular number with n digits\n    triangular_digits = int(math.log10(n * (n + 1)) + 1)\n\n    # Calculate the smallest triangular number with n digits\n    smallest_triangular_number = 10 ** (triangular_digits - 1)\n\n    # Calculate the index of the smallest triangular number with n digits\n    index = int(math.log10(smallest_triangular_number * (smallest_triangular_number + 1)) + 1)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    # Calculate the sum of first n natural numbers\n    n_sum = 0\n    for i in range(1, n+1):\n        n_sum += i\n    \n    # Calculate the largest triangular number with n digits\n    largest_triangular = int(math.pow(10, n) * (math.pow(10, n-1) + 1))\n    \n    # Calculate the difference between the sum of first n natural numbers and the largest triangular number\n    diff = largest_triangular - n_sum\n    \n    # Find the index of the smallest triangular number that is larger than or equal to the sum of first n natural numbers\n    for i in range(1, diff+1):\n        if n_sum + i <= largest_triangular:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Initialize the list to store the first n digits of the triangular numbers\n    first_n_digits = [0] * n\n\n    # Calculate the first n digits of the triangular numbers\n    for i in range(1, n+1):\n        first_n_digits[i-1] = math.factorial(i) // (math.factorial(n-i) * math.factorial(i-1))\n\n    # Initialize the minimum index variable\n    min_index = 0\n\n    # Find the index of the smallest triangular number\n    for i in range(n-1):\n        min_index = min(min_index, first_n_digits[i] + i + 1)\n\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return math.floor((n*n+n+1)/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    \n    # Initialize the index to 1 and the length of the number to 1\n    index = 1\n    num = 1\n    \n    # Loop until we reach the number with n digits\n    while len(str(num)) < n:\n        # Increment the index and multiply by 2\n        index += 1\n        num *= 2\n        \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the smallest triangular number with n digits\n    triangular_number = int(\"\".join(str(i) for i in range(1, n+1)))\n    # find the index of the smallest triangular number with n digits\n    index = math.ceil(math.log(triangular_number, 10)) + 1\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize a list to store the triangular numbers\n    triangular_numbers = []\n    \n    # loop through all possible triangular numbers with n digits\n    for i in range(10**(n-1), 10**(n)):\n        triangular_numbers.append(i)\n    \n    # find the index of the smallest triangular number\n    min_index = 0\n    max_index = len(triangular_numbers) - 1\n    while min_index < max_index:\n        mid_index = (min_index + max_index) // 2\n        if triangular_numbers[mid_index] < math.sqrt(10**(n-1)) * 10**n:\n            min_index = mid_index + 1\n        else:\n            max_index = mid_index\n    \n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables\n    min_triangular_number = 10**(n-1)\n    index = 0\n\n    # Loop till min_triangular_number is reached\n    while True:\n        triangular_number = min_triangular_number + index\n        if triangular_number <= 10**n:\n            index += 1\n        else:\n            break\n\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # loop through the tuple elements\n    for i in range(len(test_tup)):\n        # if the current element is not the last element, add it to the dictionary\n        if i < len(test_tup)-1:\n            key = test_tup[i]\n            value = test_tup[i+1]\n            my_dict[key] = value\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n    \n    # loop through the tuple and add the adjacent elements as key-value pairs\n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    \n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # Use a dictionary comprehension to create a dictionary from the tuple elements\n    return {i:test_tup[i+1] for i in range(len(test_tup)-1)}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 1:\n        test_tup = (test_tup[0],) + test_tup\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    result = {}\n    # Use two nested loops to iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Get the key and value of the current tuple element\n        key = test_tup[i]\n        value = test_tup[i+1]\n        # Add the key-value pair to the dictionary\n        result[key] = value\n    # Return the completed dictionary\n    return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        return all_Characters_Same(s[1:]) == s[0]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list\n    l = list(s)\n    # Check if all the characters are the same\n    for i in range(len(l)-1):\n        if l[i]!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    if s[0]!= s[1]:\n        return False\n    return all_Characters_Same(s[2:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string s as input and returns True if all the characters in the string are the same, and False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[2:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are same and False otherwise.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # check if the length of the string is 0\n    if len(s) == 0:\n        return True\n\n    # initialize the first character and check if it is the same as the rest of the string\n    first_char = s[0]\n    rest_of_string = s[1:]\n    for char in rest_of_string:\n        if char!= first_char:\n            return False\n\n    # if we reach here, all the characters are same\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula to calculate the area of a tetrahedron\n    return (1/6) * side * (side + math.sqrt(3)*side)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/2 * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * (side + 1) * (side + 2)) ** 0.5\n    return 6 * s * s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2\n    \n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side ** 2) + (side ** 2) + (side ** 2) + (side ** 2)\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - side ** 2) * (s - (side ** 2) ** 2) * (s - (side ** 2) ** 3))\n\n    # Return the area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = side / 2\n    return math.sqrt(3) * half_perimeter ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    sp = (side ** 2) / 3\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = (1 / 6) * math.sqrt(sp)\n\n    # Return the calculated area\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2\n    "
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and a number m as input, where m is the number of items to be rotated to the right direction.\n    It rotates the list to the right by m number of items, and returns the rotated list.\n    \"\"\"\n    n = len(list)\n    # If m is greater than n, then we do nothing and return the original list.\n    if m > n:\n        return list\n    # If m is equal to 0, then we return the original list as it is.\n    elif m == 0:\n        return list\n    else:\n        # We calculate the number of items to be rotated.\n        m = m % n\n        # We create a new list to store the rotated items.\n        rotated_list = []\n        # We traverse the original list from the beginning until we reach the item at index n-m.\n        for i in range(n-m):\n            rotated_list.append(list[i])\n        # We traverse the original list from index n-m to the end, and append each item to the rotated list.\n        for i in range(n-m, n):\n            rotated_list.append(list[i])\n        # Finally, we return the rotated list.\n        return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n  # To make m a positive number\n\n    # Step 1: Reverse the first m elements of the list\n    list = list[:m][::-1] + list[m:]\n\n    # Step 2: Reverse the whole list\n    list = list[::-1]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # length of the list\n    n = len(list)\n    \n    # rotating list m items to the right\n    for i in range(m):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp\n    \n    # printing the rotated list\n    print(\"Rotated list by\", m, \"items to the right is: \")\n    for i in range(n):\n        print(list[i], end=\" \")"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    m %= n\n    lst.extend(lst[:m])\n    lst[:m] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:][::-1], list[0:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and an integer m as input, and rotates the list by m items to the right direction.\n    \"\"\"\n\n    # Initialize variables for the new list\n    new_list = []\n\n    # Check if the length of the list is greater than 0\n    if len(list) > 0:\n\n        # Calculate the new index for the last item of the list\n        last_index = len(list) - 1\n\n        # Loop through the original list\n        for i in range(len(list)):\n\n            # Check if the current index is less than m\n            if i < m:\n\n                # Append the item at the current index to the new list\n                new_list.append(list[i])\n\n            # Check if the current index is greater than or equal to m\n            elif i >= m:\n\n                # Calculate the new index for the current item\n                new_index = (i - m) % len(list)\n\n                # Append the item at the new index to the new list\n                new_list.append(list[new_index])\n\n        # Return the new list\n        return new_list\n\n    else:\n\n        # If the list is empty, return an empty list\n        return []"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # Base case for n=1\n    if n == 1:\n        return list\n    # Base case for m=0 or m>=n\n    if m == 0 or m >= n:\n        return list\n    # Special case for m>n/2\n    if m > n//2:\n        # Shift all elements to the left by m-n/2 times\n        list = list[n//2:] + list[:n//2]\n    # Special case for m<=n/2\n    else:\n        # Shift all elements to the right by n-m times\n        list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[n - m:] + list[:n - m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    # creating a new list to store the elements of the original list\n    rotated_list = list[n-m:] + list[:n-m]\n    return rotated_list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = (None, None)\n    return test_tup == none_value"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def check_divisible(num):\n        digits = [int(d) for d in str(num)]\n        return all(d in digits for d in digits)\n    return list(filter(check_divisible, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 9!= 0:\n                return False\n        return True\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_all_digits(num):\n        '''\n        Check if a given number is divisible by all digits.\n        '''\n        digits = [int(digit) for digit in str(num)]\n        return all(digit == digits[0] for digit in digits)\n\n    return filter(is_divisible_by_all_digits, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = [int(d) for d in str(startnum)]  # convert startnum to digits list\n    for i in range(startnum, endnum + 1):\n        digits_in_num = [int(d) for d in str(i)]  # convert current number to digits list\n        if all(digit % digit_in_num == 0 for digit, digit_in_num in zip(digits, digits_in_num)):\n            print(i)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    numbers = []\n    for num in range(startnum, endnum+1):\n        num_str = str(num)\n        if all(int(digit) % int(num_str[digit_index]) == 0 for digit_index, digit in enumerate(num_str)):\n            numbers.append(num)\n    return numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digit(n):\n        return all(int(d) in str(n) for d in str(n))\n\n    return list(filter(divisible_by_digit, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(d) == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # filter function that checks if every digit in the number is divisible by 1\n    def is_divisible(num):\n        digits = [int(d) for d in str(num)]\n        return all(d % i == 0 for i in digits)\n    \n    # filter function that checks if the number is within the given range\n    def is_valid(num):\n        return startnum <= num <= endnum\n    \n    # filter function that checks if the number is divisible by every digit\n    def divisible_by_digits(num):\n        digits = [int(d) for d in str(num)]\n        return all(d % i == 0 for i in digits)\n    \n    return list(filter(divisible_by_digits, filter(is_valid, range(startnum, endnum+1))))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = set(str(n) for n in range(10))\n    result = []\n    for num in range(startnum, endnum + 1):\n        digit_set = set(str(num // 10 ** i % 10) for i in range(len(str(num))))\n        if digit_set.issubset(digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n\n    # Calculate area of sector using formulae\n    area = math.pi * r**2 * (1 - math.cos(math.radians(a)))\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = math.pi * (r**2) * ((360-a)/360)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if the angle is less than or equal to 360 degrees\n    if a <= 360:\n        # Calculate the area of the sector using the formula A = pi*r^2 * sin(angle/180*pi)\n        area = math.pi * r**2 * math.sin(a/180*math.pi)\n        # Return the calculated area\n        return area\n    else:\n        # Return None if the angle is larger than 360 degrees\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Convert angle from degrees to radians\n    a = math.radians(a)\n    # Calculate area of sector\n    area = r*a\n    # Check if angle is larger than 360 degrees\n    if a > math.pi:\n        return None\n    else:\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if the angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r**2 * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle cannot be greater than 360 degrees.\")\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = math.pi * r * r # area of a circle\n    area_sector = area * (a/360) # area of the sector\n    \n    return area_sector"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # create a 2D array to store the length of the longest common subsequence for every prefix of X and Y\n    T = [[0]*(len(Y)+1) for i in range(len(X)+1)]\n\n    # fill in the table using dynamic programming approach\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                T[i][j] = T[i-1][j-1] + 1\n            else:\n                T[i][j] = max(T[i-1][j], T[i][j-1])\n\n    # backtrack to find the longest common subsequence\n    i, j = len(X), len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i, j = i-1, j-1\n        elif T[i-1][j] > T[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # return the longest common subsequence as a string\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of subproblems\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill entries of L[m+1][n+1] in bottom up fashion.\n    # Note that L[i][j] contains length of LCS of X[0...i-1] and Y[0...j-1] and Z[0...k-1]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Print the LCS lengths\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                print(L[i][j][k], end=\" \")\n\n    # Return the length of LCS of X[0...m-1], Y[0...n-1] and Z[0...p-1]\n    return L[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    n, m, p = len(X), len(Y), len(Z) \n    L = [[0] * (p + 1) for _ in range(n + 1)] \n    for i in range(n + 1): \n        for j in range(m + 1): \n            for k in range(p + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0 \n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1 \n                elif L[i - 1][j][k] > L[i][j - 1][k]: \n                    L[i][j][k] = L[i - 1][j][k] \n                elif L[i][j - 1][k] > L[i][j][k - 1]: \n                    L[i][j][k] = L[i][j - 1][k] \n                else: \n                    L[i][j][k] = L[i][j][k - 1] \n\n    lcs = \"\" \n    i, j, k = n, m, p \n    while i > 0 and j > 0 and k > 0: \n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i - 1][j][k] > L[i][j - 1][k]: \n            i -= 1 \n        elif L[i][j - 1][k] > L[i][j][k - 1]: \n            j -= 1 \n        else: \n            k -= 1 \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n    # create a table to store lengths of LCS for all possible suffixes of X, Y and Z\n    L = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # Fill L[i][j] with length of LCS of X[0..i-1], Y[0..j-1], Z[0..p-1]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][k] = L[i-1][j][k]\n                elif X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i][j-1][k]\n                elif Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i][j][k-1]\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # print the length of LCS for X, Y and Z\n    print(\"Length of LCS for X:\", L[m][n][p])\n    print(\"Length of LCS for Y:\", L[m][n][p])\n    print(\"Length of LCS for Z:\", L[m][n][p])\n\n    # backtrack to find the LCS of X, Y and Z\n    i, j, k = m, n, p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            k -= 1\n        elif Y[j-1] == Z[k-1]:\n            j -= 1\n        else:\n            if L[i-1][j-1][k-1] == L[i-1][j][k]:\n                i -= 1\n            elif L[i-1][j-1][k-1] == L[i][j-1][k]:\n                j -= 1\n            else:\n                k -= 1\n\n    # print the LCS for X, Y and Z\n    print(\"LCS for X:\", lcs)\n    print(\"LCS for Y:\", lcs)\n    print(\"LCS for Z:\", lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n\n    # create a table to store length of subsequences for all prefixes of X, Y, Z\n    L = [[0] * (n+1) for i in range(m+1)]\n\n    # fill in the table in bottom-up manner\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0  # base cases \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1  # include current element\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])  # exclude current element\n\n    # backtrack to find the optimal subsequence\n    i = m \n    j = n \n    k = p \n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j][k-1] == L[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    lcs.reverse()\n\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a 3D table to store the lengths of LCS for all possible suffixes of X, Y and Z\n    table = [[[0 for j in range(len(Y)+1)] for i in range(len(X)+1)] for k in range(len(Z)+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # Find the LCS from the table\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i][j-1][k]:\n            i -= 1\n        elif table[i][j-1][k] == table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    def helper(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        p = [[0] * (n+1) for i in range(m+1)]\n\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if X[i-1] == Y[j-1]:\n                    p[i][j] = p[i-1][j-1] + 1\n                else:\n                    p[i][j] = max(p[i-1][j], p[i][j-1])\n\n        return p\n\n    p = helper(X, Y, Z)\n    i = j = m = n = 0\n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(lcs[::-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n    L = [[0] * (p+1) for i in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Create a 3D table to store the lengths of the longest common subsequence of substrings of X, Y, and Z\n\n    # Initialize the table with zeros\n    table = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the table using dynamic programming\n\n    # Traverse through the rows of the table\n    for i in range(1, len(X)+1):\n\n        # Traverse through the columns of the table\n        for j in range(1, len(Y)+1):\n\n            # If the characters at the current positions in X, Y, and Z are same, then we take the value of the cell at i-1 and j-1\n            if X[i-1] == Y[j-1] and X[i-1] == Z[i-1]:\n                table[i][j] = table[i-1][j-1] + 1\n\n            # If the characters at the current positions in X, Y, and Z are not same, then we take the maximum of the values of the cell at i-1 and j, and the cell at i and j-1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Step 2: Backtrack from the table to find the actual longest common subsequence\n\n    # Initialize the variables to store the start and end indices of the longest common subsequence\n    start = 0\n    end = 0\n\n    # Initialize a variable to store the current cell in the table\n    current_cell = table[len(X)][len(Y)]\n\n    # Backtrack till the cell has a value of 0\n    while current_cell!= 0:\n\n        # If the current cell value is less than the cell value at the previous position, then we need to move in the direction of X\n        if current_cell < table[len(X)-1][len(Y)]:\n            start += 1\n            current_cell = table[len(X)-1][len(Y)]\n\n        # If the current cell value is less than the cell value at the previous position, then we need to move in the direction of Y\n        elif current_cell < table[len(X)][len(Y)-1]:\n            end += 1\n            current_cell = table[len(X)][len(Y)-1]\n\n        # If the current cell value is greater than the cell value at the previous position, then we need to move in the direction of XY\n        else:\n            start += 1\n            end += 1\n            current_cell = table[len(X)-1][len(Y)-1]\n\n    # Return the substring of X that corresponds to the longest common subsequence\n    return X[start:end+1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    # Create a table to store the length of LCS of all prefixes of X,Y,Z\n    T = [[0] * (len(Y)+1) for i in range(len(X)+1)]\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                T[i][j] = T[i-1][j-1] + 1\n            else:\n                T[i][j] = max(T[i-1][j], T[i][j-1])\n    # Find the LCS of X,Y,Z using the table\n    i = len(X)\n    j = len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif T[i-1][j] > T[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # convert string to lowercase\n    string = string.lower()\n    \n    # use regular expressions to find all the capitalized words\n    matches = re.findall(r'\\b[A-Z]\\w+\\b', string)\n    \n    # loop through matches and replace them with a space and a lowercase version of the match\n    for match in matches:\n        string = string.replace(match,'' + match.lower() +'')\n    \n    # remove any leading or trailing spaces from the string\n    string = string.strip()\n    \n    return string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b[A-Z]\\w+\\b', string.lower())\n    \n    # join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match words that start with capital letters\n    pattern = r'(?<=[A-Z])[A-Z](?:(?!\\s)[A-Za-z]+)*'\n    # Use the re.sub() function to replace all occurrences of the pattern with a single space\n    return re.sub(pattern,'', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define regular expression pattern for matching capital words\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Use re.sub() method to replace the matched words with spaces\n    return re.sub(pattern, lambda x:'' + x.group(0) +'', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using regular expressions to find all the capital words in the string\n    capital_words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Adding spaces between capital words\n    for i in range(len(capital_words)):\n        capital_words[i] ='' + capital_words[i]\n    \n    # Joining the capital words with spaces\n    str2 = ''.join(capital_words)\n    \n    # Returning the modified string\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = str1.split()\n    # iterate over the words and add spaces between them\n    result = []\n    for i, word in enumerate(words):\n        # if the word is capitalized, add a space and move on to the next word\n        if word[0].isupper():\n            result.append(word +'')\n            continue\n        # if the word is not capitalized, append it as is to the result list\n        result.append(word)\n    # join the words back into a string and return it\n    return ''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    str1 = re.sub(r'\\b[A-Z](?=[a-z])', r' \\1', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Capitalize the first letter of each word and join them with spaces\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # Add spaces between capitalized words\n    words = [' '.join(word.split()) for word in words]\n\n    # Join the words back into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Define a regular expression pattern for capital letters followed by one or more non-capital letters\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    # Find all the matches of the pattern in the given string\n    matches = re.findall(pattern, str1)\n    # Loop through each match and insert a space between the words starting with capital letters\n    for i, match in enumerate(matches):\n        if i == 0 or matches[i-1][-1].isalpha():\n            # Insert a space only if the previous word was not a capital letter\n            str1 = str1.replace(match, match.replace(match[0],'' + match[0]), 1)\n    return str1"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for num_str in nums_str:\n        nums_list.append(float(num_str))\n    nums_list.sort()\n    return nums_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the list of integers numerically using the built-in sorted() function\n    nums_int_sorted = sorted(nums_int)\n    # Convert the sorted list of integers back to a list of strings\n    nums_str_sorted = [str(num) for num in nums_int_sorted]\n    # Return the sorted list of strings\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # sort the list of integers using the built-in sort function\n    nums_int.sort()\n    # convert the sorted list of integers back to a list of strings\n    sorted_nums = [str(num) for num in nums_int]\n    # return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # convert all strings in the list to floats\n    nums_float = [float(num_str) for num_str in nums_str]\n\n    # sort the floats in ascending order\n    nums_float.sort()\n\n    # convert the sorted floats back to strings\n    nums_str_sorted = [str(num_float) for num_float in nums_float]\n\n    # return the sorted list of strings\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_int = []\n    for num_str in nums_str:\n        try:\n            nums_int.append(int(num_str))\n        except ValueError:\n            pass\n    nums_int.sort()\n    nums_str = []\n    for num in nums_int:\n        nums_str.append(str(num))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Define a function to convert a string to a float\n    def str_to_float(s):\n        try:\n            return float(s)\n        except ValueError:\n            return None\n\n    # Use the map() function to apply the str_to_float function to each string in the list\n    float_list = list(map(str_to_float, nums_str))\n\n    # Use the sorted() function to sort the list of floats in numeric order\n    sorted_list = sorted(float_list)\n\n    # Use the map() function again to apply the float_to_str function to each float in the sorted list\n    sorted_str_list = list(map(float_to_str, sorted_list))\n\n    return sorted_str_list\n"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Append the list to the given list\n    test_list.extend(test_list)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # create a new list that contains the elements of the original list\n    new_list = list(test_list)\n    \n    # add the elements of the tuple to the new list\n    for element in test_tup:\n        new_list.append(element)\n    \n    # return the new list with the added elements\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Combine the two lists\n    combined_list = test_list + test_tup\n    # Return the combined list\n    return combined_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i], test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    if arr[i] > arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i-1)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)//2 - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[i] >= arr[parent]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return True\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # If the index is equal to 0, then the array represents a min heap\n    if i == 0:\n        return True\n    \n    # If the parent index is less than 0, then the array does not represent a min heap\n    if i % 2 == 0:\n        if arr[i] > arr[i//2]:\n            return False\n    else:\n        if arr[i] < arr[i//2]:\n            return False\n    \n    # Recursively check the parent nodes\n    return check_min_heap_helper(arr, i//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    elif i == 1:\n        return arr[i] >= arr[0]\n    elif i > 1 and arr[i] >= arr[i//2]:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return False\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    # base case\n    if n == 0 or n == 1:\n        return True\n    # check if the root is greater than its children\n    for i in range(1, n):\n        if arr[0] > arr[i]:\n            return False\n    # if the above check is true, then check the root and its children recursively\n    return is_min_heap(arr[1:])"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    The function takes in the array and the current index of the element being checked.\n    The function returns True if the array represents a min heap, False otherwise.\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    min_child = i\n\n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        min_child = left_child\n\n    if right_child < len(arr) and arr[right_child] < arr[min_child]:\n        min_child = right_child\n\n    if min_child!= i:\n        arr[i], arr[min_child] = arr[min_child], arr[i]\n        return False\n    else:\n        return True\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. \n    The function takes in the array and returns True if the array represents a min heap, \n    False otherwise.\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n\n    if arr[i] >= arr[i+1] and check_min_heap_helper(arr, i+1):\n        return False\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    for i in range(len(arr)//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n\n    if left_child < len(arr) and arr[left_child] > arr[i]:\n        return False\n\n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Check if the left child exists and if it is smaller than the parent\n    if i*2 + 1 < len(arr) and arr[i*2 + 1] < arr[i]:\n        return False\n    \n    # Check if the right child exists and if it is smaller than the parent\n    if i*2 + 2 < len(arr) and arr[i*2 + 2] < arr[i]:\n        return False\n    \n    # If all the children are smaller than the parent, then it is a min heap\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Initialize the current index to the last index of the array\n    i = len(arr) - 1\n    \n    # Loop until the current index is greater than 0\n    while i > 0:\n        # Call the helper function to check if the current index represents a min heap\n        if not check_min_heap_helper(arr, i):\n            return False\n        \n        # Move the current index to its parent\n        i = (i - 1) // 2\n        \n    # If the loop completes without returning False, it means the array represents a min heap\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    num = 0\n    prev_num = 1\n    next_num = 1\n\n    # Find the nth Jacobsthal number\n    for i in range(n):\n        num = prev_num + next_num\n        prev_num = next_num\n        next_num = num\n\n    return num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) - jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365,...\n    \"\"\"\n    # Initialize the first two jacobsthal numbers\n    j1, j2 = 0, 1\n    # Initialize the count variable\n    count = 2\n\n    # Check if the nth jacobsthal number is already known\n    if n == 0:\n        return j1\n    elif n == 1:\n        return j2\n    else:\n        while count < n:\n            # Calculate the next jacobsthal number\n            j3 = j1 + j2\n            # Increment the count variable\n            count += 1\n            # Update the values of j1 and j2\n            j1 = j2\n            j2 = j3\n        # Return the nth jacobsthal number\n        return j2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob_list = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731]\n    return jacob_list[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = [0, 1, 1]\n    for i in range(2, n):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n    return jacobsthal[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 3 * jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": ""
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 21\n    elif n == 6:\n        return 43\n    elif n == 7:\n        return 85\n    elif n == 8:\n        return 171\n    elif n == 9:\n        return 341\n    elif n == 10:\n        return 683\n    elif n == 11:\n        return 1365\n    elif n == 12:\n        return 2731\n    elif n == 13:\n        return 5461\n    elif n == 14:\n        return 10923\n    elif n == 15:\n        return 21845\n    elif n == 16:\n        return 43691\n    elif n == 17:\n        return 87382\n    elif n == 18:\n        return 174765\n    elif n == 19:\n        return 349531\n    elif n == 20:\n        return 699061\n    elif n == 21:\n        return 1398123\n    elif n == 22:\n        return 2796245\n    elif n == 23:\n        return 5592491\n    elif n == 24:\n        return 11184982\n    elif n == 25:\n        return 22369963\n    elif n == 26:\n        return 44739926\n    elif n == 27:\n        return 89479852\n    elif n == 28:\n        return 178959705\n    elif n == 29:\n        return 357919410\n    elif n == 30:\n        return 715838821\n    elif n == 31:\n        return 1431677642\n    elif n == 32:\n        return 2863355285\n    elif n == 33:\n        return 5726710570\n    elif n == 34:\n        return 11453421141\n    elif n == 35:\n        return 22906842282\n    elif n == 36:\n        return 45813684564\n    elif n == 37:\n        return 91627369129\n    elif n == 38:\n        return 183254738257\n    elif n == 39:\n        return 366509476514\n    elif n == 40:\n        return 733018953028\n    elif n == 41:\n        return 1466037906057\n    elif n == 42:\n        return 2932075812114\n    elif n == 43:\n        return 5864151624229\n    elif n == 44:\n        return 11728303248458\n    elif n == 45:\n        return 23456606496916\n    elif n == 46:\n        return 46913212993832\n    elif n == 47:\n        return 93826425987665\n    elif n == 48:\n        return 187652851975330\n    elif n == 49:\n        return 375305703950661\n    elif n == 50:\n        return 750611407901322\n    elif n == 51:\n        return 1501222815802644\n    elif n == 52:\n        return 30024456"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    jacobsthal = [0, 1]\n    while jacobsthal[-1] < n:\n        jacobsthal.append(jacobsthal[-1] + jacobsthal[-2])\n    return jacobsthal[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if len(test_list) < K:\n        print(\"Error: list should have at least K elements.\")\n        return\n    \n    min_vals = []\n    for i in range(K):\n        min_vals.append(float('inf'))\n    \n    for tup in test_list:\n        if len(tup) < K:\n            print(\"Error: all tuples in list should have at least K elements.\")\n            return\n        \n        for i in range(K):\n            if tup[i] < min_vals[i]:\n                min_vals[i] = tup[i]\n    \n    min_k_records = []\n    for i in range(K):\n        if min_vals[i]!= float('inf'):\n            min_k_records.append(test_list[min_vals.index(min_vals[i])])\n    \n    print(\"Minimum K records: \", min_k_records)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    This function takes in a tuple list and a value K, and returns the minimum K records from the list. \n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize a list to store the minimum K records\n    min_records = []\n\n    # Initialize a variable to store the index of the current minimum K record\n    current_min_index = 0\n\n    # Iterate through the sorted list and add the minimum K records to the min_records list\n    for i in range(len(test_list)):\n        if len(min_records) < K:\n            min_records.append(test_list[i])\n        else:\n            if test_list[i][1] < test_list[current_min_index][1]:\n                current_min_index = i\n                min_records[0] = test_list[i]\n\n    # Return the minimum K records from the sorted list\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Use a dictionary to store the frequency of each element in the list\n    freq = {}\n    for record in test_list:\n        for element in record:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    \n    # Initialize a min heap to store the records with the minimum frequency\n    min_heap = []\n    \n    # Iterate through the list again and add records to the min heap until we have K records\n    for record in test_list:\n        for element in record:\n            if freq[element] < len(min_heap):\n                # The element is smaller than all elements in the min heap, so we can remove the minimum element and add the current element\n                min_heap.pop(0)\n                min_heap.append(record)\n                if len(min_heap) == K:\n                    break\n            elif freq[element] == len(min_heap):\n                # The element has the same frequency as all elements in the min heap, so we can add the current element to the heap\n                min_heap.append(record)\n                if len(min_heap) == K:\n                    break\n    \n    # Return the minimum K records from the min heap\n    return min_heap"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    min_value = test_list[0][1]\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n            if len(test_list) - i < K:\n                break\n    result = []\n    for i in range(min_index, min_index + K):\n        result.append(test_list[i])\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sorting the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Returning the first k records\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    sorted_list = sorted(test_list)\n    min_list = sorted_list[:K]\n    min_list.sort()\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    count = 0\n    min_count = float('inf')\n    min_index = -1\n    for i, (key, value) in enumerate(test_list):\n        count += 1\n        if count <= K:\n            continue\n        if count < min_count:\n            min_count = count\n            min_index = i\n        elif count == min_count:\n            if value < test_list[min_index][1]:\n                min_index = i\n    return min_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        elif test_list[i][0] < min_list[0][0]:\n            min_list = [test_list[i]]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize minimum k count as infinity\n    min_count = float('inf')\n\n    # Initialize the count for the first element\n    count = 1\n\n    # Iterate over the list\n    for num, _ in test_list:\n        # If the count is less than or equal to K, update the count\n        if count <= K:\n            count += 1\n        # If the count is greater than K, decrement the count\n        else:\n            count -= 1\n\n        # If the count is less than the minimum, update the minimum count\n        if count < min_count:\n            min_count = count\n\n    # Return the minimum count\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    min_dict = {}\n    min_count = float('inf')\n    min_item = None\n    \n    for item, count in test_list:\n        if item in min_dict:\n            if min_dict[item] > count:\n                min_dict[item] = count\n        else:\n            min_dict[item] = count\n        \n        if len(min_dict) <= K:\n            if count < min_count:\n                min_count = count\n                min_item = item\n        else:\n            if count < min_count:\n                min_count = count\n                min_item = item\n    \n    return min_item, min_count"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    \n    # Loop through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # Check if the current element is in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n        \n        if l2[i] in l1 and l2[i] in l3 and l2[i] in l2:\n            common_elements.append(l2[i])\n        \n        if l3[i] in l1 and l3[i] in l2 and l3[i] in l3:\n            common_elements.append(l3[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # initialize an empty list to store the common elements\n    common_elements = []\n    # iterate over each element in l1\n    for i in range(len(l1)):\n        # check if the element is present in l2 and l3 at the same index\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # if the element is common, add it to the common_elements list\n            common_elements.append(l1[i])\n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    # create a set of unique elements from all three lists\n    unique_set = set(l1 + l2 + l3)\n\n    # create a list of tuples, where each tuple contains an element from one of the lists and its index\n    # if the element is not in the unique set, it means it is not common for all three lists\n    common_elements = [(elem, l1.index(elem), l2.index(elem), l3.index(elem)) for elem in unique_set if elem in l1 and elem in l2 and elem in l3]\n\n    # sort the list of tuples by the element, ascending order\n    common_elements.sort(key=lambda x: x[0])\n\n    # create a list of tuples, where each tuple contains the common element and its indices in all three lists\n    common_list = [(elem, [i, l1.index(elem), l2.index(elem), l3.index(elem)]) for i, (elem, ind1, ind2, ind3) in enumerate(common_elements)]\n\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Find the length of the smallest list\n    min_len = min(len(l1), len(l2), len(l3))\n    \n    # Create a list to store the common elements\n    common_elements = []\n    \n    # Loop through the elements in the smallest list\n    for i in range(min_len):\n        # Check if the elements at the current index are common for all lists\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            # If the elements are common, add them to the list of common elements\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty set to store common elements\n    common = set()\n    # loop through each index in l1 and l2\n    for i in range(len(l1)):\n        # check if l1[i] is in l2 and l3 at index i\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # add l1[i] to the set of common elements\n            common.add(l1[i])\n    # return the list of common elements\n    return list(common)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the numbers in ascending order\n    numbers.sort()\n    \n    # Find the second smallest number\n    second_smallest = numbers[-2]\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # If the list has only one element, return None\n    if len(numbers) == 1:\n        return None\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    if len(numbers) < 2:\n        return None\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        smallest = second_smallest(numbers[:len(numbers)//2])\n        return second_smallest(numbers[len(numbers)//2:])"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a[^b]*b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'^a.*?b+$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    result = pattern.match(text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b+)'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(?=b)*b')\n    matches = pattern.finditer(text)\n    result = []\n    for match in matches:\n        result.append(match.start())\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=\\bb)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    print(matches)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    # Define the pattern to match\n    pattern = r'a(?=.*b)'\n\n    # Match the pattern in the text\n    result = re.search(pattern, text)\n\n    # If the pattern is found, return the matched string\n    if result:\n        return result.group(0)\n\n    # If the pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string in test_list:\n        # Convert the string to a list of characters and sort it\n        sorted_chars = sorted(string)\n        # For each possible pair of characters, check if they are in reverse order\n        for i in range(len(sorted_chars)):\n            for j in range(i+1, len(sorted_chars)):\n                if sorted_chars[i] == sorted_chars[j][::-1]:\n                    # If they are, increment the count\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Create a dictionary to store the count of each string\n    string_count = {}\n\n    # Iterate through the list of strings\n    for string in test_list:\n        # Convert the string to its reverse and store it in the dictionary\n        reverse_string = string[::-1]\n        string_count[reverse_string] = string_count.get(reverse_string, 0) + 1\n\n    # Initialize a count of the pairs\n    pair_count = 0\n\n    # Iterate through the dictionary\n    for _, count in string_count.items():\n        # Check if the count is odd\n        if count % 2!= 0:\n            pair_count += count\n\n    return pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for string1 in test_list:\n        for string2 in test_list:\n            if string1!= string2:\n                if string1[::-1] in string2 or string2[::-1] in string1:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n\n    def reverse(s):\n        \"\"\"\n        Helper function to reverse a given string.\n        \"\"\"\n        return s[::-1]\n\n    def is_reverse(s1, s2):\n        \"\"\"\n        Helper function to check if s1 is a reverse of s2.\n        \"\"\"\n        return reverse(s1) == s2\n\n    count = 0\n    for s1 in test_list:\n        for s2 in test_list:\n            if s1!= s2:\n                if is_reverse(s2, s1):\n                    count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    test_list = [\"hello\", \"world\", \"hell\", \"orl\", \"ldo\", \"o\", \"l\", \"o\"]\n    print(\"Number of reverse pairs: \", count_reverse_pairs(test_list))"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of unique sublists\n    count_dict = {}\n    \n    # loop through each list in the input list\n    for sublist in list1:\n        # convert the list to a tuple and check if the tuple is already in the dictionary\n        if tuple(sublist) not in count_dict:\n            # if not, add the tuple to the dictionary with a count of 1\n            count_dict[tuple(sublist)] = 1\n        else:\n            # if it is, increment the count by 1\n            count_dict[tuple(sublist)] += 1\n    \n    # return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in sublist_count:\n            sublist_count[tuple_sublist] += 1\n        else:\n            sublist_count[tuple_sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_tuples = {}\n    \n    # Convert the list into a set to remove duplicates\n    set1 = set(list1)\n    \n    # Loop through all possible sublists of the set\n    for i in range(1, len(set1)+1):\n        for sublist in set1:\n            # Check if the sublist is of length i\n            if len(sublist) == i:\n                # Convert the sublist into a tuple\n                tup = tuple(sublist)\n                # Check if the tuple already exists in the dictionary\n                if tup in unique_tuples:\n                    unique_tuples[tup] += 1\n                else:\n                    unique_tuples[tup] = 1\n    \n    return unique_tuples"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it is already in the dictionary\n        if sublist not in counts:\n            # If it is not in the dictionary, add it with a value of 1\n            counts[sublist] = 1\n        else:\n            # If it is in the dictionary, increment its value by 1\n            counts[sublist] += 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count:\n            count[sublist_tuple] += 1\n        else:\n            count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_count:\n            sublist_count[sublist_tuple] = 1\n        else:\n            sublist_count[sublist_tuple] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of unique lists\n    counts = {}\n    # loop through the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in counts:\n            # if the tuple already exists, increment its count\n            counts[tuple(sublist)] += 1\n        else:\n            # if the tuple does not exist, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist in sublist_count:\n            # If it is, increment its count by 1\n            sublist_count[sublist] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_count = {}\n    for item in list1:\n        # convert the list to a tuple\n        tuple_item = tuple(item)\n        # check if the tuple is already in the dictionary\n        if tuple_item in list_count:\n            list_count[tuple_item] += 1\n        else:\n            list_count[tuple_item] = 1\n    return list_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if \".\" not in num:\n        return False\n    decimal_parts = num.split(\".\")\n    if len(decimal_parts) > 2:\n        return False\n    for part in decimal_parts:\n        if not part.isdigit():\n            return False\n    try:\n        decimal_part = float(decimal_parts[1])\n    except ValueError:\n        return False\n    return decimal_part.is_integer()"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    num = str(num)\n    decimal_point_index = num.find(\".\")\n    if decimal_point_index == -1:\n        return False\n    else:\n        decimal_part = num[decimal_point_index+1:]\n        if len(decimal_part)!= 2:\n            return False\n        else:\n            return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        # Check if the string contains a decimal point\n        if '.' in num:\n            # Check if the decimal point is the last character in the string\n            if num[-1] == '.':\n                return False\n            # Check if the decimal point is the only character in the string\n            if len(num) == 1:\n                return False\n            # Check if the number of characters before the decimal point is less than 2\n            if '.' in num[0:num.index('.')]:\n                return False\n            # Check if the number of characters after the decimal point is less than 2\n            if '.' in num[num.index('.')+1:]:\n                return False\n            # Check if the number of characters in between the decimal point is less than 2\n            if '.' in num[0:num.index('.')+1]:\n                return False\n            # Check if the number of characters in between the decimal point and the end of the string is less than 2\n            if num[-(num.rindex('.')-len(num)+1):-1]!= '.':\n                return False\n            # If all conditions are met, return True\n            return True\n        # If the string doesn't contain a decimal point, return False\n        else:\n            return False\n    except ValueError:\n        # If the string cannot be converted to a number, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    # Check if the given number is a string\n    if not isinstance(num, str):\n        return False\n\n    # Remove any leading/trailing spaces and convert to lowercase\n    num = num.strip().lower()\n\n    # Check if the number is empty or contains any non-numeric characters\n    if not num.isdigit():\n        return False\n\n    # Check if the number has a precision of 2\n    if len(num) > 2:\n        return False\n\n    # Check if the number is a valid decimal number with a precision of 2\n    decimal_pattern = r'^\\d+\\.\\d{1}$'\n    if not re.match(decimal_pattern, num):\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = list(num)\n    if '.' not in num:\n        return False\n    for digit in num_list:\n        if digit not in '0123456789.':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num:\n            decimal_part = num.split('.')[1]\n            if len(decimal_part) <= 2:\n                return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    # Check if the given number is a decimal number\n    if '.' in num:\n        # Check if the number has a precision of 2\n        if len(num.split('.')[1]) == 2:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        raise TypeError('Input must be a string.')\n    \n    if '.' in num:\n        if len(num.split('.')[1]) > 2:\n            return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_pattern = r'^[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?$'\n    if re.match(decimal_pattern, num) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list to a set to remove duplicate elements\n    unique_set = set(arr)\n    # check if the length of the set is 1\n    if len(unique_set) == 1:\n        # return True if the set contains only one element\n        return True\n    else:\n        # return False if the set contains more than one element\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store unique elements of the array\n    unique_set = set(arr)\n\n    # Check if the length of the unique set is equal to 1 or not\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks whether it contains only one distinct element or not.\n    If it contains only one distinct element, the function returns True, else it returns False.\n    '''\n    # Convert the list to set to remove duplicates\n    unique_set = set(arr)\n\n    # Check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_nums = set(arr) # convert the list to a set to remove duplicates\n    if len(unique_nums) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list into a set to get unique elements\n    unique_elements = set(arr)\n    # check if the length of the set is 1 or not\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store the unique elements of the list\n    unique_elements = set(arr)\n\n    # Check if the length of the set is equal to 1\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store unique elements in the list\n    unique_elements = set(arr)\n    # Check if the length of the set is equal to 1\n    if len(unique_elements) == 1:\n        # If yes, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)): # if the length of the list is not equal to the length of the set of its elements, then the list contains duplicate elements\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Check if there is only one element in the dictionary\n    for num in count:\n        if count[num] == 1:\n            return True\n    \n    # If no element is found to be only one, return False\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2 and is_leapyear(year):\n            days_in_month[1] = 29\n        return days_in_month[monthnum3 - 1]\n    else:\n        return \"Invalid month number\"\n\ndef is_leapyear(year):\n    '''\n    A function to check whether the given year is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0)"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"30 days in this month.\")\n    elif monthnum3 == 2:\n        print(\"28 or 29 days in this month.\")\n    else:\n        print(\"No 30 days in this month.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError('Invalid month number')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    for i in range(n):\n        # Flag to indicate if any swaps are needed\n        swapped = False\n        \n        # Traverse through the array from 0 to n-i-1\n        for j in range(n-i-1):\n            \n            # If the absolute difference between adjacent elements is less than the current minimum difference,\n            # update the minimum difference.\n            if abs(arr[j] - arr[j+1]) < min_diff:\n                min_diff = abs(arr[j] - arr[j+1])\n                swapped = True\n            \n            # If the adjacent elements are already in the sorted order, break the inner loop.\n            if arr[j] > arr[j+1]:\n                break\n        \n        # If no swaps were needed, break the outer loop.\n        if not swapped:\n            break\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference and the minimum element\n    min_diff = float('inf')\n    min_element = float('inf')\n\n    # Traverse the array and check for the minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_element = arr[i]\n        elif diff == min_diff:\n            min_element = min(arr[i], min_element)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize two pointers\n    start = 0\n    end = n - 1\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Loop through the array\n    while start < end:\n        # Calculate the current difference\n        current_diff = abs(arr[start] - arr[end])\n\n        # Update the minimum difference if the current difference is less than the minimum\n        if current_diff < min_diff:\n            min_diff = current_diff\n\n        # If the current difference is negative, move the start pointer to the next element\n        elif current_diff < 0:\n            start += 1\n\n        # If the current difference is positive, move the end pointer to the previous element\n        else:\n            end -= 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 2:\n        return abs(arr[1] - arr[0])\n\n    arr.sort()\n\n    min_diff = abs(arr[n-1] - arr[0])\n\n    for i in range(1, n-1):\n        diff = abs(arr[n-1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return \"The array must have at least two elements\"\n\n    min_diff = float('inf')\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array of integers and returns the minimum difference between any two elements.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for c in str:\n        if c.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number.\n    The nth polite number is defined as the number with the largest\n    prime factor that is less than or equal to the square root of n.\n    \"\"\"\n\n    # Calculate the square root of n\n    sqrt_n = math.sqrt(n)\n\n    # Initialize the maximum prime factor to zero\n    max_prime_factor = 0\n\n    # Loop through all primes less than or equal to the square root of n\n    for i in range(2, int(sqrt_n) + 1):\n        if n % i == 0:\n            # Check if the prime factor is greater than the current maximum prime factor\n            if i > max_prime_factor:\n                max_prime_factor = i\n\n    # If the maximum prime factor is still zero, the nth polite number is not found\n    if max_prime_factor == 0:\n        return None\n\n    # Return the nth polite number\n    return n // max_prime_factor"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(count):\n        i = 1\n        while count > 0:\n            if is_prime(i):\n                count -= 1\n            i += 1\n        return i - 1\n\n    if n < 1:\n        return None\n\n    count = n\n    prime = nth_prime(count)\n    return prime"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_divisible_by_3(num):\n        if num % 3 == 0:\n            return True\n        return False\n\n    def is_divisible_by_5(num):\n        if num % 5 == 0:\n            return True\n        return False\n\n    def is_divisible_by_7(num):\n        if num % 7 == 0:\n            return True\n        return False\n\n    polite_number = 0\n\n    while True:\n        is_prime_result = is_prime(polite_number)\n        is_divisible_by_3_result = is_divisible_by_3(polite_number)\n        is_divisible_by_5_result = is_divisible_by_5(polite_number)\n        is_divisible_by_7_result = is_divisible_by_7(polite_number)\n\n        if (is_prime_result and is_divisible_by_3_result) or (is_prime_result and is_divisible_by_5_result) or (is_prime_result and is_divisible_by_7_result) or (is_divisible_by_3_result and is_divisible_by_5_result) or (is_divisible_by_3_result and is_divisible_by_7_result) or (is_divisible_by_5_result and is_divisible_by_7_result):\n            polite_number += 1\n        else:\n            break\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 == 1:\n            if num % 7 == 5:\n                return num\n            elif num % 7 == 3:\n                return num\n            else:\n                return None\n        num += 1\n        count += 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n\n    # Initialize variables\n    count = 1\n    polite_count = 0\n    current_number = 1\n\n    # Iterate until nth polite number is found\n    while polite_count!= n:\n        # Calculate the next polite number\n        current_number = (current_number * 2) % 1000000007\n        polite_count += 1\n\n        # Check if the current number is divisible by 5\n        if current_number % 5 == 0:\n            count += 1\n            if count > n:\n                # Return the polite number if it is greater than or equal to n\n                return current_number\n\n    # Return the nth polite number\n    return current_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return is_polite(n//2) + 1\n    else:\n        return is_polite((n-1)//2) + 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # Initialize variables\n    a = 1\n    b = 2\n    count = 0\n    \n    # Loop until count reaches n\n    while count < n:\n        # Check if a is a polite number\n        if is_prime(a):\n            count += 1\n        # Calculate next number\n        a = b\n        b = a + b\n    \n    # Check if b is a polite number\n    if is_prime(b):\n        return True\n    else:\n        return False\n\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # first polite number is 3\n    polite_num = 3\n    \n    # check if polite number is less than n\n    while polite_num < n:\n        # if polite number is less than n, increment it\n        polite_num += 1\n    \n    # if polite number is equal to n, return True\n    if polite_num == n:\n        return True\n    \n    # if polite number is greater than n, return False\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize first polite number to 2\n    polite_number = 2\n\n    # Loop through until we reach n\n    for i in range(1, n):\n        # Increment the polite number by 1\n        polite_number += 1\n\n        # Check if the polite number is not divisible by 5 or 7\n        if (polite_number % 5!= 0) and (polite_number % 7!= 0):\n            # If it's not divisible by 5 or 7, then we are done\n            break\n\n    # Return the polite number\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer n as input and returns True if the n-th polite number is greater than or equal to 1 and the n-th polite number is less than or equal to 10^18. Otherwise, it returns False.\n    '''\n    if n < 1 or n > 10**18:\n        return False\n    i = 1\n    polite = 1\n    while polite <= n:\n        if i % 2 == 0:\n            polite *= 3\n        else:\n            polite *= 5\n        i += 1\n    return polite >= 1 and polite <= 10**18"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1) - 1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    if n < 2:\n        return result\n    \n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    \n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n):\n        if i == n-1:\n            pairs.append([l1[i], None])\n        else:\n            pairs.append([l1[i], l1[i+1]])\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        result = []\n        for i in range(len(l1)-1):\n            result.append((l1[i], l1[i+1]))\n        return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Create an empty list to store the pairs\n    pairs = []\n    # Loop through the list and append pairs of consecutive elements to the list\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    # Return the list of pairs\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        pairs = []\n        for i in range(len(l1)-1):\n            pairs.append((l1[i], l1[i+1]))\n        return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not l1:  # if the list is empty\n        return []\n    elif len(l1) == 1:  # if the list has only one item\n        return [(l1[0], None)]\n    elif len(l1) == 2:  # if the list has two items\n        return [(l1[0], l1[1])]\n    else:  # if the list has more than two items\n        pairs = []\n        for i in range(len(l1) - 1):\n            pairs.append((l1[i], l1[i+1]))\n        return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input. It then counts the number of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes in two lists and returns a new list containing the elements of list1 that are not in list2.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list that contains the elements that are present in li1 but not in li2.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as inputs and returns a list containing the elements of li1 that are not in li2.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # if i is odd, compute the fourth power and add it to the sum\n        if i % 2!= 0:\n            total += i ** 4\n\n    # return the sum\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize a variable to store the sum of fourth power of odd numbers\n    sum_fourth = 0\n\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # compute the fourth power of the current odd number\n        fourth = i ** 4\n\n        # add the fourth power to the sum of fourth power of odd numbers\n        sum_fourth += fourth\n\n    # return the sum of fourth power of odd numbers\n    return sum_fourth"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    num = 1\n    sum = 0\n    while count < n:\n        if num % 2!= 0:\n            sum += num ** 4\n        num += 1\n        count += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # initializing the sum variable\n    sum_of_fourth_power = 0\n\n    # iterating n times\n    for i in range(1, n+1):\n        # taking the fourth power of the current odd number\n        fourth_power = i**4\n\n        # adding the fourth power to the sum\n        sum_of_fourth_power += fourth_power\n\n    # returning the sum\n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    if n == 1:\n        return 0\n    else:\n        odd_num = 3\n        sum_of_powers = odd_num_sum(n-1) + odd_num**4\n        return sum_of_powers\n\n\nn = 10\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i**4\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # create a stack to store opening brackets\n    stack = deque()\n\n    # iterate through each character of the expression\n    for char in exp:\n\n        # if character is an opening bracket, push it onto the stack\n        if char in ['(', '[', '{']:\n            stack.append(char)\n\n        # if character is a closing bracket, pop the topmost opening bracket from the stack\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_bracket = stack.pop()\n\n            # if the topmost bracket is not of the same type as the closing bracket, the expression is not balanced\n            if top_bracket == '(' and char!= ')':\n                return False\n            elif top_bracket == '[' and char!= ']':\n                return False\n            elif top_bracket == '{' and char!= '}':\n                return False\n\n    # if the stack is empty, the expression is balanced\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return \"Not Balanced\"\n            top = stack.pop()\n            if char in ['(', '{', '[']:\n                if char!= top:\n                    return \"Not Balanced\"\n            elif char in [')', '}', ']']:\n                if char!= top:\n                    return \"Not Balanced\"\n\n    return \"Balanced\" if not stack else \"Not Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = {'[', '(', '{', '<'}\n    close_brackets = {']', ')', '}', '>'}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char not in close_brackets[char]:\n                return False\n\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_expression(exp):\n    stack = []\n    for i in exp:\n        if i.isalpha():\n            stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n\n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in {'+', '-', '*', '/'} and stack:\n            last_char = stack.pop()\n            if (last_char == '(' and char in {'+', '-'}) or (last_char == '[' and char in {'+', '-'}) or (last_char == '{' and char in {'+', '-'}):\n                stack.append(char)\n            elif char in {'*', '/'} and last_char == '(' or char in {'*', '/'} and last_char == '[' or char in {'*', '/'} and last_char == '{':\n                if not stack:\n                    return False\n                top_char = stack.pop()\n                if top_char == '(':\n                    if char == '*':\n                        return False\n                    elif char == '/':\n                        return False\n                elif top_char == '[':\n                    if char == '*':\n                        return False\n                    elif char == '/':\n                        return False\n                elif top_char == '{':\n                    if char == '*':\n                        return False\n                    elif char == '/':\n                        return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        elif char == '(':\n            stack.append('(')\n        elif char == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char in ['(', '{']:\n                if last_char == '(' or last_char == '{':\n                    continue\n                else:\n                    return False\n            elif char in [')', '}']:\n                if last_char == '[' or last_char == '{':\n                    continue\n                else:\n                    return False\n            elif char in ['[', ']']:\n                if last_char == '(' or last_char == '{':\n                    continue\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the remaining words\n    remaining_words = []\n    # Iterate through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) < K:\n            # If it is, add the word to the remaining words list\n            remaining_words.append(word)\n    # Join the remaining words back into a string and return it\n    return''.join(remaining_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize a list to store the words with length greater than K\n    long_words = []\n\n    # Loop through the words\n    for word in words:\n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            # If it is, add it to the list\n            long_words.append(word)\n\n    # Join the words in the list with spaces\n    result =''.join(long_words)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the new words\n    new_words = []\n    # Loop through each word\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If it is not, append it to the new list\n            new_words.append(word)\n    # Join the new list of words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes in a string and an integer K, and removes all the words with k length in the string.\n    \"\"\"\n    words = test_str.split() # Split the string into a list of words\n    filtered_words = [] # Create an empty list to store the filtered words\n    for word in words: # Loop through each word in the list\n        if len(word)!= K: # If the word has length K, add it to the filtered list\n            filtered_words.append(word)\n    return \" \".join(filtered_words) # Join the filtered list into a string with spaces between words"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Remove words with length equal to K\n    words = [word for word in words if len(word)!= K]\n    # Join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Loop through each word and check if its length is equal to K\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            # If it is, remove it from the list\n            words.pop(i)\n    \n    # Join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    \n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        results = re.findall(pattern, text)\n    except:\n        return None\n    \n    if not results:\n        return None\n    \n    result = results[0]\n    pos = text.find(result[0])\n    if not pos:\n        return None\n    \n    return (pos, pos+len(result[0]))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    matches = re.findall(pattern, text)\n    \n    if matches:\n        for match in matches:\n            print(\"Match found:\", match)\n            print(\"Position:\", text.find(match))\n        return matches[0]\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        for j in range(len(nums)):\n            if j % 2 == 0:\n                if nums[i] % 2 == 0:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            odd_count += 1\n        else:\n            break\n    if odd_count == len(nums) // 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 0:\n                return False\n        else:\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0 or nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Check if the input list is empty or not\n    if not nums:\n        return \"The input list is empty.\"\n    \n    # Loop through the list and check if the odd index contains odd numbers\n    for i in range(1, len(nums), 2):\n        if any(num % 2!= 0 for num in nums[i:]):\n            return False\n    \n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if any(num % 2!= 0 for num in nums[i:]):\n                count += 1\n    return count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels and test_str[i+1] in vowels):\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1 and test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    # initialize the count to zero\n    count = 0\n\n    # loop through the string and check each character\n    for i in range(len(test_str)):\n\n        # check if the character is a vowel\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n\n            # loop through the string again and check if the character is a neighbor of the current character\n            for j in range(len(test_str)):\n                if (i!= j and test_str[i] == test_str[j]) and (test_str[i] in ['a', 'e', 'i', 'o', 'u']):\n\n                    # if the neighbor is a vowel, increment the count\n                    count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add unique elements to the set\n    for element in arr:\n        unique_set.add(element)\n\n    # Calculate the sum of unique elements\n    sum_unique = sum(unique_set)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Remove duplicates from the list\n    unique_arr = list(set(arr))\n    # Initialize the sum variable\n    total = 0\n    # Loop through the unique list and add its elements to the total variable\n    for num in unique_arr:\n        total += num\n    # Return the total sum\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    count = [0] * n # to count the frequency of each element in the array\n    \n    # count the frequency of each element in the array\n    for i in range(n):\n        count[arr[i]] += 1\n        \n    # find the sum of non-repeated elements in the array\n    result = 0\n    for i in range(n):\n        if count[i] == 1:\n            result += arr[i]\n    \n    return result"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for element in arr:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    \n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = 0\n    for element in arr:\n        if freq[element] == 1:\n            sum_non_repeated += element\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(unique_set))\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate through the sorted list and add the sum of each element to the sum variable\n    for i in range(len(sorted_list)):\n        sum += sorted_list[i]\n    # Return the final sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # Convert the set back to list to get the non-repeated elements\n    non_repeated = list(unique_set)\n\n    # Calculate the sum of the non-repeated elements\n    sum_non_repeated = sum(non_repeated)\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store unique elements and their frequency\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Calculate the sum of non-repeated elements\n    total = 0\n    for num in freq:\n        if freq[num] == 1:\n            total += num\n\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Initialize the sum to zero\n    sum_of_non_repeated = 0\n    \n    # Iterate through the dictionary and add up the non-repeated elements\n    for num in arr:\n        if freq_dict[num] == 1:\n            sum_of_non_repeated += num\n    \n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Iterate through the list and update the frequency of each element\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Initialize the sum variable to 0\n    total_sum = 0\n\n    # Iterate through the dictionary to find the sum of non-repeated elements\n    for i in freq:\n        if freq[i] == 1:\n            total_sum += i\n\n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if key == len(list(group))]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            yield [list1[0]]\n        else:\n            yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = sorted(list(groupby(list1)))\n    result = []\n    for group in grouped_list:\n        if len(list(group)) == 1:\n            result.append(list(group)[0])\n        else:\n            result.append([list(group)[0]])\n            for i in range(len(list(group)) - 1):\n                result[-1].append(list(group)[i+1])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(enumerate(list1), lambda x: x[1] == x[0] + 1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return list(groupby(sorted(lst), lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(g) for k, g in groupby(lst) if k == 0]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(lst):\n        if key:\n            result.append([key])\n        if key == list(group)[:-1]:\n            result[-1].append(list(group)[-1])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive elements\n    grouped = groupby(list1)\n    # Iterate through the grouped list and pack consecutive duplicates into sublists\n    result = []\n    for group in grouped:\n        # Extract the first element of the group and its count\n        first, count = group\n        # Pack consecutive duplicates into sublists\n        if count > 1:\n            result.extend(list(group))\n        else:\n            result.append(first)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst, key=lambda x: x))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Iterate over the list of lists\n    for sublist in list1:\n        # Turn the sublist into a tuple\n        tup = tuple(sublist)\n        \n        # Check if the tuple exists in the dictionary\n        if tup in sublist_count:\n            # If it does, increment its value\n            sublist_count[tup] += 1\n        else:\n            # If it doesn't, add the tuple to the dictionary with a value of 1\n            sublist_count[tup] = 1\n    \n    # Return the dictionary with the counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the count of occurrences of sublists\n    sublist_counts = {}\n\n    # Iterate over each element in the list\n    for element in list1:\n        # Convert the element to a tuple\n        tuple_element = tuple(element)\n        \n        # Check if the tuple is already in the dictionary\n        if tuple_element in sublist_counts:\n            # If it is, increment its count\n            sublist_counts[tuple_element] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            sublist_counts[tuple_element] = 1\n\n    # Return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for i in list1:\n        list2.extend(tuple(i))\n    list2 = list(set(list2))\n    unique_list = {}\n    for i in list2:\n        count = list2.count(i)\n        unique_list[i] = count\n    return unique_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_count = {}\n    for item in list1:\n        if isinstance(item, list):\n            list_count[tuple(item)] = list_count.get(tuple(item), 0) + 1\n    return list_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # create an empty dictionary to store the counts\n    counts = {}\n    \n    # loop over all sublists in list1\n    for i in range(len(list1)):\n        \n        # extract the sublist\n        sublist = list1[i]\n        \n        # check if the sublist is already in the counts dictionary\n        if sublist not in counts:\n            \n            # if it is not, add it to the dictionary with a count of 1\n            counts[sublist] = 1\n            \n        # if the sublist is already in the dictionary, increment its count by 1\n        else:\n            counts[sublist] += 1\n    \n    # convert the dictionary to a list of tuples and return it\n    return list(counts.items())"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it is already a key in the dictionary\n        if tuple(sorted(sublist)) in counts:\n            # If it is, increment the value associated with that key\n            counts[tuple(sorted(sublist))] += 1\n        else:\n            # If it is not, add the tuple to the dictionary with a value of 1\n            counts[tuple(sorted(sublist))] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # If the tuple is already in the dictionary, increment its value\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        # If the tuple is not in the dictionary, add it with a value of 1\n        else:\n            counts[sublist_tuple] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # convert the list into a set to get the unique elements\n    unique_set = set(list1)\n    \n    # create an empty dictionary\n    counts = {}\n    \n    # iterate through the unique set and count the number of occurrences of each list\n    for element in unique_set:\n        count = 0\n        for item in list1:\n            if item == element:\n                count += 1\n        counts[element] = count\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    count_dict = {}\n    for sublist in lst:\n        if sublist not in count_dict:\n            count_dict[tuple(sublist)] = 1\n        else:\n            count_dict[tuple(sublist)] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in count:\n                count[sublist_tuple] += 1\n            else:\n                count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    def find_combinations_helper(arr, target, start, path, result):\n        if sum(path) == target:\n            result.append(tuple(path))\n            return\n        for i in range(start, len(arr)):\n            if i > start and arr[i] == arr[i - 1]:\n                continue\n            path.append(arr[i])\n            find_combinations_helper(arr, target, i + 1, path, result)\n            path.pop()\n\n    arr = test_list\n    target = sum(arr) // 2\n    result = []\n    find_combinations_helper(arr, target, 0, [], result)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sums.append(sum(test_list[i:j+1]))\n    return list(combinations(sums, len(test_list)))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Step 1: Calculate the total sum of all tuples in the list\n    total_sum = sum(sum(x) for x in test_list)\n\n    # Step 2: Generate all combinations of tuples in the list\n    tuples_combinations = combinations(test_list, r=2)\n\n    # Step 3: Filter out the combinations of tuples with duplicate sums\n    filtered_combinations = set()\n    for combination in tuples_combinations:\n        if sum(combination) not in filtered_combinations:\n            filtered_combinations.add(sum(combination))\n\n    # Step 4: Return the filtered combinations and their sums\n    return filtered_combinations, total_sum"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # function to find the combinations of sums with tuples in a given tuple list\n    def find_combinations_helper(test_list, target_sum):\n        result = []\n        for i in range(len(test_list)):\n            for j in range(i+1, len(test_list)):\n                combination = tuple(sorted([test_list[i], test_list[j]]))\n                if sum(combination) == target_sum:\n                    result.append(combination)\n        return result\n\n    # find all possible combinations of sums with tuples in the given tuple list\n    combinations_list = find_combinations_helper(test_list, 0)\n\n    # print the combinations of sums with tuples in the given tuple list\n    for combination in combinations_list:\n        print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combination = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]) and test_list[i]!= test_list[j]:\n                combination.append((test_list[i], test_list[j]))\n    return combination"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # initialize empty dictionary to store the combinations\n    combinations_dict = {}\n    \n    # loop through each combination of tuples\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            for k in range(j, len(test_list)):\n                # create a tuple from the current combination of tuples\n                combination = tuple(test_list[i][0], test_list[j][1], test_list[k][2])\n                # check if the combination already exists in the dictionary\n                if combination not in combinations_dict:\n                    # if it does not exist, add it to the dictionary with the sum of the current combination as the key and the tuple as the value\n                    combinations_dict[sum(combination)] = combination\n                    \n    return combinations_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in combinations(test_list[i][1:], j-i+1):\n                if sum(k) == test_list[j][0]:\n                    result.append(tuple(k))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(1, total_sum+1):\n        for j in combinations(test_list, i):\n            print(tuple(j))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            all_combinations.append(tuple(combo))\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Iterate over the tuples in the list\n    for i in range(len(test_list)):\n        # Iterate over the remaining tuples in the list\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the two tuples is present in the test list\n            if sum(test_list[i]) == sum(test_list[j]):\n                # If it is, add the combination to the list of combinations\n                combinations_list.append(tuple(sorted([test_list[i], test_list[j]])))\n\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Using the math module to find the number of divisors\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_div = 0\n    i = 1\n    while i <= n/2:\n        if n % i == 0:\n            count_div += 1\n        i += 1\n    if count_div % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"has an odd count of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # calculate the number of divisors\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors += 1\n            if n // i!= i:\n                divisors += 1\n    # check whether the count of divisors is even\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes a number n as input and returns True if it has an even count of divisors, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and n % 2 == 0:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count += 1\n    if count == 0 : \n        return True\n    elif count % 2 == 0 : \n        return False\n    else : \n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given integer n.\n    \"\"\"\n    # Calculate the sum of the divisors up to n\n    divisor_sum = (n**2 + n) / 2\n    \n    # Calculate the number of divisors\n    divisors = math.sqrt(divisor_sum)\n    \n    # Calculate the number of divisors that are less than or equal to sqrt(n)\n    num_divisors = math.floor(divisors) + 1\n    \n    # Check whether the number of divisors is even or odd\n    if num_divisors % 2 == 0:\n        print(f\"The count of divisors of {n} is even.\")\n    else:\n        print(f\"The count of divisors of {n} is odd.\")"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_odd += arr[j-1]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+2, n+1, 2):\n            sum += arr[j-2]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Find the sum of all odd length subarrays.\n\n    Parameters:\n    arr (list): List of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    \"\"\"\n    # Initialize the sum and length of the current subarray\n    subarray_sum = 0\n    subarray_len = 0\n\n    # Iterate over the array and calculate the sum of odd length subarrays\n    for num in arr:\n        subarray_len += 1\n        subarray_sum += num\n\n        # If the length of the current subarray is odd, add the subarray sum to the total sum\n        if subarray_len % 2!= 0:\n            total_sum += subarray_sum\n\n        # Reset the length of the subarray to 0 if the length becomes even\n        subarray_len = 0 if subarray_len % 2 == 0 else subarray_len\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum_odd_length = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum_odd_length += arr[j-1]\n            \n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if j - i + 1 % 2 == 1:\n                sum += sum_subarray(arr, i, j)\n    return sum\n\ndef sum_subarray(arr, start, end):\n    return sum(arr[start:end+1])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_ = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_ += arr[j-1]\n    return sum_"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize sum variable to zero\n    sum_odd = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Initialize left pointer and right pointer to i\n        left = i\n        right = i\n        \n        # Check for odd length subarrays\n        while (right < len(arr)):\n            # Check if the current subarray has an odd length\n            if (right - left + 1) % 2!= 0:\n                # Add the subarray sum to the sum_odd variable\n                sum_odd += arr[left:right+1].sum()\n            # Move the right pointer to the next element\n            right += 1\n        \n        # Check if the current subarray has an odd length\n        if (right - left + 1) % 2!= 0:\n            # Add the subarray sum to the sum_odd variable\n            sum_odd += arr[left:right+1].sum()\n            \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2!= 0:\n                sum_odd += sum(arr[i:j+1])\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of all odd length subarrays.\n\n    Args:\n        arr: An array of integers.\n\n    Returns:\n        The sum of all odd length subarrays.\n    \"\"\"\n\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd_length_subarrays = 0\n\n    # Loop through each subarray of the input array\n    for i in range(len(arr)):\n\n        # Check if the length of the current subarray is odd\n        if len(arr[i]) % 2 == 1:\n\n            # Add the sum of the current subarray to the sum_odd_length_subarrays variable\n            sum_odd_length_subarrays += sum(arr[i])\n\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                sum += sum_array(arr[i:j+1])\n    return sum\n\n\ndef sum_array(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    h = 0\n    s = 0\n    \n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        if r == max_val:\n            h = (g - b) / (max_val - min_val)\n        elif g == max_val:\n            h = 2 + (b - r) / (max_val - min_val)\n        else:\n            h = 4 + (r - g) / (max_val - min_val)\n        \n        if h < 0:\n            h += 6\n        \n        s = (max_val - min_val) / max_val\n    \n    v = max_val\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    elif cmax == b:\n        h = (r - g) / delta + 4\n    h = h / 6\n    if h < 0:\n        h += 1\n    s = delta / (1 - abs(2 * cmax - 1))\n    v = cmax\n    return h, s, v\n\ndef main():\n    r = 255\n    g = 0\n    b = 0\n    h, s, v = rgb_to_hsv(r, g, b)\n    print(\"RGB:\", r, g, b)\n    print(\"HSV:\", h, s, v)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_rgb\n    \n    delta = max_rgb - min_rgb\n    \n    if max_rgb == min_rgb:\n        s = 0\n    else:\n        if max_rgb == r:\n            h = (g - b) / delta\n        elif max_rgb == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        s = delta / max_rgb\n        \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Calculate the maximum and minimum values of the RGB color\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the hue value\n    if max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    # Calculate the saturation value\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / max_value\n\n    # Calculate the value value\n    v = max_value\n\n    # Calculate the hue value in degrees\n    h = h * 60\n    if h < 0:\n        h += 360\n\n    # Return the HSV values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three RGB values (r, g, and b) and returns their HSV values.\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    elif cmax == b:\n        h = 4 + (r - g) / delta\n    h = h * 60\n    if h < 0:\n        h += 360\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    \n    v = cmax\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert R,G,B to floats and calculate their maximum value\n    r_max = max(r, g, b)\n    g_max = max(r, g, b)\n    b_max = max(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    delta = r_max - b_max\n    \n    # Calculate the hue\n    if delta == 0:\n        hue = 0\n    elif r_max == g_max:\n        hue = 60 * ((b_max - r_max) / delta)\n    elif r_max == b_max:\n        hue = 60 * ((g_max - r_max) / delta) + 120\n    else:\n        hue = 60 * ((r_max - g_max) / delta) + 240\n    \n    # Calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        if r_max == r_max:\n            saturation = delta / r_max\n        elif g_max == g_max:\n            saturation = delta / g_max\n        else:\n            saturation = delta / b_max\n    \n    # Calculate the value\n    value = r_max\n    \n    # Return the hsv values in a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the RGB color value to HSV color value\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    h = 0\n    s = 0\n    v = max_color\n\n    if delta == 0:\n        h = 0\n    elif max_color == r:\n        h = 60 * ((g - b) / delta)\n    elif max_color == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n\n    if max_color == 0:\n        s = 0\n    else:\n        s = delta / max_color\n\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h / 6.0\n\n    if h < 0:\n        h += 1\n\n    v = cmax\n\n    s = delta / (1 - abs(2*cmax - 1))\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0 # Normalize the color values to 0-1 range\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n    if delta == 0: # The color is a grayscale\n        h = 0\n        s = 0\n    else:\n        s = delta/cmax\n        if cmax == r:\n            h = (g - b)/delta\n        elif cmax == g:\n            h = 2 + (b - r)/delta\n        else:\n            h = 4 + (r - g)/delta\n        h *= 60\n        if h < 0:\n            h += 360\n        if h > 360:\n            h -= 360\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h * 60\n    if h < 0:\n        h += 360\n\n    s = delta / (1 - abs(2 * cmax - 1))\n\n    v = cmax\n\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    # initialize variables to store even and odd numbers\n    even_sum = odd_sum = 0\n    \n    # iterate through the list and add even and odd numbers to their respective sums\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n            \n    # return the product of even and odd numbers\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number.\n    \"\"\"\n    even = 1\n    odd = 1\n    prod = 1\n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n        if even!= 1:\n            prod *= even\n        if odd!= 1:\n            prod *= odd\n    return prod"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            break\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    If there is no even or odd number in the list, then it returns 1.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return 1\n    else:\n        return (lst[0] * lst[-1]) // gcd(lst[0], lst[-1])\n\ndef gcd(a, b):\n    \"\"\"\n    This function finds the greatest common divisor of two numbers using Euclidean algorithm.\n    \"\"\"\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= list1[0]\n            break\n    \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Initialize an empty list to hold the integer tuples\n    int_list = []\n    \n    # Loop through each string in the list\n    for str in str_list:\n        # Split the string into a tuple of integers\n        int_tuple = tuple(int(i) for i in str.split())\n        # Add the tuple to the list of integer tuples\n        int_list.append(int_tuple)\n    \n    # Return the list of integer tuples\n    return int_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define the tuple string format\n    tup_str = ('a', 'b', 'c', 1, 2, 3)\n\n    # Initialize the integer tuple\n    tup_int = ()\n\n    # Loop through each element in the tuple string\n    for elem in test_str:\n        # Convert the element to an integer if it's a string\n        if isinstance(elem, str):\n            tup_int += (int(elem),)\n        # Otherwise, add the element as is\n        else:\n            tup_int += (elem,)\n\n    # Return the integer tuple\n    return tup_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = ()\n    for item in test_str:\n        if item.isdigit():\n            new_tuple += (int(item),)\n    return new_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert tuple string to list of integers\n    int_list = [int(i) for i in test_str]\n    # Convert list of integers to tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert the given string into a tuple\n    tuple_str = tuple(test_str.split(','))\n    \n    # Create an empty list to store the converted integers\n    int_list = []\n    \n    # Loop through the tuple string and convert each element to an integer\n    for num_str in tuple_str:\n        # Check if the element is an integer\n        try:\n            int_num = int(num_str)\n            int_list.append(int_num)\n        except ValueError:\n            print(\"Invalid input:\", num_str)\n    \n    # Convert the list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the tuple string into a list\n    str_list = test_str.split(',')\n    # Converting the list of strings to a list of integers\n    int_list = [int(s.strip()) for s in str_list]\n    # Converting the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for str_num in str_list:\n        int_list.append(int(str_num))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string on the comma and space\n    temp_list = test_str.split(', ')\n    # create a new list to store the integers\n    int_list = []\n    # iterate over the list of strings and convert them to integers\n    for item in temp_list:\n        int_list.append(int(item))\n    # create a new tuple with the integers as elements\n    result_tuple = tuple(int_list)\n    return result_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = str(test_str).replace(\"(\", \"\").replace(\")\", \"\").replace(\",\", \"\").replace(\" \", \"\")\n    test_tuple = eval(\"(\" + test_str + \")\")\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of characters\n    lst = list(test_str)\n    # Initialize an empty list to store the integers\n    int_lst = []\n    # Iterate over the list of characters\n    for char in lst:\n        # If the character is a digit, add it to the list of integers\n        if char.isdigit():\n            int_lst.append(int(char))\n    # Convert the list of integers to a tuple\n    return tuple(int_lst)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the rightmost element in the array greater than or equal to x\n    idx = bisect.bisect_right(a, x)\n\n    # If the index is equal to the length of the array, return the index of the next element\n    if idx == len(a):\n        return idx\n\n    # If the element at the index is greater than x, return the index of the element\n    if a[idx] > x:\n        return idx\n\n    # If the element at the index is less than or equal to x, return the index of the next element\n    return idx + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n\n    # If the value is already present, return the index of the next value.\n    if a[index] == x:\n        return index + 1\n\n    # If the value is greater than the current element, the index is greater than or equal to the index of the element.\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x) # find the index of the rightmost occurrence of x in a\n    if i == len(a):\n        # a does not have any rightmost occurrences of x, so insert at end of list\n        return len(a)\n    elif a[i] == x:\n        # x is already in a, so do nothing\n        return i\n    elif x < a[i-1]:\n        # x is to the left of a[i-1], so insert after i-1\n        return i-1\n    else:\n        # x is to the right of a[i-1], so insert after i\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the right insertion point\n    index = bisect.bisect_right(a, x)\n    \n    # Check if the insertion point is before the specified value\n    if index == 0 or a[index-1] < x:\n        return index\n    \n    # If the insertion point is after the specified value, move it to the left until it is before\n    while index > 0 and a[index-1] >= x:\n        index -= 1\n    \n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.{3}b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb\\bb\\bb'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a\\1b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\w{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba\\bb{3}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # create a new tuple from the given string and list\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + [test_str]\n    # Convert the list to a tuple and return it\n    return tuple(combined_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(str(test_list) + test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the two lists into a new tuple\n    new_tuple = (test_str, test_list)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the two lists and convert it to a string\n    new_string = str(test_list) + test_str\n    # convert the string to a list of characters\n    new_list = list(new_string)\n    # convert the list of characters to a tuple\n    new_tuple = tuple(new_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list of values to be included in the new tuple.\n    test_str (str): The string value that will be included in the new tuple.\n\n    Returns:\n    A new tuple containing the given list and string values.\n    \"\"\"\n\n    # create a new tuple using the given list and string values\n    new_tuple = tuple([test_str] + test_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple_list = []\n    for item in test_list:\n        new_tuple_list.append(item)\n    new_tuple_str = tuple(test_str)\n    new_tuple = (new_tuple_list, new_tuple_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Concatenate the string and tuple to form a new tuple\n    new_tuple = (test_str + str(test_tuple))\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if not all(nums[i:i+2] % 2 == 0):\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if every even index contains even numbers, and False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums:\n            if num % 2 == 0:\n                count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if i == 0 or nums[i-2] % 2 == 0:\n            if i == len(nums) - 1 or nums[i+2] % 2 == 0:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            if i % 2 == 0:\n                count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:i+2]):\n            return False\n\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup += remove_nested(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if isinstance(test_tup, tuple):\n        return list(filter(lambda x: not isinstance(x, tuple), test_tup))\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_tup = tuple(sum(test_tup, ()))\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_list = []\n    for item in test_tup:\n        if type(item) is tuple:\n            nested_list += remove_nested(item)\n        else:\n            nested_list.append(item)\n    return nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # initialize an empty list to store the non-tuple elements\n    new_list = []\n    # loop through each element in the tuple\n    for element in test_tup:\n        # if the element is not a tuple, append it to the new list\n        if not isinstance(element, tuple):\n            new_list.append(element)\n    # return the new list as the result\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n\n    # Initialize a new empty list to store the non-nested tuples\n    non_nested_list = []\n\n    # Loop through each tuple in the given tuple\n    for tup in test_tup:\n        # Check if the tuple is not a tuple\n        if not isinstance(tup, tuple):\n            # If it is not a tuple, append it to the non_nested_list\n            non_nested_list.append(tup)\n\n    # Return the non-nested list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the non-nested tuples\n    non_nested_list = []\n    \n    # Loop through the tuples in the test_tup\n    for item in test_tup:\n        # Check if the item is a tuple\n        if isinstance(item, tuple):\n            # Recursively call the remove_nested function on the tuple\n            item = remove_nested(item)\n        # Append the item to the non_nested_list if it's not a tuple\n        else:\n            non_nested_list.append(item)\n    \n    # Return the non_nested_list as the result\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # use list comprehension to remove nested tuples\n    new_tup = [item for sublist in test_tup for item in sublist]\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the number of lists in the input list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(arr) and arr[i] < x:\n        i += 1\n    if i == len(arr):\n        return -1\n    for j in range(i,len(arr)):\n        if arr[j] == x:\n            return j\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize last position to -1\n    last_pos = -1\n    # Loop through the array and find the last occurrence of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_pos = i\n    # Return the last position\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right + 1 if arr[right] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the last position as -1\n    last_pos = -1\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    # While the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the middle position\n        mid = (left + right) // 2\n        # If the element at the middle position is greater than the given element x\n        if arr[mid] > x:\n            # Update the left pointer to mid\n            left = mid + 1\n        # If the element at the middle position is less than or equal to the given element x\n        else:\n            # Update the last position to mid\n            last_pos = mid\n            # Update the right pointer to mid\n            right = mid\n    # Return the last position of the element x in the sorted array\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input, and returns the last index of x in the array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # initialize variables to keep track of the search\n    left = 0\n    right = len(arr) - 1\n\n    # loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n\n        # calculate the midpoint of the array\n        mid = left + (right - left) // 2\n\n        # if the element is found, return the midpoint index\n        if arr[mid] == x:\n            return mid\n\n        # if the element is greater than the midpoint element,\n        # search the left half of the array\n        elif arr[mid] > x:\n            right = mid - 1\n\n        # if the element is less than the midpoint element,\n        # search the right half of the array\n        else:\n            left = mid + 1\n\n    # if the element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    This function takes an array and an element x as input and returns the last position of the element in the array.\n    If the element is not present in the array, it returns -1.\n    '''\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            \n            return mid\n        \n        if arr[mid] < x:\n            left = mid + 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments:\n    1. arr: the sorted array of integers.\n    2. x: the integer to find its last position.\n    \n    This function uses binary search to find the last position of the element x in the array.\n    If the element is present more than once, the function returns the position of the last occurrence.\n    If the element is not found, the function returns -1.\n    \n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # If x is present more than once, return the last occurrence.\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If the element is not found, return -1.\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments - an array and an element x.\n    The function finds the last index of the element x in the array,\n    and returns the index. If the element is not present in the array,\n    the function returns -1.\n\n    Args:\n        arr (list): The sorted array.\n        x (any): The element to find the last index of.\n\n    Returns:\n        int: The last index of the element x in the array.\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"^a.*b$\"\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba[A-Za-z0-9]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?i)a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)([^\\s]*)(?=b)'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'\\ba[a-zA-Z0-9]*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*)b'\n    matches = re.findall(pattern, text, re.DOTALL)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    sum = 0\n\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the range from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the number to the sum variable\n            sum += i\n\n    # return the sum of odd natural numbers within the range l and r\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum_of_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_of_odds += i\n    print(\"The sum of odd numbers between\", l, \"and\", r, \"is:\", sum_of_odds)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range [l, r].\n\n    Args:\n        l (int): lower bound of the range\n        r (int): upper bound of the range\n\n    Returns:\n        int: sum of all odd natural numbers within the range [l, r]\n    \"\"\"\n    return sum(x for x in range(l, r+1, 2) if x % 2!= 0)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the range of natural numbers separated by space: \").split())\n    l, r = l+1, r-1\n    sum_of_odds = 0\n    for i in range(l, r+1, 2):\n        sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum_of_odds = 0\n    for i in range(l, r+1, 2):\n        sum_of_odds += i\n    print(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is\", sum_of_odds)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # input the range\n    l, r = map(int, input(\"Enter range: \").split())\n\n    # initialize the sum to 0\n    total = 0\n\n    # loop through the range\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add it to the sum\n            total += i\n\n    # return the sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for num in arr:  \n        total += num  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum variable to 0\n    total = 0\n    \n    # iterate through each element in the array\n    for num in arr:\n        # add each element to the sum variable\n        total += num\n        \n    # return the sum variable\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert binary number to integer\n    num = int(n, 2)\n    # Calculate the number of bits to rotate\n    rotate_bits = d % 32\n    # Calculate the number of bits to keep in the leftmost position\n    keep_bits = 32 - rotate_bits\n    # Extract the number to be rotated\n    to_rotate = (num >> rotate_bits) & ((1 << rotate_bits) - 1)\n    # Extract the bits to be kept in the leftmost position\n    to_keep = num << keep_bits\n    # Combine the rotated and kept bits\n    rotated = to_keep | to_rotate\n    # Convert the rotated number back to binary and return it as a string\n    return format(rotated, '032b')"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary\n    bin_num = bin(n)[2:]\n    # Pad the binary number with 0s\n    if len(bin_num) < 32:\n        bin_num = '0' * (32 - len(bin_num)) + bin_num\n    # Extract the last d bits\n    last_d_bits = bin_num[-d:]\n    # Shift the binary number left by d bits\n    bin_num = bin_num[:-d] + bin_num[-d:][::-1]\n    # Convert the binary number to decimal\n    result = int(bin_num, 2)\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to shift\n    shift_bits = d % 32\n    \n    # Calculate the number of bits to shift the number to the left\n    shift_num = 32 - shift_bits\n    \n    # Calculate the mask to apply to the shifted number\n    mask = (1 << shift_bits) - 1\n    \n    # Calculate the bits to shift to the left\n    shift_value = n & mask\n    \n    # Calculate the bits to shift to the right\n    shift_value |= (n & ((1 << shift_num) - 1)) << shift_num\n    \n    # Return the shifted number\n    return shift_value"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n    :param n: the number to be rotated\n    :param d: the number of bits to rotate left\n    :return: the rotated number\n    \"\"\"\n\n    # Calculate the left shift\n    left_shift = d % 32\n\n    # Calculate the right shift\n    right_shift = 32 - d\n\n    # Extract the left bits\n    left_bits = n >> left_shift\n\n    # Extract the right bits\n    right_bits = n << right_shift\n\n    # Combine the left and right bits\n    rotated_number = left_bits | right_bits\n\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to shift\n    bits = 32\n    d = d % bits\n    # Create a mask for the bits to shift\n    mask = (1 << bits) - 1\n    # Shift the bits to the left by d bits\n    shifted_bits = (n << d) & mask\n    # Shift the bits to the right by (bits - d) bits\n    right_shift = (n >> (bits - d)) & mask\n    # Combine the shifted bits and the right shifted bits\n    result = shifted_bits | right_shift\n    # Return the result\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # To rotate left by d bits, we need to first shift the bits to the left by d bits and then shift the sign bit to the right.\n    return ((n << d) & 0xFFFFFFFF) | ((n & 0x80000000) >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask\n    d = d % 32\n    shift = (d % 32)\n    return ((n << shift) | (n >> (32 - shift))) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary and reverse the order of the digits\n    binary = bin(n)[2:].zfill(32)\n    binary = binary[::-1]\n\n    # Calculate the number of bits to rotate\n    rotation = d % 32\n\n    # Reverse the bits to rotate\n    bits_to_rotate = binary[-rotation:]\n    bits_to_rotate = bits_to_rotate[::-1]\n\n    # Calculate the new value of the number\n    new_value = int(bits_to_rotate, 2)\n\n    # Convert the new value back to binary and reverse the order of the digits\n    binary = bin(new_value)[2:].zfill(32)\n    binary = binary[::-1]\n\n    # Calculate the new number by concatenating the original number with the rotated bits\n    new_n = int(binary + binary[d // 32:], 2)\n\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF & ((1 << d) - 1)\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    # Remove all occurrences of spaces in the string\n    text = re.sub(r'\\s+','', text)\n    \n    # Remove leading and trailing spaces\n    text = text.strip()\n    \n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x+1):\n        for j in range(y+1):\n            if i+j+z == x:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(3):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x):\n        if i == x:\n            continue\n        elif i == y:\n            continue\n        elif i == z:\n            continue\n        elif i == x+1 or i == y+1 or i == z+1:\n            continue\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    if x == y!= z and x == y == z:\n        count += 1\n    if x!= y!= z and x!= y == z:\n        count += 1\n    if x!= y!= z and x == y!= z:\n        count += 1\n    if x == y == z and x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes a list as input and returns the number of rotations required to generate a sorted array.\n\n    The basic idea is to find the first element of the list, which is the first element of the sorted array.\n    Then, for each element in the list, compare it with the first element of the sorted array. If they are equal, skip it.\n    If they are not equal, count the number of rotations required to sort the list.\n\n    The time complexity of this approach is O(n^2), where n is the length of the list.\n    \"\"\"\n    n = len(arr)\n    # find the first element of the list that is the first element of the sorted array\n    first_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < first_element:\n            first_element = arr[i]\n\n    # count the number of rotations required to sort the list\n    count = 0\n    for i in range(n):\n        # find the index of the first element of the sorted array\n        j = first_element - arr[i]\n        if j >= n:\n            j -= n\n        # increment the count if the element is not equal to the first element of the sorted array\n        if arr[i]!= arr[j]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the maximum element in the array\n    max_val = max(arr)\n    # Find the minimum element in the array\n    min_val = min(arr)\n    # Calculate the difference between the maximum and minimum element\n    diff = max_val - min_val\n    # Check if the difference is even or odd\n    if diff % 2 == 0:\n        # If it is even, return the difference / 2 + 1\n        return (diff // 2 + 1) * n\n    else:\n        # If it is odd, return the difference / 2\n        return (diff // 2) * n + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n and arr[j] < arr[j+1]:\n            j += 1\n        count += n - j\n        if j == n:\n            break\n        for k in range(j+1, n):\n            if arr[k] < arr[k-j]:\n                arr[k], arr[k-j] = arr[k-j], arr[k]\n                count += 1\n        arr[i], arr[j] = arr[j], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left, right = 0, n-1\n    \n    # find the maximum element in the array\n    max_element = max(arr)\n    \n    # iterate until the left pointer is greater than the right pointer\n    while left <= right:\n        # find the mid-point of the array\n        mid = (left + right) // 2\n        \n        # if the mid element is greater than the maximum element\n        if arr[mid] > max_element:\n            # update the left pointer to mid+1\n            left = mid + 1\n        else:\n            # update the right pointer to mid-1\n            right = mid - 1\n            \n    return left"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    n = len(arr)\n\n    # If the array is already sorted, there is no rotation required\n    if arr == sorted(arr):\n        return 0\n\n    # If the array has 2 or more elements, we can use the divide and conquer approach\n    if n > 1:\n        mid = n // 2\n        left_rotations = count_rotation(arr[:mid])\n        right_rotations = count_rotation(arr[mid:])\n\n        # If the left and right subarrays are sorted, we have a rotation\n        if left_rotations + right_rotations == n - 1:\n            return left_rotations + 1\n        else:\n            return max(left_rotations, right_rotations)\n\n    else:\n        return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    # If the array has only one element, return 0\n    elif n == 1:\n        return 0\n    # If the array has 2 elements, check if they are in descending order\n    elif n == 2:\n        if arr[0] >= arr[1]:\n            return 0\n        else:\n            return 1\n    # If the array has 3 elements, check if they are in descending order\n    elif n == 3:\n        if arr[0] >= arr[1] and arr[1] >= arr[2]:\n            return 0\n        elif arr[1] >= arr[0] and arr[0] >= arr[2]:\n            return 1\n        elif arr[2] >= arr[0] and arr[0] >= arr[1]:\n            return 1\n    # If the array has more than 3 elements, loop through each element to check if it's greater than the next element\n    else:\n        for i in range(n - 1):\n            if arr[i] >= arr[i + 1]:\n                count += 1\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Initialize two pointers, one starting at the beginning and the other at the end\n    left = 0\n    right = n - 1\n    # Initialize a flag to keep track of whether we have found a rotation\n    has_rotation = False\n    # Initialize the count of rotations to zero\n    count = 0\n    # Loop until we have found a rotation\n    while left < right:\n        # If the elements at the left and right pointers are not equal, it means that we have found a rotation\n        if arr[left]!= arr[right]:\n            has_rotation = True\n            # Count the number of rotations we have found\n            count += 1\n            # Calculate the new position of the left pointer\n            new_left = right\n            # Calculate the new position of the right pointer\n            new_right = left\n            # Move the left pointer to the right until it is equal to the right pointer\n            while arr[new_left] == arr[right]:\n                new_left -= 1\n            # Move the right pointer to the left until it is equal to the left pointer\n            while arr[new_right] == arr[left]:\n                new_right += 1\n            # Swap the elements at the new position of the left and right pointers\n            arr[left], arr[new_right] = arr[new_right], arr[left]\n            # Update the left pointer to the new position\n            left = new_left\n            # Update the right pointer to the new position\n            right = new_right\n    # If we have not found a rotation, increment the count\n    if not has_rotation:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if array is sorted or not\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n    # check if array is a palindrome or not\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            return 0\n    # if array is sorted and a palindrome, count the rotations\n    return n//2"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    def is_square(num):\n        '''\n        Helper function to check if a number is a perfect square or not.\n        '''\n        root = num ** 0.5\n        return root == int(root)\n\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    if is_square(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 2:\n        return False\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n is less than 2, then it is not a perfect square\n    if n < 2:\n        return False\n    # check if n is a perfect square using the formula sqrt(n) == int(sqrt(n))\n    # if it is, then n is a perfect square\n    return n == int(n**0.5) * int(n**0.5)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n\n    # check if the input is a positive integer\n    if type(n)!= int or n < 0:\n        return \"Input is not a positive integer.\"\n\n    # square root of n\n    sqrt_n = n ** 0.5\n\n    # check if the square root is an integer\n    if sqrt_n.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    i = 0\n    x = n\n    while i * i <= x:\n        if i * i == x:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n    \"\"\"\n    # check if the given number is a perfect square\n    for i in range(int(n**0.5)+1):\n        if n % i == 0 and i**2 == n:\n            return True\n    # if the given number is not a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    # check if the square of the number is greater than or equal to the number itself\n    if (n*n) >= n:\n        return True\n    \n    # otherwise, check if there exists a perfect square smaller than the square of the number\n    for i in range(1, int(n**0.5)+1):\n        if (i*i) <= n:\n            return True\n    \n    # if none of the above conditions are met, the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Initialize a variable to store the square root of n\n    sqrt_n = 0\n\n    # Calculate the square root of n using Newton's method\n    i = 0\n    while True:\n        # Calculate the next approximation for the square root of n\n        sqrt_n = (i * i + n / i) / 2\n\n        # If the difference between the square root and n is less than or equal to 0.00001,\n        # then the square root is within the desired precision\n        if abs(sqrt_n - n) <= 0.00001:\n            break\n\n        # If the next approximation is greater than sqrt_n, then n is a perfect square\n        if sqrt_n > n:\n            return True\n\n        # If the next approximation is less than sqrt_n, then n is not a perfect square\n        i += 1\n\n    # If the loop exits, n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Taking sqrt of n\n    sqrt_n = int(n ** 0.5) + 1\n\n    # Iterating from 1 to sqrt_n\n    for i in range(1, sqrt_n):\n        # If i * i is greater than n, then n is not a perfect square\n        if i * i > n:\n            return False\n        # If i * i is equal to n, then n is a perfect square\n        if i * i == n:\n            return True\n\n    # If the loop completes without finding a perfect square, n is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    import math\n    root = int(math.sqrt(n))\n    return root*root == n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return arr[0] % 2 == 0\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of numbers in the list is even.\"\n    else:\n        return \"The product of numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Base case: if the list is empty, return True\n    if not arr:\n        return True\n    \n    # Recursive case: calculate the product of all the elements in the list, and check whether it's even\n    product = is_product_even(arr[1:]) * arr[0]\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables to store the maximum sum and the index of the maximum sum\n    max_sum = lists[0][0]\n    max_sum_index = 0\n    max_sum_list = []\n\n    # loop through each list in the input list\n    for i in range(len(lists)):\n        # loop through each element in the current list\n        for j in range(len(lists[i])):\n            # add the current element to the running sum\n            running_sum = lists[i][j] + max_sum_list[-1] if max_sum_list else lists[i][j]\n            # check if the current running sum is greater than the maximum sum\n            if running_sum > max_sum:\n                # update the maximum sum and the index of the maximum sum\n                max_sum = running_sum\n                max_sum_index = i * len(lists[i]) + j\n                # update the maximum sum list with the current list\n                max_sum_list = lists[i]\n\n    # return the maximum sum list\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(i, len(lists)):\n                current_sum += lists[k][j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # initialize variables\n    max_sum = float('-inf')\n    max_list = None\n\n    # iterate over all lists\n    for lst in lists:\n        # initialize sum to zero\n        current_sum = 0\n\n        # iterate over all elements\n        for num in lst:\n            # add current element to sum\n            current_sum += num\n\n        # check if current sum is greater than max sum\n        if current_sum > max_sum:\n            # update max sum and list\n            max_sum = current_sum\n            max_list = lst\n\n    # return the max sum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Calculate the sum of the first list in the list of lists\n    first_list = lists[0][0]\n    sum_first_list = sum(first_list)\n    # Initialize the maximum sum and the list with the maximum sum\n    max_sum = sum_first_list\n    max_list = first_list\n    # Loop through the rest of the lists and calculate the sum of each list\n    for i in range(1, len(lists)):\n        current_list = lists[i]\n        sum_current_list = sum(current_list)\n        # If the sum of the current list is greater than the maximum sum, update the maximum sum and the list with the maximum sum\n        if sum_current_list > max_sum:\n            max_sum = sum_current_list\n            max_list = current_list\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > 0:\n                lists[i][j] += lists[i][j] // 2 # To ensure no negative numbers\n                lists[i][j] -= lists[i][j] // 3 # To ensure no negative numbers\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        sub_sum = sum(sublist)\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and its corresponding list\n    max_sum = float('-inf')\n    max_list = []\n\n    # Iterate through each list in the input list of lists\n    for lst in lists:\n        # Initialize the sum of the elements in the current list\n        current_sum = 0\n\n        # Iterate through each element in the current list\n        for num in lst:\n            # Add the current element to the sum\n            current_sum += num\n\n        # Check if the current sum is greater than the current maximum sum\n        if current_sum > max_sum:\n            # If it is, update the maximum sum and its corresponding list\n            max_sum = current_sum\n            max_list = lst\n\n    # Return the maximum sum and its corresponding list\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run_length = 0\n    start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run_length += 1\n            if run_length > max_run:\n                max_run = run_length\n                start = i - (run_length - 1)\n        else:\n            run_length = 0\n            \n    return test_str[start:start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = None\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        else:\n            # If the current run is longer than the maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run\n            current_run = 1\n\n    # If the last character was uppercase and the current run is longer than the maximum run, update the maximum run\n    if prev_char.isupper() and current_run > max_run:\n        max_run = current_run\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    upper_count = 0\n    upper_start = 0\n    current_upper_count = 0\n    current_run_length = 0\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            current_upper_count += 1\n            current_run_length += 1\n        else:\n            current_upper_count = 0\n            current_run_length = 1\n        if current_upper_count > upper_count:\n            upper_count = current_upper_count\n            upper_start = i - current_run_length + 1\n    return upper_start, upper_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    max_run = ''\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n            max_run = char\n        elif count == max_count and char > max_run:\n            max_run = char\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    current_run = 0\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            current_run += 1\n        else:\n            if uppercase_count > 0:\n                max_run = max(max_run, current_run)\n            uppercase_count = 0\n            current_run = 0\n    if uppercase_count > 0:\n        max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of current run and maximum run\n    current_run = 1\n    max_run = 0\n\n    # Iterate through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, increment the current run counter\n        if test_str[i].isupper():\n            current_run += 1\n        # If the current character is not uppercase and the current run counter is greater than the maximum run, update the maximum run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run counter to 1\n            current_run = 1\n\n    # If the last character was uppercase and the current run counter is greater than the maximum run, update the maximum run\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    max_count = 0\n    prev_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            count += 1\n            \n            if count > max_count:\n                max_count = count\n                prev_char = char\n        else:\n            count = 0\n    \n    return max_count, prev_char"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    start = 0\n    max_length = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_length:\n                max_length = count\n                start = i\n        else:\n            count = 0\n\n    return test_str[start:start+max_length]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    max_length = 0\n    current_run = 0\n    start_index = 0\n\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_length:\n                max_length = current_run\n                start_index = i - max_length + 1\n            current_run = 0\n\n    return test_str[start_index:start_index + max_length], max_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    run_length = 0\n    current_char = None\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, update the run length and current character\n        if char.isupper():\n            run_length += 1\n            current_char = char\n        # If the character is not uppercase, update the maximum run if the run length is greater than the previous maximum run\n        elif current_char is not None:\n            if run_length > max_run:\n                max_run = run_length\n            run_length = 0\n            current_char = None\n\n    # Update the maximum run if the last character was uppercase\n    if current_char is not None:\n        if run_length > max_run:\n            max_run = run_length\n\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Finds the first odd number in a list of numbers.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    raise ValueError(\"No odd numbers found in the list.\")"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a list of numbers.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list or None if there is no odd number.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If the list does not contain any odd numbers, it will return None.\n    '''\n    odd_num = None\n    for num in nums:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return odd_num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if test_tup[i] not in test_tup[:K]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k = set(K)\n    if all(k.issubset(elem) for elem in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a list of tuples and a value K and returns a boolean value indicating whether the tuples contain the value K or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Length of two tuples should be same.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return \"Error: The element at index \" + str(i) + \" in the second tuple is greater than or equal to the element at the same index in the first tuple.\"\n    return \"All elements of the second tuple are smaller than their corresponding element in the first tuple.\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the first and second tuple are the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through each element of the second tuple\n    for i in range(len(test_tup2)):\n        # Check if the element of the second tuple is smaller than its corresponding element in the first tuple\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    }
]