[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Convert both tuples to lists\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n\n    # Create an empty list to store the shared elements\n    shared_list = []\n\n    # Iterate through each element in both lists\n    for elem in test_tup1:\n        # Check if the element is present in the second list\n        if elem in test_tup2:\n            # If the element is present, append it to the shared list\n            shared_list.append(elem)\n\n    # Return the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    # Iterate through each element in the first tuple\n    for element in test_tup1:\n        # If the element is present in the second tuple, add it to the shared elements list\n        if element in test_tup2:\n            shared_elements.append(element)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Get the unique elements from both lists\n    unique_tup1 = list(set(test_tup1))\n    unique_tup2 = list(set(test_tup2))\n\n    # Find the intersection of the two lists\n    intersection = list(set(unique_tup1) & set(unique_tup2))\n\n    # Return the shared elements\n    return intersection"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n\n    # Loop through the first tuple and check if each element exists in the second tuple\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_set.add(elem)\n\n    # Convert the shared set to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    shared_elements = []\n    \n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n            \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a dictionary to store the count of each element in the given lists\n    count_dict1 = {}\n    count_dict2 = {}\n    \n    # Loop through the elements in the first list and update the count in the dictionary\n    for element in test_tup1:\n        if element in count_dict1:\n            count_dict1[element] += 1\n        else:\n            count_dict1[element] = 1\n    \n    # Loop through the elements in the second list and update the count in the dictionary\n    for element in test_tup2:\n        if element in count_dict2:\n            count_dict2[element] += 1\n        else:\n            count_dict2[element] = 1\n    \n    # Find the shared elements by comparing the counts in the dictionaries\n    shared_elements = [element for element in count_dict1 if element in count_dict2 and count_dict1[element] == count_dict2[element]]\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n < 9:\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return True\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return True\n        return True\n\nprint(is_not_prime(11))  # Output: True\nprint(is_not_prime(13))  # Output: False\nprint(is_not_prime(101)) # Output: True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is not prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    \n    # Use the fact that odd numbers are not primes\n    if n % 2 == 1:\n        return True\n    \n    # Check if n is divisible by any number between 3 and the square root of n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n        \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sieve_of_eratosthenes(n):\n    \"\"\"\n    Returns a list of prime numbers up to n using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    p = 2\n    while p**2 <= n:\n        if primes[p]:\n            for i in range(p**2, n+1, p):\n                primes[i] = False\n        p += 1\n    return [p for p in range(2, n+1) if primes[p]]\n\ndef is_not_prime(n):\n    \"\"\"\n    Identifies non-prime numbers up to n using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    primes = sieve_of_eratosthenes(n)\n    not_primes = []\n    for num in range(2, n+1):\n        if num not in primes:\n            not_primes.append(num)\n    return not_primes"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a min-heap of size n\n    max_heap = hq.nsmallest(n, nums)\n    # Pop the min elements from the heap to get the largest n integers\n    result = []\n    while max_heap:\n        result.append(max_heap.pop())\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        raise ValueError(\"n is greater than the length of the input list\")\n    \n    # Create a max-heap from the first n elements of the input list\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n    \n    # Remove all elements from the input list, and add the largest elements to the end of the list\n    for i in range(n, len(nums)):\n        if nums[i] > max_heap[0]:\n            # If the element is greater than the root of the max-heap, replace the root with the element and heapify it again\n            max_heap[0] = nums[i]\n            hq.heapify(max_heap)\n        else:\n            # If the element is less than or equal to the root, remove it from the max-heap and add it to the end of the list\n            hq.heappop(max_heap)\n            max_heap.append(nums[i])\n            hq.heapify(max_heap)\n    \n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n\n    # Convert the list to a heap\n    hq.heapify(nums)\n\n    # Remove the smallest n elements and return them\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [heap[i] for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap to store the n largest integers\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        elif num > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, num)\n\n    # Return the largest n integers from the heap\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # convert the list to a heap\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums)) # pop the largest element from the heap\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Using a min heap to get the largest n elements\n    max_heap = [-num for num in nums]\n    heapq.heapify(max_heap)\n\n    # Returning the n largest elements in descending order\n    return [num for num in max_heap if max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the input list to a min heap\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    # remove the smallest element from the heap and append it to the result list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    # Build max heap from first n elements of nums\n    for i in range(n):\n        heapq.heappush(heap, -nums[i])\n    # Pop elements from heap and add to result list until heap is empty\n    result = []\n    while heap:\n        result.append(-heapq.heappop(heap))\n    return result[::-1]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Check if the first bit is set to 1 in x\n    if x & 1 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        while x & 1 == 0:\n            x >>= 1\n        if x == 1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if the x is a power of 2\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x)[2:]!= bin(x)[2:].replace('0b', '')\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Using bitwise AND operator to check if the numbers differ at one bit position only\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the two numbers into binary strings\n    binary_str1 = bin(x)[2:]\n    binary_str2 = bin(x)[2:]\n\n    # Remove the first zero if any in the binary string\n    if binary_str1[0] == '0':\n        binary_str1 = binary_str1[1:]\n\n    if binary_str2[0] == '0':\n        binary_str2 = binary_str2[1:]\n\n    # Compare the binary strings and return True if they differ at one bit position only, else False\n    return binary_str1!= binary_str2"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the binary representation of the number to a list of bits\n    binary_str = bin(x)[2:]\n    \n    # Calculate the number of bits required to represent the binary representation of the number\n    num_bits = len(binary_str)\n    \n    # Calculate the number of one-bits in the binary representation of the number\n    one_bits = binary_str.count('1')\n    \n    # If the difference between the number of one-bits in the binary representation and the number of bits in the binary representation is 1, \n    # then the two numbers differ at one bit position only\n    if num_bits - one_bits == 1:\n        return True\n    \n    # Otherwise, the two numbers differ at one bit position only if both numbers have the same number of one-bits in their binary representation\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    diff_bit = 0\n    # Find the position of the differing bit\n    for i in range(32):\n        if (x >> i) & 1!= (x >> (i + 1)) & 1:\n            diff_bit = i\n            break\n\n    # Check if the bit position exists or not\n    if diff_bit!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern for finding all words which are at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all matches of the pattern in the given text\n    matches = pattern.findall(text)\n    # Print all matches\n    print(matches)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n\n    # Find all matches in the text using the pattern\n    matches = pattern.findall(text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long.\n    '''\n    # Using regular expressions to find all words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # define a regular expression pattern to match words at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    \n    # find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    \n    # return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words with less than 4 characters\n    words = list(filter(lambda x: len(x) >= 4, words))\n    # Join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # find all words in the string\n    long_words = [word for word in words if len(word) >= 4] # filter words with length greater than or equal to 4\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Initialize the minimum number of rotations required as infinity\n    min_rot = float('inf')\n    # Traverse all possible rotations of the string\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate the rotation of the substring\n            rot_str = str[i:j+1]\n            # If the length of the rotated substring is same as the length of the original string, then increment the count of rotations required\n            if len(rot_str) == n:\n                min_rot = min(min_rot, n//2)\n    # If the length of the original string is same as the length of the last substring, then increment the count of rotations required\n    if len(str) == n:\n        min_rot = min(min_rot, n//2)\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # check if the string is already sorted or has a single character\n    if str == sorted(str) or str == ''.join(sorted(str)):\n        return 0\n    # check if the string is already sorted in reverse\n    elif str == sorted(str, reverse=True):\n        return 0\n    # if the string is not already sorted, then we can use two pointers to find the minimum number of rotations\n    else:\n        i = 0\n        j = n-1\n        # initialize the minimum number of rotations found\n        min_rotations = 0\n        # while i is less than j\n        while i < j:\n            # if the characters at i and j are not equal\n            if str[i]!= str[j]:\n                # calculate the distance between the two pointers\n                distance = j - i\n                # if the distance is less than the minimum number of rotations found so far, update the minimum number of rotations found\n                if distance < min_rotations:\n                    min_rotations = distance\n                # if the distance is greater than the minimum number of rotations found so far, then we can rotate the string by moving the pointer closer to the center of the string\n                elif distance == min_rotations:\n                    # move the pointer closer to the center of the string\n                    if str[i] < str[j]:\n                        i += 1\n                    else:\n                        j -= 1\n        # if the minimum number of rotations found so far is greater than 0, then the string can be rotated to get the same string\n        if min_rotations > 0:\n            # initialize the number of rotations performed\n            rotations = 0\n            # while the two pointers i and j are not at the same index\n            while i!= j:\n                # if the characters at i and j are not equal\n                if str[i]!= str[j]:\n                    # calculate the distance between the two pointers\n                    distance = j - i\n                    # if the distance is greater than the minimum number of rotations found so far, then rotate the string by moving the pointer closer to the center of the string\n                    if distance > min_rotations:\n                        # move the pointer closer to the center of the string\n                        if str[i] < str[j]:\n                            i += 1\n                        else:\n                            j -= 1\n                        # increment the number of rotations performed\n                        rotations += 1\n                # if the characters at i and j are equal, then the string is already the same\n                else:\n                    break\n            # if the loop completes without finding any rotations, then we can return 0\n            if rotations == 0:\n                return 0\n            # otherwise, return the number of rotations performed\n            else:\n                return rotations\n        # otherwise, return 0\n        else:\n            return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Step 1: Sort the string in ascending order\n    str_sorted = sorted(str)\n    \n    # Step 2: Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Step 3: Initialize a boolean variable 'is_palindrome' to keep track of whether the string is a palindrome or not\n    is_palindrome = True\n    # Step 4: Iterate over the sorted string\n    for i in range(n):\n        # If the current character is not the same as the next character, then the string is not a palindrome\n        if str_sorted[i]!= str_sorted[i+1]:\n            is_palindrome = False\n            break\n    \n    # If the string is a palindrome, then return 0\n    if is_palindrome:\n        return 0\n    \n    # Step 5: Initialize a dictionary to store the frequency of each character in the sorted string\n    freq_sorted = {}\n    for char in str_sorted:\n        if char in freq_sorted:\n            freq_sorted[char] += 1\n        else:\n            freq_sorted[char] = 1\n    \n    # Step 6: Initialize a variable'min_rot' to store the minimum number of rotations required to get the same string\n    min_rot = n\n    # Step 7: Iterate over the keys in the frequency dictionary and check if the frequency of the current key is greater than 1\n    for key in freq_sorted:\n        if freq_sorted[key] > 1:\n            # Step 8: Calculate the minimum number of rotations required to get the same string if we rotate the string\n            # Step 9: Update the minimum number of rotations if the current rotation is less than the minimum number found so far\n            rotations = n-freq_sorted[key]\n            if rotations < min_rot:\n                min_rot = rotations\n    \n    # Step 10: Return the minimum number of rotations required to get the same string\n    return min_rot+1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n\n    # Initialize a boolean array to store the last character of each substring\n    last_char = [False] * n\n\n    # Traverse through the string and mark the last character for each substring\n    for i in range(n):\n        last_char[i] = str[i]\n\n    # Traverse through the string again and find the first occurrence of each character\n    for i in range(n):\n        if last_char[i]:\n            j = i + 1\n            while j < n and str[j] == str[i]:\n                j += 1\n            last_char[i] = False\n\n    # Iterate through the string and find the minimum number of rotations required\n    for i in range(n):\n        if last_char[i]:\n            min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    # Convert the string to list of characters\n    lst = list(str)\n    \n    # Find the maximum number of rotations required to get the same string\n    for i in range(len(lst)):\n        # Find the smallest element in the list after the rotation\n        j = (i+1) % len(lst)\n        while j!= i and lst[j] >= lst[i]:\n            j = (j+1) % len(lst)\n        \n        # Update the maximum number of rotations required\n        if j!= i:\n            k = i\n            while k!= j:\n                lst[k], lst[j] = lst[j], lst[k]\n                k = (k+1) % len(lst)\n                j = (j+1) % len(lst)\n    \n    # Find the minimum number of rotations required to get the same string\n    min_rot = 0\n    for i in range(len(lst)):\n        # Find the smallest element in the list after the rotation\n        j = (i+1) % len(lst)\n        while j!= i and lst[j] >= lst[i]:\n            j = (j+1) % len(lst)\n        \n        # Update the minimum number of rotations required\n        if j!= i:\n            min_rot = max(min_rot, i-j)\n    \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Convert the given string to a set to remove duplicates\n    str_set = set(str)\n\n    # Check if the length of the set is equal to the length of the string\n    if len(str_set) == len(str):\n        return 0\n    \n    # Sort the string alphabetically\n    sorted_str = ''.join(sorted(str))\n\n    # Check if the sorted string is equal to the string\n    if sorted_str == str:\n        return 0\n    \n    # Count the number of rotations required to get the same string\n    count = 0\n    while sorted_str!= str:\n        count += 1\n        str = sorted_str\n    \n    # Return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the keys in the dictionary\n    # the keys are the characters in the string\n    for char in char_count:\n        # if the count of the character is greater than 1\n        # then we need to rotate the string to get the same count of the character\n        if char_count[char] > 1:\n            # calculate the number of rotations required to get the same count of the character\n            # we can use the fact that a string of length n can be rotated to a string of length n using only one character\n            rotations = char_count[char] // (len(str) // 2)\n            # if the count of the character is not a multiple of the number of rotations required\n            # then we need to rotate the string one more time to get the same count of the character\n            if char_count[char] % (len(str) // 2)!= 0:\n                rotations += 1\n            \n            return rotations\n\n    # if no rotations are required, return 0\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = float('inf')\n\n    for i in range(n//2):\n        # Check if the string can be reversed\n        if str[i:n//2] == str[n//2:n]:\n            # Reverse the first half of the string\n            temp = str[:n//2] + str[n//2:n]\n            # Check if the reversed string is equal to the original string\n            if temp == str:\n                # Update the minimum rotations count\n                min_rotations = min(min_rotations, n//2 - i)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n        str (str): A string to be rotated.\n\n    Returns:\n        int: The minimum number of rotations required to get the same string.\n\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Initialize a dictionary to store the frequency of each character after rotating\n    new_freq = {}\n\n    # Loop through each character in the string and rotate it\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_char = chr(((ord(str[i]) - 65 + 3) % 26) + 65)\n        else:\n            new_char = chr(((ord(str[i]) - 97 + 3) % 26) + 97)\n\n        if new_char in new_freq:\n            new_freq[new_char] += char_freq[str[i]]\n        else:\n            new_freq[new_char] = char_freq[str[i]]\n\n    # Find the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n    for new_freq_char, new_freq_count in new_freq.items():\n        if new_freq_char in char_freq and new_freq_count == char_freq[new_freq_char]:\n            min_rotations = min(min_rotations, abs(ord(str[0]) - ord(new_freq_char)))\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                # Found a rotation of length i+1\n                min_rotations = min(min_rotations, i+1)\n\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string s and a character ch as input. It removes the first and last occurrence of ch from the string and returns the updated string.\n    '''\n    if not s:\n        return s\n    if s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    if s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    return s[0] + remove_Occ(s[1:], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input and returns a new string with the first and last occurrence of the character removed.\n    '''\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find index of first occurrence of character\n    index = s.find(ch)\n    # If character found, remove it and the next character\n    while index!= -1:\n        s = s[:index] + s[index+1:]\n        index = s.find(ch)\n    # Find index of last occurrence of character\n    index = s.rfind(ch)\n    # If character found, remove it and the previous character\n    while index!= -1:\n        s = s[:index] + s[index+1:]\n        index = s.rfind(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if len(s) == 0:\n        return s\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    # check if the character to remove is not in the string\n    if ch not in s:\n        return \"Character not found in the string\"\n    # remove the first occurrence of the character\n    if s.startswith(ch):\n        return s[s.find(ch) + 1:]\n    # remove the last occurrence of the character\n    elif s.endswith(ch):\n        return s[:s.rfind(ch)]\n    # if the character is not the first or last occurrence, remove both occurrences\n    else:\n        return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0:\n        return \"No occurrence of character found in the string\"\n    else:\n        return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence of the given character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Removing last occurrence of the given character\n    if s.find(ch,len(s)-1) == len(s)-1:\n        s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of the character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Remove last occurrence of the character\n    if s.find(ch) == len(s) - 1:\n        s = s[:len(s) - 1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)!= -1:\n        if s.count(ch) == 1:\n            return s.replace(ch, \"\")\n        else:\n            return s[:s.find(ch) + 1] + s[s.find(ch) + len(ch):]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Sort the rows of the matrix in descending order of their sums\n    for i in range(n):\n        M[i].sort(reverse=True)\n    # Merge the sorted rows of the matrix\n    for i in range(n-1):\n        for j in range(i+1, n):\n            M[i].extend(M[j])\n            del M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Calculate the sum of each row\n    sums = [sum(row) for row in M]\n\n    # Sort the matrix in ascending order of the sums\n    sorted_M = sorted(M, key=lambda x: sums[M.index(x)])\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a variable to store the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the row_sums in ascending order\n    row_sums.sort()\n    # Iterate through the matrix and assign the sum of each row to its appropriate position in the sorted row_sums\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            M[i][j] = row_sums[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    # Initialize variables to keep track of the current row and the index of the maximum element\n    current_row = 0\n    max_index = 0\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Initialize variables to keep track of the current element and the sum of the current row\n        current_element = M[i][current_row]\n        current_sum = current_element\n        # Loop through the remaining elements in the current row\n        for j in range(len(M[0]) - current_row - 1):\n            # If the current element is greater than the maximum element, update the maximum element and its index\n            if M[i][j] > current_element:\n                current_element = M[i][j]\n                max_index = j\n            # Add the current element to the sum of the current row\n            current_sum += current_element\n        # Update the current row to the next row\n        current_row += 1\n    # Swap the maximum element with the last element in the last row\n    M[max_index][-1], M[max_index][current_row - 1] = M[max_index][current_row - 1], M[max_index][-1]\n    # Recursively sort the sub-matrix below the diagonal\n    for i in range(len(M)):\n        for j in range(current_row, len(M[0])):\n            if i == max_index:\n                sort_matrix(M[0:i, :j])\n            elif j == current_row:\n                sort_matrix(M[i+1:, :j])\n            else:\n                sort_matrix(M[i+1:, j:])"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a dictionary to store the sum of each row and its index\n    row_sums = {}\n    for i in range(len(M)):\n        row_sums[i] = sum(M[i])\n    \n    # Sort the dictionary based on the sum of each row\n    sorted_rows = sorted(row_sums.items(), key=lambda x: x[1])\n    \n    # Create a new matrix with the sorted rows\n    sorted_M = []\n    for i in range(len(M)):\n        sorted_M.append(M[sorted_rows[i][0]])\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Step 1: Initialize a list to store the row sums\n    row_sums = []\n    for i in range(len(M)):\n        row_sums.append(sum(M[i]))\n    \n    # Step 2: Use the built-in sort() function to sort the row_sums list in ascending order\n    row_sums.sort()\n    \n    # Step 3: Create a new list to store the sorted matrix\n    sorted_matrix = []\n    for i in range(len(M)):\n        sorted_row = []\n        for j in range(len(M[0])):\n            # Calculate the sum of the elements of the i-th row of the matrix\n            current_sum = sum([M[i][k] for k in range(len(M[0])) if k!= j])\n            \n            # Add the element to the sorted row and continue iterating over the matrix\n            sorted_row.append(M[i][j])\n            \n            # Step 4: Use the binary search algorithm to find the index of the element in the row_sums list\n            index = bisect.bisect_left(row_sums, current_sum)\n            \n            # Step 5: Move the element to the correct position in the sorted row\n            row_sums[index] -= current_sum\n            sorted_matrix[i].insert(j, M[i][j])\n            \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        M[i].sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            M[i][j], M[j][i] = M[j][i], M[i][j]\n    for i in range(n):\n        M[i] = list(map(int,''.join(map(str, M[i]))))\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a new matrix to store the sorted matrix\n    sorted_M = []\n\n    # Loop through each row in the matrix\n    for row in M:\n        # Create a new row to store the sum of the current row\n        sum_row = []\n\n        # Loop through each element in the row\n        for num in row:\n            # Append the current element to the sum row\n            sum_row.append(num)\n\n        # Sort the sum row in ascending order\n        sum_row.sort()\n\n        # Reverse the sum row so that it is sorted in descending order\n        sum_row.reverse()\n\n        # Append the sorted sum row to the sorted matrix\n        sorted_M.append(sum_row)\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a copy of the matrix to avoid modifying it\n    N = len(M)\n    M_sorted = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            M_sorted[i][j] = M[i][j]\n    # sort each column\n    for j in range(N):\n        col = [M_sorted[i][j] for i in range(N)]\n        col.sort()\n        for i in range(N):\n            M_sorted[i][j] = col[i]\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M_sorted]\n    # sort the matrix in ascending order by row sums\n    M_sorted.sort(key=lambda row: row_sums.index(sum(row)))\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Determine the size of the matrix\n    n = len(M)\n    # Initialize a new matrix to store the sorted matrix\n    sorted_M = [[0] * n for i in range(n)]\n    # Iterate over the matrix rows and columns\n    for i in range(n):\n        for j in range(n):\n            # Calculate the sum of the row and column\n            row_sum = sum(M[i])\n            col_sum = sum(M[j])\n            # If the sum of the row is smaller than the sum of the column, swap the rows and columns\n            if row_sum < col_sum:\n                sorted_M[i][j] = M[i][j]\n                sorted_M[j][i] = M[j][i]\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5 * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Formula for Volume of a Triangular Prism\n    V = (1/3) * l * b * h\n\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = l * b * h\n    print(\"The volume of the prism is: {:.2f}\".format(volume))"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the prism\n    area = (l * b) / 2\n    # Calculate the volume of the prism\n    volume = area * h\n    # Return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula to find volume of a triangular prism\n    volume = (l*b*h)/12\n    \n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = re.compile(r'[a-z][a-z0-9]*_?[a-z]')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<=[a-z])[A-Z]|(?<=\\d)[a-z]|(?<=\\w)_|(?<=_)[a-z]|(?<=_)[A-Z]\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match lowercase letters followed by an underscore\n    pattern = r'[a-z_]+'\n    \n    # Use the re.search() function to search for a match in the input string\n    result = re.search(pattern, text)\n    \n    # If a match is found, return True, otherwise return False\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<![a-z])[a-z](?=[a-z]|_)+')\n    matches = pattern.findall(text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define the regular expression pattern to match sequences of lowercase letters\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])'\n    \n    # Use the re.search() method to search for the pattern in the input string\n    matches = re.search(pattern, text)\n    \n    # If the pattern is found, return True\n    if matches:\n        return True\n    \n    # If the pattern is not found, return False\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z])(?=[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # convert both strings to lists\n    list1 = list(string1)\n    list2 = list(string2)\n\n    # create a new list to store the new string without duplicates\n    new_list = []\n\n    # iterate through the first string\n    for char in list1:\n        # check if the character is not in the second string\n        if char not in list2:\n            # append the character to the new list\n            new_list.append(char)\n\n    # convert the new list to a string\n    new_string = ''.join(new_list)\n\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the string to a list of integers\n    string_list = list(string)\n\n    # Iterate over the string and check if the character is present in the second string\n    for i in range(NO_OF_CHARS):\n        if string_list[i] in string:\n            # If the character is present, remove it from the list\n            string_list.pop(i)\n            # Decrement the index\n            i -= 1\n\n    # Convert the list of integers back to a string\n    result = ''.join(map(chr, string_list))\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in range(NO_OF_CHARS):\n        if char in string:\n            string = string.replace(chr(char), \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a list of characters to remove from the string\n    remove_list = list(string)\n    # iterate through the characters in the string\n    for i in range(len(string)):\n        # check if the current character is present in the remove_list\n        if string[i] in remove_list:\n            # remove the character from the string\n            string = string.replace(string[i], '', 1)\n    # return the modified string\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    This function takes two strings as input, a string to be removed from and a string containing the characters to be removed.\n    It returns the modified string where all the characters present in the remove_chars string are removed from the string.\n    '''\n    string_list = list(string)\n    for char in remove_chars:\n        if char in string_list:\n            string_list.remove(char)\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    if len(string1)!= len(string2):\n        raise ValueError(\"The two strings should have the same length.\")\n\n    result = []\n    for char in string1:\n        if char not in string2:\n            result.append(char)\n\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the strings to lists\n    list1 = list(string)\n    list2 = list(string.replace(' ', ''))\n    # Find the common characters between both lists\n    common_chars = set(list1) & set(list2)\n    # Create a new list with the characters from the first string that are not in common\n    new_list = [char for char in list1 if char not in common_chars]\n    # Convert the new list back to a string and return it\n    return ''.join(new_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Create a list of characters to remove from the first string\n    chars_to_remove = []\n    for i in range(NO_OF_CHARS):\n        if chr(i) in string:\n            chars_to_remove.append(chr(i))\n\n    # Remove the characters from the first string\n    for char in chars_to_remove:\n        string = string.replace(char, '')\n\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    return [char for char in string if char not in char_set]\n\ndef main():\n    string1 = input(\"Enter the first string: \")\n    string2 = input(\"Enter the second string: \")\n    result = str_to_list(string1)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = [chr(i) for i in range(NO_OF_CHARS)]\n    list_string = list(set(list_string) - set(string))\n    return ''.join(list_string)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the elements of the array\n    element_dict = {}\n    for num in arraynums:\n        # Check if the number is already in the dictionary\n        if num in element_dict:\n            return True\n        else:\n            # If the number is not in the dictionary, add it to the dictionary\n            element_dict[num] = True\n    # If the loop completes without finding any duplicate elements, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store unique elements\n    unique_dict = {}\n    # loop through the array\n    for num in arraynums:\n        # check if the number is already in the dictionary\n        if num in unique_dict:\n            # if it is, return True (indicating duplicate)\n            return True\n        # if it's not, add it to the dictionary\n        else:\n            unique_dict[num] = True\n    # if no duplicates were found, return False (indicating no duplicates)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n\n    # iterate over the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n\n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store the unique elements\n    unique_set = set()\n\n    # iterate over the elements in the array\n    for num in arraynums:\n        # check if the number is already in the set\n        if num in unique_set:\n            # if it is, return True\n            return True\n        # otherwise, add the number to the set\n        else:\n            unique_set.add(num)\n\n    # if we reach here, there were no duplicates in the array\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # Create a dictionary to store the elements and their frequencies\n    freq_dict = {}\n\n    # Iterate through the array and count the frequencies of each element\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Iterate through the dictionary and check if any element has a frequency greater than 1\n    for num, freq in freq_dict.items():\n        if freq > 1:\n            return True\n\n    # If no element has a frequency greater than 1, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # Create a set to store the unique elements of the array\n    unique_elements = set(arraynums)\n\n    # If the length of the set is equal to the length of the array, then there are no duplicate elements\n    if len(unique_elements) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Check for duplicate elements by iterating over the array and keeping track of the indices of each element\n    indices = {}\n    for i, num in enumerate(arraynums):\n        if num in indices:\n            return True\n        else:\n            indices[num] = i\n    \n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 13 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the given number is even or odd\n    if x % 2 == 0: \n        return \"The number is not a woodball.\"\n    else: \n        return \"The number is a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1 or x > 999:\n        return False\n    else:\n        sum = 0\n        while x > 0:\n            digit = x % 10\n            sum += digit ** 3\n            x //= 10\n        return sum == x"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [0, 1, 2, 3, 4]:\n        return True\n    elif x in [5, 6, 7, 8, 9]:\n        return True\n    elif x in [10, 11, 12, 13, 14]:\n        return True\n    elif x in [15, 16, 17, 18, 19]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1000:\n        return False\n    elif x > 1000 and x < 10000:\n        return True\n    elif x > 10000 and x < 100000:\n        return False\n    elif x > 100000 and x < 1000000:\n        return True\n    elif x > 1000000:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x/2)\n    else:\n        return not is_woodall((x*3)//2)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Find the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the reverse is one less than twice the original number\n    if reverse - num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    reversed_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # check if the reversed number is one less than twice the original number\n    if reversed_num - num == 2*(num - 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = (reverse * 10) + (temp % 10)\n        temp //= 10\n    return num - 1 == reverse * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # get the reverse of the given number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # check if the reverse is one less than twice the original number\n    if rev_num % 2 == 1 and num % 2 == 1:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    if num == rev_num and (num - 1) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse_num = 0\n    while num > 0:\n        digit = num % 10\n        reverse_num = reverse_num * 10 + digit\n        num = num // 10\n\n    if reverse_num < num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # Calculate the reverse of the reverse of the original number\n    rev_rev_num = str(int(rev_num) * 2)[::-1]\n    # Check if the original number is one less than twice its reverse\n    if int(num) == int(rev_rev_num) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    if rev_num < num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    \n    if num - reverse == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revnum = 0\n    while num > 0:\n        rem = num % 10\n        revnum = revnum * 10 + rem\n        num = num // 10\n    return num!= 2 * revnum"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    # Convert the list of digits to a set to remove duplicates\n    unique_digits = set(arr)\n    # Sort the unique digits in descending order\n    sorted_digits = sorted(unique_digits, reverse=True)\n    # Calculate the maximum possible number based on the sorted digits\n    max_num = 0\n    for digit in sorted_digits:\n        max_num *= 10\n        max_num += int(digit)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # create an empty list to store the digits\n    digits = []\n    # loop through the array of digits\n    for digit in arr:\n        # convert the digit to integer and append it to the digits list\n        digits.append(int(digit))\n    # sort the digits list in descending order\n    digits.sort(reverse=True)\n    # initialize the largest_num variable to 0\n    largest_num = 0\n    # loop through the sorted digits list\n    for digit in digits:\n        # append the digit to the largest_num variable\n        largest_num += digit\n        # check if the largest_num variable is greater than 0\n        if largest_num > 0:\n            # return the largest_num variable\n            return largest_num\n    # if the loop completes without finding a number greater than 0, return 0\n    return 0"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) :\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j] + arr[j+1] > max_num:\n                max_num = arr[j] + arr[j+1]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    arr.sort(reverse=True) # Sorting the array in descending order \n    result = [] # Creating an empty list to store the final result \n    temp = 0 # Creating a temporary variable to store the current number \n    carry = 1 # Starting the carry variable at 1 \n\n    for i in arr: # Iterating through the digits of the input number \n        temp = carry*i + temp \n        carry = temp // 10 \n        result.append(temp % 10) # Appending the current digit to the result list \n\n    if carry > 0: # If there is still a carry left, add it to the result list \n        result.append(carry) \n\n    return result "
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n\n    # Function to find the maximum number that can be formed with the given list of digits\n    def find_max(arr) : \n        max_num = 0\n        for i in range(len(arr)) : \n            for j in range(i+1, len(arr)) : \n                num = int(''.join(str(arr[i])+str(arr[j])))\n                if num > max_num : \n                    max_num = num\n        return max_num\n\n    # Function to check if a given number is valid\n    def is_valid(num, arr) : \n        for i in arr : \n            if num % i == 0 : \n                return False\n        return True\n\n    # Sort the given list of digits in ascending order\n    arr.sort()\n\n    # Call the find_max function and return the result\n    return find_max(arr)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed using those digits.\n    '''\n    arr.sort(reverse=True) # Sorting the digits in descending order\n    max_num = 0\n    for i in range(len(arr)) :\n        max_num += arr[i] * (10**i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] ** (len(arr) - i - 1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            num = int(arr[i]) * 10**len(arr) + int(arr[j])\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                max_num = max(max_num, arr[i]*1000 + arr[j]*100 + arr[k])\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if both the numbers have opposite signs\n    if x < 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    elif x > 0 and y > 0:\n        return \"Both numbers have opposite signs.\"\n    elif x < 0 and y > 0:\n        return \"The first number has opposite sign.\"\n    else:\n        return \"The second number has opposite sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs.\n    If they have the same sign, the function returns False.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return \"Both numbers have the same sign.\"\n    elif x <= 0 and y <= 0:\n        return \"Both numbers have the same sign.\"\n    else:\n        return \"One number has negative sign and the other number has positive sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and checks if they have opposite signs or not.\n    '''\n\n    # if the signs of x and y are different then they have opposite signs\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Check whether two integers have opposite signs or not.\n    '''\n    # check if signs are opposite\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x > 0 and y < 0) or (x < 0 and y > 0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x > 0 and y > 0) or (x < 0 and y < 0):\n        return False\n    elif(x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Returns True if the given two integers have opposite signs, False otherwise.\n    \"\"\"\n    return x*y < 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n\n    num_octagonal = 0\n    i = 1\n    while i < n:\n        num_octagonal += i * (8 - i) // 2\n        i += 1\n\n    return num_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Calculate the square of the nth number\n    nth_square = n * n\n    # Calculate the sum of the cubes of even numbers from 1 to n/2\n    even_cubes = sum(i**3 for i in range(1, n//2+1, 2))\n    # Check if the sum of the squares of odd numbers from 1 to n/2 is equal to the square of the nth number\n    if even_cubes + (n//2)**2 == nth_square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    while a * a * a < 2 * n:\n        a += 1\n    return a * a * a - n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def is_valid(x):\n        \"\"\"\n        Check if the given number is valid for octagonal number.\n        \"\"\"\n        if x <= 0:\n            return False\n        num = x * (3**0.5) + 0.5\n        return int(num) ** 2 == x\n\n    def find_next_valid(x):\n        \"\"\"\n        Find the next valid number after the given number.\n        \"\"\"\n        while not is_valid(x + 1):\n            x += 1\n        return x\n\n    # find the first valid octagonal number\n    x = 1\n    while not is_valid(x):\n        x += 1\n\n    # find the nth octagonal number\n    for _ in range(n - 1):\n        x = find_next_valid(x)\n\n    return x"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # calculate the square of the number\n    square = n ** 2\n\n    # add the difference of squares of even and odd numbers\n    sum = (2 * square) + ((4 * square) - (4 * (square % 2)))\n\n    # if the sum is odd, the number is octagonal\n    if sum % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        a = 1\n        b = 8\n        for i in range(2, n+1):\n            a += 1\n            b += 8\n            if (a**2 + b**2) == i**2:\n                return i\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n**2 + 1\n\ndef nth_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal_list = []\n    for i in range(1, n+1): \n        octagonal_list.append(is_octagonal(i)) \n    return octagonal_list[n-1]\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th octagonal number is: {nth_octagonal(n)}\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # base case\n    if n <= 0:\n        return None\n    \n    # calculate the nth octagonal number using the formula:\n    # (n^2 + n)/2\n    return ((n**2 + n)/2).is_integer()"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = [1, 12, 42, 132, 432, 1432, 4532]\n    if n in range(1, 8):\n        return octagonal[n-1]\n    else:\n        return None"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of each substring\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            # Check if the substring has the sum of digits equal to its length\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count[substring] += 1\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with a given length\n    count_dict = defaultdict(int)\n\n    # Loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits in the substring is equal to the length of the substring\n            if sum(int(x) for x in s[i:j+1]) == len(s[i:j+1]):\n                # Increment the count of substrings with a given length\n                count_dict[len(s[i:j+1])] += 1\n\n    # Return the count of substrings with the given length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n\n    # create a dictionary to store the count of substrings with sum of digits equal to their length\n    digit_sum_count = defaultdict(int)\n\n    # iterate over all possible substrings of the input string s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # calculate the sum of digits in the substring\n            digit_sum = sum(int(d) for d in s[i:j+1])\n            # add 1 to the count of substrings with sum of digits equal to their length\n            digit_sum_count[digit_sum] += 1\n\n    # return the count of substrings with sum of digits equal to their length\n    return sum(1 for count in digit_sum_count.values() if count > 1)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Define a dictionary to store the sum of digits for each substring\n    digit_sum_dict = defaultdict(int)\n    # Loop through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits in the substring\n            digit_sum = sum([int(digit) for digit in s[i:j]])\n            # Add the substring to the dictionary\n            digit_sum_dict[s[i:j]] = digit_sum\n    # Return the number of substrings with the sum of digits equal to their length\n    return len(digit_sum_dict)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize the count dictionary\n    count = defaultdict(int)\n\n    # Loop through the string\n    for i in range(len(s)):\n        # Initialize the current substring\n        curr = s[i]\n\n        # Loop through the remaining characters\n        for j in range(i+1, len(s)+1):\n            # Add the current character to the current substring\n            curr += s[j-1]\n\n            # Check if the current substring is a palindrome\n            if curr == curr[::-1]:\n                # Check if the sum of digits is equal to its length\n                if sum(int(digit) for digit in curr) == len(curr):\n                    # Update the count dictionary\n                    count[curr] += 1\n\n    # Return the count dictionary\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the count of substrings with different sums of digits\n    count = defaultdict(int)\n\n    # loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # get the substring and calculate the sum of digits\n            substring = s[i:j]\n            sum_of_digits = sum(int(digit) for digit in substring)\n\n            # add the count of substrings with the given sum of digits to the dictionary\n            count[sum_of_digits] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings for each length of substring\n    count_dict = defaultdict(int)\n\n    # Loop through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Extract the substring\n            substring = s[i:j+1]\n\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in substring)\n\n            # Check if the substring has a sum of digits equal to its length\n            if substring_sum == len(substring):\n                # Increment the count in the dictionary\n                count_dict[len(substring)] += 1\n\n    # Return the dictionary with the counts\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of each substring with a digit sum of the length\n    count = defaultdict(int)\n\n    # loop through each character in the string and count the substrings with a digit sum of the length\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the substring is of length greater than 1 and has only digits\n            if j-i > 1 and s[i:j].isdigit():\n                # add the count to the dictionary for the substring\n                count[j-i] += 1\n\n    # return the count of substrings with a digit sum of the length\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a defaultdict to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n\n    # loop through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[j-i] += 1\n\n    # return the count of substrings with sum of digits equal to their length\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest variable to the first element of the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for x in xs[1:]:\n        # check if x is smaller than smallest\n        if x < smallest:\n            # if x is smaller, update smallest variable to x\n            smallest = x\n    # return the smallest number found\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = smallest_num(xs[1:])\n        if xs[0] < smallest:\n            return xs[0]\n        else:\n            return smallest_num(xs[1:])"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = smallest_num(xs[1:])\n        if xs[0] < smallest:\n            return xs[0]\n        else:\n            return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                diff = max(diff, test_list[i][1] - test_list[j][1])\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the maximum difference to be the first element of the list\n    max_diff = test_list[0][1] - test_list[0][0]\n\n    # Iterate over the remaining elements of the list\n    for i in range(1, len(test_list)):\n        # Calculate the difference between the current element and the next element\n        diff = test_list[i][1] - test_list[i][0]\n\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n\n    # Loop through the list of tuples\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the pairs\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            # Update the max_diff variable if necessary\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][1] - test_list[j][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the tuple list in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference and the current difference\n    max_diff = test_list[1] - test_list[0]\n    cur_diff = test_list[1] - test_list[0]\n\n    # Traverse through the sorted list\n    for i in range(2, len(test_list)):\n        # Update the current difference if the next element is greater\n        cur_diff = test_list[i] - test_list[i-1]\n        # Update the maximum difference if the current difference is greater\n        if cur_diff > max_diff:\n            max_diff = cur_diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as input and returns the maximum difference between available pairs.\n\n    Parameters:\n    test_list (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n    int: The maximum difference between available pairs in the input tuple list.\n    '''\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples based on the second element of the tuples\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize variables to keep track of the current minimum and maximum difference found so far\n    current_min = test_list[0][1]\n    current_max = test_list[0][1]\n\n    # Iterate over the sorted list of tuples\n    for i in range(1, len(test_list)):\n        # Update the current minimum and maximum difference if we find a pair whose difference is greater than the current maximum\n        if test_list[i][1] - test_list[i-1][1] > current_max:\n            current_min = test_list[i][1]\n            current_max = test_list[i][1] - test_list[i-1][1]\n\n    return current_max"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: if the list has at least one element,\n    # flatten it and add its sum to the recursive sum\n    flattened_list = [num for sublist in data_list for num in sublist]\n    return recursive_list_sum(flattened_list) + sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        flat_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_lst.extend(flatten(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        if not isinstance(data_list, list):\n            return [data_list]\n        else:\n            return [x for sublist in data_list for x in flatten(sublist)]\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_and_sum(lst):\n        if isinstance(lst, list):\n            return sum(flatten_and_sum(sub_lst) for sub_lst in lst)\n        else:\n            return lst\n\n    result = flatten_and_sum(data_list)\n    return result"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == list:\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    else:\n        head = data_list.pop(0)\n        rest = recursive_list_sum(data_list)\n        return head + rest"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten_list(data_list):\n        \"\"\"\n        Helper function to flatten a list recursively.\n        \"\"\"\n        if not data_list:\n            return []\n        elif isinstance(data_list[0], list):\n            return flatten_list(data_list[0]) + [data_list[0]] + flatten_list(data_list[1:])\n        else:\n            return [data_list[0]] + flatten_list(data_list[1:])\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        \"\"\"\n        Flatten a nested list.\n        \"\"\"\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            if isinstance(item, list):\n                recursive_list_sum(item)\n            else:\n                sum_list_elements.append(item)\n    else:\n        return data_list\n    return sum(sum_list_elements)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize a variable to store the number of ways to partition the set\n    ways = 0\n\n    # Loop through each possible partition of the set of Bell numbers\n    for i in range(2, n+1):\n\n        # Initialize a variable to store the number of ways to partition the set in this partition\n        sub_ways = 0\n\n        # Loop through each possible partition of the set in this partition\n        for j in range(1, i+1):\n\n            # Calculate the number of ways to partition the set in this partition using the formula:\n            # ways[i][j] = ways[i-1][j-1] + ways[i-1][j]\n            sub_ways += ways[i-1][j-1]\n\n        # Add the number of ways to partition the set in this partition to the total number of ways\n        ways += sub_ways\n\n    # Return the total number of ways to partition the set\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Bell numbers are numbers starting from 1 and increasing by 1 with each successive number.\n    # The first Bell number is 1.\n    bell_numbers = [1]\n    # Initialize a variable to store the number of ways to partition a set of Bell numbers.\n    ways = 0\n\n    # Check if the input value of n is valid.\n    if n < 1:\n        return \"Invalid input. n should be a positive integer.\"\n    \n    # Loop through the values of n.\n    for i in range(2, n+1):\n        # Calculate the sum of all previous Bell numbers less than or equal to n.\n        bell_sum = sum(bell_numbers[:i])\n        # Check if the sum is equal to n.\n        if bell_sum == n:\n            # Increment the variable ways by 1.\n            ways += 1\n        # If the sum is less than n, add n to the list of Bell numbers.\n        elif bell_sum < n:\n            bell_numbers.append(n)\n\n    # Return the number of ways to partition a set of Bell numbers.\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # The number of ways to partition the set of Bell numbers is the number of ways to partition the set of positive integers up to n.\n    # Therefore, we use a recursive function to calculate the number of ways to partition the set of positive integers up to n.\n    def ways_to_partition(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            # We use a recursive function to calculate the number of ways to partition the set of positive integers up to n.\n            # The function recursively calculates the number of ways to partition the set of positive integers from 1 to (n-1) and adds one more way to partition the set of positive integers from (n-1) to n.\n            return ways_to_partition(n-1) + ways_to_partition(n)\n    \n    # The number of ways to partition the set of Bell numbers is the number of ways to partition the set of positive integers up to n.\n    return ways_to_partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n\n    ways = [1] * (n + 1)\n    ways[0] = 0\n    ways[1] = 0\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            if i - j <= n:\n                ways[i] += ways[j]\n\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the number of ways to partition to 0\n    ways = 0\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n\n        # Initialize a counter for the ways to partition to 0\n        partitions = 0\n\n        # Loop through each number from 1 to i\n        for j in range(1, i+1):\n\n            # If the sum of the numbers is equal to j, increment the partitions counter\n            if j == (i-j):\n                partitions += 1\n\n        # Add the partitions counter to the total number of ways to partition\n        ways += partitions\n\n    # Return the total number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Iterate from 0 to n\n    for i in range(n+1):\n        # Calculate the number of ways to partition the i-th Bell number into two parts\n        # and add them to the count variable\n        count += (i // 2) * (n - i + 1)\n        \n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize the number of ways to partition\n    ways = 1\n\n    # If n is odd, divide the number of ways by 2\n    if n % 2!= 0:\n        ways *= 2\n\n    # For each odd prime factor of n, add the number of ways to partition each factor\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            ways *= (n // i)\n\n    return ways"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    if A[0] < A[1]: \n        return is_Monotonic(A[1:])\n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A) < 2:\n        return True\n    \n    # Check if array is decreasing\n    if A[1] > A[0]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    # Check if array is increasing\n    if A[1] < A[0]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    if len(A) < 2: \n        return True \n    if A[0] <= A[1]: \n        for i in range(1, len(A)-1): \n            if A[i] >= A[i+1]: \n                return False \n        return True \n    else: \n        for i in range(1, len(A)-1): \n            if A[i] <= A[i+1]: \n                return False \n        return True "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: # if the array has only one element, it is always monotonic\n        return True\n    else:\n        if A[0] < A[1]: # if the first element is less than the second element, it is monotonic\n            for i in range(1, len(A)-1):\n                if A[i] < A[i-1]: # if the i-th element is less than the (i-1)-th element, it is not monotonic\n                    return False\n            return True\n        else: # if the first element is greater than the second element, it is not monotonic\n            return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    else:\n        if A[0] < A[1]:\n            for i in range(1, len(A)-1):\n                if A[i] < A[i-1]:\n                    return False\n                elif A[i] > A[i+1]:\n                    return False\n        else:\n            for i in range(1, len(A)-1):\n                if A[i] > A[i-1]:\n                    return False\n                elif A[i] < A[i+1]:\n                    return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n\n    if A[0] <= A[1]: \n        return is_Monotonic(A[1:])\n    else: \n        return is_Monotonic(A[1:])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True \n    elif A[0] == A[-1]: \n        return is_Monotonic(A[1:-1]) \n    else: \n        return A[1:] == is_Monotonic(A[1:]) "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array A and returns True if the array is monotonic (increasing or decreasing) and False otherwise.\n    A monotonic array is a sequence in which each element is either the same or greater than the previous element.\n    \"\"\"\n    n = len(A)\n    if n == 0:\n        return True\n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] >= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n        l (list): The list to search in.\n        s (list): The sublist to search for.\n\n    Returns:\n        bool: True if the list contains the sublist, False otherwise.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for sub in s:\n        if sub not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l) - len(s) + 1):\n        if l[i:] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if s[0] in l:\n        return is_sublist(l, s[1:])\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l, s[1:])"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if all(len(x) == len(Input[0]) for x in Input):\n        print(\"All the tuples have equal length.\")\n    else:\n        print(\"Not all tuples have equal length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Define a list to store tuples of length n\n    tuples_of_length = []\n\n    # Loop through the input list of tuples\n    for i in range(len(Input)):\n        # If the current tuple has the same length as the last tuple, append the tuple to the list\n        if len(Input[i]) == len(tuples_of_length[-1]) and len(Input[i])!= 0:\n            tuples_of_length[-1].append(Input[i])\n        # If the current tuple has a different length, append a new tuple to the list\n        else:\n            tuples_of_length.append([Input[i]])\n\n    # Check if all the tuples in the list have the same length\n    if all(len(i) == len(tuples_of_length[0]) for i in tuples_of_length):\n        print(\"All the tuples have equal length.\")\n    else:\n        print(\"Not all the tuples have equal length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the input is an empty list\n    if not Input:\n        return True\n\n    # Initialize a variable to keep track of the length of the first tuple\n    length = len(Input[0])\n\n    # Loop through each tuple in the list\n    for tup in Input:\n        # Check if the length of the tuple is equal to the length variable\n        if len(tup)!= length:\n            # If not, return False\n            return False\n\n    # If we make it through the loop without returning False, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all the given tuples have equal length\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    # If all the tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        print(\"All tuples have equal length.\")\n    else:\n        print(\"Some tuples have different lengths.\")"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    max_swaps = n // 2\n    while swapped:\n        swapped = False\n        for i in range(max_swaps):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        max_swaps = (max_swaps + 1) // 2\n        if max_swaps == 1:\n            break\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    This algorithm works by repeatedly shrinking the sorted range and repeating\n    the same operation on the remaining unsorted range.\n\n    The algorithm has a time complexity of O(n^2) in the worst case, but can be\n    efficient for small lists and can be modified to have a time complexity of\n    O(n log n) using the Binary Search and Insertion Sort algorithms.\n\n    Example usage:\n\n    nums = [4, 2, 6, 1, 3]\n    sorted_nums = comb_sort(nums)\n    print(sorted_nums)  # Output: [1, 2, 3, 4, 6]\n    '''\n\n    # Define a helper function to check if a list is sorted in ascending order\n    def is_sorted(nums):\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                return False\n        return True\n\n    # Define the function to sort the list using the Comb Sort algorithm\n    def sort(nums):\n        # Initialize the swap counter and the gap size\n        swaps = 0\n        gap = len(nums)\n\n        while gap > 1 or swaps > 0:\n            # Shrink the gap by half\n            gap = int(gap/1.3)\n\n            # Iterate over the list and swap adjacent elements that are not sorted yet\n            for i in range(len(nums)-gap):\n                if nums[i] > nums[i+gap]:\n                    nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                    swaps += 1\n\n            # If the list is sorted, break the loop\n            if is_sorted(nums):\n                break\n\n        return nums\n\n    # Call the sort function with the input list\n    sorted_nums = sort(nums)\n\n    # Return the sorted list\n    return sorted_nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    swapped = True\n    n = len(nums)\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        gap = min(gap, n)\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the gap and step size\n    gap = 1\n    step = 0\n\n    # Keep swapping until the gap is 1\n    while gap!= 1:\n        # Calculate the new gap size\n        gap = int(gap / 1.3)\n\n        # Set the step size to the average of the gap and step sizes\n        if step == 0:\n            step = gap\n        else:\n            step = (gap + step) / 2\n\n        # Iterate through the list and swap elements that are out of order\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    The comb sort algorithm works as follows:\n\n    First, the function looks at the list and determines the size of the smallest gap (the difference between the largest and smallest values in the list).\n    Then, it chooses a gap size and sorts the list using the gap size.\n    Finally, it reduces the gap size by a factor of two, and repeats the process until the gap size is no longer reduced.\n\n    The time complexity of the comb sort algorithm is O(n^2) in the best case, and O(n^2) in the average case, and O(n^2) in the worst case (when the gap sizes are very small).\n\n    Args:\n        nums (list): A list of elements to be sorted.\n\n    Returns:\n        None: The function modifies the input list in place and returns None.\n    '''\n\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        # Look for a larger gap\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                # Swap elements if they are in the wrong order\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n        # Reduce the gap size\n        gap //= 1\n\n    # The list is now sorted\n    return None"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        \n        if gap == 0:\n            gap = n\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    max_iter = n\n    swapped = True\n    while swapped:\n        swapped = False\n        gap = n // 2\n        for i in range(gap, n):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        n = gap\n        max_iter = max(max_iter, n)\n        if n == 1 or n == max_iter:\n            break\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_square(n):\n    return n * n == n\n\ndef is_difference_of_squares(n):\n    if not is_square(n):\n        return False\n    square = int(n ** 0.5)\n    return is_square(square * square - n)\n\ndef dif_Square(n):\n    if is_difference_of_squares(n):\n        return True\n    if is_difference_of_squares(n - 1):\n        return True\n    if is_difference_of_squares(n + 1):\n        return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    This function takes an integer as input and checks if it can be represented as the difference of two squares or not.\n    '''\n    if n < 0: \n        return False\n    elif n == 0: \n        return True\n    else: \n        i = 1\n        while n > 0: \n            n -= i \n            i += 1\n        return i >= 2"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Initialize the variables\n    count = 0\n    square = n\n    while square % 4 == 0:\n        count += 1\n        square /= 4\n\n    # Check if the given number is the difference of two squares\n    if n == square ** 2 - n:\n        print(\"The given number can be represented as the difference of two squares.\")\n    else:\n        print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_square(n):\n    if n < 2:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        half = n // 2\n        return is_square(half) and is_square(half)\n\ndef dif_Square(n):\n    if is_square(n):\n        return True\n    else:\n        half = n // 2\n        if half == 0:\n            return False\n        else:\n            return dif_Square(half)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    root = n ** 0.5\n    a = int(root)\n    b = int(root) - a\n    if a ** 2 + b ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"Number should be non-negative\"\n    \n    for i in range(int(n**0.5)+1):\n        for j in range(i,int(n**0.5)+1):\n            if i**2+j**2 == n:\n                return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a power of 2\n    if n & (n - 1) == 0:\n        # if n is a power of 2, then we need to check if n can be represented as the difference of two squares\n        left, right = 0, n\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == n:\n                return True\n            elif mid * mid < n:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n    else:\n        # if n is not a power of 2, we can't represent it as the difference of two squares\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        for j in range(i, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                print(\"True\")\n                return\n            elif i**2 + j**2 < n:\n                break\n    print(\"False\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square of the input number\n    square = n ** 2\n    \n    # Check if the square is divisible by 8\n    if square % 8 == 0:\n        # Check if the difference of squares is also divisible by 8\n        if square - 8 == 0 or (square - 8) ** 2 == 16:\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n\n    for pattern in patterns:\n        if pattern not in color_count:\n            return False\n        color_count[pattern] -= 1\n\n    return all(color_count.values() == [0] * len(patterns))"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check whether a given list of colors matches a given list of patterns, assuming that the patterns follow the sequence given in the patterns array.\n    '''\n    for i, pattern in enumerate(patterns):\n        if colors[i]!= pattern[0]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if the number of patterns matches the number of colors\n    if len(patterns)!= len(colors):\n        return False\n\n    # loop through the patterns and colors arrays\n    for i in range(len(patterns)):\n        # check if the pattern matches the color at the current index\n        if patterns[i]!= colors[i]:\n            return False\n\n    # if we make it through the loop without returning False, it means the patterns array follows the sequence\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    # Compute the maximum number of colors that could occur in each pattern\n    max_colors = [max(len(p) for p in patterns) for _ in range(len(patterns))]\n\n    # Initialize the remaining colors and current position\n    remaining_colors = colors\n    current_position = 0\n\n    # Loop over the colors\n    while remaining_colors:\n        # Check if the current pattern has the same number of colors as the remaining colors\n        if len(remaining_colors) >= max_colors[current_position]:\n            # If it does, check if the remaining colors are the same as the next pattern in the patterns array\n            if remaining_colors[:max_colors[current_position]] == patterns[current_position]:\n                # If they are, remove them from the remaining colors and the current position\n                remaining_colors = remaining_colors[max_colors[current_position]:]\n                current_position += 1\n            # If the colors are not the same, move to the next pattern\n            else:\n                current_position += 1\n        # If the current pattern has less colors than the remaining colors, move to the next pattern\n        else:\n            current_position += 1\n\n    # Check if we have reached the end of the patterns array\n    if current_position == len(patterns):\n        # If we have, return True\n        return True\n    # If we haven't, return False\n    else:\n        # If we haven't reached the end of the patterns array, return None (indicating an error)\n        return None"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    prev_pattern = None\n    prev_color = None\n\n    for pattern in patterns:\n        if prev_pattern!= pattern:\n            return False\n        prev_color = colors.pop(0)\n        if prev_color!= pattern:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Convert the colors and patterns into lists\n    colors = list(colors)\n    patterns = list(patterns)\n    # Sort the colors and patterns\n    colors.sort()\n    patterns.sort()\n    # Check if the colors and patterns match\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if there are enough colors to form all patterns\n    if len(colors) < len(patterns):\n        return False\n    \n    # Initialize variables for current color and pattern\n    current_color = None\n    current_pattern = []\n    \n    # Check if the colors match the patterns\n    for color in colors:\n        if color not in patterns:\n            return False\n        \n        # If the color matches the pattern, check if it's the same\n        if patterns[patterns.index(color)]!= current_color:\n            return False\n        \n        # If it's the same, add it to the pattern\n        current_color = color\n        current_pattern.append(color)\n    \n    # Check if there are any remaining colors\n    for pattern in patterns:\n        if pattern not in current_pattern:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Step 1: check if there are any patterns in the array\n    if len(patterns) == 0:\n        return True\n\n    # Step 2: get the first pattern from the array\n    pattern = patterns[0]\n\n    # Step 3: check if the first color in the pattern is the same as the first color in the colors array\n    if colors[0]!= pattern[0]:\n        return False\n\n    # Step 4: remove the first color from the colors array and patterns array\n    colors = colors[1:]\n    patterns = patterns[1:]\n\n    # Step 5: call the function recursively with the updated arrays\n    return is_samepatterns(colors, patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize a dictionary to store the number of occurrences of each color\n    color_count = {}\n\n    # Iterate through the colors\n    for color in colors:\n        # If the color is already in the dictionary, increment its count\n        if color in color_count:\n            color_count[color] += 1\n        # Otherwise, add the color to the dictionary with a count of 1\n        else:\n            color_count[color] = 1\n\n    # Iterate through the patterns\n    for pattern in patterns:\n        # Check if the pattern matches the colors in the color_count dictionary\n        if all(color in color_count and color_count[color] == pattern[i] for i, color in enumerate(pattern)):\n            # If it does, decrement the count of the corresponding color in the color_count dictionary\n            for i, color in enumerate(pattern):\n                color_count[color] -= 1\n\n            # If all the colors in the pattern have been matched and the pattern has not been matched yet, return False\n            if all(value == 0 for value in color_count.values()):\n                return True\n\n    # If none of the patterns match, return False\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(tuple(sorted(test_list[i] + test_list[j])))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        flag = True\n        for num in tup:\n            if num % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] % K == 0 and test_list[j][i] % K == 0:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the tuples that have all elements divisible by K\n    divisible_tuples = []\n    # loop through each tuple in the given list\n    for i in range(len(test_list)):\n        # create a new tuple with the same elements as the current tuple\n        new_tuple = test_list[i]\n        # loop through each element in the new tuple and check if it's divisible by K\n        for j in range(len(new_tuple)):\n            if new_tuple[j] % K!= 0:\n                # if an element is not divisible by K, remove it from the new tuple\n                new_tuple = tuple(filter(lambda x: x % K == 0, new_tuple))\n                # break out of the inner loop because we found a tuple that doesn't meet the condition\n                break\n        else:\n            # if we didn't break out of the inner loop, the new tuple meets the condition so we add it to the list\n            divisible_tuples.append(new_tuple)\n    # return the list of tuples that have all elements divisible by K\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) % K == 0 and sum(test_list[j]) % K == 0:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the tuples that meet the condition\n    result = []\n    \n    # Iterate over all tuples in the list\n    for i in range(len(test_list)):\n        # Check if all elements are divisible by K\n        if all(x % K == 0 for x in test_list[i]):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(test_list[i])\n            \n    # Return the result list\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word)%2!= 0:\n        return 'The length of the word is odd'\n    else:\n        return 'The length of the word is even'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n\n    # loop through each word and check its length\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2 == 1:\n            return True\n\n    # if no odd words were found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into words\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    # split the sentence into words\n    words = s.split()\n    \n    # initialize a variable to store the length of the word\n    word_len = 0\n    \n    # loop through each word\n    for word in words:\n        # add the length of the current word to the variable\n        word_len += len(word)\n    \n    # check if the word length is odd or even\n    if word_len % 2 == 0:\n        # if the length is even, return True\n        return True\n    else:\n        # if the length is odd, return False\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(f\"{word} is odd-length\")\n        else:\n            print(f\"{word} is even-length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        print(\"The word has an odd length\")\n    else:\n        print(\"The word has an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is even length\")\n        else:\n            print(word, \"is odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    words = s.split() # Splitting the string into words\n    for word in words: \n        if len(word) % 2 == 0: # checking if the length of the word is even or not\n            return False\n        else:\n            return True # returning True if the length of the word is odd"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 2 * n + 1\n    b = 4 * n + 3\n    c = 6 * n + 5\n    d = 8 * n + 7\n    e = 10 * n + 9\n    f = 12 * n + 11\n    \n    tetrahedral_numbers = [a, b, c, d, e, f]\n    return tetrahedral_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = n * (n - 1) * (n - 2) * (n - 3) // 6\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n - 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    else:\n        for i in range(n-1):\n            if i*4*4 + i*4 - 4 == n - 1:\n                return i*4*4 + i*4 - 4\n        return -1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(1, n+1):\n        t = 4*t + i\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the first tetrahedral number\n    first_tetrahedral = 0\n\n    # Initialize the sum of the first n tetrahedral numbers\n    tetrahedral_sum = 0\n\n    # Loop through the first n tetrahedral numbers\n    for i in range(1, n + 1):\n        # Calculate the nth tetrahedral number\n        nth_tetrahedral = 4 * i * (i - 1) // 3\n\n        # Add the nth tetrahedral number to the sum\n        tetrahedral_sum += nth_tetrahedral\n\n    # Return the sum of the first n tetrahedral numbers\n    return tetrahedral_sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # The tetrahedral numbers are the sum of consecutive Fibonacci numbers.\n    fib = [1, 1]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the variable to store the tetrahedral number\n    tetra = 0\n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the nth tetrahedral number using the formula\n        # (1/3)(1/2)(2^(n-i))\n        tetra = (1/3)*(1/2)*(2**(n-i))\n        # Print the tetrahedral number\n        print(tetra)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function returns the nth tetrahedral number.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0\n    b = 1\n    c = 2\n    d = 3\n    for i in range(n):\n        a, b, c, d = d, a + b + c + d, a + c + b + d, a + d + b + c\n    return a\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4/3 * math.pi * r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    return (4/3) * math.pi * (r**3)\n\nprint(\"Volume of a sphere of radius 5: \", volume_sphere(5))"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_val = sum([ord(c) for c in strr])\n    char_val = ascii_val % 26\n    return chr(char_val + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the character\n    char = ''\n\n    # Iterate through each character of the string\n    for char_ascii in range(ord('a'), ord('z')+1):\n        # If the current ASCII value is less than 97 (a), add 26 to get the corresponding ASCII value in the range a-z\n        if char_ascii < 97:\n            char_ascii = char_ascii + 26\n        # Convert the ASCII value to a character and add it to the character string\n        char += chr(char_ascii)\n\n    # Return the character string\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_val = (ascii_sum % 26) + 65\n    char = chr(char_val)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char_i in strr:\n        char += ord(char_i)\n    char %= 26\n    if char < 10:\n        return chr(ord('a') + char)\n    else:\n        return chr(ord('A') + char - 10)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr(char_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values of characters to zero\n    sum = 0\n\n    # Traverse through each character of the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n\n    # Return the character made by adding ASCII values of characters modulo 26\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr(((ascii_val % 26) + 97) % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:  \n        return '0'  \n\n    # Initialize sum variable  \n    sum = 0  \n\n    # Loop through each character in the string  \n    for i in range(len(strr)):  \n        # Convert each character to its ASCII value and add to sum variable  \n        sum += ord(strr[i])  \n\n    # Return the character made by adding the ASCII value of all the characters of the string modulo 26  \n    return chr((sum % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers\n    sequence = [1, 2]\n    # Loop through the rest of the sequence\n    for i in range(2, n):\n        # Generate the next number in the sequence by applying the rules\n        if i % 2 == 0:\n            next_number = sequence[-1] * 2\n        else:\n            next_number = sequence[-1] + 1\n        # Add the next number to the sequence\n        sequence.append(next_number)\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    next_num = 1\n\n    for i in range(n):\n        sequence.append(next_num)\n        next_num = 4 * sequence[i] - sequence[i]\n\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    count = 1\n    while count < n:\n        new_sequence = []\n        for i in range(len(sequence)):\n            if i % 2 == 0:\n                new_sequence.append(sequence[i] * 2)\n            else:\n                new_sequence.append(sequence[i] / 2)\n        sequence = new_sequence\n        count += 1\n    return sequence[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # First two numbers in the sequence are 1\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n\n    # Initialize the sequence with the first two numbers\n    sequence = [1, 2]\n\n    # Loop through the remaining numbers in the sequence\n    for i in range(3, n+1):\n        # Generate the next number in the sequence\n        next_number = ((i - 1) // 2) * 3 + 1\n\n        # Check if the next number is already in the sequence\n        if next_number not in sequence:\n            # Add the next number to the sequence\n            sequence.append(next_number)\n\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers\n    sequence = [1, 1]\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        next_number = sequence[i-1] + sequence[i-2]\n        # Add the next number to the sequence\n        sequence.append(next_number)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(n):\n        if i % 2 == 0:\n            a = b\n            b = 4 * a + b\n        else:\n            a = b\n            b = 4 * a - b\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    c = 1\n    for i in range(n):\n        if i == 0:\n            print(0)\n        elif i == 1:\n            print(b)\n        elif i == 2:\n            print(a)\n        else:\n            print(a + b + c)\n        a, b, c = b, c, a + b + c"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize variables for the sequence and the current number\n    sequence = [0]\n    current_number = 0\n\n    # Loop through the sequence until we've reached the nth number\n    for i in range(n):\n        # Determine if the current number is alive or dead\n        if sequence[current_number] == 0:\n            sequence.append(1)\n        else:\n            sequence.append(0)\n        \n        # Increment the current number by one\n        current_number = (current_number + 1) % len(sequence)\n\n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere: pi * r^2\n    surface_area = math.pi * r**2\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return (4 / 3) * pi * r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n\n    Parameters:\n    r (float): radius of the sphere\n\n    Returns:\n    float: surface area of the sphere\n    \"\"\"\n\n    # Calculate the surface area using the formula for a sphere with radius r\n    surface_area = (4 * math.pi * r * r)\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area using the formula (4/3)\u03c0r^2\n    surface_area = (4/3) * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Convert radius to meters\n    r *= 1000\n    \n    # Formula for surface area of sphere\n    surface_area = (4/3)*math.pi*r**3\n    \n    # Return the surface area in square meters\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n):\n        if n <= 1:\n            return n\n        else:\n            return centered_hexagonal_helper(n - 1) + centered_hexagonal_helper(n - 1)\n\n    centered_hexagonal_number = centered_hexagonal_helper(n)\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize the sum and counter variables\n    sum = 0\n    counter = 0\n    \n    # Loop through each row of the centered hexagon\n    for i in range(n):\n        # Loop through each column of the centered hexagon\n        for j in range(n - 1 - i):\n            # Calculate the value of the centered hexagon\n            value = (i ** 2) + (j ** 2)\n            \n            # Add the value to the sum and increment the counter\n            sum += value\n            counter += 1\n    \n    # Return the sum divided by the counter\n    return sum / counter"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 3\n    c = 5\n    \n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    \n    # Calculate and return centered hexagonal number\n    return (a ** n - b ** n + c ** n) / 2 ** n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n\n    # Initialize variables\n    num = 1\n    count = 0\n\n    # Calculate the sum of centered hexagonal numbers\n    while count < n:\n        num += (2 * count + 1) ** 2\n        count += 1\n\n    return num - (2 * n - 1) ** 2\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # The centered hexagonal number can be found by counting the number of centered hexagonal numbers from 1 to n\n    # and adding 1 to it.\n    num_centered_hexagons = 0\n    for i in range(1, n+1):\n        num_centered_hexagons += centered_hexagon(i)\n    return num_centered_hexagons + 1\n\ndef centered_hexagon(n):\n    \"\"\"\n    Write a function to count the number of centered hexagons from 1 to n.\n    \"\"\"\n    # First centered hexagon has edge length 1, which is 1/2 of the edge of a triangle with sides of length 1\n    # and 1/2 of the edge of a triangle with sides of length 2.\n    # The distance between two centers of a hexagon is sqrt(3) / 2.\n    # Therefore, the length of the center of a centered hexagon is sqrt(3) / 2.\n    # Therefore, the number of centered hexagons from 1 to n is 1/2 * n * (3 * sqrt(3) / 2).\n    # However, we need to count only the centered hexagons that are centered at an even number of rows.\n    # For example, for n = 4, we only need to count the centered hexagons centered at an even number of rows:\n    # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99\n    # Therefore, the number of centered hexagons at even rows from 1 to n is (n * (3 * sqrt(3) / 2) + 1) / 2 = 20 / 2 = 10 centered hexagons.\n    return (n * (3 * 1.7320508075688772) + 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 2\n    d = 2\n    e = 4\n    f = 4\n    g = 6\n\n    for i in range(1, n+1):\n        a, b, c, d, e, f, g = a + b + c + d + e + f + g, a + b + c + d + e, a + b + c + d, a + b + c, a + b, a, 1\n        print(g)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [0, 1, 6, 20, 75, 343, 1701, 8506, 47658, 279720, 1597375, 9760960, 5822800, 35568750, 20995000, 117649500, 714188000, 4032980000, 24044800000, 130677000000, 815910000000, 4933000000000, 30352000000000, 184676000000000, 1111350000000000, 7186700000000000, 45767200000000000, 292960000000000000, 1815720000000000000, 11558320000000000000, 7529500000000000000, 50397000000000000000, 319452000000000000000, 2006680000000000000000, 12559200000000000000000, 86248000000000000000000, 618988000000000000000000, 4322480000000000000000000, 29999040000000000000000000, 205432000000000000000000000, 1431655760000000000000000000, 951056000000000000000000000, 6343018880000000000000000000, 46368942720000000000000000000, 335703280480000000000000000000, 2452830740480000000000000000000, 17784334707200000000000000000000, 129258196416000000000000000000000, 944473296640000000000000000000000, 7123339957376000000000000000000000, 55292509928960000000000000000000000, 4419864963414400000"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        hex_sum = 1\n        for i in range(2, n+1):\n            hex_sum += centered_hexagonal_number(i)\n        return hex_sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagons = [(0, 0), (0, -1), (1, -1), (-1, 0), (-1, 1), (1, 1)]\n    count = 1\n    for i in range(n):\n        count += 1\n        if count <= 6:\n            for j in range(6):\n                if count <= 6:\n                    x, y = hexagons[j]\n                    if count % 2 == 1:\n                        x += 1\n                    else:\n                        y += 1\n                    hexagons[j] = (x, y)\n                count -= 1\n        else:\n            count -= 1\n    return count"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    if n < 0:\n        return 'Invalid input. Please enter a non-negative integer.'\n    elif n == 0:\n        return 0\n    else:\n        # Find the number of rows and columns in the centered hexagonal number.\n        num_rows = n // 2 + n % 2\n        num_cols = n - num_rows * 2\n        \n        # Calculate the centered hexagonal number.\n        centered_hex = (num_rows * (num_rows - 1) // 2) + num_cols\n        \n        return centered_hex"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy() # create a copy of the first dictionary for the merged dictionary\n    merged_dict.update(dict2) # update the merged dictionary with the second dictionary\n    merged_dict.update(dict3) # update the merged dictionary with the third dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    # Loop through all the keys of the first dictionary\n    for key in dict1:\n        # If the key is not already in the merged dictionary, add it and set its value to the value in the first dictionary\n        if key not in merged_dict:\n            merged_dict[key] = dict1[key]\n        # If the key is already in the merged dictionary, add its value to the value in the first dictionary\n        else:\n            merged_dict[key] += dict1[key]\n    # Loop through all the keys of the second dictionary\n    for key in dict2:\n        # If the key is not already in the merged dictionary, add it and set its value to the value in the second dictionary\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n        # If the key is already in the merged dictionary, add its value to the value in the second dictionary\n        else:\n            merged_dict[key] += dict2[key]\n    # Loop through all the keys of the third dictionary\n    for key in dict3:\n        # If the key is not already in the merged dictionary, add it and set its value to the value in the third dictionary\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n        # If the key is already in the merged dictionary, add its value to the value in the third dictionary\n        else:\n            merged_dict[key] += dict3[key]\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary to merge.\n        dict2 (dict): Second dictionary to merge.\n        dict3 (dict): Third dictionary to merge.\n\n    Returns:\n        dict: Merged dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes in three dictionaries as input and returns a single dictionary containing all the key-value pairs from all three dictionaries.\n    \"\"\"\n\n    # Merge the dictionaries using the update() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n\n    # Iterate over the keys in the first dictionary and merge them with the corresponding values in the second dictionary\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n\n    # Iterate over the keys in the second dictionary and merge them with the corresponding values in the third dictionary\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key] = merge_two_dicts(merged_dict[key], dict2[key])\n\n    # Iterate over the keys in the third dictionary and merge them with the corresponding values in the first dictionary\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n        else:\n            merged_dict[key] = merge_two_dicts(merged_dict[key], dict3[key])\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = collections.defaultdict(int)\n\n    # Iterate through the list and update the frequency of each element in the dictionary\n    for num in list1:\n        freq_dict[num] += 1\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n    Args:\n    list1 (list): A list of elements to count the frequency of.\n\n    Returns:\n    dict: A dictionary where the keys are the elements in the list and the values are their frequencies.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n\n    for item in list1:\n        freq_dict[item] += 1\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Using a dictionary to store the frequency of each element\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    # Check if the input is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return None\n    \n    # Initialize the closest smaller number to N\n    closest_num = N\n    \n    # Loop through all possible smaller numbers less than N\n    for i in range(1, N):\n        # Calculate the absolute difference between N and the current smaller number\n        diff = abs(N - i)\n        \n        # If the absolute difference is smaller than the current closest smaller number, update it\n        if diff < abs(closest_num - i):\n            closest_num = i\n    \n    # Return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    smallest_num = min(N, 10**9)  # set the smallest possible number\n    closest_num = float('inf')\n    for i in range(2, 10):\n        if smallest_num + i > N:\n            closest_num = smallest_num\n            smallest_num += i\n            break\n        elif smallest_num + i < N:\n            smallest_num += i\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    smallest_num = float('inf')\n    for i in range(N, 1, -1):\n        if abs(N - i) < abs(N - smallest_num):\n            smallest_num = i\n    return smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    This function takes an integer N as input and returns the closest smaller number to N.\n    \"\"\"\n    nums = [int(x) for x in input(\"Enter the list of numbers separated by spaces: \").split()]\n    sorted_nums = sorted(nums)\n    n = N\n\n    for i in range(len(nums)-1):\n        if sorted_nums[i] > n:\n            break\n        if abs(sorted_nums[i]-n) < abs(sorted_nums[i+1]-n):\n            n = sorted_nums[i]\n    return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    min_diff = abs(N - closest)\n    for i in range(1, N):\n        diff = abs(i - closest)\n        if diff < min_diff:\n            closest = i\n            min_diff = diff\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(2, N):\n        if abs(N - i) < abs(N - closest):\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    numbers = sorted([num for num in range(N) if num!= N])\n    if numbers:\n        return numbers[0]\n    else:\n        return None"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    \n    for num in range(1, N):\n        if abs(closest - num) < abs(closest - N):\n            closest = num\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    if N < 2:\n        return N\n    else:\n        min_diff = abs(N - 1)\n        min_num = 1\n        max_num = N\n        while max_num - min_num > 1:\n            mid = (min_num + max_num) // 2\n            if mid < N:\n                min_num = mid\n            else:\n                max_num = mid\n            diff = abs(N - mid)\n            if diff < min_diff:\n                min_diff = diff\n        return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(1, N+1):\n        if i % 2 == 1:\n            smallest = min(smallest, i-1)\n        else:\n            smallest = min(smallest, i+1)\n    return smallest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a given list of words.\n    \"\"\"\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(lst):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    max_len = 0\n    for word in lst:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    longest = 0\n    word = \"\"\n    # loop through the list\n    for i in range(len(list1)):\n        # if the current character is a letter, add it to the word\n        if list1[i].isalpha():\n            word += list1[i].lower()\n        # if the current character is not a letter or the end of the word, check if its length is greater than the current longest\n        else:\n            if len(word) > longest:\n                longest = len(word)\n            # reset the word to \"\"\n            word = \"\"\n    # if the word is not empty, check if its length is greater than the current longest\n    if len(word) > longest:\n        longest = len(word)\n    # return the longest word length\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return string\n    return \"Not found\""
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"The substring '{}' is present in the string '{}'\".format(sub_str, str1))\n    else:\n        print(\"The substring '{}' is not present in the string '{}'\".format(sub_str, str1))"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    str_set = set(str1)\n\n    # Iterate over the substrings in the set\n    for s in str_set:\n        if s in sub_str:\n            return True\n\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Check if the list is empty\n    if not str1:\n        return False\n\n    # Iterate over the list of strings\n    for string in str1:\n        # Check if the substring is present in the current string\n        if sub_str in string:\n            return True\n\n    # If the loop completes, the substring is not present in the list\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Convert sub_str to a set to remove duplicates\n    sub_set = set(sub_str)\n\n    # Loop through each string value in the list\n    for str_val in str1:\n        # Convert str_val to a set to remove duplicates\n        str_set = set(str_val)\n        # If the set of sub_str is a subset of str_val, return True\n        if str_set.issubset(sub_set):\n            return True\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number is undulating or not.\n    \"\"\"\n\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        # If the number is even, it's not undulating\n        return False\n    else:\n        # If the number is odd, it's undulating\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    if n == 0 or n == 1:\n        return True\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            if n % i == 0:\n                return False\n            elif n % (i + 2) == 0:\n                return False\n        elif i % 2 == 1:\n            if n % i == 0:\n                return False\n            elif n % (i + 2) == 0:\n                return False\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize a variable to store the sum of the first n numbers\n    sum_of_first_n = 0\n    \n    # Loop through the first n numbers and add them to the sum\n    for i in range(1, n+1):\n        sum_of_first_n += i\n    \n    # If the sum of the first n numbers is divisible by n, then the number is undulating\n    if sum_of_first_n % n == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer as input and checks if it is an undulating number or not.\n    An undulating number is a number whose prime factors are all odd.\n    \n    For example, 28 is an undulating number because all its prime factors are odd: 2, 8, 4.\n    '''\n    \n    # Helper function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Helper function to check if a number has odd prime factors\n    def has_odd_prime_factors(num):\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            while num % i == 0:\n                if not is_prime(i):\n                    return True\n                num //= i\n        if num > 2:\n            return True\n        return False\n    \n    # Check if the number is prime and has odd prime factors\n    if is_prime(n) and has_odd_prime_factors(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b//2) * power(a, b//2)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result*a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n\n    # sort the list of tuples based on the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # return the index of the first tuple in the sorted list with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n\n    def find_min_second(x):\n        \"\"\"\n        Given a tuple, find the index of the tuple with the smallest second value.\n        \"\"\"\n        min_index = -1\n        min_second = float('inf')\n        for i, y in enumerate(x):\n            if y[1] < min_second:\n                min_index = i\n                min_second = y[1]\n        return min_index\n\n    min_index = find_min_second(test_list[0])\n    for i in range(1, len(test_list)):\n        if find_min_second(test_list[i]) < min_index:\n            min_index = find_min_second(test_list[i])\n    return test_list[min_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second element in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples based on the second value using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # set initial value to infinity\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize the minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize the smallest length to be the length of the first element in the list\n    min_length = len(lst[0])\n\n    # Iterate through the list of lists and compare the length of each list to the current smallest length\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    # Return the smallest length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the minimum length found so far\n    min_len = float('inf')\n\n    # Iterate over each sublist in the list\n    for sublist in lst:\n        # Check the length of the sublist and update the minimum length if necessary\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    # Return the minimum length found\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = 1000000\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 2\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate over each element in the flattened list\n    for item in list1:\n        # If the element is not in the dictionary yet, add it with a frequency of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[item] += 1\n    \n    # Return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # create a dictionary to store the frequency of each element in the flattened list\n    frequency_dict = {}\n\n    # iterate over the flattened list and update the frequency in the dictionary\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n    # loop through each element of the list\n    for i in list1:\n        # if the element is a list, recursively call the function on the list\n        if type(i) == list:\n            # get the frequency of the element in the nested list\n            freq = frequency_lists(i)\n            # add the nested frequency dictionary to the main dictionary\n            for j in freq:\n                freq_dict[j] = freq[j]\n        # if the element is not a list, update the frequency dictionary accordingly\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    # Iterate through each element in the flattened list of lists\n    for elem in list1:\n        # If the element is a list, recursively call the function on it\n        if isinstance(elem, list):\n            # Recursively call the function on the list\n            freq.update(frequency_lists(elem))\n        # If the element is not a list, check if it is already in the dictionary\n        else:\n            if elem in freq:\n                # If it is, increment its frequency by 1\n                freq[elem] += 1\n            # If it is not, add it to the dictionary with frequency 1\n            else:\n                freq[elem] = 1\n    # Return the dictionary of frequency\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[elem] = 1\n\n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        for i in item:\n            if i in frequency_dict:\n                frequency_dict[i] += 1\n            else:\n                frequency_dict[i] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # loop through each element in the flattened list of lists\n    for i in list1:\n        # check if the element is already a key in the dictionary\n        if i in freq:\n            # if it is, increment its frequency by 1\n            freq[i] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            freq[i] = 1\n    \n    # return the dictionary of frequencies\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        for sub_item in item:\n            if sub_item in freq_dict:\n                freq_dict[sub_item] += 1\n            else:\n                freq_dict[sub_item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create a dictionary to store the frequency of each element in the flattened list\n    freq_dict = {}\n\n    # loop through each element in the flattened list\n    for item in list1:\n\n        # if the item is a list, recursively call the function on the list\n        if isinstance(item, list):\n            freq_dict.update(frequency_lists(item))\n        # if the item is not a list, add its frequency to the dictionary\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # Multiply all the numbers in the list and divide with the length of the list\n    result = reduce(lambda x,y: x*y, numbers) / len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store the binary equivalent\n    binary_str = \"\"\n    # loop until the decimal number is 0\n    while n > 0:\n        # extract the last digit of the decimal number\n        last_digit = n % 2\n        # convert the last digit to a character\n        digit_char = str(last_digit)\n        # append the character to the beginning of the binary string\n        binary_str = digit_char + binary_str\n        # remove the last digit from the decimal number\n        n = n // 2\n    # return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    # Convert decimal to binary using recursion\n    def decimal_to_binary_helper(n, binary_string=''):\n        if n == 0:\n            return binary_string\n        else:\n            return decimal_to_binary_helper(n//2, str(n%2) + binary_string)\n    \n    # Call the helper function with the given decimal number\n    return decimal_to_binary_helper(n)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    # Initialize variables\n    binary = \"\"\n    decimal = n\n    \n    # Convert decimal to binary\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    \n    # Return binary number as a string without leading zeros\n    return binary.lstrip(\"0\")"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    # Create an empty string to store the binary number\n    binary_num = ''\n    # Loop through each digit of the decimal number\n    while n > 0:\n        # Calculate the remainder when n is divided by 2\n        remainder = n % 2\n        # Append the remainder to the beginning of the binary_num string\n        binary_num = str(remainder) + binary_num\n        # Divide n by 2 to remove the last digit\n        n = n // 2\n    # Return the binary number in reverse order\n    return binary_num[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to store the binary equivalent of n\n    binary_equivalent = ''\n\n    # Convert n to binary using a while loop\n    while n > 0:\n        # Get the last digit of n and convert it to binary\n        last_digit = n % 2\n        # Convert the last digit to a string and append it to binary_equivalent\n        binary_equivalent = str(last_digit) + binary_equivalent\n        # Remove the last digit from n\n        n = n // 2\n\n    # If binary_equivalent is already a string with no leading zeros, return it\n    if len(binary_equivalent) == len(str(n)):\n        return binary_equivalent\n\n    # Otherwise, add leading zeros to binary_equivalent until it has the same length as n\n    while len(binary_equivalent) < len(str(n)):\n        binary_equivalent = '0' + binary_equivalent\n\n    # Return the final binary_equivalent string\n    return binary_equivalent"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Create an empty list to store the binary equivalent of each digit\n    binary_list = []\n    \n    # Convert the decimal number to binary one digit at a time\n    while n > 0:\n        # Get the remainder of the division by 2 of the number\n        remainder = n % 2\n        \n        # Add the remainder to the binary list in reverse order\n        binary_list.insert(0, remainder)\n        \n        # Divide the number by 2 and remove the last digit\n        n = n // 2\n    \n    # Convert the binary list to a string with no leading zeros\n    binary_str = ''.join(str(x) for x in binary_list)\n    \n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary_list = []\n    while n > 0:\n        binary_list.append(n % 2)\n        n //= 2\n    return ''.join(str(x) for x in binary_list[::-1])\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    elif n % 2 == 0:\n        return \"0\" + decimal_to_binary(n//2)\n    else:\n        return \"1\" + decimal_to_binary(n//2 + 1)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Remove all non-digit characters from the number\n    num = ''.join(filter(str.isdigit, str(num)))\n    \n    # Reverse the number\n    reversed_num = num[::-1]\n    \n    # Convert the reversed number to an integer\n    reversed_num_int = int(reversed_num)\n    \n    # Increment the reversed number by 1\n    next_palindrome = reversed_num_int + 1\n    \n    # Convert the next palindrome to a string and return it\n    return str(next_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n    \n    # Convert the input to a string and reverse it\n    s = str(num)[::-1]\n    \n    # Find the smallest palindrome greater than the input\n    for i in range(999, 100, -1):\n        j = 0\n        while j < len(s) and s[j] < i:\n            j += 1\n        if j == len(s):\n            break\n    \n    # Convert the reversed string to an integer and return it\n    return int(s[:j])"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # convert the given integer to a string\n    num_str = str(num)\n\n    # check if the given integer is already a palindrome\n    if num_str == num_str[::-1]:\n        # if it is a palindrome, find the smallest number that is greater than the given integer\n        for i in range(num+1, 1000001):\n            if str(i) == str(i)[::-1]:\n                return i\n        # if there is no such number, return -1\n        return -1\n\n    # if the given integer is not a palindrome, find the smallest palindrome that is greater than the given integer\n    for i in range(num, 1000001):\n        # convert the current number to a string and check if it is a palindrome\n        current_str = str(i)\n        if current_str == current_str[::-1]:\n            # if it is a palindrome, find the smallest number that is greater than the current number\n            for j in range(i+1, 1000001):\n                if str(j) == str(j)[::-1]:\n                    return j\n        # if there is no such number, return -1\n        return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_num = 10**9 + 1\n    while True:\n        n = num + 1\n        s = str(n)\n        if s == s[::-1] and int(s) < max_num:\n            return int(s)\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome of that integer.\n    \"\"\"\n    # create a string representation of the input number\n    str_num = str(num)\n\n    # initialize two pointers, one for the beginning and one for the end of the string\n    left = 0\n    right = len(str_num) - 1\n\n    # swap the characters at the left and right pointers until they meet\n    while str_num[left]!= str_num[right]:\n        str_num[left], str_num[right] = str_num[right], str_num[left]\n        left += 1\n        right -= 1\n\n    # find the index of the first non-zero digit in the string\n    non_zero_index = left\n\n    # swap the characters at the first non-zero digit and the right pointer until they meet\n    while str_num[non_zero_index] == '0':\n        str_num[non_zero_index], str_num[right] = str_num[right], str_num[non_zero_index]\n        right -= 1\n\n    # convert the swapped string back to an integer\n    next_num = int(str_num)\n\n    # if the next number is still less than the input number, return it\n    if next_num < num:\n        return next_num\n    else:\n        return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def smallest_palindrome(n):\n        n_prime = n\n        while not is_palindrome(n_prime):\n            n_prime += n\n        return n_prime\n\n    def find_next_smallest(n):\n        n_prime = smallest_palindrome(n)\n        n_prime_next = smallest_palindrome(n_prime)\n        if n_prime_next > n:\n            return n_prime_next\n        else:\n            return n_prime\n\n    def find_next_largest(n):\n        if n > 9:\n            return n // 10 * 10 + 10\n        else:\n            return n * 10 + 1\n\n    return find_next_smallest(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the number is odd or even\n    if num % 2 == 0:\n        # If even, check for palindromic number greater than even number\n        for i in range(int(num/2)+1, 0, -1):\n            palindrome = str(i) + str(i)\n            if int(palindrome) > int(num):\n                return int(palindrome)\n\n    # If number is odd, check for palindromic number greater than odd number\n    else:\n        for i in range(int(num/2)+1, 0, -1):\n            palindrome = str(i) + str(i)\n            if int(palindrome) > int(num):\n                return int(palindrome)\n\n    # If no palindromic number found, return None\n    return None\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Check if the number is negative\n    if int(num_str[0]) < 0:\n        # Remove the negative sign from the string\n        num_str = num_str[1:]\n\n    # Initialize the smallest palindrome\n    smallest_palindrome = int(num_str)\n\n    # Loop through all possible strings of digits\n    for digit_str in range(len(num_str)+1):\n\n        # Construct the current palindrome\n        current_palindrome = int(''.join(sorted(num_str[:digit_str])))\n\n        # Check if the current palindrome is smaller than the smallest palindrome found so far\n        if current_palindrome < smallest_palindrome:\n            # Update the smallest palindrome found so far\n            smallest_palindrome = current_palindrome\n\n    # Convert the smallest palindrome to an integer and add one\n    return smallest_palindrome + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        return num\n    \n    # Find the smallest palindrome greater than num\n    for i in range(num + 1, 1000001):\n        if is_palindrome(i):\n            return i\n    \n    # If no palindrome found, return the largest number\n    return sys.maxsize"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    if num < 10:\n        return num\n    else:\n        # Split the integer into its digits\n        digits = list(str(num))\n        \n        # Reverse the digits of the integer\n        reversed_digits = digits[::-1]\n        \n        # Reverse the digits of the reversed integer\n        reversed_reversed_digits = reversed_digits[::-1]\n        \n        # Remove the leading zeros from the reversed integer\n        cleaned_reversed_digits = [int(digit) for digit in reversed_reversed_digits if digit!= '0']\n        \n        # Combine the cleaned digits and reverse the result\n        combined_digits = cleaned_reversed_digits + [int(digit) for digit in reversed_digits[len(cleaned_reversed_digits):]]\n        next_smallest = int(''.join(map(str, combined_digits[::-1])))\n        \n        return next_smallest"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # calculate the length of the array\n    n = len(arr)\n    # check if k is valid\n    if k < 1 or k > n:\n        raise ValueError(\"Invalid index\")\n    # iterate through the array from the first k-1 elements and find the kth element\n    for i in range(k-1):\n        if i >= n-1:\n            # if kth element is the last element, return it\n            return arr[n-1]\n        elif arr[i] < arr[i+1]:\n            # if the kth element is in the correct position, return it\n            return arr[i]\n    # if the function reaches this point, the kth element is not in the array\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid index\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the given array is empty\n    if len(arr) == 0:\n        return None\n\n    # Check if k is less than or equal to 0\n    if k <= 0:\n        return None\n\n    # Initialize variables to keep track of the first and last indices in the array\n    first_index = 0\n    last_index = len(arr) - 1\n\n    # Loop until the first index is greater than the last index\n    while first_index <= last_index:\n        # Calculate the mid index\n        mid_index = (first_index + last_index) // 2\n\n        # If the mid index is equal to k-1, return the element at that index\n        if mid_index == k - 1:\n            return arr[mid_index]\n\n        # If the mid index is greater than k-1, search the right half of the array\n        elif mid_index > k - 1:\n            last_index = mid_index - 1\n\n        # If the mid index is less than k-1, search the left half of the array\n        else:\n            first_index = mid_index + 1\n\n    # If the kth element is not found, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n\n    left, right = 1, n\n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is valid\n    if k < 1 or k > len(arr):\n        return None\n    \n    # Initialize a counter variable\n    count = 1\n    \n    # Loop through the array and find the kth element\n    for i in range(len(arr)):\n        if count == k:\n            return arr[i]\n        count += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is greater than the length of the array\n    if k > len(arr):\n        return None\n    \n    # Initialize the left and right pointers to the first and last elements of the array, respectively\n    left = 1\n    right = len(arr)\n    \n    # Loop through the array until the left pointer is greater than or equal to k\n    while left <= right:\n        # Calculate the midpoint of the array\n        mid = left + (right - left) // 2\n        \n        # Check if the midpoint is the kth element\n        if mid == k:\n            return arr[mid - 1]\n        \n        # If the midpoint is less than k, update the right pointer to mid + 1\n        elif mid < k:\n            left = mid + 1\n            \n        # If the midpoint is greater than k, update the left pointer to mid - 1\n        else:\n            right = mid - 1\n    \n    # If the while loop ends without finding the kth element, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the given array is empty or not\n    if len(arr) == 0:\n        return None\n    # Check if the given index is valid or not\n    if k < 1 or k > len(arr):\n        return None\n    # Initialize the variable to keep track of the count of the elements\n    count = 0\n    # Iterate over the array and count the elements\n    for i in range(len(arr)):\n        count += 1\n        # Check if the count is equal to k\n        if count == k:\n            return arr[i-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    if k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        low = 1\n        high = n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid > 0 and arr[mid - 1] == mid:\n                low = mid + 1\n            elif arr[mid] == k - mid:\n                return mid\n            elif arr[mid] < k - mid:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the array is empty or not\n    if len(arr) == 0:\n        return \"The array is empty\"\n    \n    # calculate the length of the array\n    n = len(arr)\n    \n    # check if the k is valid or not\n    if k < 1 or k > n:\n        return \"The k is invalid\"\n    \n    # initialize the first index to 1 and the last index to n\n    i = 1\n    j = n\n    \n    # initialize the variable to store the result\n    result = None\n    \n    # check if the kth element is in the first half or not\n    if k <= n // 2:\n        # initialize the loop variable\n        k_prime = k\n        \n        # initialize the variable to store the current index\n        current_index = i\n        \n        # loop through the array\n        while k_prime > 0:\n            # check if the current index is in the left half or not\n            if current_index <= n // 2:\n                # if yes, update the current index\n                i += 1\n                k_prime -= 1\n            else:\n                # if no, update the current index\n                j -= 1\n                k_prime -= 1\n            \n            # update the current index\n            current_index = i\n            \n        # return the result\n        result = arr[i - 1]\n    \n    else:\n        # initialize the loop variable\n        k_prime = k - n // 2\n        \n        # initialize the variable to store the current index\n        current_index = j\n        \n        # loop through the array\n        while k_prime > 0:\n            # check if the current index is in the left half or not\n            if current_index <= n // 2:\n                # if yes, update the current index\n                j -= 1\n                k_prime -= 1\n            else:\n                # if no, update the current index\n                i += 1\n                k_prime -= 1\n            \n            # update the current index\n            current_index = j\n            \n        # return the result\n        result = arr[j]\n    \n    # return the result\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n    # Initialize the camel case string\n    camel_case = ''\n    # Iterate over the list of words\n    for i, word in enumerate(words):\n        # If the current word is not the first word, capitalize it\n        if i > 0:\n            camel_case += word.capitalize()\n        else:\n            camel_case += word\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    # Split the word into words using the '_' separator\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n    # Join the words into a camel case string\n    camel_string = ''.join(camel_words)\n    return camel_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert the snake case string to a list of words\n    words = word.split('_')\n\n    # Convert the first word to camel case\n    camel_case = words[0]\n\n    # Convert the remaining words to camel case\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i > 0 and word[i-1].islower() and word[i].isupper():\n            camel_case += \"_\"\n        camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for char in word:\n        if char.isupper():\n            result += char\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    if word == \"\":\n        return \"\"\n\n    snake_case = word.split(\"_\")\n    camel_case = \"\"\n\n    for i in range(len(snake_case)):\n        if i == 0:\n            camel_case += snake_case[i].lower()\n        else:\n            camel_case += snake_case[i].capitalize()\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Splitting the word into a list of words\n    words = word.split('_')\n    # Converting the first letter of the first word to uppercase and the rest to lowercase\n    return words[0].upper() + ''.join([word.capitalize() for word in words[1:]])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].upper()\n        elif i!= len(word)-1 and word[i] == '_':\n            camel_word += word[i+1].upper()\n        else:\n            camel_word += word[i].lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:]]).replace('_', '')"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if m < n:\n        return 0\n    elif m == n:\n        return 1\n    else:\n        return (m * (m + 1)) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    elif n == 0:\n        return m\n    else:\n        return eulerian_num(n-1, 2*m) + eulerian_num(n-1, 2*m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    elif n == m:\n        return 0\n    else:\n        return 1 + eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables for the grid\n    grid = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the grid with values\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 or j == 1 or i == n or j == m:\n                grid[i][j] = 1\n            else:\n                grid[i][j] = grid[i-1][j] + grid[i][j-1] - grid[i-1][j-1]\n\n    # Return the value of the Eulerian number a(n, m)\n    return grid[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of steps for each person\n    steps = [0] * n\n    for i in range(1, n):\n        steps[i] = (steps[i-1] + m) % n\n        \n    # Calculate the number of steps for each person on a shortest path\n    shortest_paths = [0] * n\n    for i in range(1, n):\n        shortest_paths[i] = steps[i]\n        for j in range(i):\n            shortest_paths[i] = min(shortest_paths[i], shortest_paths[j] + steps[i])\n            \n    # Return the minimum number of steps for all persons\n    return min(shortest_paths)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function returns the value of the Eulerian number a(n, m).\n    The Eulerian number is defined as the smallest positive integer k such that k^n + k^m = 0.\n    If there are multiple such integers, the one with the smallest value is returned.\n    '''\n\n    # Initialize the list of possible values for k\n    k_list = [i**n + i**m for i in range(1, n+1)]\n\n    # Sort the list of possible values\n    k_list.sort()\n\n    # Return the first element in the sorted list\n    return k_list[0]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        return ((eulerian_num(n-1, m)+eulerian_num(n-1, m-1))/2)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 1\n    elif n % 2 == 0:\n        return eulerian_num(n - 2, m) * (4 * n + 1) // 3\n    else:\n        return eulerian_num(n + 2, m) * (4 * n + 1) // 3"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0] * (n+1) for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if i > j:\n                a[i][j] = a[i-1][j] + a[i][j-1]\n            else:\n                a[i][j] = a[i-1][j-1]\n    return a[m][n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i % 2 == 0 and j % 2 == 1:\n                print(f\"({i}, {j}): 2\")\n            elif i % 2 == 1 and j % 2 == 0:\n                print(f\"({i}, {j}): 2\")\n            else:\n                print(f\"({i}, {j}): 1\")"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Use a list comprehension to iterate over each sublist of strings in the input list\n    sorted_list = [sorted(sublist) for sublist in input_list]\n    return sorted_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in sort function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):   \n   '''\n   Write a python function to count true booleans in the given list.\n   '''\n   count = 0\n   for i in lst:\n      if i:\n         count += 1\n   return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the lists to tuples and concatenate them\n    result = tuple(test_list) + tuple(test_tup)\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_tup = tuple(test_tup)\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # concatenate the two lists and tuples\n    result = test_list + test_tup\n    # return the result\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the test_list to the test_tup using the + operator\n    test_tup += test_list\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Define a new list to append the given list to the given tuples\n    appended_list = []\n    \n    # Iterate over the given list\n    for item in test_list:\n        # Append each item to the appended_list\n        appended_list.append(item)\n    \n    # Append the given list to the given tuple\n    test_tup = test_tup + tuple(appended_list)\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple and append it to the tuple\n    test_tup = test_tup + tuple(test_list)\n    \n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n\n    Args:\n        num1 (list): The first list to be merged.\n        num2 (list): The second list to be merged.\n        num3 (list): The third list to be merged.\n\n    Returns:\n        list: The merged sorted list.\n    \"\"\"\n    num_list = num1 + num2 + num3\n    heapq.heapify(num_list)\n    sorted_list = []\n    while num_list:\n        sorted_list.append(heapq.heappop(num_list))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    This function takes three sorted lists as input and returns a single sorted list.\n    \"\"\"\n    # combine the three lists into one list\n    combined_list = num1 + num2 + num3\n\n    # use heapify to convert the list into a max heap\n    heapq.heapify(combined_list)\n\n    # remove duplicates from the heap\n    unique_list = []\n    while combined_list:\n        unique_list.append(heapq.heappop(combined_list))\n\n    # convert the heap back into a list\n    sorted_list = [num for num in unique_list]\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merging the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Using a min heap to sort the merged list\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Converting the min heap to a sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine all three lists into one\n    combined = num1 + num2 + num3\n    \n    # Convert the combined list to a set to remove duplicates\n    unique_set = set(combined)\n    \n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(unique_set))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists as input and returns a single sorted list.\n    \"\"\"\n    # Concatenate the three lists\n    merged_list = num1 + num2 + num3\n\n    # Use heapq to sort the list\n    sorted_list = heapq.nsmallest(len(merged_list), merged_list)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three lists into a single sorted list.\n    '''\n    # Convert lists to sets to remove duplicates\n    num1 = set(num1)\n    num2 = set(num2)\n    num3 = set(num3)\n\n    # Combine the sets\n    combined_list = num1.union(num2, num3)\n\n    # Convert set back to list and sort\n    sorted_list = sorted(list(combined_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i, j, k = 0, 0, 0\n\n    # merge lists\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    # add remaining elements to merged list\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n\n    # convert merged list to heap (O(n log n))\n    heapq.heapify(merged_list)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert the lists to sets to remove duplicates\n    set1 = set(num1)\n    set2 = set(num2)\n    set3 = set(num3)\n    # merge the sets\n    merged_set = set1.union(set2, set3)\n    # convert the merged set back to a list\n    merged_list = list(merged_set)\n    # sort the list in ascending order\n    merged_list.sort()\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of all the elements in the three input lists\n    merged_list = sorted(num1 + num2 + num3)\n    # Create a min-heap of the merged list\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n    # Extract the elements from the heap one by one and return them in sorted order\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n):\n    # Convert the binary string to a list of integers\n    binary = list(map(int, bin(int(s, 2))[2:]))\n    # Rotate the binary list n times\n    for i in range(n):\n        binary.append(binary.pop(0))\n    # Count the number of odd integers in the rotated list\n    count = 0\n    for i in binary:\n        if i % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables\n    count = 0\n    # Convert binary string to list of digits\n    binary_list = [int(i) for i in list(s)]\n    # Rotate the binary list the given number of times\n    for i in range(n):\n        temp = binary_list[0]\n        for j in range(len(binary_list) - 1):\n            binary_list[j] = binary_list[j + 1]\n        binary_list[-1] = temp\n    # Count the number of odd digits in the rotated list\n    for digit in binary_list:\n        if digit % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize variables to keep track of the number of odd and even values\n    odd_count = 0\n    even_count = 0\n\n    # convert the binary string to a list of characters\n    binary_list = list(s)\n\n    # rotate the binary string n times\n    for i in range(n):\n        # rotate the binary string by shifting each character to the left by 1 position\n        shifted_list = [binary_list[i] for i in range(len(binary_list)-1, -1, -1)]\n        # concatenate the rotated binary string with the original string to form a new binary string\n        new_binary_list = binary_list + shifted_list\n        # convert the new binary string to a string and count the number of odd and even values in it\n        binary_string = ''.join(new_binary_list)\n        for char in binary_string:\n            if char == '1':\n                odd_count += 1\n            else:\n                even_count += 1\n\n    # return the sum of the number of odd and even values\n    return odd_count + even_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    # find the length of the binary string\n    length = len(s)\n    # initialize a variable to keep track of the number of odd values\n    count = 0\n    # iterate through the string n times\n    for i in range(n):\n        # initialize a variable to keep track of the current rotation\n        rotation = ''\n        # iterate through the string\n        for j in range(length):\n            # get the character at the current position in the string\n            c = s[j]\n            # if the character is an odd number, add it to the rotation\n            if int(c) % 2!= 0:\n                rotation += c\n        # convert the rotation to a binary string\n        rotation = bin(int(rotation, 2))\n        # find the index of the first 1 in the binary string\n        index = rotation.find('1')\n        # if the index is -1, the rotation had no odd values\n        if index == -1:\n            # increment the count by the number of characters in the string\n            count += length\n        # if the index is not -1, the rotation had an odd value at the given index\n        else:\n            # count up to the index, adding one to each odd value\n            for k in range(index):\n                if s[k] == '1':\n                    count += 1\n            # add one to the count for the odd value at the given index\n            count += 1\n            # add one to the count for the odd value at the next position from the given index\n            if s[index+1] == '1':\n                count += 1\n    # return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers in the rotated binary string.\n    The odd numbers in the binary string are those that have an odd value after rotation.\n    The binary string is rotated by rotating the binary string n times and then appending the last character of the rotated string to the beginning.\n    For example, if the binary string is \"1011\" and n is 3, the rotated string will be \"11001\". \n    The odd numbers in the rotated string are the ones that have an odd value.\n    '''\n\n    # Convert the binary string to a list of characters\n    binary_list = list(s)\n    \n    # Rotate the binary string n times\n    for _ in range(n):\n        binary_list.append(binary_list.pop(0))\n    \n    # Count the number of odd numbers in the rotated string\n    odd_count = 0\n    for num in binary_list:\n        if num == '1':\n            odd_count += 1\n    \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    # convert binary string to list of digits\n    binary_str = list(s)\n\n    # rotate the list of digits n times\n    for _ in range(n):\n        binary_str.append(binary_str.pop(0))\n\n    # count the number of odd digits in the rotated list\n    count = 0\n    for digit in binary_str:\n        if digit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = bin(int(s))[2:] #converting the integer to binary string and removing the '0b' prefix\n    rotated_binary_string = ''\n    count = 0\n    for i in range(n):\n        rotated_binary_string = rotated_binary_string + binary_string[-1] + binary_string[:-1]\n        binary_string = rotated_binary_string[1:]\n    for i in binary_string:\n        if int(i) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_string = \"\"\n    for i in range(len(s)):\n        binary_string += str(int(s[i]))\n    rotated_binary_string = binary_string\n    for i in range(n):\n        rotated_binary_string = rotated_binary_string[::-1]\n    odd_count = 0\n    for i in range(len(rotated_binary_string)):\n        if int(rotated_binary_string[i]) % 2 == 1:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = ''.join([c for c in s[::-1] if c!= '1'])\n        count += s.count('1')\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty dictionary to store the count of each element\n    count_dict = {}\n    # Loop through each element in the nested list\n    for item in nestedlist:\n        # If the item is not a list, add it to the count_dict with a count of 1\n        if not isinstance(item, list):\n            count_dict[item] = 1\n        # If the item is a list, loop through each element in the list and add it to the count_dict\n        else:\n            for nested_item in item:\n                count_dict[nested_item] = count_dict.get(nested_item, 0) + 1\n    # Initialize an empty set to store the common elements\n    common_set = set()\n    # Loop through each key in the count_dict\n    for key, value in count_dict.items():\n        # If the value is 1, add the key to the common_set\n        if value == 1:\n            common_set.add(key)\n    # Convert the common_set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common.append(nestedlist[i])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common.append(nestedlist[i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            intersection = set(nestedlist[i]).intersection(set(nestedlist[j]))\n            if intersection:\n                common_elements.extend(intersection)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(sublist)\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a nested list as input and returns a list of common elements in the nested list.\n    \"\"\"\n\n    # Convert the nested list to a single list\n    flat_list = [item for sublist in nestedlist for item in sublist]\n\n    # Remove duplicates and sort the list\n    sorted_list = sorted(set(flat_list))\n\n    # Initialize the common list\n    common_elements = []\n\n    # Iterate through the sorted list and compare it with each element in the nested list\n    for item in sorted_list:\n        is_common = True\n        for sublist in nestedlist:\n            if item not in sublist:\n                is_common = False\n                break\n        if is_common:\n            common_elements.append(item)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in common:\n                common.append(item)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # create a set for each list in the nested list\n    set_list1 = set(nestedlist[0])\n    set_list2 = set(nestedlist[1])\n\n    # find the intersection of the sets and convert it back to a list\n    common_elements = list(set_list1.intersection(set_list2))\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(set(sublist))\n    return list(common_elements)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    :param text: A string to check if it represents an integer or not.\n    :type text: str\n    :return: True if the string represents an integer, False otherwise.\n    :rtype: bool\n    \"\"\"\n\n    # Remove any non-numeric characters from the string\n    clean_text = \"\".join(e for e in text if e.isdigit())\n\n    # Check if the cleaned string is an integer\n    try:\n        int_value = int(clean_text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if i:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(isinstance(x, dict) and not x for x in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # check if all elements in the list are dictionaries\n    if not all(isinstance(elem, dict) for elem in list1):\n        return False\n    # check if all dictionaries in the list are empty\n    for elem in list1:\n        if not all(elem[key] is None for key in elem):\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple to a string of numbers separated by commas\n    num_str = ', '.join(map(str, nums))\n    # convert the string to an integer\n    result = int(num_str)\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    if not all(isinstance(num, int) and num > 0 for num in nums):\n        return \"Invalid input. Please provide a tuple of positive integers.\"\n    else:\n        return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        raise TypeError('Input should be a tuple')\n    if len(nums) == 0:\n        raise ValueError('Tuple should have at least one element')\n    if not all(isinstance(num, int) and num > 0 for num in nums):\n        raise ValueError('All elements in the tuple should be positive integers')\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize an empty integer variable to store the final result\n    result = 0\n\n    # Iterate through each element of the tuple\n    for num in nums:\n        # Convert each element to an integer and add it to the result variable\n        result += int(num)\n\n    # Return the final result as an integer\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if type(nums)!= tuple:\n        raise TypeError(\"Input must be a tuple of integers.\")\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty list to store the integers\n    int_list = []\n    # Loop through the tuple and convert each element to an integer\n    for num in nums:\n        int_list.append(int(num))\n    # Convert the list of integers into a single integer and return it\n    return sum(int_list)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                element = float(element)\n                row[row.index(element)] = element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n                row[row.index(element)] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        for element in item:\n            try:\n                float_element = float(element)\n                result.append(float_element)\n            except ValueError:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i, row in enumerate(test_list):\n        for j, element in enumerate(row):\n            try:\n                float(element)\n                test_list[i][j] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, str):\n                try:\n                    float(element)\n                    row[row.index(element)] = float(element)\n                except ValueError:\n                    pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize two variables to keep track of the element and its frequency\n    element = 0\n    frequency = 0\n\n    # Iterate through the array\n    for i in arr:\n        # If the current element is equal to the element we are searching for, increment the frequency\n        if i == element:\n            frequency += 1\n        # If the current element is not equal to the element we are searching for, set the element and frequency to the current element and 1\n        else:\n            element = i\n            frequency = 1\n\n        # If the frequency is equal to 2, return the element\n        if frequency == 2:\n            return element\n\n    # If we reach the end of the loop without finding a 2-frequency element, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Traverse through the array and update the count of each element in the dictionary\n    for i in range(len(arr)):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n\n    # Traverse through the dictionary and find the element that appears only once\n    for key, value in count_dict.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_element = None\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i]!= unique_element:\n            unique_element = arr[i]\n            count = 1\n        else:\n            count += 1\n            \n    if count == 1:\n        return unique_element\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            if unique_element is None:\n                unique_element = arr[i]\n            else:\n                return None\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the frequency dictionary and check if the frequency is equal to 1\n    for key, value in freq.items():\n        if value == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in range(1, len(arr)-1):\n        if arr[i] == arr[i-1] and arr[i] == arr[i+1]:\n            return arr[i]\n    \n    return \"Element not found\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a hash table to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate through the hash table and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables\n    unique_elem = -1\n    count = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is not equal to the last element found, increment the count\n        if arr[i]!= arr[i-1]:\n            count += 1\n\n        # If we have found the unique element and its count is 1, return it\n        if count == 1:\n            unique_elem = arr[i]\n            break\n\n    return unique_elem"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] == arr[1]:\n        return search(arr[1:])\n    else:\n        return search(arr[1:])"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two pointers, one for the start of the array and one for the end of the array\n    start = 0\n    end = len(arr) - 1\n    \n    # Iterate through the array while the pointers are within the array bounds\n    while start < end:\n        # Calculate the middle index of the current sub-array\n        mid = (start + end) // 2\n        \n        # If the element at the middle index is the only occurrence of the element, return the element\n        if arr[mid] == arr[mid + 1]:\n            return arr[mid]\n        \n        # If the element at the middle index is greater than the element at the current start index,\n        # the element appears in the right half of the array, so update the end pointer\n        elif arr[mid] < arr[mid + 1]:\n            end = mid\n        # If the element at the middle index is less than the element at the current start index,\n        # the element appears in the left half of the array, so update the start pointer\n        else:\n            start = mid + 1\n    \n    # If the element appears in the entire array, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')  # initialize maximum product to negative infinity\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list as input and returns the maximum absolute product between numbers in pairs of tuples.\n    '''\n\n    # initialize the maximum product to be negative infinity\n    max_product = float('-inf')\n\n    # loop through the list of tuples\n    for tup in list1:\n\n        # calculate the absolute product of the first and second elements of each tuple\n        abs_product = abs(tup[0] * tup[1])\n\n        # update the maximum product if the calculated product is greater\n        if abs_product > max_product:\n            max_product = abs_product\n\n    # return the maximum product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize max product and maximum values\n    max_product = -float('inf')\n    max_1 = -float('inf')\n    max_2 = -float('inf')\n\n    # Loop through the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Get the pair of numbers\n            num_1 = list1[i]\n            num_2 = list1[j]\n\n            # Calculate the absolute product of the numbers and compare it to the current max product\n            product = abs(num_1 * num_2)\n            if product > max_product:\n                max_product = product\n                max_1 = num_1\n                max_2 = num_2\n\n    # Return the maximum product and the pair of numbers that produced it\n    return max_product, (max_1, max_2)"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][0] - list1[j][0])\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, this function will return the maximum absolute product of numbers in pairs of tuples.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            diff = abs(lst[i][0] - lst[j][0]) * abs(lst[i][1] - lst[j][1])\n            if diff > max_product:\n                max_product = diff\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            max_product = max(max_product, abs(product))\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable_pair(num1, num2):\n    '''\n    A function to check if two numbers are amicable.\n    '''\n    if num1 < num2:\n        a = num1\n        b = num2\n    else:\n        a = num2\n        b = num1\n    if a == b:\n        return False\n    for i in range(2, b):\n        if a % i == 0 and b % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable_pair(i, limit):\n            amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    if num < 12:\n        return False\n    sum1 = sum([i for i in range(1, num) if num % i == 0])\n    sum2 = sum([i for i in range(num, 20) if num % i == 0])\n    return sum1 == num and sum2 == num\n\n\nlimit = int(input(\"Enter the limit for the sum: \"))\nresult = sum_amicable_numbers(limit)\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is\", result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(2, limit+1):\n        if num!= 1:\n            is_amicable = False\n            for divisor in range(2, num):\n                if num % divisor == 0:\n                    is_amicable = True\n                    break\n            if is_amicable:\n                amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    def sum_amicable(n):\n        return sum(set(range(1, n)) - {1, n})\n\n    total = 0\n    for i in range(2, limit):\n        if i == sum_amicable(i):\n            total += i\n        if i == sum_amicable(sum_amicable(i)):\n            total += i\n\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if num == sum_of_divisors(num):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Create a list to store the amicable numbers\n    amicable_numbers = []\n\n    # Loop through numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if num in amicable_numbers:\n            continue\n        elif is_amicable(num):\n            # If the number is amicable, add it to the list\n            amicable_numbers.append(num)\n\n    # Calculate the sum of the amicable numbers\n    amicable_sum = sum(amicable_numbers)\n\n    return amicable_sum\n\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    # Check if the number is divisible by any number between 1 and the square root of the number\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        j = i + 1\n        while True:\n            k = i + j\n            if k > limit:\n                break\n            if i in amicable_numbers or j in amicable_numbers or k in amicable_numbers:\n                break\n            if i * j == k:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n                break\n            j += 1\n    \n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i == 1:\n            continue\n        if i == 2:\n            amicable_sum += i\n            continue\n        if i % 2 == 0:\n            continue\n        if i == sum([j for j in range(2, int(i**0.5)+1, 2) if i % j == 0]):\n            amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        if num < 12:\n            if num == sum_of_proper_divisors(num):\n                amicable_sum += num\n    return amicable_sum\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to find the sum of all proper divisors of a given number.\n    '''\n    divisors = [i for i in range(1, num) if num % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n\n    # Find all amicable numbers from 1 to limit\n    for i in range(1, limit):\n        # Check if i is a prime number\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # Check if i and (1/i) are amicable\n            if is_amicable(i, 1/i):\n                # Add i and (1/i) to amicable_numbers\n                amicable_numbers.append(i)\n                amicable_numbers.append(1/i)\n\n    # Sum up all amicable numbers\n    amicable_sum = sum(amicable_numbers)\n\n    return amicable_sum\n\ndef is_amicable(a, b):\n    '''\n    Write a function to check if two numbers are amicable.\n    '''\n    # Check if a and b are relatively prime\n    if gcd(a, b)!= 1:\n        return False\n    # Check if a and b are a perfect square\n    sqrt_a = int(a**0.5)\n    sqrt_b = int(b**0.5)\n    if sqrt_a * sqrt_a!= a or sqrt_b * sqrt_b!= b:\n        return False\n    # Check if a and b are both in the specified range\n    if a < 1000 or b < 1000:\n        return False\n    # Check if a and b are not equal\n    if a == b:\n        return False\n    # If all checks pass, a and b are amicable\n    return True\n\ndef gcd(a, b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    # Base case\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the magnitude of the complex number\n    mag = cmath.sqrt(a**2 + b**2)\n\n    # calculate the angle using the arc cosine\n    angle = cmath.phase(a + b*1j/mag)\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input, a and b, and returns the angle of the complex numbers as a complex number.\n    '''\n    angle = cmath.phase(a + b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    angle = cmath.phase(a + b * 1j)\n    return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \n    Args:\n    a (complex): the real part of the complex number\n    b (complex): the imaginary part of the complex number\n    \n    Returns:\n    float: the angle of the complex number in radians\n    \"\"\"\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    angle = cmath.polar(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = angle*180/cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert the input values to complex numbers\n    c = a + b*1j\n    d = a - b*1j\n    \n    # Calculate the angle of the complex number using the polar coordinates\n    angle = cmath.phase(c)\n    \n    # Return the angle in degrees\n    return round(angle*180/cmath.pi, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables for counting 0s and 1s\n    zero_count = 0\n    one_count = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the 0 counter\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the 1 counter\n        elif char == '1':\n            one_count += 1\n        \n        # Check if the 0 and 1 counts have reached the midpoint of the string\n        if zero_count >= one_count:\n            # If so, subtract the number of 0s from the total count of 1s\n            one_count -= zero_count\n        else:\n            # Otherwise, subtract the number of 1s from the total count of 0s\n            zero_count -= one_count\n            \n    # Return the maximum difference between the 0 and 1 counts\n    return max(zero_count, one_count)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    dp = [0] * n\n    \n    # Initialize first row\n    for i in range(n):\n        if string[i] == '0':\n            dp[i] = i\n    \n    # Fill in rest of the rows\n    for i in range(1, n):\n        if string[i] == '0':\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = dp[i-1] + 1\n    \n    # Find maximum difference in the first row\n    max_diff = 0\n    for i in range(n):\n        diff = i - dp[i]\n        max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    n = len(string)\n    count_0 = count_1 = 0\n    max_diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n        \n        for j in range(i, length):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            \n            if count_0!= count_1:\n                diff = abs(count_0 - count_1)\n                max_diff = max(max_diff, diff)\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    curr_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff = 0\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    num_0 = 0\n    num_1 = 0\n    \n    for bit in string:\n        if bit == '0':\n            num_0 += 1\n        else:\n            num_1 += 1\n    \n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if j == i+1:\n                continue\n            diff = abs(num_0 - num_1)\n            max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    length = len(string)\n    max_diff = 0\n\n    for i in range(length):\n        count0 = 0\n        count1 = 0\n        for j in range(i, length):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n\n            diff = abs(count0 - count1)\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n        else:\n            count_0 = 0\n            count_1 = 0\n            \n        max_diff = max(max_diff, abs(count_0 - count_1))\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    This function finds the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        string: A binary string.\n\n    Returns:\n        The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize the maximum difference to zero and the count of 0s and 1s in the first character of the string\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n\n    # Loop through the string and update the count of 0s and 1s for each character\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n        # Update the maximum difference if we encounter a difference\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n    max_diff = count_0 - count_1\n    \n    for i in range(len(string)):\n        sub_string = string[i:i+max_diff]\n        count_0 = 0\n        count_1 = 0\n        \n        for char in sub_string:\n            if char == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n                \n        if count_0 > count_1:\n            max_diff += 1\n        else:\n            max_diff -= 1\n            \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns their sum of common divisors.\n    '''\n    # check if a is divisible by b\n    if a % b == 0:\n        return a\n    else:\n        # check if b is divisible by a\n        if b % a == 0:\n            return b\n        else:\n            # find common divisors using trial division\n            for i in range(a, b):\n                if a % i == 0 and b % i == 0:\n                    return i"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def gcd(x, y):\n        \"\"\"\n        Calculate the greatest common divisor of two numbers using Euclidean algorithm.\n        \"\"\"\n        while y:\n            x, y = y, x % y\n        return x\n\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if gcd(i, a) == gcd(i, b):\n            common_divisors.append(i)\n\n    # Calculate the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    common_divisors = [i for i in range(1, b+1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)\n\nprint(sum(24, 36)) # Output: 36 (24+12)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 or b % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    divisor = 1\n\n    # Finding common divisors of a and b\n    while True:\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisors.append(divisor)\n        elif a % divisor!= 0 and b % divisor!= 0:\n            break\n        divisor += 1\n\n    # Finding the sum of common divisors\n    total_sum = 0\n    for i in range(1, max(a, b)):\n        if i in common_divisors:\n            total_sum += i\n\n    return total_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    Returns the sum of common divisors of num1 and num2.\n    \"\"\"\n    # Find the GCD of num1 and num2\n    gcd = gcd(num1, num2)\n\n    # Initialize variables for the sum of common divisors\n    common_divisor_sum = 0\n    remainder_sum = 0\n\n    # Iterate through the divisors of num1 and num2\n    for i in range(1, gcd + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisor_sum += i\n            remainder_sum += num1 // i\n\n    return common_divisor_sum + remainder_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of common divisors of those numbers.\n    \"\"\"\n    # Calculate the GCD of the two numbers\n    gcd = 1\n    while b:\n        a, b = b, a % b\n        gcd = a\n    # Calculate the sum of common divisors\n    common_divisors = 0\n    divisor = 2\n    while divisor <= gcd:\n        if gcd % divisor == 0:\n            common_divisors += gcd // divisor\n        divisor += 1\n    return common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the GCD of a and b\n    gcd = gcd(a, b)\n    # initialize the sum of common divisors\n    sum_cd = 0\n    # loop through all possible values of d (i.e., divisors of gcd)\n    for d in range(1, gcd+1):\n        # check if d is a common divisor of a and b\n        if (a % d == 0) and (b % d == 0):\n            # if it is, add it to the sum\n            sum_cd += d\n    # return the sum of common divisors\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the sum of common divisors of a and b\n    common = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common.append(i)\n    \n    # Find the sum of all common divisors\n    sum_common = sum(common)\n    \n    # Return the sum of common divisors\n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns their sum of common divisors.\n    \"\"\"\n\n    # Function to check if a number is a common divisor of two numbers\n    def is_common_divisor(num, divisor):\n        return num % divisor == 0\n\n    # Function to find the common divisors of two numbers\n    def find_common_divisors(num1, num2):\n        common_divisors = []\n        for i in range(1, num2 + 1):\n            if is_common_divisor(num1, i) and is_common_divisor(num2, i):\n                common_divisors.append(i)\n        return common_divisors\n\n    # Find the sum of common divisors of the two given numbers\n    common_divisors = find_common_divisors(a, b)\n    sum_of_common_divisors = sum(common_divisors)\n\n    # Return the sum of common divisors\n    return sum_of_common_divisors\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Split the string into words\n    words = str.split()\n\n    # Initialize an empty list to store the words longer than n characters\n    long_words_list = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If it is, append it to the list\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the input string into a list of words\n    words = str.split()\n    \n    # Find words that are longer than n characters\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    \n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Split the input string into a list of words\n    words = str.split()\n    # Initialize an empty list to store the words longer than n characters\n    longer_words = []\n    # Iterate through each word in the list\n    for word in words:\n        # Check if the length of the word is longer than n characters\n        if len(word) > n:\n            # If it is, append the word to the longer_words list\n            longer_words.append(word)\n    # Return the longer_words list\n    return longer_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize variables to keep track of the number of rows and columns\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n\n    # Check if the matrix has the right dimensions\n    if num_rows!= num_cols:\n        return False\n\n    # Initialize variables to keep track of the values of the magic square\n    magic_sum = 101  # Initialize to a number that is greater than any other value in the matrix\n    magic_col = [0] * num_cols  # Initialize a list of zeros of the same length as the columns\n\n    # Iterate over each element in the matrix\n    for i in range(num_rows):\n        # Check if the element is equal to the magic sum\n        if my_matrix[i][i]!= magic_sum:\n            return False\n\n        # Check if the element is equal to the magic sum in the correct column\n        if my_matrix[i][magic_col[i]]!= magic_sum:\n            return False\n\n        # Increment the magic sum\n        magic_sum += 1\n\n        # Increment the value in the column that this element belongs to\n        magic_col[i] += 1\n        if magic_col[i] == num_cols:\n            magic_col[i] = 0\n\n    # If we make it through the entire loop without finding any errors, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    # Check if the matrix is a square matrix\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if all elements of the matrix are unique\n    unique_elements = set()\n    for row in my_matrix:\n        for element in row:\n            if element in unique_elements:\n                return False\n            unique_elements.add(element)\n\n    # Check if the matrix can form a magic square\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        diagonal_sum1 = 0\n        diagonal_sum2 = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n            if i == j:\n                diagonal_sum1 += my_matrix[i][j]\n            elif i + j == n - 1:\n                diagonal_sum2 += my_matrix[i][j]\n        if row_sum!= col_sum or diagonal_sum1!= diagonal_sum2:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Calculate the sum of all elements in the matrix\n    row_sum = sum(row)\n    col_sum = sum(col)\n    diag_sum = sum(row + col + [row[0] + row[-1]])\n    \n    # Check that the sum of the rows is equal to the sum of the columns\n    if row_sum!= col_sum:\n        return False\n    \n    # Check that the sum of the rows is equal to the sum of the diagonals\n    if diag_sum!= col_sum:\n        return False\n    \n    # Check that all elements in the matrix are unique\n    unique_elements = set(sum(row) for row in my_matrix)\n    if len(unique_elements)!= len(my_matrix) ** 2:\n        return False\n    \n    # Check that the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            for k in range(len(my_matrix)):\n                if my_matrix[i][j] + my_matrix[j][k] + my_matrix[k][i]!= k + 1:\n                    return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the input matrix is a square matrix\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix has all the elements 1-n\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] < 1 or my_matrix[i][j] > n:\n                return False\n    \n    # Check if there is a magic square in the matrix\n    for i in range(n-3):\n        for j in range(n-3):\n            magic_sum = 0\n            for k in range(3):\n                for l in range(3):\n                    magic_sum += my_matrix[i+k][j+l]\n            if magic_sum == 25:\n                return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Create a list of numbers to check for presence in the matrix\n    numbers = list(range(1, len(my_matrix)+1))\n    \n    # Create a list of rows\n    rows = []\n    \n    # Loop through each row and check if all numbers are present in that row\n    for i in range(len(my_matrix)):\n        row = []\n        for j in range(len(my_matrix[i])):\n            row.append(my_matrix[i][j])\n        rows.append(row)\n        \n    # Check if the matrix is a magic square\n    for row in rows:\n        if row == numbers:\n            return True\n        \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # check rows for magic squares\n    for i in range(n):\n        row = my_matrix[i]\n        col = [row[j] for j in range(n)]\n        diag_1 = [row[i] for i in range(n)]\n        diag_2 = [row[n-1-i] for i in range(n)]\n        if row == col == diag_1 == diag_2:\n            return True\n    \n    # check columns for magic squares\n    for j in range(n):\n        col = [my_matrix[i][j] for i in range(n)]\n        diag_1 = [my_matrix[i][n-1-j] for i in range(n)]\n        diag_2 = [my_matrix[j][i] for i in range(n)]\n        if col == diag_1 == diag_2:\n            return True\n    \n    # check diagonals for magic squares\n    diag_1 = [my_matrix[i][i] for i in range(n)]\n    diag_2 = [my_matrix[i][n-1-i] for i in range(n)]\n    if diag_1 == diag_2:\n        return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                for k in range(rows):\n                    if my_matrix[i][j] == my_matrix[k][j]:\n                        return False\n            elif i+j == rows-1:\n                for k in range(cols):\n                    if my_matrix[i][j] == my_matrix[i][k]:\n                        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of the elements of the matrix\n    total = sum([sum(row) for row in my_matrix])\n\n    # Check if the total is equal to 0\n    if total == 0:\n        return True\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            # Check if the element at i,j is the sum of the elements in the matrix\n            if i == j and (my_matrix[i][j]!= (sum([my_matrix[k][j] for k in range(len(my_matrix))]) + sum([my_matrix[j][k] for k in range(len(my_matrix))]))):\n                return False\n            elif i + j == len(my_matrix) - 1 and (my_matrix[i][j]!= (sum([my_matrix[k][j] for k in range(len(my_matrix))]) + sum([my_matrix[j][k] for k in range(len(my_matrix))]))):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    # check for empty matrix\n    if not my_matrix:\n        return False\n    \n    # check for n x n matrix\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # calculate the sum of the rows and columns\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    \n    # calculate the sum of the main diagonal and secondary diagonal\n    main_diagonal_sum = sum(row_sum)\n    secondary_diagonal_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    # check for magic square\n    if main_diagonal_sum == secondary_diagonal_sum == col_sum[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[:, i])\n        if row_sum!= col_sum or i!= row_sum - col_sum:\n            return False\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if my_matrix[i][j] + my_matrix[i][k] + my_matrix[j][k] == n * n:\n                    return True\n    return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with the maximum frequency in the list.\n    '''\n\n    # Create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list and update the frequency count in the defaultdict\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Get the maximum frequency count from the defaultdict and return the key with the highest value\n    return max(freq_dict, key=freq_dict.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_item = [item for item, freq in freq_dict.items() if freq == max_freq]\n    return max_item[0] if len(max_item) == 1 else None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    \n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = max(freq.values())\n    max_items = [k for k, v in freq.items() if v == max_freq]\n    \n    if len(max_items) == 0:\n        return None\n    else:\n        return max(max_items)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)  # create a dictionary to store frequency of each element\n    max_freq = 0  # initialize max frequency to 0\n    \n    # iterate through the list\n    for num in nums:\n        freq[num] += 1  # increment the frequency of each element in the dictionary\n        \n        # update the max_freq if the current frequency is greater\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    \n    # iterate through the dictionary again to find the item with maximum frequency\n    for num, count in freq.items():\n        if count == max_freq:\n            return num\n    \n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each number in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency in the dictionary\n    max_num = None\n    max_freq = 0\n    for num, freq in freq.items():\n        if freq > max_freq:\n            max_num = num\n            max_freq = freq\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    \n    for num in nums:\n        freq[num] += 1\n    \n    max_num = max(freq.keys(), key=lambda x: freq[x])\n    \n    return max_num, freq[max_num]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_reverse = \"\"\n    for i in str1:\n        if i.lower() in vowels:\n            vowel_reverse += i.lower()\n    return vowel_reverse[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in str1:\n        if char not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'} # create a set of vowels\n    reverse_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reverse_str += str1[i]\n    return reverse_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'AEIOUaeiou'\n    vowel_indices = []\n    new_str = ''\n\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n\n    for i in range(len(str1)-1, -1, -1):\n        if i not in vowel_indices:\n            new_str += str1[i]\n\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char not in vowels:\n            new_str = char + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = []\n    for char in str1:\n        if char not in vowels:\n            reversed_str.append(char)\n    reversed_str.reverse()\n    return ''.join(reversed_str)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = ''\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] not in vowels:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    vowels_list = list(vowels)\n    str1_list = list(str1)\n    reversed_vowels = []\n    for i in range(len(str1_list)):\n        if str1_list[i] not in vowels_list:\n            reversed_vowels.append(str1_list[i])\n    reversed_vowels.reverse()\n    result = \"\".join(reversed_vowels)\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join(str(x) for x in tup1) + ')'"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(item) for item in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    tup_str = str(tup1)\n    # Return the string\n    return tup_str"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total_negative = 0\n    for num in nums:\n        if num < 0:\n            total_negative += num\n    return total_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativesum = 0\n    for num in nums:\n        if num < 0:\n            negativesum += num\n    return negativesum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n\n    # initialize the sum of negative numbers to zero\n    sum_neg = 0\n\n    # loop through the list of numbers\n    for num in nums:\n        # if the number is negative, add it to the sum of negative numbers\n        if num < 0:\n            sum_neg += num\n\n    # return the sum of negative numbers\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Convert n to decimal and then to hexadecimal \n    hex_n = hex(n)\n    # Remove the \"0x\" prefix and convert the result back to integer \n    dec_n = int(hex_n[2:], 16)\n    # Compute the nth hexagonal number \n    return (dec_n * (dec_n + 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Calculate the sum of the first n rows of the triangle\n    row_sum = (n*(n+1))//2\n    # Divide the sum by 2 to find the nth hexagon\n    nth_hex = row_sum // 2\n\n    return nth_hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(3*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(n+1)*(2*n+1)//6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 1\n    for i in range(n): \n        num = num * 6 + 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))//2\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Find the value of n to get the number of rows required to fill the square\n    n_rows = (n-1) // 2\n\n    # Initialize the variable to store the result\n    hex_num = 0\n\n    # Iterate over the number of rows required to fill the square\n    for i in range(n_rows):\n        # Add the value of i to the result\n        hex_num += i * (2 * i + 1)\n\n    # Add the value of n to the result\n    hex_num += n\n\n    # Return the result\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num *= 6\n        hex_num = num - (num-1) // 2\n        print(hex_num, end=' ')"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        a, b = a + b, a * 2\n    return a"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the list of integers to an array of integers\n    arr = array('i', nums)\n\n    # count the number of non-zeroes in the array\n    non_zeroes = sum(arr)\n\n    # count the number of zeroes in the array\n    zeroes = len(arr) - non_zeroes\n\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = zeroes / non_zeroes if non_zeroes > 0 else 0\n\n    # return the ratio as a float\n    return float(ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        for i in range(len(num)):\n            if num[i] == 0:\n                zero_count[i] += 1\n\n    non_zero_count = len(nums) - sum(zero_count)\n    ratio = non_zero_count / sum(zero_count)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = [num for num in nums if num!= 0]\n    zeroes = [num for num in nums if num == 0]\n    non_zero_count = len(non_zeroes)\n    zero_count = len(zeroes)\n    ratio = zero_count / non_zero_count if non_zero_count!= 0 else 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the input array to a list of integers\n    nums = list(nums)\n    \n    # Initialize variables for the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    \n    # Loop through the list of integers\n    for num in nums:\n        # Check if the number is zero\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # Calculate and return the ratio of zeroes to non-zeroes\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i')\n    for num in nums:\n        if num == 0:\n            count.append(1)\n        else:\n            count.append(0)\n    total = len(nums)\n    zero_count = sum(count)\n    non_zero_count = total - zero_count\n\n    zero_ratio = 0\n    if non_zero_count!= 0:\n        zero_ratio = round(zero_count / non_zero_count, 2)\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array of type int8 to store the binary representation of the numbers\n    arr = array('b')\n    \n    # Iterate through the input array and append the binary representation of each number to the array\n    for num in nums:\n        arr.append(bin(num)[2:])\n    \n    # Initialize variables to keep track of the number of non-zeroes and zeroes\n    count_zeros = 0\n    count_ones = 0\n    \n    # Iterate through the binary representation array and count the number of ones and zeros\n    for bin_num in arr:\n        for bit in bin_num:\n            if bit == '1':\n                count_ones += 1\n            elif bit == '0':\n                count_zeros += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = count_zeros / count_ones\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize counters for non-zero and zero elements\n    non_zero_count = 0\n    zero_count = 0\n\n    # Iterate through the array and count non-zero and zero elements\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n\n    # Calculate the ratio of non-zero to zero elements\n    ratio = non_zero_count / zero_count\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        count[num] += 1\n    zero_count = 0\n    non_zero_count = 0\n    for i in range(len(count)):\n        if count[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array of boolean values representing whether each element of the array is zero or non-zero\n    is_zero = array('b', [x == 0 for x in nums])\n    # Calculate the total number of elements in the array\n    total = sum(is_zero)\n    # Divide the total number of elements by the sum of the boolean array to get the ratio of zeroes to non-zeroes\n    return total / len(is_zero)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n\n    return zero_count / non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n\n    # Check if the number is a power of 2\n    if binary_str.count('1') == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if n is even or not\n    if n%2 == 0:\n        return \"Not possible to represent as sum of powers of 2\"\n    \n    # Calculate the sum of powers of 2 from 2 to n\n    sum_of_powers = 0\n    while n > 0:\n        if n%2 == 1:\n            sum_of_powers += 1\n        n //= 2\n        \n    # Check if sum of powers is equal to n\n    if sum_of_powers == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        # Finding the number of powers of 2 between 1 and n\n        count = 0\n        while n % 2 == 0:\n            count += 1\n            n //= 2\n        # Checking whether the sum of powers of 2 is greater than or equal to n\n        if count * (count + 1) // 2 >= n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is zero or one\n    if n == 0 or n == 1:\n        return True\n    # Check if the number is divisible by 2\n    elif n % 2 == 0:\n        return False\n    # Check if the number can be represented as a sum of non-zero powers of 2\n    else:\n        # Check if the number can be represented as a sum of powers of 2\n        while n % 2 == 0:\n            n //= 2\n        # Check if the number is a sum of powers of 2\n        if n == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2:\n        return False\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count > 1\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize the count of non-zero powers of 2\n    count = 0\n    # Loop through the digits of the number\n    while n > 0:\n        # Get the last digit\n        digit = n % 10\n        # Check if the digit is 0\n        if digit == 0:\n            # If it is, increment the count of non-zero powers of 2\n            count += 1\n        # If the digit is not 0, it must be a power of 2\n        else:\n            # Loop through the powers of 2 from 2 to digit\n            for power in range(2, digit+1):\n                # Check if the digit is a power of 2\n                if digit == 2**power:\n                    # If it is, increment the count of non-zero powers of 2\n                    count += 1\n                    break\n        # Remove the last digit from the number\n        n //= 10\n    # Check if the count of non-zero powers of 2 is odd or even\n    if count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initialize the sum of powers of 2 to zero\n    sum_of_powers = 0\n    \n    # Loop through each bit in the binary representation of the number\n    for i in range(31, -1, -1):\n        # If the current bit is 1, add its 2^i power to the sum of powers of 2\n        if n & (1 << i):\n            sum_of_powers += (1 << i)\n    \n    # If the sum of powers of 2 is equal to the original number, then the original number can be represented as sum of powers of 2\n    if n == sum_of_powers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 1:\n        if n & 1 == 1:\n            if count == 0:\n                return False\n            count -= 1\n        n >>= 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initialize a boolean variable to keep track of whether the number is representable as sum of powers of 2 or not\n    is_power_of_two = False\n\n    # Loop through each power of 2 from 0 to the square root of the number\n    for i in range(2, int(n**0.5)+1):\n        # Check if the number can be represented as a sum of powers of 2\n        if (n & (n - 1)) == 0 and n == i**2:\n            is_power_of_two = True\n            break\n\n    return is_power_of_two"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # pi * radius\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # using mathematical formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # pi = 3.14\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # approximate circumference using the formula \u03c0 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Helper function to flatten the list recursively\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    # Flatten the list recursively\n    flattened_list = flatten(test_list)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Use nested loops to iterate through the list of lists and append each element to a list\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    def flatten(lst):\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            result.add(lst)\n    result = set()\n    flatten(test_list)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n\n    Args:\n    test_list (list): A list containing a mix of lists and numbers.\n\n    Returns:\n    list: A single list containing all the numbers from the original list.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            for subitem in item:\n                if isinstance(subitem, list):\n                    for subsubitem in subitem:\n                        flat_list.append(subsubitem)\n                else:\n                    flat_list.append(subitem)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result += extract_singly(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened.extend(extract_singly(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_pancake(arr):\n        n = len(arr)\n        for i in range(n):\n            # find the maximum element in the unsorted part of the array\n            max_idx = i\n            for j in range(i+1, n):\n                if arr[j] > arr[max_idx]:\n                    max_idx = j\n            # swap the maximum element with the first element of the unsorted part\n            arr[i], arr[max_idx] = arr[max_idx], arr[i]\n            # reverse the unsorted part of the array\n            arr[i+1:0:-1] = arr[i+1:0:-1][::-1]\n        return arr\n\n    # Sort the array using pancake sort\n    nums = sort_pancake(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # The pancake sorting algorithm\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the element at index i\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Reverse the list to sort it in descending order\n    nums.reverse()\n\n    # Set the initial index and length variables\n    index = 0\n    length = len(nums)\n\n    # While the index is less than the length of the list\n    while index < length:\n        # Find the maximum element in the unsorted part of the list\n        max_index = index\n        for i in range(index, length):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # If the maximum element has not been moved, the list is already sorted\n        if max_index == index:\n            break\n\n        # Swap the maximum element with the element at the current index\n        nums[index], nums[max_index] = nums[max_index], nums[index]\n\n        # Move the index one step forward\n        index += 1\n\n    # Reverse the sorted part of the list to get the final sorted list\n    nums.reverse()\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        # swap the maximum element with the first element in the unsorted part of the array\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the largest element\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the largest element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Helper function to swap elements\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    # Helper function to reverse the sublist between i and j\n    def reverse(nums, i, j):\n        while i < j:\n            swap(nums, i, j)\n            i += 1\n            j -= 1\n    \n    # Iterate through the list until the list is sorted\n    for i in range(len(nums)):\n        # Find the largest element\n        max_index = i\n        for j in range(i, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # If the largest element is not already at the end, swap it with the end\n        if i!= max_index:\n            swap(nums, i, max_index)\n        \n        # Reverse the sublist between i and the maximum index\n        reverse(nums, i, max_index)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    n = len(nums)\n\n    # Perform pancake sort\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the list from the first element to the maximum element\n        for j in range(i, max_index, -1):\n            nums[j], nums[i] = nums[i], nums[j]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    # Helper function to reverse a list of indices\n    def reverse(arr, start, end):\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n    \n    # Helper function to permute the elements in the list\n    def permute(arr, start, end):\n        if start == end:\n            return\n        pivot = arr[end]\n        left = start\n        for i in range(start, end):\n            if arr[i] < pivot:\n                arr[left], arr[i] = arr[i], arr[left]\n                left += 1\n        arr[left], arr[end] = arr[end], arr[left]\n        permute(arr, start, left-1)\n        permute(arr, left+1, end)\n        \n    # Pancake sort algorithm\n    n = len(nums)\n    for i in range(n):\n        # Reverse the list from 0 to i-1\n        reverse(nums, 0, i)\n        # Permute the list from 0 to n-1\n        permute(nums, 0, n-1)\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Choose the next largest element\n        j = i\n        while j < n and nums[j] <= nums[i]:\n            j += 1\n        # Swap the elements\n        nums[i], nums[j-1] = nums[j-1], nums[i]\n        # Reverse the range from i to j-1\n        nums[i:j], nums[i:i] = nums[:j], nums[i:i][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def sort_helper(arr, n):\n        # We need to reverse the array and then sort it using the selection sort algorithm\n        arr = arr[::-1]\n        for i in range(n):\n            min_idx = i\n            for j in range(i+1, n):\n                if arr[j] < arr[min_idx]:\n                    min_idx = j\n            arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        return arr\n\n    # We divide the array into two parts - one part that will be sorted and the other part that will be unsorted\n    n = len(nums)\n    unsorted = nums[n//2:]\n    sorted_part = nums[:n//2]\n\n    # We sort the unsorted part using selection sort algorithm\n    sorted_unsorted = sort_helper(unsorted, n//2)\n\n    # Finally, we concatenate the sorted part and the sorted unsorted part and return the sorted array\n    return sorted_part + sorted_unsorted"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    :param list1: first list of items\n    :type list1: list\n    :param list2: second list of items\n    :type list2: list\n    :param list3: third list of items\n    :type list3: list\n    :return: number of identical items in the same position of three given lists\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initialize max difference to the first element of the array\n    max_diff = abs(arr[0] - arr[1])\n\n    # Loop through the array and update the max difference if a new difference is found\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize variables to store maximum absolute difference and minimum element\n    max_diff = 0\n    min_ele = arr[0]\n    # Loop through the array and find the maximum absolute difference\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - min_ele)\n        if diff > max_diff:\n            max_diff = diff\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf') #initializing max_diff to negative infinity\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # initialize max_diff to the minimum possible value\n    max_diff = float('inf')\n    \n    # loop through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in a given array.\n\n    Args:\n        arr (list): The array of numbers for which to find the maximum absolute difference.\n\n    Returns:\n        int: The maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x_0 = (-b + (b ** 2 - 4 * a * n) ** 0.5) / (2 * a)\n    x_1 = (-b - (b ** 2 - 4 * a * n) ** 0.5) / (2 * a)\n\n    if x_0 == x_1:\n        return (x_0, None)\n\n    return (x_0, x_1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # calculate the discriminant\n    d = b**2 - 4*a*n\n\n    # check if there is a solution\n    if d < 0:\n        return None\n\n    # calculate the roots\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n\n    # check if the roots are integers\n    if x1.is_integer() and x2.is_integer():\n        return (int(x1), int(x2))\n    else:\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n // b + 1):\n        y = n - x * b\n        if a * x + b * y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    if d < 0:\n        return None\n    elif d == 0:\n        return (-b) // a, -b // a\n    else:\n        # calculate the real roots of the discriminant\n        x1 = (-b + d**0.5) // (2*a)\n        x2 = (-b - d**0.5) // (2*a)\n        \n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple (x, y) such that ax + by = n, or None if no such solution exists.\n    \"\"\"\n    # Check if the equation is solvable\n    if b == 0:\n        return None\n    \n    # Find the root using the quadratic formula\n    x = (-n + b**0.5) / (2 * a)\n    y = (-n - b**0.5) / (2 * a)\n    \n    # Check if the solution is valid\n    if x**2 + y**2!= n:\n        return None\n    \n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = -b / (2 * a)\n    y1 = -x1 / a\n    x2 = -x1 / b\n    y2 = -y1 / b\n    x3 = (n - x1 * a - y1 * b) / (x2 * a - y2 * b)\n    y3 = (n - x3 * a - y3 * b) / (x2 * a - y2 * b)\n    if x1 * x2 * x3 == 0:\n        return None\n    elif x1 * x2 * x3 == -n:\n        return (x1, y1)\n    elif x1 * x2 * x3 == n:\n        return (x2, y2)\n    elif x1 * x2 * x3 > n:\n        return None\n    else:\n        return (x3, y3)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the given equation is valid\n    if a == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if there is a solution\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        \n        return (x1, x2)\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        \n        return (x1, x1)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a, b and n are all positive\n    if a <= 0 or b <= 0 or n <= 0:\n        return None\n    # check if n is divisible by both a and b\n    if n % (a * b)!= 0:\n        return None\n    # find the solutions using quadratic formula\n    d = n // (a * b)\n    x1 = (-b + (d * d - n) ** 0.5) / (2 * a)\n    x2 = (-b - (d * d - n) ** 0.5) / (2 * a)\n    # check if x1 and x2 are real roots of the quadratic equation\n    if x1.imag!= 0 or x2.imag!= 0:\n        return None\n    # return the solution as a tuple\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # initialize variables\n    x = 0\n    y = 0\n    i = 1\n    # loop until solution found or max iterations reached\n    while True:\n        # check if solution exists\n        if a * x + b * y == n:\n            return (x, y)\n        # increment x and y\n        x += i\n        y += i\n        # increment iteration counter\n        i += 1\n        # check if max iterations reached\n        if i > 100:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize the variables\n    x = 0\n    y = 0\n    # initialize the loop counter\n    count = 0\n    # loop while the loop counter is less than the given number of solutions\n    while count < n:\n        # calculate the value of x and y\n        x = int((b * count - n) / a)\n        y = a * x + b * count\n        # check if the value of x and y satisfies the given equation\n        if x * a + y * b == n:\n            # increment the loop counter\n            count += 1\n            # return the solution as a tuple of x and y\n            return (x, y)\n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Convert both lists to sets to remove duplicates and then convert back to lists\n    list1_set = set(list1)\n    list2_set = set(list2)\n    # Subtract the set of list2 from the set of list1 and convert back to a list\n    result_list = list(list1_set - list2_set)\n    return result_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through list2 and remove any elements in list1\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2 * i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        total = 0\n        for i in range(n // 2):\n            total += (n - 2 * i)\n        return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    # initialize the sum to zero\n    total = 0\n\n    # loop through the series from 0 to n // 2\n    for i in range(n // 2):\n        # calculate the sum\n        total += n - 2 * i\n\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_val = 0\n    for i in range(n // 2):\n        sum_val += n - 2 * i\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    i = 0\n    total = 0\n    while n - 2 * i >= 0:\n        total += n - 2 * i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += (n - 2*i)\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n < 0:\n        return None\n    result = 0\n    i = 0\n    while n - 2 * i > 0:\n        result += n - 2 * i\n        i += 1\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    i = 0\n    while i <= n // 2:\n        result += n - 2 * i\n        i += 1\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += (s * tan(i*2*pi/l))\n    area *= 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a regular polygon using the formula A = (s/2) * (l/n), where s is the side length, l is the length of the side, and n is the number of sides\n    A = (s/2) * (l/tan(pi/n))\n    \n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s\n    area *= 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l * tan(pi/l)) / (4 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    perimeter = 2 * l\n    # Calculate the area of the polygon using the formula: A = pi * r^2\n    r = s / (4 * pi * tan(pi/l))\n    A = pi * r**2\n    # Return the area of the polygon\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter\n    sp = 0.5 * s * l\n    \n    # Calculate the area\n    area = 0.5 * s * tan(pi/l)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * l) / (4 * tan(pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (l**2 + l**2)\n    print(\"The area of the polygon is: \", area)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter\n    sp = 0.5 * s * l\n\n    # Calculate the area using the formula for a right triangle\n    area = 0.5 * s * tan(pi / l)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s ** 2) / (4 * tan(pi / l))\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # check if n is divisible by 1\n    if n % 1 == 0:\n        return False\n    \n    # calculate the sum of the divisors\n    divisors_sum = sum(range(1, int(math.sqrt(n))+1))\n    if n == divisors_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Calculate the sum of the divisors of n\n    sum_divisors = sum([i for i in range(1, int(math.sqrt(n))+1) if n%i == 0])\n    \n    # Calculate the sum of the divisors of n+1\n    sum_divisors_plus_one = sum([i for i in range(1, int(math.sqrt(n+1))+1) if (n+1)%i == 0])\n    \n    # If the sum of divisors is equal to sum of divisors of n+1, then return True\n    if sum_divisors == sum_divisors_plus_one:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    divisors = []\n\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    for divisor in divisors:\n        div_sum += divisor\n\n    return div_sum == sum(divisors)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    # iterate through the range of numbers from 1 to n\n    for i in range(1, n + 1):\n        # check if i is a divisor of n\n        if n % i == 0:\n            divisors.append(i)\n    # calculate the sum of the divisors\n    sum_divisors = sum(divisors)\n    # check if the sum of the divisors of n and its reciprocal are the same\n    if abs(sum_divisors - (n * n)) < 0.001:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    sum_divisors = sum(range(1, int(math.sqrt(n))+1))\n    sum_divisors += sum(range(int(math.sqrt(n))+1, n+1))\n    # Check if the sum of the divisors is equal to n\n    return sum_divisors == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i + n // i\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    # calculate sum of divisors of n \n    divisors = [] \n    i = 1 \n    while i*i <= n: \n        if n % i: \n            i += 1 \n        else: \n            n //= i \n            divisors.append(i) \n    divisors.append(n) \n    # calculate sum of divisors of sum of divisors \n    div_sum = 0 \n    for i in range(len(divisors)): \n        div_sum += divisors[i] \n    if div_sum == sum(divisors): \n        return True \n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # calculate the sum of the divisors of n\n    div_sum = sum(range(1, n+1))\n    \n    # calculate the sum of the divisors of the result of n // 2\n    half_n = n // 2\n    div_sum_half = sum(range(1, half_n+1))\n    \n    # check if the sum of the divisors is equal to the sum of the divisors of half_n\n    if div_sum == div_sum_half:\n        print(f\"{n} and {half_n} have the same divisors sum.\")\n    else:\n        print(f\"{n} and {half_n} have different divisors sums.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # Initialize variables to store the count and the position of the character\n    count = 0\n    position = -1\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the current character is a lowercase letter\n        if str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            # If the character at the current position is the same as the current character\n            if str1[i] == str1[position]:\n                # Increment the count of the current character\n                count += 1\n            else:\n                # Reset the count and the position to 0 if the character at the current position is different than the current character\n                count = 0\n                position = i\n    # Return the count of the characters that occur at the same position in the string as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Define the English alphabet\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    # Initialize variables\n    count = 0\n\n    # Loop through each character in the input string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n\n        # Check if the character is in the English alphabet\n        if char in english_alphabet:\n            # If it is, increment the count\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower() == chr(ord('a') + i):\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(26):\n        if alphabet[i].lower() in str1.lower():\n            count += str1.lower().count(alphabet[i].lower())\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(65 + i)) == 1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_count = [0] * 26 # initialize an array of size 26 with all elements set to 0\n    \n    for char in str1:\n        # convert the character to lowercase\n        char = char.lower()\n        \n        # check if the character is in the english alphabet\n        if char in english_alpha:\n            # find the position of the character in the English alphabet\n            index = english_alpha.index(char)\n            \n            # increment the count at that position\n            char_count[index] += 1\n            \n    # find the total count of characters\n    total_count = sum(char_count)\n    \n    return total_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = [chr(i) for i in range(ord('a'), ord('z')+1)]\n    count = 0\n    \n    for char in str1:\n        if char in alphabet:\n            index = alphabet.index(char)\n            if index == alphabet.index(char.upper()):\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # Check if the character is a letter in the English alphabet\n        if char.isalpha():\n            # Check if the character is already in the dictionary\n            if char in char_count:\n                # Increment the count of the character in the dictionary\n                char_count[char] += 1\n            else:\n                # Add the character to the dictionary with a count of 1\n                char_count[char] = 1\n\n    # Return the dictionary containing the count of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # create a dictionary to store the position of each English alphabet character\n    position_dict = {}\n    for i in range(1, 27):\n        position_dict[chr(i)] = i\n\n    # create a dictionary to store the number of occurrences of each character at each position\n    char_count_dict = {}\n    for char in str1:\n        if char.isalpha():\n            char = char.lower()\n            if char in char_count_dict:\n                char_count_dict[char][position_dict[char]] += 1\n            else:\n                char_count_dict[char] = {position_dict[char]: 1}\n\n    # return the number of occurrences of each character at each position\n    return char_count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Create a list of the English alphabet in lowercase\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each character in the input string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n\n        # If the character is a letter in the English alphabet, increment its count\n        if char in alphabet:\n            if char in counts:\n                counts[char] += 1\n            else:\n                counts[char] = 1\n\n    # Loop through the counts dictionary and print the counts for each character\n    for char, count in counts.items():\n        print(char, count)\n\n    # Return the total count of characters\n    return sum(counts.values())"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize power of 2 to 1\n    power_of_2 = 1\n\n    # loop until power of 2 is greater than or equal to n\n    while power_of_2 < n:\n        # multiply power of 2 by 2\n        power_of_2 *= 2\n\n    # return power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n\n    # find the index of the rightmost set bit\n    index = 0\n    while (n & 1) == 0:\n        n >>= 1\n        index += 1\n\n    # find the next power of 2 by raising 2 to the power of the index\n    return 2**index"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes a number n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n /= 2\n    return 2 ** (int(n) - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Initialize result to n\n    result = n\n\n    # Loop while result is not a power of 2\n    while result & (result - 1)!= 0: \n        result = result << 1\n\n    # Return result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function returns the smallest power of 2 greater than or equal to the given number n.\n    \"\"\"\n    n -= 1  # We want the smallest power of 2 greater than or equal to n.\n    n |= (n >> 1)  # Set the least significant bit of n to 1.\n    n |= (n >> 2)  # Set the 2nd least significant bit of n to 1.\n    n |= (n >> 4)  # Set the 3rd least significant bit of n to 1.\n    n |= (n >> 8)  # Set the 4th least significant bit of n to 1.\n    n |= (n >> 16)  # Set the 5th least significant bit of n to 1.\n    return n + 1  # Return the smallest power of 2 greater than or equal to n."
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary representation\n    bin_n = bin(n)[2:]\n\n    # If n is already a power of 2, return it\n    if bin_n == bin(int(2 ** bin_n))[2:]:\n        return n\n\n    # If n is not a power of 2, find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < len(bin_n):\n        if bin_n[-power] == '1':\n            return n << power\n        power += 1\n\n    # If the loop terminates, then n is a power of 2\n    return n << power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary and then add one to the binary representation to find the next power of 2\n    next_power_of_2 = 1\n    while next_power_of_2 < n:\n        next_power_of_2 <<= 1\n    \n    return next_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the next power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1): # loop until no more bits to shift\n        n = n | (n-1) # shift right to get least significant bit\n    return n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(lst, num):\n    '''\n    Counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x): \n    '''\n    This function takes in two arguments: a list and a number. It returns the count of the number of occurrences of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the list from index m to index n\n    for i in range(m, n+1):\n        # Add the value at the current index to the sum variable\n        sum += list1[i-1]\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n < 0 or m > len(list1) or n > len(list1):\n        return \"Invalid range indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # initialize a variable to store the sum of numbers in the specified range\n    sum_range = 0\n\n    # loop through the list, adding up the numbers in the range to the sum_range variable\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    \n    # return the sum_range variable\n    return sum_range\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    sum_range = 0\n    for i in range(m, n + 1):\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = [a, a*math.sqrt(3), a*math.sqrt(3), a*math.sqrt(3), a]\n    perimeter = sum(sides)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula for the perimeter of a regular pentagon is 5a\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Convert side length to radians\n    sides = [math.radians(a), math.radians(a), math.radians(a), math.radians(a), math.radians(a)]\n    # Calculate the length of each side using the cosine rule\n    perimeter = 5 * sum(sides)\n    # Convert the perimeter from radians to degrees\n    perimeter = math.degrees(perimeter)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    std ='std'\n    index = s.find(std)\n    while index!= -1:\n        count += 1\n        index = s.find(std, index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    temp = ''\n    for i in s:\n        if i =='s' and temp[-1] == 't':\n            count += 1\n        temp += i\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    std_len = 3\n    for i in range(len(s)-std_len+1):\n        if s[i:i+std_len] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 4  # jump over'std' string\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    This function will check if all the elements in a tuple have the same data type or not.\n    '''\n    # initialize a variable to store the data type of the first element\n    first_data_type = type(test_tuple[0])\n    # loop through the rest of the tuple elements\n    for element in test_tuple[1:]:\n        # check if the current element has a different data type from the first element\n        if type(element)!= first_data_type:\n            # if not, return False\n            return False\n    # if all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the length of the tuple is 1\n    if len(test_tuple) == 1:\n        return True\n    \n    # Check the data type of the first element\n    data_type = type(test_tuple[0])\n    \n    # Loop through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # If the data type of the current element is different than the first element, return False\n        if type(element)!= data_type:\n            return False\n    \n    # If all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if tuple is empty\n    if not test_tuple:\n        return True\n    # get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # check if all elements in the tuple have the same data type\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    \n    type1 = type(test_tuple[0])\n    for i in test_tuple[1:]:\n        if type(i)!= type1:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(i) for i in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a set to store unique data types in the tuple\n    unique_data_types = set()\n\n    # iterate over each element in the tuple\n    for element in test_tuple:\n        # if the element is not a string, int, float or bool, add it to the set of unique data types\n        if not isinstance(element, (str, int, float, bool)):\n            unique_data_types.add(type(element).__name__)\n\n    # check if there is only one unique data type in the set\n    if len(unique_data_types) == 1:\n        # if so, return True\n        return True\n    else:\n        # if not, return False\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if tuple is not empty\n    if len(test_tuple) == 0:\n        return 'Tuple is empty'\n    \n    # check if tuple has only one element\n    elif len(test_tuple) == 1:\n        return 'Tuple has only one element'\n    \n    # check if tuple has only one element of the same data type\n    else:\n        first_element_type = type(test_tuple[0])\n        for element in test_tuple:\n            if type(element)!= first_element_type:\n                return 'All elements in tuple have different data types'\n        return 'All elements in tuple have same data type'"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for item in test_tuple:\n        type_list.append(type(item))\n    if len(set(type_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Returns whether the element x is the majority element in the given sorted array arr.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Count the number of occurrences of x in the array\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    # Check if the count is greater than or equal to n/2\n    if count >= n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    return count > n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif count > 0:\n            count -= 1\n    return count > 0"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count >= n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer `n` as input and returns the number of set bits (binary digits with value 1) in `n`.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1  # count the number of set bits in the least significant bit position\n        n = n >> 1  # shift the bits to the right by 1 position\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n>0):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer input 'n' and returns the number of set bits (binary digits with value 1) in the number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    # initialize an empty string to store the odd-indexed characters\n    result = \"\"\n    # iterate over each character in the input string\n    for i in range(len(str)):\n        # check if the current character has an odd index\n        if i % 2 == 1:\n            # if so, append it to the result string\n            result += str[i]\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_values = set()\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            odd_values.add(char)\n    return \"\".join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    :param str: A string.\n    :return: A new string with odd index values removed.\n    \"\"\"\n\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and removes the characters which have odd index values of the string.\n    '''\n    # Initialize an empty string to store the output\n    output = ''\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index value of the character is odd\n        if str.index(char) % 2!= 0:\n            # If it is odd, append it to the output string\n            output += char\n    # Return the output string\n    return output"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_index_values = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_index_values.append(str[i])\n    return ''.join(odd_index_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import string\n\ndef odd_values_string(str):\n    odd_index_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_str += str[i]\n    return odd_index_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of those three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Find the minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0 and r == 0:\n        return True\n    elif l == 0 and r > 0:\n        return all_Bits_Set_In_The_Given_Range(n, 0, r-1)\n    elif l > 0 and r == 0:\n        return all_Bits_Set_In_The_Given_Range(n, l-1, 0)\n    else:\n        if n & (1<<l):\n            return False\n        return all_Bits_Set_In_The_Given_Range(n, l, r-1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    for i in range(l, r+1):\n        if bin(n & i)[2:]:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # To check whether all the bits are unset in the given range or not, we need to check whether all the bits set in the range (r-l+1) and n-l are same or not.\n    # If all the bits are set in the range, we will get n-l which will be equal to 0. Otherwise, n-l will be 1.\n    # Finally, we will check whether all the bits are set in the range or not.\n    if (n - l + 1) == r - l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a variable to store the result\n    result = True\n\n    # Iterate through the range of numbers from l to r\n    for i in range(l, r+1):\n        # Calculate the binary representation of the current number\n        binary_number = bin(i)[2:]\n\n        # Check if all the bits in the binary representation are set to 1\n        if binary_number!= (n.bit_length() * '1'):\n            # If any bit is unset, return False\n            result = False\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to keep track of the count of unset bits\n    count = 0\n    # Convert the given range (l, r) to a binary string\n    binary_range = bin(r - l)[2:]\n    # Iterate through each bit of the binary string\n    for bit in binary_range:\n        # Check if the bit is 1\n        if bit == '1':\n            # Increment the count of unset bits\n            count += 1\n        # If the count becomes equal to n, it means all the bits are unset in the given range\n        if count == n:\n            return True\n    # If none of the bits are unset in the given range, return False\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if (n & (1 << i))!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initializing the variable to store the count of unset bits\n    unset_bits = 0\n    # Looping through the bits in the given range\n    for i in range(l, r+1):\n        # If the current bit is set, increment the unset_bits count\n        if n & (1 << i):\n            unset_bits += 1\n    # If the unset_bits count is 0, then all the bits are set\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initializing all the bits as 1\n    all_bits = 0xFFFFFFFF\n    # masking the bits in the range\n    masked_bits = all_bits & ((((1 << (r - l + 1)) - 1) << l) | 0xFF)\n    # checking whether all the bits are set or not in the masked bits\n    if n & masked_bits:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    while l <= r:\n        if n & (1 << l)!= 0:\n            return False\n        l += 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Calculate the difference between the upper and lower range boundaries\n    diff = r - l\n    \n    # Initialize a variable to keep track of the number of set bits in the range\n    set_bits = 0\n    \n    # Iterate over the bits in the binary representation of n and check if they are set or not\n    for bit in bin(n)[2:]:\n        if bit == '1':\n            set_bits += 1\n        \n        # If all the bits are set, return True\n        if set_bits == diff:\n            return True\n    \n    # If the loop completes without finding all the bits set, return False\n    return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize variables\n    negative = []\n    positive = []\n    \n    # Separate positive and negative elements\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    \n    # Merge positive and negative elements\n    for i in range(n):\n        arr[i] = negative[i]\n        if len(positive) > i:\n            arr[i+n] = positive[i]\n    \n    # Return re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # count the number of negative elements and the number of positive elements\n    neg_count = 0\n    pos_count = 0\n    for num in arr[:n]:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # move negative elements to the beginning of the array and positive elements to the end\n    neg_idx = 0\n    pos_idx = n\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_idx] = arr[i]\n            neg_idx += 1\n        else:\n            arr[pos_idx] = arr[i]\n            pos_idx -= 1\n    \n    # re-arrange the remaining elements in the original order\n    for i in range(n, len(arr)):\n        j = i % n\n        if arr[j] < 0:\n            arr[i] = arr[neg_idx]\n            neg_idx += 1\n        else:\n            arr[i] = arr[pos_idx]\n            pos_idx -= 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_arr = []\n    pos_arr = []\n    for num in arr:\n        if num < 0:\n            neg_arr.append(num)\n        else:\n            pos_arr.append(num)\n    \n    # If there are less than n elements in the positive array, repeat the last element\n    while len(pos_arr) < n:\n        pos_arr.append(pos_arr[-1])\n    \n    # Combine the negative and positive arrays and sort them in descending order\n    re_arr = neg_arr + pos_arr\n    re_arr.sort(reverse=True)\n    \n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n    neg_count = 0\n    pos_count = 0\n    \n    for x in arr:\n        if x < 0:\n            neg.append(x)\n            neg_count += 1\n        else:\n            pos.append(x)\n            pos_count += 1\n            \n    while len(neg) < n:\n        neg.append(0)\n        neg_count += 1\n        \n    while len(pos) < n:\n        pos.append(0)\n        pos_count += 1\n        \n    neg.extend(pos)\n    return neg"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two empty lists to hold negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # iterate through the array and add elements to the appropriate lists\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    \n    # iterate through the array and add elements to the array in the desired order\n    arr_new = []\n    for i in range(n):\n        if i < n//2:\n            arr_new.append(neg_list[i])\n        else:\n            arr_new.append(pos_list[i-n//2])\n    \n    # add the remaining elements to the end of the array\n    arr_new += neg_list[n//2:] + pos_list[:n//2]\n    \n    # return the final array\n    return arr_new"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Sorting the given array in ascending order\n    arr.sort()\n    \n    # Initializing two variables to keep track of the indices of the negative and positive elements in the array\n    i = 0\n    j = n - 1\n    \n    # Looping through the array\n    while i < j:\n        \n        # If the current element is negative, then we move it to the end of the array\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            \n            # Incrementing the index of the negative element\n            i += 1\n            \n            # Decrementing the index of the positive element\n            j -= 1\n            \n        # If the current element is positive, then we move it to its correct position in the array\n        else:\n            i += 1\n            \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = []\n    neg = []\n    for i in range(n):\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n    neg.sort(reverse=True)\n    pos.extend(neg)\n    return pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers i and j to iterate over the array\n    i, j = 0, 0\n\n    # Traverse the array\n    while j < len(arr):\n        # If the current element is negative, increment i and move the current element to its original position\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n\n    # Traverse the array again, this time checking the relative order of negative and positive elements\n    while i < n:\n        # If the current element is negative, increment i and move the current element to its original position\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        i += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    while pos < n:\n        if arr[pos] >= 0:\n            pos += 1\n        else:\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n            neg += 1\n            pos += 1\n    return arr[:n] + arr[n:]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n    \n    # Iterate through the input array and add each element to the appropriate list based on its value\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    # Concatenate the negative and positive lists and reverse the order\n    rearranged_arr = negative + positive[::-1]\n    \n    return rearranged_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(string, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return string.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in the string with the specified character, and return the modified string.\n\n    Parameters\n    ----------\n    str1 : str\n        The string to modify.\n    char : str\n        The character to replace blank spaces with.\n\n    Returns\n    -------\n    str\n        The modified string with blank spaces replaced by the specified character.\n    \"\"\"\n    # Split the string into a list of words\n    words = str1.split()\n    # Loop through the list of words and replace any blank spaces with the specified character\n    for i in range(len(words)):\n        if not words[i]:\n            words[i] = char\n    # Join the list of words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            new_str += str1[i]\n        elif str1[i] == \" \" and new_str[-1] == \" \":\n            continue\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # convert list to heap\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    \n    # get n largest elements from heap\n    result = []\n    while len(result) < n:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n\n    # Extract and remove the n largest elements from the max heap and add them to the result list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(max_heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n\n    for num in list1:\n        heapq.heappush(heap, num)\n\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a heap of size n+1\n    heap = []\n    # Iterate through the list and push the smallest elements into the heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # Iterate through the rest of the list and add the smallest element to the heap if it's greater than the smallest element in the heap\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappushpop(heap, list1[i])\n    # Return the n largest elements from the heap\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        heapq.heapify(list1)\n        return [heapq.heappop(list1) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # use heapq to find the n largest elements in the list\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in range(n):\n        max_heapq.heappush(max_heap, list1[i])\n    for i in range(n, len(list1)):\n        if list1[i] > max_heap[0]:\n            max_heapq.heappop(max_heap)\n            max_heapq.heappush(max_heap, list1[i])\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Use a min heap to find the n largest items in the list\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    # Convert the min heap to a list and return it\n    return list(heap)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r**2 * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # The lateral surface area of a cylinder is given by the formula:\n    # lateral surface area = pi * (r^2 + h^2)\n    # where pi is a mathematical constant approximately equal to 3.14\n    return 2*3.14*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2*3.14159*(r**2 + h**2)\n    return s"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = math.pi * (r**2 + h**2)\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Inputs:\n    r - radius of the cylinder\n    h - height of the cylinder\n    \n    Outputs:\n    L - lateral surface area of the cylinder\n    '''\n    \n    L = 2*3.14159*r**2 + 2*3.14159*r*h + 3.14159*r*r\n    \n    return L"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2*math.pi*r*h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of a cylinder\n    lateral_sa = (2*r*h) + (2*r*h) + (2*r*h)\n    # calculate the surface area of a circle\n    circle_sa = (2*math.pi*r**2)\n    # add the surface areas of the circle and cylinder\n    total_sa = lateral_sa + circle_sa\n    return total_sa"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n:\n        if n % 2 == 0:\n            result |= (1 << (n-1))\n        n >>= 1\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize an empty list to store even bits\n    even_bits = []\n\n    # iterate through each bit of the number\n    for bit in bin(n)[2:]:\n        # if the bit is even, append it to the even_bits list\n        if bit == '0':\n            even_bits.append(bit)\n        # if the bit is odd, skip it\n        else:\n            pass\n\n    # convert the list of even bits to an integer and return it\n    return int(''.join(even_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    \n    # loop through each bit of the number\n    for i in range(8):\n        # check if the bit is even\n        if n & (1 << i):\n            # set the corresponding bit in the result to 1\n            result |= (1 << i)\n    \n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n:\n        if n & 1 == 0:\n            even_bits |= 1\n        n >>= 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n % 2 == 0:\n            n = n | 1\n        n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate through each bit of the input number\n    for bit in bin(n)[2:]:\n        # Check if the current bit is an even bit\n        if int(bit) == 0:\n            # Set the current bit to 1\n            result += int(bit)\n        \n        # Check if the current bit is an odd bit\n        else:\n            # Set the current bit to 0\n            result += int(not bit)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n    # Initialize the result variable\n    result = 0\n    # Loop through the binary string and set the corresponding bit to 1\n    for i in range(len(binary_str)):\n        if int(binary_str[i]) == 0:\n            result |= 1 << i\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits\n    even_bits = 0\n    \n    # Loop through each bit in the binary representation of n\n    for i in range(len(bin(n))-2, -1, -1):\n        # If the current bit is even, set the corresponding bit in even_bits to 1\n        if int(bin(n)[i]) % 2 == 0:\n            even_bits |= (1 << i)\n            \n    # Return the even_bits variable as the result\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the even bits of n\n    even_bits = \"\"\n    # Iterate through the bits of n\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, append it to the even_bits string\n        if int(bit) % 2 == 0:\n            even_bits += bit\n    # Convert the even_bits string to an integer and return it\n    return int(even_bits, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        n &= n - 1 # clear the least significant bit\n        n |= 1 << (n & -2) # set the next bit to 1\n    return n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    count_dict = Counter(unique_tuples)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Create a dictionary to store the counts\n    counts = {}\n    # Iterate over the unique tuples and update the counts dictionary\n    for tup in unique_tuples:\n        if tup not in counts:\n            counts[tup] = 0\n        counts[tup] += 1\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the number of occurrences of each unique tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # loop through the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment the count\n            count_dict[tup] += 1\n        else:\n            # if not, add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n    \n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple exists in the dictionary, if not add it and set its count to 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # If the tuple already exists in the dictionary, increment its count by 1\n        else:\n            count_dict[tup] += 1\n    # Return the dictionary of count of each unique tuple\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through all possible substrings of the given string\n    for i in range(len(str) + 1):\n        for j in range(i, len(str) + 1):\n            \n            # If the substring is not empty, increment the count\n            if j - i > 0:\n                count += 1\n    \n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = [len(str)] # Initialize a list to store the lengths of substrings\n    for i in range(1, len(str)): # Iterate over the string\n        for j in range(i): # Iterate over the substrings that end at i\n            substrings.append(substrings[j] + 1) # Update the length of the substring\n    count = 0\n    for substring in substrings: # Iterate over the substrings\n        if len(substring) > 0: # If the substring is non-empty\n            count += 1 # Increment the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables\n    sequences = 0\n    prev_element = 0\n\n    # Loop through all possible elements\n    for i in range(m, 2*n):\n        if i <= m:\n            # Check if the element is greater than or equal to twice the previous element but less than or equal to m\n            if i >= 2*prev_element:\n                sequences += 1\n        # Update the previous element\n        prev_element = i\n\n    return sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize the number of possible sequences\n    count = 0\n    # loop through all possible sequences of length n\n    for i in range(m, n+1):\n        # check if the sequence contains only positive integers greater than or equal to twice the previous element and less than or equal to m\n        if all(2*x <= i <= m for x in range(i//2, -1, -1)):\n            count += 1\n    # return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n):\n    count = 0\n    for i in range(m-1,n):\n        for j in range(i,min(m,i+n)):\n            if j > 2*i and j <= m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a counter for the total number of sequences\n    total_sequences = 0\n    \n    # Initialize a list to store the last n elements\n    last_n = [1, 2]\n    \n    # Iterate over the remaining elements of the list\n    for i in range(2, m):\n        # Check if the element i is greater than or equal to twice the last element\n        if i >= 2*last_n[-1]:\n            # If it is, add 1 to the total number of sequences\n            total_sequences += 1\n        \n        # Add i to the list of last n elements\n        last_n.append(i)\n        \n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the number of possible sequences to zero\n    total_sequences = 0\n\n    # Loop through all possible values of the first element\n    for i in range(2, m + 1):\n\n        # Initialize the number of sequences with this first element to zero\n        current_sequences = 0\n\n        # Loop through all possible values of the second element\n        for j in range(2, n + 1):\n\n            # Check if the sum of the current element and the next element is less than or equal to m\n            if i + j <= m:\n\n                # Increment the current number of sequences with this first and second element\n                current_sequences += 1\n\n        # Add the current number of sequences with this first element to the total number of sequences\n        total_sequences += current_sequences\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if n == 1:\n        return m\n    \n    dp = [[1]] * (n+1)\n    dp[1] = [2]\n    \n    for i in range(2, n+1):\n        for j in range(1, i//2+1):\n            if i % j == 0:\n                break\n        else:\n            dp[i].append(dp[i-1][j-1] + dp[i-1][j])\n    \n    return dp[n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Returns:\n    int: The total number of possible sequences of length n.\n    \"\"\"\n    count = 0\n    for i in range(2, m):\n        if (i + 2) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    prev_num = 0\n    prev_num_twice = 0\n    for i in range(2, n+1):\n        if prev_num_twice < 2*prev_num and prev_num_twice <= m:\n            count += prev_num_twice - prev_num + 1\n            prev_num_twice += 1\n        prev_num = prev_num_twice\n        prev_num_twice = prev_num_twice + i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    sequence = [2]\n    for i in range(2, n+1):\n        sequence.append(max(2*sequence[-1], m))\n        total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(m, n, prev):\n        if n == 1:\n            return 1\n        count = 0\n        for i in range(2, m + 1):\n            if i < prev * 2 or i > m:\n                continue\n            count += helper(m, n - 1, i)\n        return count\n\n    return helper(m, n, 0)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # check if the second list has at least one element\n    if not list2:\n        print(\"Error: The second list must have at least one element.\")\n        return\n    \n    # replace the last element of the first list with the elements of the second list\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    # Get the length of the first list\n    n = len(list1)\n\n    # Create a new list to hold the replaced elements\n    new_list = []\n\n    # Iterate through the first list and add the elements up to the last element\n    for i in range(n-1):\n        new_list.append(list1[i])\n\n    # Add the elements from the second list to the end of the new list\n    new_list += list2\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the second list\n    list2_length = len(list2)\n    \n    # Check if the length of the first list is greater than the length of the second list\n    if len(list1) > list2_length:\n        # Get the last element of the first list\n        last_elem = list1[-1]\n        \n        # Initialize a variable to store the new list\n        new_list = []\n        \n        # Loop through the first list from the second to the last element\n        for i in range(len(list1)-list2_length-1):\n            # Append the elements of the second list to the new list\n            new_list.append(list2[i])\n        \n        # Append the last element of the first list to the new list\n        new_list.append(last_elem)\n        \n        # Return the new list\n        return new_list\n    else:\n        # If the length of the first list is less than or equal to the length of the second list, return the original list\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        for i in range(len(list1)-1, -1, -1):\n            list1[i] = list2[0]\n            list2.pop(0)\n    else:\n        print(\"The two lists must have the same length.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length\")\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the second list is empty\n    if not list2:\n        # If it is, just return the first list\n        return list1\n    # Check if the second list has only one element\n    elif len(list2) == 1:\n        # If it does, replace the last element of the first list with that element\n        list1[-1] = list2[0]\n        # Return the modified first list\n        return list1\n    # If the second list has more than one element\n    else:\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1] = list2[0]\n        list1[-2] = list2[1]\n        # Return the modified first list\n        return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n    \"\"\"\n\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # If the square root is an integer, find the next odd integer greater than the square root\n    if sqrt_N ** 2 == N:\n        next_integer = sqrt_N + 1\n        while not (next_integer % 2 == 1 and next_integer <= sqrt_N):\n            next_integer += 1\n\n    # If the square root is not an integer, find the next odd integer greater than sqrt(N)\n    else:\n        next_integer = int(sqrt_N) + 1\n        while not (next_integer % 2 == 1 and next_integer <= sqrt_N):\n            next_integer += 1\n\n    # Find the next perfect square greater than the next odd integer\n    next_perfect_square = (next_integer ** 2)\n\n    # Return the next perfect square greater than N\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the integer part of sqrt(n^2-4*N)\n    root = int(math.sqrt(N**2-4*N))\n    # Check if the integer part is odd, if so, add 1 to it and make it even\n    if root % 2 == 1:\n        root += 1\n    # Calculate the next perfect square greater than root\n    next_root = root + int(math.sqrt(N**2-4*root**2))\n    # Return the next perfect square greater than root\n    return next_root"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 4\n    else:\n        a = 1\n        while True:\n            a += 1\n            b = math.sqrt(a*a + N)\n            c = math.sqrt(b*b + N)\n            if c-b <= 0.001:\n                return a"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_Perfect_Square(N):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        if is_prime(num + 1):\n            return num + 1\n        return next_prime(num + 2)\n\n    def next_perfect_square(num):\n        while True:\n            next_num = next_prime(num)\n            if is_prime(next_num):\n                return next_num\n\n    next_square = next_perfect_square(N)\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Find the square root of N using math module\n    sqrt_N = math.sqrt(N)\n\n    # Find the integer part of the square root\n    sqrt_int = math.floor(sqrt_N)\n\n    # Multiply sqrt_int by sqrt_int + 1\n    next_sqrt = (sqrt_int * sqrt_int) + 1\n\n    # If the next square is greater than N, return N + 1\n    if next_sqrt > N:\n        return N + 1\n    else:\n        return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Check if the given number is a perfect square\n    if math.isqrt(N) * math.isqrt(N) == N:\n        # Check if the given number is a perfect cube\n        if math.isqrt(N) * math.isqrt(N) * math.isqrt(N) == N:\n            # If the given number is a perfect cube, return the next perfect square\n            return next_Perfect_Cube(N)\n        else:\n            # If the given number is not a perfect cube, calculate the square root of the given number\n            sqrt_N = math.sqrt(N)\n            # Calculate the difference between the given number and the square root\n            diff = sqrt_N - N\n            # Calculate the next perfect square by adding 1 to the square root\n            next_sqrt = sqrt_N + 1\n            # Check if the next perfect square is greater than the difference between the given number and the square root\n            if next_sqrt > diff:\n                return next_sqrt\n            else:\n                # If the next perfect square is not greater than the difference between the given number and the square root, return the next perfect square\n                return next_Perfect_Square(next_sqrt)\n    else:\n        # If the given number is not a perfect square, calculate the square root of the given number\n        sqrt_N = math.sqrt(N)\n        # Calculate the next perfect square by adding 1 to the square root\n        next_sqrt = sqrt_N + 1\n        # Check if the next perfect square is greater than the given number\n        if next_sqrt > N:\n            return next_sqrt\n        else:\n            # If the next perfect square is not greater than the given number, return the next perfect square\n            return next_Perfect_Square(next_sqrt)\n\ndef next_Perfect_Cube(N): \n    '''\n    Write a python function to find the next perfect cube greater than a given number.\n    '''\n\n    # Check if the given number is a perfect cube\n    if math.isqrt(N) * math.isqrt(N) * math.isqrt(N) == N:\n        # If the given number is a perfect cube, calculate the cube root of the given number\n        cbrt_N = math.cbrt(N)\n        # Calculate the difference between the given number and the cube root\n        diff = cbrt_N - N\n        # Calculate the next perfect cube by subtracting 1 from the cube root\n        next_cbrt = cbrt_N - 1\n        # Check if the next perfect cube is greater than the difference between the given number and the cube root\n        if next_cbrt > diff:\n            return next_cbrt\n        else:\n            # If the next perfect cube is not greater than the difference between the given number and the cube root, return the next perfect cube\n            return next_Perfect_Cube(next_cbrt)\n    else:\n        # If the given number is not a perfect cube, return the given number\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N and returns the next perfect square number greater than N.\n    \"\"\"\n    # Check if N is already a perfect square\n    if math.sqrt(N) == int(math.sqrt(N)):\n        # If it is, return N+1\n        return int(math.sqrt(N))+1\n    # If N is not a perfect square, calculate the next greater perfect square using binary search\n    else:\n        # Initialize variables\n        left, right = 0, N\n        # Use binary search to find the next greater perfect square\n        while left <= right:\n            mid = int((left+right)/2)\n            if mid*mid > N:\n                right = mid - 1\n            elif mid*mid < N:\n                left = mid + 1\n            else:\n                return mid\n        # If no perfect square greater than N exists, return N+1\n        return int(math.sqrt(N))+1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Given a positive integer N, find the next perfect square greater than N.\n    If N is already a perfect square, return N itself.\n    \"\"\"\n    if math.isqrt(N) ** 2 == N:\n        return N\n    else:\n        return math.ceil(math.sqrt(N)) ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)   # convert N to integer\n    N = math.ceil(math.sqrt(N)) # find the largest perfect square less than or equal to N\n\n    while True:\n        temp = N * N\n        if temp > N + 1:\n            return temp - 1\n        N += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number N.\n    '''\n    # First, we calculate the square root of N using the math.sqrt() function.\n    square_root = math.sqrt(N)\n\n    # Next, we round the square root to the nearest integer using the math.ceil() function.\n    rounded_square_root = math.ceil(square_root)\n\n    # Finally, we calculate the next perfect square by adding 1 to the rounded square root.\n    next_perfect_square = rounded_square_root + 1\n\n    return next_perfect_square"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize the two extremes to the first element of the array\n    max_inc = max_dec = arr[0]\n    \n    # Loop through the array and update the extremes as needed\n    for i in range(1, n):\n        if arr[i] < max_inc:\n            max_dec = max(max_dec, max_inc)\n            max_inc = arr[i]\n        elif arr[i] > max_dec:\n            max_inc = max(max_inc, max_dec)\n            max_dec = arr[i]\n        else:  # arr[i] == max_dec:\n            max_dec = max(max_dec, max_inc)\n            max_inc = arr[i]\n    \n    # Return the maximum sum of the bitonic subsequence\n    return max(max_inc + max_dec, max_dec + max_inc)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # Find the increasing subsequence\n    inc_seq = []\n    inc_sum = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc_sum += arr[i]\n            inc_seq.append(arr[i])\n        else:\n            if inc_seq:\n                inc_sum -= arr[i-1]\n            else:\n                inc_sum = arr[i]\n            inc_seq = [arr[i]]\n    if inc_sum > 0:\n        inc_sum += arr[n-1]\n    inc_seq.append(arr[n-1])\n\n    # Find the decreasing subsequence\n    dec_seq = []\n    dec_sum = 0\n    for i in range(n-2, -1, -1):\n        if arr[i] < arr[i+1]:\n            dec_sum += arr[i]\n            dec_seq.append(arr[i])\n        else:\n            if dec_seq:\n                dec_sum -= arr[i+1]\n            else:\n                dec_sum = arr[i]\n            dec_seq = [arr[i]]\n    if dec_sum > 0:\n        dec_sum += arr[0]\n    dec_seq.insert(0, arr[0])\n\n    # Find the maximum sum\n    max_sum = max(inc_sum, dec_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    n = len(arr)\n\n    # Check if the array is bitonic or not\n    if n % 2 == 0:\n        return -1\n\n    # Check for the increasing subsequence\n    for i in range(n):\n        if i == 0:\n            max_so_far = arr[i]\n        else:\n            if arr[i] > arr[i-1]:\n                max_so_far += arr[i]\n            else:\n                max_so_far = max(max_so_far, arr[i])\n\n    # Check for the decreasing subsequence\n    for i in range(n-2, -1, -1):\n        if i == n-1:\n            max_so_far = max(max_so_far, arr[i])\n        else:\n            if arr[i] > arr[i+1]:\n                max_so_far += arr[i]\n            else:\n                max_so_far = max(max_so_far, arr[i])\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize two variables to store the maximum sum of two increasing subsequences\n    max_1 = arr[0]\n    max_2 = max(arr[1], arr[0])\n\n    # Initialize three variables to store the maximum sum of three increasing subsequences\n    max_3 = arr[0]\n    max_4 = max(arr[1], arr[0])\n    max_5 = max(arr[2], arr[0])\n\n    # Initialize four variables to store the maximum sum of four increasing subsequences\n    max_6 = arr[0]\n    max_7 = max(arr[1], arr[0])\n    max_8 = max(arr[2], arr[0])\n    max_9 = max(arr[3], arr[0])\n\n    # Iterate through the array and update the maximum sum of each increasing subsequence\n    for i in range(1, n):\n        # Update max_1\n        if arr[i] < arr[i - 1]:\n            max_1 = arr[i]\n        else:\n            max_1 = max(max_1, arr[i])\n\n        # Update max_2\n        if arr[i] < max_1:\n            max_2 = arr[i]\n        else:\n            max_2 = max(max_2, arr[i])\n\n        # Update max_3\n        if arr[i] < max_2:\n            max_3 = arr[i]\n        else:\n            max_3 = max(max_3, arr[i])\n\n        # Update max_4\n        if arr[i] < max_3:\n            max_4 = arr[i]\n        else:\n            max_4 = max(max_4, arr[i])\n\n        # Update max_5\n        if arr[i] < max_4:\n            max_5 = arr[i]\n        else:\n            max_5 = max(max_5, arr[i])\n\n        # Update max_6\n        if arr[i] < max_5:\n            max_6 = arr[i]\n        else:\n            max_6 = max(max_6, arr[i])\n\n        # Update max_7\n        if arr[i] < max_6:\n            max_7 = arr[i]\n        else:\n            max_7 = max(max_7, arr[i])\n\n        # Update max_8\n        if arr[i] < max_7:\n            max_8 = arr[i]\n        else:\n            max_8 = max(max_8, arr[i])\n\n        # Update max_9\n        if arr[i] < max_8:\n            max_9 = arr[i]\n        else:\n            max_9 = max(max_9, arr[i])\n\n    # Return the maximum sum of any increasing subsequence\n    return max(max_1, max_2, max_3, max_4, max_5, max_6, max_7, max_8, max_9)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Find the increasing subsequence and its sum\n    inc_subseq = []\n    inc_sum = 0\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            inc_subseq.append(arr[i])\n            inc_sum += arr[i]\n\n    # Find the decreasing subsequence and its sum\n    dec_subseq = []\n    dec_sum = 0\n    for i in range(n - 1, -1, -1):\n        if arr[i] > arr[i + 1]:\n            dec_subseq.append(arr[i])\n            dec_sum += arr[i]\n\n    # Find the maximum sum of the bitonic subsequence\n    max_sum = max(inc_sum + dec_sum, max(max_sum_increasing_subseq(inc_subseq), max_sum_decreasing_subseq(dec_subseq)))\n\n    return max_sum\n\n\ndef max_sum_increasing_subseq(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] + arr[i], arr[i])\n    return dp[n - 1]\n\n\ndef max_sum_decreasing_subseq(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        dp[i] = max(dp[i + 1] + arr[i], arr[i])\n    return dp[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    '''\n    n = len(arr)\n\n    # Check if the array is empty or has only one element\n    if n < 2:\n        return arr[0] if n == 1 else 0\n\n    # Find the maximum sum of a decreasing subsequence\n    max_sum_decreasing = max_sum(arr[::-1])\n\n    # Find the maximum sum of a increasing subsequence\n    max_sum_increasing = 0\n    for i in range(1, n):\n        max_sum_increasing = max(max_sum_increasing + arr[i], arr[i])\n\n    return max(max_sum_decreasing, max_sum_increasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array as input and returns the maximum sum of a bitonic subsequence.\n    A bitonic subsequence is a sequence where the elements in the sequence are either increasing or decreasing.\n    '''\n    # Initialize variables to store the maximum sum of a increasing subsequence and the maximum sum of a decreasing subsequence\n    max_sum_increasing = arr[0]\n    max_sum_decreasing = arr[0]\n\n    # Loop through the array from the second element to the last element\n    for i in range(1, len(arr)): \n        # If the current element is greater than the previous element, update max_sum_increasing\n        if arr[i] > arr[i-1]: \n            max_sum_increasing = max(max_sum_increasing + arr[i], arr[i])\n        else: \n            max_sum_increasing = max(max_sum_increasing, arr[i])\n\n        # If the current element is less than the previous element, update max_sum_decreasing\n        if arr[i] < arr[i-1]: \n            max_sum_decreasing = max(max_sum_decreasing + arr[i], arr[i])\n        else: \n            max_sum_decreasing = max(max_sum_decreasing, arr[i])\n\n    # Return the maximum sum of a bitonic subsequence\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], arr[i] + dp[i-2])\n\n    return dp[n-1]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Define a helper function to find the maximum subsequence ending at index i\n    def find_max_subseq(arr, i):\n        if i == 0:\n            return arr[0]\n        elif arr[i] < arr[i-1]:\n            return max(find_max_subseq(arr, i-1), arr[i])\n        else:\n            return find_max_subseq(arr, i-1)\n\n    # Find the maximum subsequence ending at each index\n    max_subseq = [find_max_subseq(arr, i) for i in range(len(arr))]\n\n    # Find the maximum subsequence ending at the first index\n    max_subseq_first = max(max_subseq)\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum_bitonic = max_subseq_first + max_subseq[-1]\n\n    return max_sum_bitonic"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Check if the array is empty or has only one element\n    if len(arr) < 2:\n        return 0\n    \n    # Initialize variables for the left and right pointers\n    left, right = 0, len(arr) - 1\n    \n    # Initialize variables for the maximum sum of subsequences\n    left_sum, right_sum = 0, 0\n    \n    # Initialize variables for the maximum sum of increasing subsequence and maximum sum of decreasing subsequence\n    max_left_sum, max_right_sum = float('-inf'), float('-inf')\n    \n    # Initialize variables for the direction of the subsequence (increasing or decreasing)\n    direction = 0\n    \n    # Initialize variables for the maximum sum of the whole array\n    max_sum = float('-inf')\n    \n    # Traverse the array from left to right\n    while left < right:\n        \n        # Check if the current subsequence is increasing or decreasing\n        if arr[left] < arr[right]:\n            direction = 1\n            \n            # Update the maximum sum of the whole array\n            max_sum = max(max_sum, left_sum + right_sum)\n            \n            # Update the maximum sum of increasing subsequence\n            max_left_sum = max(max_left_sum, left_sum + arr[left])\n            \n            # Update the maximum sum of decreasing subsequence\n            max_right_sum = max(max_right_sum, right_sum + arr[right])\n            \n            # Move the left pointer to the right\n            left += 1\n            \n            # Update the sum of the left subsequence\n            left_sum += arr[left]\n            \n            # Move the right pointer to the left\n            right -= 1\n            \n            # Update the sum of the right subsequence\n            right_sum -= arr[right]\n            \n        else:\n            direction = -1\n            \n            # Update the maximum sum of the whole array\n            max_sum = max(max_sum, left_sum + right_sum)\n            \n            # Update the maximum sum of increasing subsequence\n            max_left_sum = max(max_left_sum, left_sum + arr[left])\n            \n            # Update the maximum sum of decreasing subsequence\n            max_right_sum = max(max_right_sum, right_sum + arr[right])\n            \n            # Move the right pointer to the left\n            right -= 1\n            \n            # Update the sum of the right subsequence\n            right_sum -= arr[right]\n            \n            # Move the left pointer to the right\n            left += 1\n            \n            # Update the sum of the left subsequence\n            left_sum += arr[left]\n            \n    # Check if the maximum sum of the whole array is greater than the maximum sum of any subsequence\n    if max_sum < max_left_sum + max_right_sum:\n        max_sum = max_left_sum + max_right_sum\n        \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize the lower bound and upper bound of the square root\n    lower = 0.0\n    upper = number\n    \n    # compute the square root of the initial guess\n    guess = (lower + upper) / 2\n    \n    # continue until the difference between the lower and upper bounds is small enough\n    while abs(lower - upper) > 1e-12:\n        # compute the approximation of the square root using the formula\n        # x^2 = (a * x^2) + b\n        # where a = (3 - 2 * upper) / 2, b = (upper - lower) / 2\n        a = (3 - 2 * upper) / 2\n        b = (upper - lower) / 2\n        new_guess = (a * guess**2) + b\n        \n        # update the bounds based on the new guess\n        if new_guess < lower:\n            lower = new_guess\n        else:\n            upper = new_guess\n        \n        # update the guess\n        guess = (lower + upper) / 2\n    \n    # return the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Convert the input number to a float\n    number = float(number)\n    # Initialize the number of iterations and the current guess\n    i = 0\n    guess = number/2\n    # Loop until the absolute difference between the current guess and the square of the guess is less than a tolerance\n    while abs(guess**2 - number) > 10**-6:\n        i += 1\n        # Update the guess using the babylonian method\n        guess = (guess + number/guess) / 2\n    # Return the square root and the number of iterations taken\n    return math.sqrt(number), i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize the current approximation and the number of iterations\n    current_approximation = number / 2\n    iteration = 0\n    \n    # while the difference between the current approximation and the square root of the number is greater than a small tolerance\n    while abs(current_approximation**2 - number) > 1e-10:\n        # update the current approximation\n        current_approximation = (number / current_approximation) + (number / current_approximation**2) / 2\n        \n        # increment the iteration count\n        iteration += 1\n        \n        # check if the maximum number of iterations has been reached\n        if iteration > 1000:\n            raise ValueError(\"Max iterations reached.\")\n    \n    # return the final approximation\n    return current_approximation"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n\n    # Initialize variables\n    guess = number / 2\n    prev_guess = guess\n\n    while abs(guess**2 - number) > 0.0001:\n        prev_guess = guess\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1.0 # initialize x0 to 1\n    x1 = number / x0 # initial guess for the square root\n\n    while abs(x1 * x1 - number) >= 0.00001: # while the difference between the squares is greater than 0.00001\n        x0 = x1 # update the old value of x0\n        x1 = (x1 + number / x1) / 2 # update the new value of x1\n\n    return x1 # return the final value of x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    guess = 0.5 # guess\n    delta = 0.001 # difference between guess and actual value\n\n    # keep iterating until difference between guess and actual value is less than delta\n    while delta > 0.00001:\n        # calculate next guess\n        next_guess = guess - (guess*guess - number)/(2*guess)\n\n        # update variables\n        guess = next_guess\n        delta = abs(guess - next_guess)\n\n    # return the final guess as the square root of the input number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize the upper and lower bounds of the interval\n    a = 1\n    b = number\n\n    # Compute the square root using the babylonian method\n    while True:\n        c = (a + b) / 2\n        if c == a or c == b:\n            return c\n        if c * c == number:\n            return c\n        if c * c < number:\n            a = c\n        else:\n            b = c"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    i = 1\n    while True:\n        guess = (number / i) + i\n        if guess**2 == number:\n            return i\n        i += 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables for babylonian method\n    guess = number / 2\n    x = guess\n    count = 0\n    \n    # Perform iterations of babylonian method\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n        x = guess\n        count += 1\n    \n    # Return the final value of x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number/x) / 2\n    while abs(x - y) > 0.00001:\n        x = y\n        y = (x + number/x) / 2\n    return y"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    '''\n    Find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Initialize two variables to store the length of the longest palindromic subsequence \n    # for the odd and even length of the string.\n    even_length = 0\n    odd_length = 1\n    \n    # Iterate through the string from start to end.\n    for i in range(len(s)):\n        # Check if the current character is the same in the odd and even lengths.\n        if s[i] == s[len(s)-i-1]:\n            # If it is, check if the current substring is longer than the previous longest palindromic subsequence.\n            if len(s[i:i+2]) > len(s[even_length:even_length+2]):\n                even_length = i\n            if len(s[i:i+2]) > len(s[odd_length:odd_length+2]):\n                odd_length = i\n    \n    # Return the length of the longest palindromic subsequence for the even length of the string.\n    return len(s[even_length:even_length+2])"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each position\n    table = [[0 for j in range(len(str))] for i in range(len(str))]\n\n    # Base case: If the string is empty or has only one character, its length is 1\n    for i in range(len(str)):\n        table[i][i] = 1\n\n    # Fill the table by considering all possible pairs of characters\n    for length in range(2, len(str)+1):\n        for i in range(len(str)-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                table[i][j] = 2 + table[i+1][j-1]\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store the length of the longest palindrome subsequence ending at each position\n    dp = [[0] * n for _ in range(n)]\n    # Initialize all values in the first row and first column to 1\n    for i in range(n):\n        dp[i][i] = 1\n    # Fill the rest of the array using dynamic programming\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store lengths of longest palindromic subsequences of \n  \n    # lengths 1 to n \n    L = [[0] * n for _ in range(n)] \n  \n    # Initialize L[i][j] to 0, where i is the index of the current character in str and j is the index of the last occurrence of the palindromic subsequence of length 0 to i \n  \n    for i in range(n): \n        L[i][i] = 1 \n  \n    # Fill the remaining entries in L[i][j] in bottom-up manner \n    for length in range(2, n+1): \n        for i in range(n-length+1): \n            j = i + length - 1 \n            if str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2 \n            else: \n                L[i][j] = max(L[i+1][j], L[i][j-1]) \n  \n    # Return the length of the longest palindromic subsequence of length n \n    return L[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return n\n    \n    # Initialize the length and start index of longest palindromic subsequence\n    max_length = 1\n    start = 0\n    \n    # Check for all possible subsequences of length 2 to n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            length = 2\n            while i + length < n and s[i + length] == s[i - length]:\n                length += 1\n            if length > max_length:\n                max_length = length\n                start = i - length + 1\n    \n    # Check for subsequences of length greater than 2\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            if s[i] == s[i + length - 1]:\n                max_length = max(max_length, length)\n                start = i\n    \n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize a 2D array to store the lengths of the longest palindromic subsequence ending at each index\n    # dp[i][j] will store the length of the longest palindromic subsequence ending at index i and j in the string\n    dp = [[0]*n for i in range(n)]\n    max_len = 1\n\n    # Base case: all characters are palindromic subsequences of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill in the 2D array using dynamic programming\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [1] * n\n    maxLength = 1\n    start = 0\n    maxStart = 0\n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1] + 1\n            maxLength = max(maxLength, dp[i])\n\n            if maxLength > 1 and s[i - maxLength] == s[i - maxLength - 1]:\n                start = i - maxLength - 1\n                maxStart = i - maxLength\n\n        else:\n            if maxLength > 1 and s[i - maxLength] == s[i - maxLength - 1]:\n                start = i - maxLength - 1\n                maxStart = i - maxLength\n\n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    # create a 2D list to store all possible subsequences\n    dp = [[0]*len(str) for _ in range(len(str))]\n\n    # fill the first row and first column of the dp table\n    for i in range(len(str)):\n        dp[i][i] = 1\n\n    # find the longest palindromic subsequence for all other cells\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[j+1][i-1]\n            else:\n                dp[i][j] = max(dp[i][j+1], dp[j+1][i])\n\n    # return the length of the longest palindromic subsequence\n    return dp[len(str)-1][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    n = len(str)\n\n    # Create a 2D array to store the lengths of palindromic subsequences\n    # of all prefixes of the given string\n    lps_matrix = [[0] * (n+1) for _ in range(n+1)]\n\n    # Initialize the first row and first column\n    for i in range(1, n+1):\n        lps_matrix[i][0] = 0\n        lps_matrix[0][i] = 0\n\n    # Fill the 2D array using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1]:\n                lps_matrix[i][j] = lps_matrix[i-1][j-1] + 1\n            else:\n                lps_matrix[i][j] = max(lps_matrix[i-1][j], lps_matrix[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return lps_matrix[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # create a dictionary to store the length of the longest palindromic subsequence for each character in the string\n    palindrome_dict = {}\n\n    # initialize the length of the longest palindromic subsequence as 0\n    longest_palindromic_subsequence = 0\n\n    # loop through each character in the string\n    for i in range(len(str)):\n        # if the current character is a palindrome, update the length of the longest palindromic subsequence\n        if str[i] == str[i][::-1]:\n            if i not in palindrome_dict:\n                palindrome_dict[i] = 1\n            else:\n                palindrome_dict[i] += 1\n\n            if palindrome_dict[i] > longest_palindromic_subsequence:\n                longest_palindromic_subsequence = palindrome_dict[i]\n\n    # return the length of the longest palindromic subsequence\n    return longest_palindromic_subsequence"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1.0/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n - 1/2 + 1/3 - 1/4 +... + 1/(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += (1/i)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = (1/n) + (1/n**2) + (1/n**3) + (1/n**4) + (1/n**5) +...\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    # Calculate the harmonic sum of n-1 and n-2\n    h_n_1 = (1/n) * harmonic_sum(n-1)\n    h_n_2 = (1/n) * harmonic_sum(n-2)\n    \n    # Add the harmonic sums together and return the result\n    return h_n_1 + h_n_2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2 * (1 / n) - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize sum\n    sum = 0\n    # iterate through numbers from 1 to n-1\n    for i in range(1, n):\n        # calculate the harmonic sum of i\n        harmonic_sum = 1/i\n        # add the harmonic sum to the sum\n        sum += harmonic_sum\n    # return the sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(1, n):\n        harmonic += 1/i\n    return harmonic"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Create a set from array_nums1 and then find the intersection with array_nums2\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = list(set(array_nums1)) # remove duplicates from array1\n    array_nums2 = list(set(array_nums2)) # remove duplicates from array2\n    common_elements = [num for num in array_nums1 if num in array_nums2]\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection_set = set(array_nums1).intersection(set(array_nums2))\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    i, j = 0, 0\n    \n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the count of each element in array_nums2\n    count_dict = {}\n    for num in array_nums2:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Initialize an empty list to store the intersection of array_nums1 and array_nums2\n    intersection = []\n    \n    # Iterate through array_nums1 and check if each element is present in count_dict\n    for num in array_nums1:\n        if num in count_dict and count_dict[num] > 0:\n            intersection.append(num)\n            count_dict[num] -= 1\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection_list:\n            intersection_list.append(num)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as inputs and returns the intersection of the two arrays.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the first array\n    count_dict = {}\n    for num in array_nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a new array to store the intersection of the two arrays\n    intersection = []\n    \n    # Iterate through the second array and check if the count of each element is present in the first array\n    for num in array_nums2:\n        if num in count_dict and count_dict[num] > 0:\n            intersection.append(num)\n            count_dict[num] -= 1\n    \n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list\n\nmy_list = [1, 2, 3, 4, 5]\nnew_list = insert_element(my_list, \"apple\")\nprint(new_list)"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create a new list with the element at the beginning\n    new_list = [element]\n    # Add the elements of the original list to the new list in reverse order\n    for element in reversed(list):\n        new_list.insert(0, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(0,element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    # Loop through each element in the list\n    for i in range(len(list)):\n        \n        # Insert the element before the current element\n        list.insert(i, element)\n    \n    # Return the modified list\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(num) for num in numbers.split()]\n    polar_coordinates = [cmath.polar(num) for num in complex_numbers]\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # convert complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        # add the polar coordinates to the result list\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(num1, num2) for num1, num2 in numbers]\n    polar_coordinates = []\n    for num in complex_numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n\n    # Loop through the list of numbers and convert each complex number to polar coordinates\n    for num in numbers:\n        real, imag = cmath.rect(num)\n        print(\"Polar coordinates of\", num, \"are\", real, \"+\" + str(imag) + \"j\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = cmath.sqrt(num.real**2 + num.imag**2)\n            theta = cmath.phase(num)\n            print(f\"r = {r}, theta = {theta}\")\n        else:\n            print(\"Invalid input. Please enter complex numbers only.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        print(f\"{number.real:.2f} + {number.imag:.2f}i ({real:.2f} + {imag:.2f}j)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = cmath.rect(num.real, num.imag)\n        polar = cmath.polar(real)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n        angle = cmath.phase(complex(real, imag))\n        print(f'{number} in polar coordinates: magnitude = {magnitude:.2f}, angle = {angle:.2f} rad')"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for elem in lst:\n        if type(elem) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations of length n\n    combinations = combinations_with_replacement(l, n)\n\n    # Convert the generator object to a list of tuples\n    result = list(combinations)\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # convert the list to a set to avoid duplicates\n    l = set(l)\n    # use itertools to generate all combinations with repetition\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l[i:], n-1):\n            combos.append(tuple(l[i] + comb))\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for combo in combinations_with_replacement(l[i:], n):\n            result.append((l[i],) + combo)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if len(set(l[i:j+1])) == n:\n                result.append((l[i:j+1]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all possible combinations of length n from the list\n    comb_list = list(combinations_with_replacement(l, n))\n    # create a list of tuples with each combination and its color\n    result = [(c, comb) for comb in comb_list for c in comb]\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for combo in combinations_with_replacement(l, i+1):\n            result.append(tuple(combo))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        isPrime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if a number is prime, False otherwise\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    prime_count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks whether a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # first, check if the first tuple has more elements than the second\n    if len(test_tup1) > len(test_tup2):\n        # if so, return the first tuple as it has more elements\n        return test_tup1\n    else:\n        # if not, return the second tuple\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    # Initialize a variable to store the max element\n    max_element = test_tup1[0]\n    # Iterate over the tuple and compare each element with the current max element\n    for element in test_tup2:\n        if element > max_element:\n            max_element = element\n    # Return the max element from the second tuple\n    return max_element"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert the tuples to lists to make them mutable\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Initialize the max value to the first element of the first tuple\n    max_val = list1[0]\n    \n    # Loop through the second tuple and find the maximum value\n    for i in range(1, len(list2)):\n        if list2[i] > max_val:\n            max_val = list2[i]\n    \n    # Convert the lists back to tuples and return the maximum value\n    return tuple(max_val), tuple(list1)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    elif test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # iterate over the tuples and compare the maximum value\n    max_val = max(test_tup1[0], test_tup2[0])\n    if test_tup1[0] == max_val:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    max_val = max(max_val, test_tup1[1])\n    if test_tup1[1] == max_val:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    max_val = max(max_val, test_tup2[1])\n    if test_tup2[1] == max_val:\n        max_tup = test_tup2\n    else:\n        max_tup = test_tup1\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # If both tuples have same length, compare the values of the elements.\n    if len(test_tup1) == len(test_tup2):\n        max_val1 = max(test_tup1)\n        max_val2 = max(test_tup2)\n        if max_val1 > max_val2:\n            return test_tup1\n        else:\n            return test_tup2\n    \n    # If the first tuple has a longer length, return the tuple.\n    elif len(test_tup1) > len(test_tup2):\n        return test_tup1\n    \n    # If the second tuple has a longer length, return the tuple.\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if all the elements are integers\n    if all(isinstance(x, int) for x in test_tup1) and all(isinstance(x, int) for x in test_tup2):\n        # check if all the elements are non-negative integers\n        if all(x >= 0 for x in test_tup1) and all(x >= 0 for x in test_tup2):\n            # sort the tuples based on the first element\n            test_tup1.sort()\n            test_tup2.sort()\n            # compare the sorted tuples\n            if test_tup1 == test_tup2:\n                # if the two tuples are equal, return the first one\n                return test_tup1\n            else:\n                # if the two tuples are not equal, return the first one with the greater element\n                if test_tup1[0] > test_tup2[0]:\n                    return test_tup1\n                else:\n                    return test_tup2\n        else:\n            print(\"All elements must be non-negative integers.\")\n    else:\n        print(\"All elements must be integers.\")"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Initialize variables for maximum values\n    max1 = max2 = max_val = 0\n    \n    # Iterate through the tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n            max2 = test_tup2[i]\n            max_val = 1\n        elif test_tup2[i] > max2:\n            max1 = test_tup1[i]\n            max2 = test_tup2[i]\n            max_val = 2\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return \"Error: n must be a positive integer.\"\n\n    # Initialize variables\n    count = 1\n    num = 2\n    result = 2\n\n    # Loop through until nth newman prime is found\n    while count <= n:\n        # Check if num is newman prime\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result = num\n            count += 1\n        num += 1\n\n    return result"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    prime = 2\n    count = 0\n\n    while count < n:\n        prime += 1\n        if is_prime(prime):\n            count += 1\n\n    return prime\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize the count and i variables\n    count = 0\n    i = 2\n    # loop through the numbers from 2 to n\n    while count < n:\n        # check if the number is prime\n        if is_prime(i):\n            count += 1\n        # increment i by 1\n        i += 1\n    # return the nth prime number\n    return i - 1\n\n\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    # if the number is less than 2, it is not prime\n    if num < 2:\n        return False\n    # loop through the numbers from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        # if the number is divisible by i, it is not prime\n        if num % i == 0:\n            return False\n    # if the loop completes without finding a divisor, the number is prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a variable to store the current number\n    current_num = 1\n\n    # Loop through each number until n is reached\n    while current_num <= n:\n        # Initialize a variable to store the count of factors of the current number\n        factor_count = 0\n\n        # Loop through all numbers from 2 to the square root of the current number\n        for i in range(2, int(current_num ** 0.5) + 1):\n            # If the current number is divisible by i, increment the count\n            if current_num % i == 0:\n                factor_count += 1\n                break\n\n        # If the factor count is equal to 0, it is a newman-shanks-williams prime\n        if factor_count == 0:\n            return current_num\n\n        # Increment the current number\n        current_num += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # define the base case for n=0, which is 2\n    if n == 0:\n        return 2\n    # define the base case for n=1, which is 3\n    elif n == 1:\n        return 3\n    # iterate through the sequence from 2 to sqrt(n)\n    for i in range(2, int(n ** 0.5) + 1):\n        # check if i is a prime factor of n\n        if n % i == 0:\n            # if it is, then i is a factor of n, and n is not a newman\u2013shanks\u2013williams prime number\n            return n\n    # if n is not a factor of any number between 2 and sqrt(n), then n is a newman\u2013shanks\u2013williams prime number\n    return n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    last_prime = 0\n\n    # Check if n is a prime number\n    if n == 1:\n        return 2\n    elif n % 2 == 0 or n == 3:\n        return 3\n\n    # Start checking for primes\n    for i in range(5, n+1, 2):\n        # Check if i is prime\n        is_prime = True\n        for j in range(3, int(i**0.5)+1, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            last_prime = i\n\n        # Check if count is equal to n\n        if count == n:\n            return last_prime\n\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while True:\n        if is_prime(p) and is_newman_prime(p, n):\n            print(p)\n            break\n        p += 1\n\ndef is_prime(n):\n    '''\n    Returns True if the given number is prime, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_newman_prime(p, n):\n    '''\n    Returns True if the given prime number is the nth newman-shanks-williams prime, False otherwise.\n    '''\n    if n == 1:\n        return True\n    if p < 7:\n        return is_prime(p + 1)\n    if n == 2:\n        return is_prime(p**2 + 1)\n    if n == 3:\n        return is_prime(p**3 + 1)\n    if p % 2 == 0:\n        return is_newman_prime(p//2, n - 1)\n    return is_newman_prime(p*p + 1, n - 1)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        \"\"\"\n        Function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initializing the nth newman-shanks-williams prime number\n    newman_prime_num = 2\n\n    # Iterating through the previous primes until the nth newman-shanks-williams prime number is found\n    while True:\n        # Checking if the current newman-shanks-williams prime number is prime\n        if is_prime(newman_prime_num):\n            # Returning the nth newman-shanks-williams prime number if found\n            if n == 1:\n                return newman_prime_num\n            n -= 1\n        # Increasing the newman-shanks-williams prime number by 1\n        newman_prime_num += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    new_primes = [2]\n    i = 3\n    while len(new_primes) < n:\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            new_primes.append(i)\n        i += 2\n    return new_primes[n-1]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Get the length of both tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n\n    # Check if the number of elements in the tuple is equal\n    if length1!= length2:\n        print(\"Both tuples must have the same number of elements.\")\n        return\n\n    # Create an empty list to store the division results\n    result_list = []\n\n    # Perform element-wise division and append the result to the result_list\n    for i in range(length1):\n        try:\n            division_result = test_tup1[i] / test_tup2[i]\n            result_list.append(division_result)\n        except ZeroDivisionError:\n            print(\"The second element in the tuple cannot be zero.\")\n            return\n\n    # Return the result_list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples should have the same length.\")\n    \n    # perform element-wise division operation on the tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            raise ZeroDivisionError(\"Cannot divide by zero.\")\n    \n    # return the resulting tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result = test_tup1[i] / test_tup2[i]\n            result_tup += (result,)\n        except ZeroDivisionError:\n            raise ValueError(\"Both elements in the tuple must not be zero\")\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples should have the same length.\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: Division by zero not allowed.\")\n            return None\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n        \n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Get the lengths of the two input tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    \n    # Check if the two input tuples are of equal length\n    if tup1_len!= tup2_len:\n        raise ValueError('The two input tuples should have the same length.')\n    \n    # Create a new tuple with the element-wise division of the input tuples\n    new_tup = tuple([x / y for x, y in zip(test_tup1, test_tup2)])\n    \n    return new_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples must have the same length.'\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            try:\n                result = test_tup1[i] / test_tup2[i]\n                result_tup += (result,)\n            except ZeroDivisionError:\n                result_tup += (float('nan'),)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_result = []\n    for i in range(len(test_tup1)):\n        division_result.append(test_tup1[i] / test_tup2[i])\n    return division_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    # Perform element-wise division\n    result = [elem1 / elem2 for elem1, elem2 in zip(test_tup1, test_tup2)]\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    first_part_length = L\n    \n    # Create an empty list to hold the first part of the list\n    first_part = []\n    \n    # Iterate over the original list and add elements to the first part list until the length of the first part is equal to the desired length\n    for i in range(len(list1)):\n        first_part.append(list1[i])\n        if len(first_part) == first_part_length:\n            break\n    \n    # Create an empty list to hold the second part of the list\n    second_part = []\n    \n    # Iterate over the original list starting from the next index of the first part list and add elements to the second part list until the end of the list is reached\n    for i in range(first_part_length, len(list1)):\n        second_part.append(list1[i])\n    \n    # Return the first and second part lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L > n:\n        return None\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        mid = len(list1)//2\n        list1_first = list1[:mid]\n        list1_second = list1[mid:]\n    else:\n        mid = len(list1)//2 + 1\n        list1_first = list1[:mid]\n        list1_second = list1[mid:]\n    return (list1_first, list1_second)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # split the list into chunks of length L\n    chunks = [list1[i:i+L] for i in range(0, len(list1), L)]\n    \n    # convert the list of chunks to a list of lists\n    chunks_list = [chunk for sublist in chunks for chunk in sublist]\n    \n    # split the list of lists into two parts\n    part1 = chunks_list[:len(list1)//2]\n    part2 = chunks_list[len(list1)//2:]\n    \n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) < L:\n        raise ValueError(\"The length of the input list should be greater than or equal to L\")\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Split the list into two parts with length L\n    list2 = list1[L:]\n    list1 = list1[:L]\n\n    # Return the two parts as a tuple\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    # Split the list into two parts\n    lst1 = lst[:L]\n    lst2 = lst[L:]\n    # Return the two parts as a tuple\n    return lst1, lst2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"Error: L is larger than the length of the list\")\n        return None\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits a list into two parts, where the length of the first part is L.\n    Returns a tuple containing the two resulting lists.\n    \"\"\"\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n        h_age (float): The height of the dog in meters.\n\n    Returns:\n        age (float): The age of the dog in dog's years.\n    \"\"\"\n\n    # Convert the height from meters to feet and inches\n    feet = h_age / 3.28084\n    inches = h_age % 3.28084 * 12\n\n    # Calculate the dog's age in dog's years\n    age = int(feet / 3) + inches / 720\n\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dob = input(\"Enter your date of birth (mm/dd/yyyy): \")\n    h_year = int(dob.split('/')[2])\n    m_age = (h_age - h_year) * 7\n    dog_years = m_age * 12\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7*h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_age = 7 + h_age\n    return dogs_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 * h_age\n    return dog_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to hold the resulting lists\n    result = []\n    \n    # Initialize a counter variable to keep track of the position we are currently in the list\n    index = 0\n    \n    # Loop through the list until we reach the end\n    while index < len(S):\n        # If we are currently on an element that is divisible by step, add the list from the start to the current position to the result list\n        if index % step == 0:\n            result.append(S[index:index+step])\n        # Increment the position counter by step\n        index += step\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+n])\n    return res"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S) // step\n    result = []\n    for i in range(n):\n        result.append(S[i*step:i*step+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 1:\n        return [S]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the total surface area of the cube by adding the square of each side length to a running total\n    total_surface_area = l**2 + l**2 + l**2\n    \n    return total_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = l**2 * 6\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * (l**2)\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        num = count + 1\n        if num % 2!= 0:\n            sum += num**2\n            count += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    i = 1\n    while i <= n:\n        odd_sum += i ** 2\n        i += 2\n    return odd_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd natural number to the sum\n        sum += i*i\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through odd numbers starting from 1\n    for i in range(1, 2*n+1, 2):\n        # add the square of each odd number to the sum\n        sum += i*i\n    \n    # return the sum of squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    # initialize sum to 0\n    total = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum\n        total += i**2\n        \n    # return the sum of the squares of the first n odd natural numbers\n    return total"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initializing variables\n    first_star = '*'\n    second_star = '*'\n    third_star = '*'\n    \n    # finding the nth star number\n    for i in range(n-1):\n        first_star = '*' + first_star[1:]\n        second_star = '*' + second_star[1:]\n        third_star = '*' + third_star[1:]\n    return first_star + second_star + third_star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variables\n    num = 1\n    star_num = 1\n    \n    # loop through the n numbers and calculate the star number\n    for i in range(1, n+1):\n        # multiply num with i\n        num *= i\n        \n        # add the result to star_num\n        star_num += num\n        \n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(\"*\", end=\"\")\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        print('*' * count)\n        count += 1\n\nn = int(input(\"Enter the value of n: \"))\nfind_star_num(n)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1: \n        return \"*\"\n    elif n > 1: \n        return find_star_num(n-1) + \"*\"\n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variable to store then'th star number\n    star_num = 0\n    \n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # If the number is divisible by 3, add 1 to the star number\n        if i % 3 == 0:\n            star_num += 1\n        \n        # If the number is divisible by 5, add 1 to the star number\n        elif i % 5 == 0:\n            star_num += 1\n        \n        # If the number is divisible by both 3 and 5, add 1 to the star number\n        elif i % 3 == 0 and i % 5 == 0:\n            star_num += 1\n            \n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Calculate the number of rows in the triangle\n    rows = n // 2\n    \n    # Iterate through the rows in the triangle\n    for i in range(1, rows + 1):\n        # Calculate the number of spaces to the left of the triangle\n        spaces = rows - i\n        \n        # Calculate the number of stars to print for the current row\n        stars = 2 * i - 1\n        \n        # Print the spaces and the stars\n        print(\" \" * spaces, \"*\" * stars)\n    \n    # Iterate through the remaining rows in the triangle\n    for i in range(rows - 1, 0, -1):\n        # Calculate the number of spaces to the left of the triangle\n        spaces = rows - i\n        \n        # Calculate the number of stars to print for the current row\n        stars = 2 * i - 1\n        \n        # Print the spaces and the stars\n        print(\" \" * spaces, \"*\" * stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            print(\"*\", end=\"\")\n        print()\n        count += 1\n    print(count-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize the sum of the first n numbers to 0\n    sum_of_first_n_numbers = 0\n    \n    # loop through the first n numbers\n    for i in range(1, n+1):\n        # add the number to the sum of the first n numbers\n        sum_of_first_n_numbers += i\n        \n        # check if the sum of the first n numbers is divisible by n\n        if sum_of_first_n_numbers % n == 0:\n            # if it is, return the sum of the first n numbers\n            return sum_of_first_n_numbers\n    \n    # if the loop completes without returning anything, return None\n    return None"
    }
]