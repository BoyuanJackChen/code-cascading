[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the input tuples into sets so that duplicates are removed\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection set back into a list and return it\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    shared_elements = set1.intersection(set2)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Initialize an empty set to store shared elements\n    shared = set()\n    # Iterate over both lists\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.add(i)\n    return list(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Define the shared list as empty\n    shared_list = []\n    \n    # Iterate through the first tuple\n    for element1 in test_tup1:\n        # Check if the element exists in the second tuple\n        if element1 in test_tup2:\n            # If it does, append it to the shared list\n            shared_list.append(element1)\n    \n    # Return the shared list\n    return shared_list"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    A function to identify non-prime numbers in a given range.\n\n    :param n: The upper limit of the range.\n    :return: A list of all non-prime numbers in the range.\n    \"\"\"\n    non_primes = []\n    for num in range(2, n + 1):\n        if math.gcd(num, n) == 1:\n            non_primes.append(num)\n    return non_primes"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    # Check if the number is 2 or 3\n    if n == 2 or n == 3:\n        return False\n    # Check if the number is divisible by any number between 4 and n-1\n    for i in range(4, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    # If the number is not divisible by any number, it's a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if the number is not prime, False otherwise.\n    '''\n    if n < 2:\n        return True\n\n    # Create a list of numbers from 2 to n\n    nums = list(range(2, n+1))\n\n    # Iterate through the list and mark the multiples of each number as composite\n    for i in range(2, int(math.sqrt(n))+1):\n        if nums[i-1] == i:\n            for j in range(i*i, n+1, i):\n                nums[j-1] = 0\n\n    # Check if the remaining numbers are prime\n    for num in nums:\n        if num == 0:\n            continue\n        if num > 1:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number,\n    and False otherwise.\n    '''\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    '''\n    This function identifies non-prime numbers using the trial division method.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function finds the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n and add the first n elements from the list\n    min_heap = hq.nsmallest(n, nums)\n    # Remove and return the largest element from the min-heap\n    for _ in range(n):\n        yield hq.heappop(min_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of size n\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        # if the size of the heap exceeds n, remove the smallest element\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of the first n numbers\n    min_heap = hq.nsmallest(n, nums)\n    # remove the smallest numbers from the heap to get the n largest numbers\n    for _ in range(n):\n        min_heap.pop()\n    # return the min-heap as the n largest numbers\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max-heap from the given numbers\n    hq.heapify(nums)\n\n    # extract the n largest elements from the heap\n    result = []\n    for _ in range(n):\n        result.append(hq.heappop(nums))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max-heap of size n\n    max_heap = [None] * n\n    for i in range(n):\n        heapq.heappush(max_heap, nums[i])\n\n    # extract the n largest integers from the max-heap and return them in descending order\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function takes a list of numbers and an integer n as input, and returns the n largest integers in descending order.\n    \"\"\"\n\n    # Initialize a min-heap of size n, with the first n elements from the list as root\n    min_heap = []\n    for num in nums[:n]:\n        hq.heappush(min_heap, -num)\n\n    # Remove the smallest element (i.e., the maximum number) from the min-heap\n    for _ in range(n):\n        max_num = -hq.heappop(min_heap)\n\n    # Add the remaining elements from the list back to the min-heap\n    for num in nums[n:]:\n        hq.heappush(min_heap, -num)\n\n    # Extract and return the n largest elements from the min-heap\n    return [max_num] * n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build the max heap\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n    \n    # Get the largest n numbers from the heap\n    largest_nums = []\n    for _ in range(n):\n        largest_nums.append(-hq.heappop(max_heap))\n    \n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and the maximum number of elements to return and returns the n largest numbers.\n    '''\n    # create a min heap from the first n numbers in the list\n    heap = hq.nsmallest(n, nums)\n    # iterate through the remaining numbers and add them to the heap\n    for num in nums[n:]:\n        hq.heappush(heap, num)\n    # return the heap as a list in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the input list\n    heap = hq.nlargest(n, nums)\n\n    # Extract the max n elements from the heap and return them as a list in descending order\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n and insert the first n elements of the input list\n    hq.heapify(nums[:n])\n\n    # Pop the minimum element from the heap and append it to the output list\n    output = []\n    while n:\n        output.append(nums.pop())\n        n -= 1\n        # Remove the smallest element if heap becomes too small\n        if n > 0 and hq.heappop(nums) < nums[-1]:\n            hq.heapify(nums)\n\n    return output"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only or not.\n\n    :param x: an integer\n    :return: True if the two numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    diff = 0\n    while x!= 0:\n        diff = diff | (x & 1)\n        x = x >> 1\n    return diff == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0 or x == 1:\n        return True\n\n    if x == 2 or x == 4 or x == 8 or x == 16 or x == 32:\n        return False\n\n    if x & (x - 1) == 0:\n        return True\n\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # get the binary representation of x\n    bin_x = bin(x)[2:]\n    \n    # get the position of the first differing bit\n    for i in range(len(bin_x)):\n        if bin_x[i]!= bin_x[i+1]:\n            return True\n    \n    # if the loop completes without finding a differing bit, then x is a power of 2\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    while x & (x-1)!= 0:\n        x &= x-1\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x - 1)\n    return diff == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x & (x-1))"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if the two numbers differ at one bit position only,\n    and False otherwise.\n    '''\n    # Check if x is a power of 2\n    if x == 0 or (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    if x == 1:\n        return False\n    if x % 2 == 0:\n        return is_Power_Of_Two(x//2)\n    else:\n        return not is_Power_Of_Two((x-1)//2)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Check if the number is 0\n    if x == 0: \n        return True\n    \n    # Check for powers of two\n    while x & (x-1)!= 0: \n        x &= (x-1)\n    \n    # Check if the result is 1\n    if x == 1: \n        return True\n    \n    # Otherwise, return False\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Remove all non-word characters and split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = 0\n    for i in range(n-1):\n        if str[i] == str[(n-i)-1]:\n            rotations += 1\n        else:\n            break\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Find the length of the string\n    n = len(str)\n\n    # Check if the length of the string is less than or equal to 1\n    if n <= 1:\n        return 0\n\n    # Find the longest common prefix of all prefixes of the string\n    prefix = ''\n    for i in range(n):\n        if str[i]!= str[0]:\n            break\n        prefix += str[i]\n\n    # Find the length of the longest common prefix\n    m = len(prefix)\n\n    # Check if the length of the string is less than or equal to the length of the longest common prefix\n    if n <= m:\n        return 0\n\n    # Initialize a list to store the lengths of all prefixes\n    prefix_lengths = [0] * (n + 1)\n\n    # Calculate the lengths of all prefixes\n    for i in range(1, n + 1):\n        prefix_lengths[i] = prefix_lengths[i - 1] + len(str[i - m:i])\n\n    # Initialize a variable to store the minimum number of rotations\n    min_rotations = n\n\n    # Iterate through all possible rotations of the string\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            # Check if the length of the current substring is equal to the length of the longest common prefix\n            if prefix_lengths[j] == m:\n                # Calculate the number of rotations required to get the same string as the current substring\n                rotations = n - j + i\n                # Check if the calculated number of rotations is less than the current minimum\n                if rotations < min_rotations:\n                    min_rotations = rotations\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    str_len = len(str)\n    freq = [0] * 26\n    for char in str:\n        freq[ord(char) - ord('a')] += 1\n\n    for i in range(26):\n        if freq[i] > 0:\n            return i + 1\n\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    for i in range(1, n):\n        if str[:i] == str[i:]:\n            return i\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                rotations += 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = 0\n\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if str[i] == str[j]:\n                count += 1\n            else:\n                break\n\n        if count == n - i:\n            rotations += 1\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # Initialize a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Sort the dictionary by frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # Initialize the count of rotations\n    count = 0\n    \n    # Initialize the minimum number of rotations\n    min_rot = count\n    \n    # Loop through the sorted dictionary\n    for i in range(len(sorted_freq)):\n        # Calculate the number of rotations required for the current frequency\n        rot_count = sorted_freq[i][1] // 2\n        \n        # Update the count of rotations\n        count += rot_count\n        \n        # Update the minimum number of rotations if the current count is less\n        if count < min_rot:\n            min_rot = count\n    \n    # Return the minimum number of rotations\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    max_len = len(str) // 2\n    \n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # Iterate over all possible rotations\n    for i in range(max_len):\n        if str[:n//2] == str[n//2:][::-1]:\n            return max_len - i - 1\n    \n    # The string has no rotations\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # find the length of the given string\n    n = len(str)\n\n    # create a new string using the same characters but rotated by 90 degrees\n    rotated_str = \"\"\n    for i in range(n):\n        rotated_str += str[n-1-i]\n\n    # check if the rotated string is equal to the given string\n    if rotated_str == str:\n        # if yes, return 0\n        return 0\n    else:\n        # if not, find the minimum number of rotations required to get the same string\n        count = 0\n        while rotated_str!= str:\n            rotated_str += str[-count-1]\n            count += 1\n\n        # return the count\n        return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return i\n    return n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) == 1:\n        return s.replace(ch,'',1)\n    else:\n        return s.replace(ch,'',2)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch): \n    s = s.strip(ch)\n    s = s.strip(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # First remove the last occurrence of the character\n    s = s.replace(ch,'')\n    \n    # Remove the first occurrence of the character\n    if ch in s:\n        s = s.replace(ch,'',1)\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of the character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Remove last occurrence of the character\n    if s.rfind(ch) == len(s) - 1:\n        s = s[:len(s) - 1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip() # removing leading and trailing spaces\n    s = s.replace(ch,'') # replacing all occurrences of ch with empty string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return s\n    \n    if s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return ch + remove_Occ(s[1:-1], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # first occurrence of the character\n    idx = s.find(ch)\n    if idx!= -1:\n        s = s[:idx] + s[idx+1:]\n\n    # last occurrence of the character\n    idx = s.rfind(ch)\n    if idx!= -1:\n        s = s[:idx] + s[idx+1:]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    index = 0\n    while index < len(s):\n        if s[index] == ch:\n            s = s[:index] + s[index+1:]\n            index -= 1\n        else:\n            index += 1\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Check if the character is present in the string\n    if ch in s:\n        # Split the string into two parts, before and after the character\n        before = s.split(ch)[0]\n        after = s.split(ch)[1]\n        # Concatenate the two parts, and return the result\n        return before + after\n    else:\n        # If the character is not present, return the original string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    # split the string into a list of characters\n    chars = list(s)\n    # initialize the index of the first occurrence of the character to be removed\n    first_index = -1\n    # initialize the index of the last occurrence of the character to be removed\n    last_index = -1\n    # loop through the list of characters\n    for i, c in enumerate(chars):\n        # if the current character matches the character to be removed, set the first and last indices\n        if c == ch:\n            first_index = i\n            last_index = i\n    # if no occurrence of the character to be removed is found, return the original string\n    if first_index == -1:\n        return s\n    # remove the first occurrence of the character and the last occurrence of the character from the list\n    chars = chars[:first_index] + chars[last_index+1:]\n    # join the list of characters into a string and return the result\n    return ''.join(chars)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    This function sorts a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the rows based on their sums\n    sorted_rows = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    # sort the matrix based on the sorted rows\n    sorted_matrix = []\n    for i in range(len(M)):\n        sorted_matrix.append(sorted_rows[i])\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Initialize an empty list to store the sorted matrix\n    sorted_matrix = []\n\n    # Loop through each row of the matrix\n    for row in M:\n\n        # Initialize a temporary variable to store the current row sum\n        row_sum = 0\n\n        # Loop through each element of the row\n        for element in row:\n\n            # Add the element to the row sum\n            row_sum += element\n\n        # Append the current row to the sorted matrix\n        sorted_matrix.append(row)\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a variable to store the sum of the rows of the matrix\n    row_sum = sum(M[i] for i in range(len(M)))\n    # Initialize a variable to store the new sorted matrix\n    sorted_M = [[0 for j in range(len(M[0]))] for k in range(len(M))]\n\n    # Loop through the rows of the matrix and fill in the sorted matrix\n    for i in range(len(M)):\n        # Loop through the columns of the current row and fill in the sorted matrix\n        for j in range(len(M[0])):\n            # Calculate the sum of the current column\n            col_sum = sum(M[k][j] for k in range(len(M)))\n            # If the sum of the current column is less than the row_sum, add the current column to the sorted_M\n            if col_sum < row_sum:\n                sorted_M[i][j] = M[i][j]\n            # If the sum of the current column is equal to the row_sum, add the current column to the sorted_M in the same row as the row with the smallest sum\n            else:\n                min_sum = min(sorted_M[k][j] for k in range(len(M)))\n                min_row = [k for k in range(len(M)) if sorted_M[k][j] == min_sum][0]\n                sorted_M[min_row][j] = M[i][j]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    # sort the row sums in ascending order\n    row_sums.sort()\n    # use the row sums to sort the matrix\n    sorted_matrix = []\n    for row in M:\n        sorted_row = [row[col] for col in range(len(row)) if row_sums.index(sum(row[:col+1])) == col]\n        sorted_matrix.append(sorted_row)\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[j][0] < M[i][0] + M[j][0]:\n                # swap rows\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row\n    sums = [sum(row) for row in M]\n\n    # Sort the matrix according to the sum of each row\n    sorted_M = sorted(M, key=lambda x: sum(x))\n\n    # Create a dictionary to store the original indices of each row\n    index_dict = {i:[] for i in range(len(M))}\n    for i, row in enumerate(M):\n        index_dict[i] = [j for j, value in enumerate(row) if value == sorted_M[i][j]]\n\n    # Sort each row of the matrix based on the sorted_M\n    for i in range(len(M)):\n        M[i] = sorted(M[i], key=lambda x: sorted_M[index_dict[i].index(x)])\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    nrows = len(M)\n    ncols = len(M[0])\n    \n    # Initialize an empty list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Loop through each row of the matrix\n    for i in range(nrows):\n        # Initialize a list to store the elements in the current row\n        row_sum = []\n        \n        # Loop through each element in the current row\n        for j in range(ncols):\n            # Append the element to the list\n            row_sum.append(M[i][j])\n            \n        # Sort the list in ascending order\n        row_sum.sort()\n        \n        # Loop through each element in the sorted list and append them to the sorted_matrix\n        for k in range(ncols):\n            sorted_matrix.append(row_sum[k])\n            \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the rows in ascending order\n    sorted_rows = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    # Reconstruct the sorted matrix\n    sorted_matrix = [[sorted_rows[i][j] for j in range(len(sorted_rows[0]))] for i in range(len(sorted_rows))]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    result = []\n    for i in range(n):\n        row_sum = sum(M[i])\n        result.append(M[i])\n        if row_sum < n:\n            for j in range(row_sum, n):\n                result.append(M[i][j])\n                M[i][j] = float('-inf')\n    return result"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the lengths of the three sides of a triangular prism and calculates its volume.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h # Formula to calculate the volume of a triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    volume = (1/3) * l * b * h\n\n    print(\"The Volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h) / 3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters: length of the side of the prism,\n    width of the side of the prism, and height of the side of the prism.\n    \n    It returns the volume of the prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula to calculate the volume of a triangular prism\n    volume = 1/3 * l * b * h\n    # Return the volume of the triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Formula to calculate the volume of a triangular prism\n    V = (1/2) * l * b * h\n\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z_]+)'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?!\\s)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]*_[a-z]*\\b' # matches sequences of lowercase letters joined with an underscore\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # define regular expression pattern to match sequences of lowercase letters\n    pattern = r'[a-z]+_[a-z]+'\n    # use re.search() method to find all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # check if the length of the matches list is greater than 0\n    if len(matches) > 0:\n        # return True if there are matches, otherwise return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+[_]*[a-z]*$'\n    return re.match(pattern, text)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<![a-z])[a-z](?=[a-z])') # find sequences of lowercase letters joined with an underscore\n    return bool(pattern.findall(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+_[a-z]+)+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]{2,}\\b_'\n\n    # Use the re.search() method to search for the pattern in the input string\n    result = re.search(pattern, text)\n\n    # If the pattern is found, return True; otherwise, return False\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    count = 0\n    for char in char_list:\n        if char in string:\n            count += 1\n        else:\n            char_list.remove(char)\n            count -= 1\n    return ''.join(char_list)[:NO_OF_CHARS]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string2)\n    result = []\n    for char in string1:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of characters present in the second string\n    second_set = set(string)\n    # Create an empty list to store the remaining characters\n    remaining_chars = []\n    # Loop through each character in the first string\n    for char in string:\n        # If the character is not present in the second set, append it to the remaining list\n        if char not in second_set:\n            remaining_chars.append(char)\n    # Return the remaining list as a string\n    return ''.join(remaining_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    # Create a dictionary to store the frequency of characters in the string\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Create a list to store the characters that need to be removed from the string\n    to_remove = []\n    for char in string:\n        if freq_dict[char] == 1:\n            to_remove.append(char)\n    \n    # Remove the characters from the string and return the result\n    for char in to_remove:\n        string = string.replace(char, '')\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    result_list = []\n    for char in string:\n        if char not in char_list:\n            result_list.append(char)\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the string to a list of ASCII values\n    ascii_list = [ord(char) for char in string]\n\n    # Create a set of characters to be removed\n    remove_set = set(string)\n\n    # Remove the characters from the list and convert it back to a string\n    list_string = ''.join([chr(ascii) for ascii in ascii_list if ascii not in remove_set])\n\n    # Remove the characters from the original string and return the result\n    return string.translate(str.maketrans('', '', remove_set))"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    list_of_chars = []\n    for i in range(NO_OF_CHARS): \n        list_of_chars.append(chr(i))\n    return list_of_chars\n\ndef remove_chars(list_of_chars, string): \n    \"\"\"\n    Remove the characters present in the second string from the first string.\n    \"\"\"\n    new_list = []\n    for char in string: \n        if char not in list_of_chars: \n            new_list.append(char)\n    return new_list\n\ndef main(): \n    string1 = \"hello world\"\n    string2 = \"ld\"\n\n    list1 = str_to_list(string1)\n    list2 = str_to_list(string2)\n\n    list_without_chars = remove_chars(list1, string2)\n    print(\"List without the characters present in the second string:\", list_without_chars)\n\nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set()\n    for i in range(NO_OF_CHARS):\n        char_set.add(chr(i))\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert string to list\n    string_list = list(string)\n    # loop through each character in string_list\n    for i in range(len(string_list)): \n        # check if the current character is present in the second string\n        if string_list[i] in string: \n            # remove the character from the string_list\n            del string_list[i]\n    # convert string_list to string\n    result = ''.join(string_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert strings to lists of characters\n    string1_list = list(string1)\n    string2_list = list(string2)\n\n    # Create a new list to store the characters from the first string which are not present in the second string\n    new_string_list = []\n\n    # Loop through the characters in the first string\n    for char in string1_list:\n        # If the character is not in the second string, append it to the new list\n        if char not in string2_list:\n            new_string_list.append(char)\n\n    # Convert the new list back to a string and return it\n    return ''.join(new_string_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements in the array\n    unique_set = set(arraynums)\n    # Check if the set is empty (no duplicates found) or has only one element (only one duplicate)\n    return bool(len(unique_set) == len(arraynums) or len(unique_set) == 1)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    return True\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    unique = []\n    for num in arraynums:\n        if num not in unique:\n            unique.append(num)\n    if len(unique) == len(arraynums):\n        print(\"The array contains no duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    unique_nums = set(arraynums)\n\n    # Check if there are any duplicates in the set\n    if len(unique_nums)!= len(arraynums):\n        print(\"The array contains duplicates.\")\n    else:\n        print(\"The array does not contain duplicates.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # Create a set to store unique elements of the array\n    unique_set = set()\n\n    # Iterate through the array and add each unique element to the set\n    for num in arraynums:\n        if num not in unique_set:\n            unique_set.add(num)\n\n    # If the length of the set is less than the length of the array, the array contains duplicate elements\n    if len(unique_set) < len(arraynums):\n        print(\"The array contains duplicate elements.\")\n    else:\n        print(\"The array does not contain duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Use a dictionary to store the elements and their indices\n    element_indices = {}\n\n    # Iterate through the array and add each element to the dictionary\n    for index, num in enumerate(arraynums):\n        if num in element_indices:\n            # If the element is already in the dictionary, return True\n            return True\n        else:\n            element_indices[num] = index\n\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 100:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 5:\n        return False\n    elif x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 12 or x == 24 or x == 36 or x == 48 or x == 60:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    if x in (0, 1, 2, 3, 4):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return 'Woodball'\n    elif x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return True\n    elif x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp = temp // 10\n\n    if reverse == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    temp = num\n    while temp!= 0:\n        reverse_num = reverse_num * 10 + temp % 10\n        temp //= 10\n    reverse_num = reverse_num // 10 # Remove extra zeroes in reverse_num\n    \n    if num - reverse_num == 1:\n        print(num, 'is one less than twice its reverse.')\n    else:\n        print(num, 'is not one less than twice its reverse.')"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    temp = num\n    \n    while temp > 0:\n        digit = temp % 10\n        reversed_num = reversed_num * 10 + digit\n        temp //= 10\n        \n    return num == reversed_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # convert the number to a string\n    str_num = str(num)\n\n    # reverse the string\n    rev_str = str_num[::-1]\n\n    # convert the reversed string to an integer\n    rev_num = int(rev_str)\n\n    # check if the original number is one less than twice its reverse\n    if num < 2*rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Get the reverse of the number\n    reverse = 0\n    while num > 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num //= 10\n\n    # Check if the reversed number is one less than twice its reverse\n    return num == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the given number\n    reverse_num = 0\n    while num!= 0:\n        remainder = num % 10\n        reverse_num = reverse_num * 10 + remainder\n        num //= 10\n    # Check if the reversed number is one less than twice the original number\n    if reverse_num - num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    \n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    \n    if rev_num == (num + 1) and num < 2 * rev_num:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == 2*rev(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    \n    # Check if the reversed number is one less than twice its original value\n    if int(reversed_num) < (2 * num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the given list of digits in descending order\n    arr.sort(reverse=True)\n    # Initialize a variable to store the largest number that can be formed with the given digits\n    max_num = 0\n    # Iterate over each digit in the sorted list of digits\n    for digit in arr:\n        # Check if the current digit can be added to the largest number that can be formed so far\n        if digit + max_num > max_num:\n            max_num = digit + max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # sort the array in descending order\n    num = 0\n    for i in range(len(arr)):\n        num += arr[i]*(10**(len(arr)-i-1)) # calculate the number formed using the digits in the array\n    return num # return the maximum number formed with the digits in the array"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Sort the digits in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Initialize the maximum number with the first digit\n    max_num = sorted_arr[0]\n    \n    # Loop through the remaining digits and multiply the previous maximum number with each digit\n    for i in range(1, len(sorted_arr)):\n        max_num = max(max_num * sorted_arr[i], sorted_arr[i])\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) :\n    # create a dictionary to map digits to their corresponding powers\n    powers = {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9\n    }\n    # initialize a variable to store the maximum number\n    max_num = 0\n    # loop over the digits of the number and calculate their value\n    for digit in arr :\n        max_num += powers[digit] * 10**powers[arr.index(digit)]\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    power = 1\n    \n    for i in range(n-1, -1, -1):\n        num = 0\n        for j in range(n-i-1):\n            num += arr[j] * power\n        max_num = max(max_num, num)\n        power *= 10\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        num = 0\n        for j in range(len(arr[i])):\n            num += int(arr[i][j]) ** j\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed with the given digits.\n    '''\n    n = len(arr)\n    max_num = arr[0]\n    max_sum = arr[0]\n    for i in range(1, n):\n        curr_num = arr[i]\n        curr_sum = arr[i]\n        for j in range(i+1, n):\n            curr_sum += arr[j]\n            if curr_sum > max_sum:\n                max_num = curr_num\n                max_sum = curr_sum\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    for i in range(1, 10):\n        num = int(''.join(str(i)*j for j in arr))\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    def helper(start, end, current_sum):\n        if start == end:\n            return current_sum\n        if start % 2 == 0:\n            return helper(start+1, end, current_sum+arr[start])\n        else:\n            return helper(start+1, end, current_sum+arr[start])\n\n    return max(helper(0, len(arr)-1, 0), helper(1, len(arr)-1, 0))"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)+1):\n            num = int(\"\".join(str(x) for x in arr[i:j]))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # Check if the two numbers are of the same sign\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return \"The two numbers have opposite signs.\"\n    else:\n        return \"The two numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y > 0:\n        return \"The first integer has a negative sign and the second integer has a positive sign.\"\n    elif x > 0 and y < 0:\n        return \"The first integer has a positive sign and the second integer has a negative sign.\"\n    elif x == y:\n        return \"Both integers have the same sign.\"\n    else:\n        return \"Both integers have different signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function will check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    elif x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers x and y as input and returns True if they have opposite sign, False otherwise.\n    '''\n    if x>=0 and y>=0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    if x>0 and y>0 or x<0 and y<0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x == 0 and y == 0:\n        return \"Both integers are zero.\"\n    elif x == 0:\n        return \"The first integer is zero, while the second is positive.\"\n    elif y == 0:\n        return \"The first integer is positive, while the second is zero.\"\n    else:\n        return \"The two integers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # checking if the sign of x and y are opposite\n    if ((x > 0 and y < 0) or (x < 0 and y > 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        octagonal_numbers.append(i**2+i)\n    return octagonal_numbers[-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    for i in range(1, int(n**0.5)+1):\n        if n % i**2 == 0:\n            return True\n    return False\n\nn = int(input(\"Enter the value of n: \"))\nif is_octagonal(n):\n    print(f\"The {n}th octagonal number is {n**2}.\")\nelse:\n    print(f\"The {n}th octagonal number does not exist.\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if the input number is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Initialize variables\n    num = 1\n    octagonal_num = 0\n\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is an octagonal number\n        if num**2 + num**2 == 8*i**2:\n            octagonal_num = num\n            break\n        # Increase the number by 1\n        num += 1\n\n    # Return the octagonal number if found, or False otherwise\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal_number(n, k):\n        return (n*(n+1) + k*k)*2 + k\n\n    for i in range(1, 2*n+1):\n        if octagonal_number(i, 1) == n:\n            return True\n        if octagonal_number(i, 2) == n:\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    for i in range(1, n+1):\n        octagonal = (3*i**2) - 1\n        if i == n:\n            return octagonal\n        elif octagonal > n:\n            break\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    def nth_octagonal(n):\n        \"\"\"\n        Recursive function to find the nth octagonal number.\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 8\n        if n == 2:\n            return 32\n        if n == 3:\n            return 128\n        return 8 * nth_octagonal(n - 1) + 2 * nth_octagonal(n - 2)\n\n    return nth_octagonal(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    # 1 is an octagonal number\n    if n == 1:\n        return 1\n    \n    # Initialize variables\n    i = 1\n    j = 1\n    octagonal_number = 1\n    \n    # Calculate the nth octagonal number\n    while i <= n:\n        if j == 1:\n            octagonal_number += i\n        i += 1\n        j += 1\n    \n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    def octagonal_helper(i):\n        if i == 1:\n            return 1\n        else:\n            return 4 * i - 3\n    \n    octagonal_numbers = [octagonal_helper(i) for i in range(1, n+1)]\n    \n    return octagonal_numbers"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def nth_octagonal(m):\n        return 4 * (m**2) - 3\n    \n    if n <= 0:\n        return None\n    \n    if n == 1:\n        return 0\n    \n    if n == 2:\n        return 1\n    \n    for i in range(3, n + 1):\n        if nth_octagonal(i) == n:\n            return i\n    \n    return None"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            sum_digits = sum(map(int, sub_str))\n            if sum_digits == len(sub_str):\n                count[sub_str] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings\n    count = defaultdict(int)\n\n    # Iterate over all substrings of the string\n    for i in range(len(s)):\n        # Iterate over all possible digits in the substring\n        for j in range(i, len(s)):\n            # Convert the substring to a list of digits\n            digits = [int(digit) for digit in s[i:j+1]]\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(digits)\n            # If the substring has the desired sum, increment its count in the defaultdict\n            if substring_sum == len(digits):\n                count[substring_sum] += 1\n\n    # Return the count of substrings with the desired sum\n    return count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the sum of digits for each substring\n    substring_sum = defaultdict(int)\n\n    # Iterate over all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            # Calculate the sum of digits for the current substring\n            substring_sum[substring] += sum(int(digit) for digit in substring)\n\n    # Return the number of substrings with the sum of digits equal to their length\n    return sum(1 for value in substring_sum.values() if value == len(s))"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int) # dp[i] stores the number of substrings of s[:i+1] which sum of digits is equal to i\n    \n    # For each length i from 1 to n, calculate the number of substrings of s[:i+1] which sum of digits is equal to i\n    for i in range(1, n+1):\n        digit_sum = sum(int(d) for d in s[:i])\n        if digit_sum == i:\n            dp[i] = 1\n        elif digit_sum < i:\n            continue # If the digit sum is less than i, skip this length\n        else:\n            # If the digit sum is greater than or equal to i, calculate the number of substrings of s[:i+1]\n            # which sum of digits is less than i, and add them to the count of substrings of s[:i+1]\n            # which sum of digits is equal to i\n            for j in range(1, i):\n                if int(s[j]) < i - j:\n                    dp[i] += dp[j] # If s[j] is less than i-j, add the count of substrings of s[:j+1] which sum of digits is j\n    \n    return dp[n] # The number of substrings of s which sum of digits is equal to n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with sum of digits equal to the length\n    count = defaultdict(int)\n\n    # Iterate through all possible substrings of the string s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                count[j-i+1] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a defaultdict to store the count of substrings with the given sum\n    count_dict = defaultdict(int)\n\n    # loop through all possible lengths of substrings\n    for length in range(1, len(s) + 1):\n\n        # loop through all possible starting indices of substrings of that length\n        for start in range(len(s) - length + 1):\n\n            # extract the substring and calculate its sum of digits\n            substring = s[start:start+length]\n            digit_sum = sum(int(digit) for digit in substring)\n\n            # update the count of substrings with the given sum\n            count_dict[digit_sum] += 1\n\n    # return the count of substrings with the given sum\n    return sum(count for count in count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings\n    count = defaultdict(int)\n\n    # Loop through all substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # If the sum of digits of the substring is equal to the length of the substring, increment the count\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                count[s[i:j]] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n    n = len(s)\n    # Loop through all possible substrings of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Check if the sum of digits in the substring is equal to its length\n            if sum(int(d) for d in s[i:j]) == j-i:\n                # Increment the count of substrings with the sum of digits equal to their length\n                count[j-i] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Convert string to list of characters\n    s = list(s)\n    # Initialize dictionary to store count of substrings with sum of digits equal to their length\n    substrings_count = defaultdict(int)\n    # Loop through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # If the substring has sum of digits equal to its length, increment count\n            if sum(map(int, s[i:j+1])) == j-i+1:\n                substrings_count[j-i+1] += 1\n    # Return count of substrings with sum of digits equal to their length\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Initialize a dictionary to store the count of substrings\n    count = defaultdict(int)\n    # Iterate over all possible substrings\n    for i in range(len(s)):\n        # Create a set of digits in the substring\n        digits = set(str(s[i]))\n        # Calculate the sum of digits\n        sum_digits = sum(digits)\n        # If the sum of digits is equal to the length of the substring, increment the count\n        if sum_digits == len(s[i]):\n            count[sum_digits] += 1\n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        raise ValueError(\"The list is empty\")\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    test_list (list): A list of tuples where each tuple contains two integers.\n\n    Returns:\n    int: The maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize variables\n    max_diff = 0\n    prev_num = 0\n    \n    # Iterate through the list of tuples\n    for num in test_list:\n        # Calculate the difference between the current number and the previous number\n        diff = num - prev_num\n        \n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n        \n        # Update the previous number\n        prev_num = num\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return 0\n    \n    # Sort the list in ascending order\n    sorted_list = sorted(test_list)\n    \n    # Initialize the maximum difference\n    max_diff = 0\n    \n    # Iterate over the sorted list\n    for i in range(len(sorted_list)-1):\n        diff = sorted_list[i+1] - sorted_list[i]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = max(test_list[i][j], test_list[j][i]) - min(test_list[i][j], test_list[j][i])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if not test_list:\n        return 0\n\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the tuple list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize two variables to store the maximum and minimum values\n    max_diff = 0\n    min_diff = sorted_list[1][1] - sorted_list[0][1]\n\n    # Loop through the sorted list and find the maximum difference between available pairs\n    for i in range(len(sorted_list) - 1):\n        diff = sorted_list[i+1][1] - sorted_list[i][1]\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize variables\n    max_diff = 0\n    current_diff = 0\n\n    # iterate over each tuple in the list\n    for i in range(len(test_list)):\n        # check if there is a next tuple\n        if i+1 < len(test_list):\n            # find the difference between the current tuple and the next tuple\n            diff = abs(test_list[i+1][0]-test_list[i][0]) + abs(test_list[i+1][1]-test_list[i][1])\n\n            # update the maximum difference and the current difference\n            if diff > max_diff:\n                max_diff = diff\n                current_diff = diff\n            elif diff == max_diff:\n                current_diff = diff\n\n    # return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] > test_list[j][0]:\n                difference = max(difference, test_list[i][0] - test_list[j][0])\n    return difference"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize variables to store the minimum and maximum values\n    min_val = test_list[0]\n    max_val = test_list[len(test_list)-1]\n\n    # Loop through the list\n    for i in range(1, len(test_list)-1):\n        # Calculate the difference between the current value and the previous value\n        diff = test_list[i] - test_list[i-1]\n\n        # Update the minimum and maximum values if the current difference is greater than them\n        if diff > max_val - min_val:\n            max_val = test_list[i]\n            min_val = test_list[i-1]\n\n    # Return the maximum difference\n    return max_val - min_val"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize a variable to store the maximum difference\n    max_diff = 0\n\n    # Loop through each pair in the list\n    for i in range(len(test_list)):\n        # Loop through the remaining pairs in the list\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the pairs and check if it's greater than the current maximum difference\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples where each tuple contains the subject and its marks.\n    It sorts the list based on the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subject_marks_list = sorted(subjectmarks, key=lambda x: x[1])\n    return subject_marks_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples containing the subject name and marks as input, \n    sorts the tuples based on the second value of each tuple and returns the sorted list.\n    '''\n    # create a list of tuples containing the subject name and marks\n    data = []\n    for subject, mark in subjectmarks:\n        data.append((subject, mark))\n        \n    # sort the data based on the second value of each tuple\n    sorted_data = sorted(data, key=lambda x: x[1])\n    \n    # create a new list with only the subject name and marks from the sorted data\n    result = [x[0] for x in sorted_data]\n    \n    return result"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples by the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second element of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value (marks)\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    # Print the sorted list of tuples\n    print(sorted_marks)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    # create a list of tuples with student name and their subject marks\n    students = [(name, marks) for name, *marks in subjectmarks]\n    # sort the list by the second value (i.e. the subject marks)\n    students.sort(key=lambda x: x[1])\n    # return the sorted list\n    return students"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    return result"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 0:\n        return 0\n    else:\n        head, *tail = data_list\n        return head + recursive_list_sum(tail)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Helper function to flatten a list recursively.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 0:  # base case\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list, current_list=None):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if current_list is None:\n        current_list = []\n\n    for item in data_list:\n        if isinstance(item, list):\n            recursive_list_sum(item, current_list)\n        else:\n            current_list.append(item)\n\n    return sum(current_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(nested_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        flattened_list = []\n        for item in nested_list:\n            if type(item) == list:\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    total_sum = sum(flattened_list)\n\n    return total_sum\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case - if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # recursive case - add the first element of the list to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and counts the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (n * bell_number(n-1)) / (n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2*n + bell_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * bell_number(n - 1) + 1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * (2 * n - 1) // (n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0] = 1\n    bell_numbers[1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j]\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        # use the formula for the binomial coefficient to find the number of ways to partition a set of Bell numbers\n        return (2*n) * bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count to 0\n    count = 0\n    \n    # Define a helper function to calculate the number of ways to partition the set of Bell numbers\n    def helper(num):\n        # Base case: if num is less than or equal to 1, there is only 1 way to partition it\n        if num <= 1:\n            return 1\n        \n        # Initialize variables to store the number of ways to partition each factor of num\n        ways = [0] * (num + 1)\n        \n        # Fill in the ways[] array using dynamic programming\n        for i in range(2, num + 1):\n            for j in range(2, i):\n                if j * i == num:\n                    ways[i] += ways[j] * ways[i - j]\n        \n        # Return the number of ways to partition the set of Bell numbers\n        return ways[num]\n    \n    # Calculate the number of ways to partition the set of Bell numbers using the helper function\n    count = helper(n)\n    \n    # Return the count of ways to partition the set of Bell numbers\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    if n == 6:\n        return 8\n    if n == 7:\n        return 13\n    if n == 8:\n        return 21\n    if n == 9:\n        return 34\n    if n == 10:\n        return 55\n    if n == 11:\n        return 89\n    if n == 12:\n        return 144\n    if n == 13:\n        return 233\n    if n == 14:\n        return 377\n    if n == 15:\n        return 610\n    if n == 16:\n        return 987\n    if n == 17:\n        return 1597\n    if n == 18:\n        return 2584\n    if n == 19:\n        return 4181\n    if n == 20:\n        return 6765"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set to 1\n    ways = 1\n    \n    # Iterate through the set of Bell numbers\n    for i in range(1, n+1):\n        # Count the number of ways to partition the current set of Bell numbers\n        count = 0\n        for j in range(1, i+1):\n            # Check if the difference between the current Bell number and j is odd\n            if abs(i-j) % 2 == 1:\n                count += 1\n        # Update the number of ways to partition the set to the sum of previous ways and the current count\n        ways = ways * (count // 2 + count % 2)\n    \n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Base case: if n is 1, there is only one way to partition into two parts\n    if n == 1:\n        return 1\n\n    # Base case: if n is 0, there is only one way to partition into zero parts\n    if n == 0:\n        return 1\n\n    # Base case: if n is 2, there are three ways to partition into two parts\n    if n == 2:\n        return 3\n\n    # Base case: if n is 3, there are seven ways to partition into three parts\n    if n == 3:\n        return 7\n\n    # Base case: if n is 4, there are 21 ways to partition into four parts\n    if n == 4:\n        return 21\n\n    # Recursive case: if n is odd, there are n/2 ways to partition into two parts,\n    # and there are n ways to partition into one part\n    if n % 2 == 1:\n        return n/2 + bell_number(n//2)\n\n    # Recursive case: if n is even, there are (n-2)/2 ways to partition into two parts,\n    # and there is one way to partition into one part\n    if n % 2 == 0:\n        return (n-2)/2 + bell_number(n//2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic or False otherwise.\n    A monotonic array is an array where the elements either increase or decrease continuously in the same direction.\n    For example, [1,2,3,4,5] is monotonic, while [1,2,4,3,5] is not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] >= A[-1]:\n        if A[1] >= A[-2]:\n            return is_Monotonic(A[1:])\n        else:\n            return False\n    \n    if A[0] <= A[-1]:\n        if A[1] <= A[-2]:\n            return is_Monotonic(A[1:])\n        else:\n            return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic and False otherwise.\n    A monotonic array is an array in which each element is either greater than or equal to the previous element or equal to the previous element.\n    '''\n    \n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # Initialize the first and last elements as None\n    first = None\n    last = None\n    \n    # Iterate through the array\n    for num in A:\n        # Check if the current element is less than the previous element\n        if first is None:\n            first = num\n        elif num < first:\n            return False\n        # Check if the current element is greater than the previous element\n        elif num > last:\n            last = num\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic (increasing or decreasing) or False otherwise.\n    '''\n    \n    # check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # compare the first element with the second element\n    if A[0] < A[1]:\n        # check if the remaining elements are increasing\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        # if all elements are increasing, the array is monotonic\n        return True\n    # if the array is decreasing, compare the last element with the second-to-last element\n    elif A[0] > A[1]:\n        # check if the remaining elements are decreasing\n        for i in range(1, len(A)-1, -1):\n            if A[i] >= A[i-1]:\n                return False\n        # if all elements are decreasing, the array is monotonic\n        return True\n    # if the array is neither increasing nor decreasing, return False\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] <= A[1]\n    else:\n        for i in range(1, n):\n            if A[i] <= A[i-1]:\n                return False\n            elif A[i] >= A[i-1]:\n                return True\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n\n    # Check if array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n\n    # Initialize variables to keep track of the last two elements\n    prev = A[0]\n    curr = A[1]\n\n    # Check if the array is monotonic in increasing order\n    for i in range(2, len(A)):\n        if A[i] > curr:\n            return False\n        elif A[i] < curr:\n            prev = curr\n            curr = A[i]\n        elif A[i] == curr:\n            return False\n\n    # Check if the array is monotonic in decreasing order\n    for i in range(2, len(A)):\n        if A[i] < curr:\n            return False\n        elif A[i] > curr:\n            prev = curr\n            curr = A[i]\n        elif A[i] == curr:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # Initialize variables to keep track of the previous and current elements\n    prev = A[0]\n    curr = A[1]\n    \n    # Loop through the rest of the array\n    for i in range(2, len(A)):\n        # Check if current element is smaller or larger than the previous element\n        if curr < prev:\n            return False\n        prev = curr\n        curr = A[i]\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n    \n    # Check if array contains only positive elements\n    if all(x > 0 for x in A):\n        # Check if array is monotonic in increasing order\n        if all(x <= y for x, y in zip(A, A[1:])):\n            return True\n        # Check if array is monotonic in decreasing order\n        elif all(x >= y for x, y in zip(A, A[1:])):\n            return True\n        else:\n            return False\n    # Check if array contains only negative elements\n    elif all(x < 0 for x in A):\n        # Check if array is monotonic in decreasing order\n        if all(x >= y for x, y in zip(A, A[1:])):\n            return True\n        # Check if array is monotonic in increasing order\n        elif all(x <= y for x, y in zip(A, A[1:])):\n            return True\n        else:\n            return False\n    # If array contains both positive and negative elements, return False\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for item in l:\n        if item == s[0]:\n            if is_sublist(l, s[1:]):\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n\n    Args:\n        l (list): List to search in.\n        s (list): Sublist to search for.\n\n    Returns:\n        bool: True if s is a sublist of l, False otherwise.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n\n    Parameters:\n    l (list): The main list to search in.\n    s (list): The sublist to search for.\n\n    Returns:\n    bool: True if the sublist is found in the list, else False.\n    \"\"\"\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes in two lists as input: l and s.\n    It checks whether the sublist s is present in the list l.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n        l (list): List to search in.\n        s (list): Sublist to search for.\n\n    Returns:\n        bool: True if the sublist is found in the list, False otherwise.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    i = 0\n    j = 0\n    while i < len(l):\n        if l[i] == s[j]:\n            j += 1\n            if j == len(s):\n                return True\n            i += 1\n        else:\n            j = 0\n            i += 1\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # Check if all the tuples have equal length\n    all_tuples_have_equal_length = all(len(t) == len(Input[0]) for t in Input)\n    \n    # Return the result\n    return all_tuples_have_equal_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize a variable to store whether all the tuples have equal length or not\n    result = True\n\n    # loop through each tuple in the input list\n    for tup in Input:\n        # check if the length of the tuple is equal to the length of the first tuple\n        if len(tup)!= len(Input[0]):\n            # set the result variable to False and break the loop\n            result = False\n            break\n\n    # return the result\n    return result"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to store the length of the first tuple\n    length = len(Input[0])\n    # Loop through the list of tuples and check if all tuples have equal length\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    # If all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # creating an empty list to store the lengths of the tuples\n    lengths = []\n    # iterating over each tuple in the input list\n    for tup in Input:\n        # getting the length of each tuple and appending it to the lengths list\n        lengths.append(len(tup))\n    # checking whether all the lengths are equal or not\n    if len(set(lengths)) == 1:\n        # returning True if all lengths are equal\n        return True\n    else:\n        # returning False if any lengths are not equal\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] < nums[j-gap]:\n                nums[j], nums[j-gap] = nums[j-gap], nums[j]\n                j -= gap\n            if i == j:\n                break\n        gap //= 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n\n    # Set the gap value\n    gap = n // 2\n\n    # Start sorting\n    while gap > 0:\n        # Insertion sort\n        for i in range(gap, n):\n            for j in range(i):\n                if nums[j] > nums[i]:\n                    nums[j], nums[i] = nums[i], nums[j]\n\n        # Decrease the gap value\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This function sorts the given list of numbers using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    start = 0\n    swapped = True\n    while swapped:\n        swapped = False\n        gap = n // 2\n        for i in range(start, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        start += gap\n        n = gap\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums) // 2\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(gap, len(nums)):\n            if nums[i-gap] > nums[i]:\n                nums[i-gap], nums[i] = nums[i], nums[i-gap]\n                swapped = True\n                \n        if gap == 1 or not swapped:\n            break\n        \n        gap = (gap * 10) // 10\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = gap // 1.3\n        for i in range(gap, n):\n            key = nums[i]\n            j = i\n            while j >= gap and nums[j-gap] > key:\n                nums[j] = nums[j-gap]\n                j -= gap\n            nums[j] = key\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = n // gap\n        i = 0\n        while i < n - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the gap and the number of iterations\n    gap = 1\n    n = len(nums)\n\n    # Implement the Comb Sort algorithm\n    while gap < n:\n        # Increase the gap by a factor of 1.3\n        gap = int(gap * 1.3)\n\n        # Perform the sorting iterations\n        for i in range(gap, n):\n            # Calculate the index of the minimum element in the gap range\n            j = i\n            while j >= gap and nums[j - gap] > nums[j]:\n                # Swap the elements\n                nums[j - gap], nums[j] = nums[j], nums[j - gap]\n                j -= gap\n\n            # If the range is now sorted, stop iterating\n            if j < gap:\n                break\n\n        # Decrease the gap by a factor of 1.1\n        gap = int(gap * 1.1)\n\n        # If the gap is no longer decreasing, stop iterating\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        if gap == 1:\n            break\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = int((gap + n) / 2)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        if swapped:\n            swapped = False\n\n        gap = int(gap / 1.3)\n\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is greater than or equal to 1\n    if n < 1:\n        return \"The number should be greater than or equal to 1\"\n\n    # Initialize variables to store the square and the difference of squares\n    square = 0\n    diff_square = 0\n\n    # Loop until the square of the difference of squares is equal to the given number\n    while diff_square < n:\n        # Increment the square and check if the difference of squares is greater than n\n        square += 1\n        diff_square = square * square - n\n\n    # If the difference of squares is less than n, then the number can be represented as the difference of two squares\n    if diff_square == n:\n        return \"The number can be represented as the difference of two squares\"\n    else:\n        return \"The number cannot be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return \"Not Possible\"\n    i = 1\n    while i*i <= n:\n        j = n - i*i\n        if j*j == i*i:\n            return \"Possible\"\n        i += 1\n    return \"Not Possible\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"The given number can't be represented as the difference of two squares.\"\n    else:\n        for i in range(1, int(n**0.5)+1):\n            for j in range(1, int(n**0.5)+1):\n                if i**2 + j**2 == n:\n                    return \"The given number can be represented as the difference of two squares.\"\n                elif i**2 + j**2 < n:\n                    break\n        return \"The given number can't be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # first, check if the given number is already a square\n    if n**0.5**2 == n:\n        return True\n\n    # if it's not, then check if the difference between the given number and the square root of it is a square\n    for i in range(2, int(n**0.5)+1):\n        if (n-i**2)**0.5**2 == (n-i**2):\n            return True\n\n    # if it reaches here, the given number cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if i**2 == n:\n            return True\n        elif i**2 > n:\n            return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = int(n ** 0.5)\n    if square * square == n:\n        print(\"Yes, it can be represented as the difference of two squares.\")\n    else:\n        print(\"No, it can't be represented as the difference of two squares.\")\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and (n/i)**2 == int(n/i)**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"Number should be a non-negative integer.\"\n    for i in range(1, int(n**0.5)+1):\n        if i*i == n or (i*i+i) == n:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n*sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # convert the given number to a string\n    num_str = str(n)\n    # check if the length of the string is greater than 1\n    if len(num_str) > 1:\n        return False\n    # check if the number can be represented as the sum of two squares\n    elif int(num_str) ** 2 == n or int(num_str) ** 2 + 1 == n:\n        return True\n    # if none of the above conditions are true, return False\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    # Create a dictionary to store the frequency of each pattern\n    freq = {}\n    for pattern in patterns:\n        if pattern in freq:\n            freq[pattern] += 1\n        else:\n            freq[pattern] = 1\n    \n    # Initialize a counter for each color\n    count = [0] * len(colors)\n    \n    # Iterate through each color in the color sequence\n    for color in colors:\n        # Check if the current color has the same pattern as the color before it\n        if colors[count[color-1]] == color:\n            # If it does, increment the frequency of that pattern\n            if patterns[color-1] in freq:\n                freq[patterns[color-1]] += 1\n            else:\n                freq[patterns[color-1]] = 1\n        else:\n            # If it doesn't, decrement the frequency of the pattern of the previous color\n            if patterns[count[color-1]] in freq:\n                freq[patterns[count[color-1]]] -= 1\n                # If the frequency goes below zero, remove the pattern from the dictionary\n                if freq[patterns[count[color-1]]] == 0:\n                    del freq[patterns[count[color-1]]]\n    \n    # Check if there are any patterns that are left\n    for pattern in freq:\n        if freq[pattern] > 0:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a set to store the current pattern being checked\n    current_pattern = set()\n    # Loop through the colors and patterns arrays\n    for color, pattern in zip(colors, patterns):\n        # If the current color matches the pattern in the patterns array\n        if color == pattern:\n            # Add the pattern to the current_pattern set\n            current_pattern.add(color)\n        # If the current pattern is equal to the pattern in the patterns array\n        elif current_pattern == set(pattern):\n            return True\n        # If the current pattern is not equal to the pattern in the patterns array\n        else:\n            return False\n    # If the loop completes without finding any pattern that matches the patterns array\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Convert the colors array to a set to remove duplicates and sort it\n    colors = sorted(set(colors))\n\n    # Initialize a variable to keep track of the current pattern\n    pattern = colors[0]\n\n    # Loop through the patterns array\n    for i in range(1, len(colors)):\n        # If the current pattern is not equal to the next color in the colors array\n        if colors[i]!= pattern:\n            # Check if the current pattern is equal to one of the patterns in the patterns array\n            if pattern in patterns:\n                # If the current pattern is equal to one of the patterns in the patterns array, return True\n                return True\n            # Otherwise, return False\n            else:\n                return False\n        # Otherwise, update the current pattern to the next color in the colors array\n        else:\n            pattern = colors[i]\n\n    # If the function reaches this point, the current pattern is equal to the last color in the colors array\n    # Check if the current pattern is equal to one of the patterns in the patterns array\n    if pattern in patterns:\n        # If the current pattern is equal to one of the patterns in the patterns array, return True\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the length of colors and patterns are same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a dictionary to store the number of colors that have appeared in a pattern\n    color_count = {}\n\n    # Iterate through the patterns and check if each pattern follows the sequence in the patterns array\n    for pattern in patterns:\n        # Check if the pattern length is same as the length of colors array\n        if len(pattern)!= len(colors):\n            return False\n\n        # Iterate through the colors in the pattern\n        for color in pattern:\n            # If the color is already in the dictionary, increment its count by 1\n            if color in color_count:\n                color_count[color] += 1\n            # Else, add the color to the dictionary with count 1\n            else:\n                color_count[color] = 1\n\n        # Iterate through the colors in the colors array\n        for i in range(len(colors)):\n            # If the color in the colors array is not present in the color_count dictionary, return False\n            if colors[i] not in color_count:\n                return False\n\n            # If the count of the color in the colors array is less than the count in the pattern, return False\n            if color_count[colors[i]] < pattern.count(colors[i]):\n                return False\n\n            # Decrement the count of the color in the color_count dictionary by 1\n            color_count[colors[i]] -= 1\n\n    # If we reach this point, it means all the patterns follow the sequence in the patterns array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    # create a set of all possible patterns\n    pattern_set = set()\n    for pattern in patterns:\n        pattern_set.add(tuple(sorted(pattern)))\n\n    # check if the colors and patterns are of the same length\n    if len(colors)!= len(pattern_set):\n        return False\n\n    # check if the colors and patterns are in the same set\n    if set(colors)!= pattern_set:\n        return False\n\n    # if all checks passed, the colors and patterns follow the same pattern sequence\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    # create a dictionary to store the frequency of each color\n    freq = {}\n    for color in colors:\n        if color in freq:\n            freq[color] += 1\n        else:\n            freq[color] = 1\n\n    # loop through each pattern in the array\n    for pattern in patterns:\n        # check if the pattern is valid\n        if pattern not in freq:\n            return False\n\n        # update the frequency of each color in the pattern\n        for color in pattern:\n            if color in freq:\n                freq[color] -= 1\n                if freq[color] < 0:\n                    return False\n\n    # if all patterns have been checked without finding any errors, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0:\n        return True\n    if len(colors)!= len(patterns[0]):\n        return False\n    if len(patterns) > 1 and patterns[0]!= patterns[1]:\n        return False\n\n    for i in range(len(colors)):\n        if not (colors[i] == patterns[0][i]):\n            return False\n    \n    return is_samepatterns(colors, patterns[1:])"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if colors.count(pattern)!= len(colors)//len(patterns):\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp = [j for j in test_list[i] if j % K == 0]\n        if len(temp) == len(test_list[i])//K:\n            result.append(temp)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        all_divisible = True\n        for elem in tup:\n            if elem % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(i % K == 0 for i in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    k_tuples = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            k_tuples.append(tup)\n    return k_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n                if count == len(tup):\n                    result.append(tup)\n                    break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    This function checks whether a number is divisible by 11 or not.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # initialize variables to keep track of the length of the word and whether it's odd or even\n    odd_len = 0\n    even_len = 0\n    \n    # loop through each character in the string\n    for char in s:\n        # check if the character is a letter\n        if char.isalpha():\n            # if it is, check its length and update the appropriate variable\n            if len(char) % 2 == 1:\n                odd_len += 1\n            else:\n                even_len += 1\n    \n    # check which variable has the smallest value and print the result\n    if odd_len < even_len:\n        print(s + \" has odd length.\")\n    else:\n        print(s + \" has even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() #splitting the string by space\n    for word in words:\n        if len(word) % 2 == 0: #checking if the length of the word is even or not\n            print(word + \" is an even length word.\")\n        else:\n            print(word + \" is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string by whitespace and assign to words list\n    for word in words:  # iterate over each word in words list\n        if len(word) % 2 == 1:  # if length of word is odd\n            print(word + \" is an odd length word\")\n        else:  # if length of word is even\n            print(word + \" is an even length word\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() \n    for word in words: \n        if len(word) % 2 == 0: \n            return False \n    return True \n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    count = 0\n    for word in words:\n        count += 1\n    if count % 2 == 1:\n        print(\"The word length is odd\")\n    else:\n        print(\"The word length is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return 'The length of the word is even.'\n        else:\n            return 'The length of the word is odd.'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(s, \"is an even length\")\n    else:\n        print(s, \"is an odd length\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    for i in range(1, 4):\n        for j in range(1, 4):\n            for k in range(1, 4):\n                if i+j+k == n:\n                    count += 1\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 4 * n + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (4*n**3 + n - 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a variable to store the sum of cubes of numbers from 1 to n\n    cubes = 0\n    # Loop from 1 to n and add the cube of each number to the sum\n    for i in range(1, n+1):\n        cubes += i**3\n    # Return the sum of cubes\n    return cubes"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    else:\n        return 10 * (n + 1) + 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    \n    for i in range(1, n+1):\n        a = b\n        b = c\n        c = d\n        d = a + b + c + d\n    \n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (2 * n + 1) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            for k in range(j, n + 1):\n                if i ** 2 + j ** 2 == k ** 2:\n                    tetrahedral_count += 1\n    return tetrahedral_count\n\nn = int(input(\"Enter the value of n: \"))\nresult = tetrahedral_number(n)\nprint(\"The\", n, \"th tetrahedral number is:\", result)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a counter variable to keep track of the number of terms\n    count = 0\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through the terms\n    while count < n:\n        # Calculate the term and increment the counter\n        term = count * (count + 1) * (count + 2)\n        result += term\n        count += 1\n    # Return the result\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n - 1) * (n - 2) * (n - 3) // 6"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere.\n\n    Args:\n    r (float): radius of the sphere\n\n    Returns:\n    float: volume of the sphere\n    '''\n\n    # Formula for volume of a sphere\n    volume = (4/3) * math.pi * (r**3)\n\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(r))"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the volume of the sphere\n    vol = (4.0/3.0) * math.pi * r**3\n    return vol"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for i in range(len(strr)):\n        ascii_val += ord(strr[i])\n    return chr(ascii_val % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    char = chr(sum % 26 + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # initialize the result string\n    result = \"\"\n\n    # iterate over each character in the string\n    for char in strr:\n        # calculate the ASCII value of the character\n        ascii_value = ord(char)\n\n        # add the ASCII value modulo 26 to the result string\n        result += chr((ascii_value + 1) % 26)\n\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    char = 0\n    for char in strr:\n        char = ord(char) + char\n    return chr(char % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the character with an empty string\n    char = ''\n    # Iterate through each character in the string\n    for i in strr:\n        # Add the ASCII value of the character to the character variable\n        char = char + str(ord(i))\n    # Find the sum of the ASCII values of all the characters modulo 26\n    char_sum = 0\n    for i in char:\n        char_sum += int(i)\n    # Find the character by taking the remainder of the sum divided by 26\n    char = chr(char_sum % 26 + ord('A'))\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize a variable to store the sum of ASCII values of characters of the string\n    sum = 0\n    # Iterate over each character of the string\n    for char in strr:\n        # Convert the character to its ASCII value and add it to the sum variable\n        sum += ord(char)\n    # Convert the sum variable to its corresponding character using the formula ASCII value modulo 26\n    char = chr((sum % 26) + 97)\n    # Return the character as the output\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    count = 0\n    for char in strr:\n        count += ord(char)\n\n    return chr((count % 26) + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence_list = [1]\n        for i in range(2, n+1):\n            sequence_list.append(4*sequence_list[-1] - sequence_list[-2])\n        return sequence_list[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]  # Start with the first two numbers in the sequence\n\n    for i in range(2, n+1):  # Loop n times\n        new_sequence = [sequence[j] + sequence[j+1] for j in range(len(sequence)-1)]  # Calculate the next sequence\n        sequence = new_sequence  # Update the current sequence with the new sequence\n\n    return sequence[n-1]  # Return the nth number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * (n+1)\n    sequence[1] = 1\n    for i in range(2, n+1):\n        sequence[i] = (sequence[i-1] + sequence[i-2]) % 2\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0]\n    for i in range(1, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2]\n    for i in range(1, n):\n        next_number = sequence[-1] + sequence[-2]\n        if next_number % 2 == 0:\n            sequence.append(next_number)\n        else:\n            sequence.append(next_number - 1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers of the sequence\n    seq = [0, 1]\n    # Calculate the rest of the sequence\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        next_num = (seq[i-1] + seq[i-2]) % 2\n        # Add the next number to the sequence\n        seq.append(next_num)\n    # Return the nth number in the sequence\n    return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1):\n        sequence.append(4*sequence[i-1]-sequence[i-2]+1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 3, 0, 1]\n    for i in range(n - 4):\n        sequence = [2, 3, 0, 1] + [sequence[j] + sequence[j+1] for j in range(0, len(sequence)-2, 2)]\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # initialize the sequence with the first n terms\n    sequence = [1]\n    for i in range(1, n):\n        # calculate the next term in the sequence\n        next_term = (sequence[-1] + sequence[-2]) % 2\n        # append the next term to the sequence\n        sequence.append(next_term)\n    # return the nth term in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes a radius r and returns the surface area of a sphere with that radius.\n    '''\n    # Formula for the surface area of a sphere: 4*pi*r^2\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes the radius r of a sphere as input and returns\n    the surface area of the sphere in square units.\n    \n    \"\"\"\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes a radius of a sphere as input and returns the surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r ** 3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    pi = math.pi\n    return 4 * pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere using the formula:\n        s = 4 * pi * r^2\n    '''\n    s = 4 * math.pi * r**2\n    return s"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    # First centered hexagonal number is 1\n    if n == 1:\n        return 1\n\n    # Second centered hexagonal number is 6\n    elif n == 2:\n        return 6\n\n    # Calculate centered hexagonal number using formula\n    else:\n        return (6 * n ** 2) - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the number of rows needed\n    rows = int((n + 1) ** 0.5)\n    # Initialize the result with the first row\n    result = [1]\n    # Iterate through the remaining rows\n    for i in range(1, rows):\n        # Initialize the current row\n        current_row = [1]\n        # Iterate through the columns of the current row\n        for j in range(1, i + 1):\n            # Calculate the sum of the current row and the previous two rows\n            current_row.append((result[-1] + result[-2]) // 2)\n        # Update the result with the current row\n        result += current_row\n    # Return the nth centered hexagonal number\n    return result[n]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    # Initialize variables\n    prev = None\n    cur = 1\n    next_num = 1\n    \n    # Iterate through the sequence to find the nth centered hexagonal number\n    for i in range(2, n+1):\n        if i % 2 == 1:\n            if prev is not None:\n                cur = prev + 2*cur - next_num\n            next_num = 2*cur - 1\n        else:\n            cur = 2*cur - prev - 1\n        \n        prev = cur\n    \n    return cur"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = 0\n    while k < n:\n        k += 1\n        if k % 2 == 1:\n            continue\n        l = (k - 1) // 2\n        r = k // 2\n        centered_hex = 6 * (l + r) - 2\n        print(centered_hex)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Calculate the center of the nth centered hexagonal number\n        # as the (n + 1/2)th centered hexagonal number\n        center_n = centered_hexagonal_number(n//2) + 1\n        # Calculate the height of the nth centered hexagonal number\n        # as the distance from the center of the previous centered\n        # hexagonal number to the center of the current centered hexagonal number\n        height_n = abs(center_n - centered_hexagonal_number(n - 1))\n        # Return the total centered hexagonal number\n        return center_n + height_n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal_helper(n, a, b, c):\n        \"\"\"\n        Helper function to find centered hexagonal number.\n        \"\"\"\n        if n == 0:\n            return a\n        elif n == 1:\n            return b\n        else:\n            return centered_hexagonal_helper(n-1, c, b, a+b+c)\n\n    def centered_hexagonal(a, b, c):\n        \"\"\"\n        Main function to find centered hexagonal number.\n        \"\"\"\n        return centered_hexagonal_helper(n-1, a, b, c)\n\n    a, b, c = 1, 2, 1\n    n = 4\n    print(\"The centered hexagonal number is:\", centered_hexagonal(a, b, c))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1  # initialize counter variable\n    \n    while a < n:\n        b = 1  # initialize index variable\n        \n        while b < n-a:\n            a += 1  # increment a counter variable\n            b += 2  # increment b index variable\n        \n        a += 1  # increment a counter variable\n        b += 2  # increment b index variable\n        \n        print(a, end=' ')\n        \n    return a - 1  # return the nth centered hexagonal number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = (n-1) // 2\n    m = n - k\n    \n    centered_hex = 1\n    \n    if m % 3 == 0:\n        centered_hex += (m // 3) * (m // 3)\n    else:\n        centered_hex += (m // 3) * (m // 3) + ((m % 3) // 2) * (m // 3)\n    \n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonal_numbers = [0, 6, 21, 36, 51, 66, 81, 96, 111, 126, 141, 156, 171, 186, 201, 216, 231, 246, 261, 276, 291, 306, 321, 336, 351, 366, 381, 396, 411, 426, 441, 456, 471, 486, 501, 516, 531, 546, 561, 576, 591, 606, 621, 636, 651, 666, 681, 696, 711, 726, 741, 756, 771, 786, 801, 816, 831, 846, 861, 876, 891, 906, 921, 936, 951, 966, 981, 996]\n    return hexagonal_numbers[n]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 6\n    for i in range(1, n+1):\n        print((a + b) // 2)\n        a += 6\n        b += 12"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Using a list comprehension to create a list of tuples containing key-value pairs from the dictionaries\n    merged_list = [(key, dict1.get(key, None), dict2.get(key, None), dict3.get(key, None)) for key in dict1.keys() | dict2.keys() | dict3.keys()]\n    # Using a dictionary comprehension to create a dictionary containing key-value pairs from the list of tuples\n    merged_dict = {key: value for key, value in merged_list if value is not None}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    \n    # Loop through the dictionaries and add each key-value pair to the merged dictionary\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n        \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1,dict2,dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): Dictionary 1.\n        dict2 (dict): Dictionary 2.\n        dict3 (dict): Dictionary 3.\n\n    Returns:\n        dict: Merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the three dictionaries into one dictionary\n    merged_dict = dict1.copy()\n    for key in dict2.keys():\n        if key not in merged_dict.keys():\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict.keys():\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n\n    Parameters:\n    -----------\n    dict1 : dict\n        The first dictionary to be merged.\n    dict2 : dict\n        The second dictionary to be merged.\n    dict3 : dict\n        The third dictionary to be merged.\n\n    Returns:\n    --------\n    dict\n        A single dictionary containing all the key-value pairs from the input dictionaries.\n    \"\"\"\n\n    # Merge the dictionaries using the update() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and merges them into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary of frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list,\n    returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.defaultdict(int)  # using defaultdict to create a dictionary with 0 as default value for each key\n    for elem in lst:\n        freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(lst)\n    return dict(count)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    min_num = N\n    for i in range(2, N):\n        if abs(N-i) < abs(N-min_num):\n            min_num = i\n    \n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    max_num = N\n    diff = 0\n    \n    for i in range(1, N+1):\n        if i < min_num:\n            diff = min_num - i\n            min_num = i\n        elif i > max_num:\n            diff = i - max_num\n            max_num = i\n    \n    return min(N-diff, N+diff)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize the smallest and largest numbers\n    smallest = float('inf')\n    largest = float('-inf')\n\n    # loop through each number in the range [1, N]\n    for num in range(1, N+1):\n        # if the number is smaller than the smallest number\n        if num < smallest:\n            # update the smallest number\n            smallest = num\n        # if the number is larger than the largest number\n        elif num > largest:\n            # update the largest number\n            largest = num\n\n    # find the closest smaller number to N\n    closest_smallest = smallest - 1\n    closest_largest = largest + 1\n\n    # return the closest smaller number\n    return min(closest_smallest, closest_largest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Initialize variables\n    smaller = None\n    closest = None\n    \n    # Iterate through the numbers from 1 to N\n    for num in range(1, N+1):\n        # If the number is smaller than the current smaller number\n        if num < smaller:\n            # Set the new smaller number\n            smaller = num\n            # Set the closest number to the current smaller number\n            closest = num\n        elif num - smaller <= closest:\n            # If the number is closer to the current closest number\n            closest = num\n    \n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    while True:\n        if num < 2:\n            return num\n        num -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    closest_num = N\n    \n    for i in range(1, N):\n        if i < min_num:\n            min_num = i\n            closest_num = i\n            \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter the number: \"))\n    smallest = float('inf')\n    for i in range(n, -1, -1):\n        if i < smallest:\n            smallest = i\n        if abs(i-n) < abs(smallest-n):\n            closest = i\n    print(\"The closest smaller number than\", n, \"is\", closest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    closest = N\n    temp = N - 1\n\n    # Find the closest smaller number than temp\n    while temp > 0 and N - temp < closest - N:\n        closest = temp\n        temp = temp - 1\n\n    # Print the result\n    print(\"The closest smaller number than\", N, \"is\", closest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    while True:\n        if num == 1:\n            return 0\n        else:\n            num -= 1\n        if num == N:\n            return N\n        elif N - num == num - 1:\n            return num - 1\n        else:\n            return num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list of words.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes in a list of string values and a substring as input and returns True if the\n    substring is present in the list, otherwise False.\n    '''\n    for i in str_list:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function checks if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Convert the sub_str to a list of characters for easy comparison\n    sub_str_list = list(sub_str)\n    \n    # Loop through the list of string values\n    for str_val in str1:\n        # If the sub_str is present as a substring in the current string value, return True\n        if sub_str_list in str_val:\n            return True\n    \n    # If the loop completes without finding the sub_str, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Loop through each string value in the list\n    for string_value in str1:\n        # Check if the substring is present in the string value\n        if sub_str in string_value:\n            # Return True if the substring is present\n            return True\n    # If the loop completes without finding the substring, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(sub_str, list):\n        for s in sub_str:\n            if str1 in s:\n                return True\n    elif isinstance(sub_str, str):\n        if sub_str in str1:\n            return True\n    else:\n        print(\"The input is neither a list nor a string.\")\n        return None\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a number as input and returns True if the number is undulating, False otherwise.\n    '''\n\n    # Check if the number is a multiple of 4\n    if n % 4 == 0:\n        return True\n\n    # Check if the number is divisible by 15\n    if n % 15 == 0:\n        return True\n\n    # Check if the number is divisible by 30\n    if n % 30 == 0:\n        return True\n\n    # If none of the above conditions are met, the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1 or n == 2:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return is_undulating((3 * n) + 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        # If even, check if the difference between consecutive odd numbers is equal to 2\n        if (n+2) - (n+4) == 2:\n            return True\n        else:\n            return False\n    else:\n        # If odd, check if the difference between consecutive even numbers is equal to 2\n        if (n+2) - (n+4) == 2:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # define the base cases for the recursion\n    if n == 0 or n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n//2)\n    else:\n        return is_undulating((n//2) + 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer as input and returns True if it is undulating, otherwise False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # if n is even\n    if n % 2 == 0:\n        # if n is divisible by 3\n        if n % 3 == 0:\n            # if n is divisible by 4\n            if n % 4 == 0:\n                # if n is divisible by 6\n                if n % 6 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples based on second value (i.e., the second element of each tuple)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # sort the list of tuples by the second element\n    test_list.sort(key=itemgetter(1))\n\n    # return the index of the first tuple with the smallest second element\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list based on the second value\n    test_list.sort(key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Using the itemgetter function from the operator module to get the second value of each tuple.\n    second_values = [itemgetter(1)(t) for t in test_list]\n    \n    # Using the sorted function to sort the second_values list in ascending order.\n    sorted_second_values = sorted(second_values)\n    \n    # Using the index function to find the index of the smallest value in the sorted_second_values list.\n    index_min = sorted_second_values.index(min(sorted_second_values))\n    \n    # Returning the index of the tuple with the smallest second value.\n    return index_min"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the length of the smallest list\n    smallest_length = float('inf')\n\n    # Loop through each list in the input list\n    for sublist in lst:\n        # Check if the length of the current sublist is less than the current smallest length\n        if len(sublist) < smallest_length:\n            # Update the smallest_length variable to be the length of the current sublist\n            smallest_length = len(sublist)\n\n    # Return the smallest_length variable as the result\n    return smallest_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the length of the smallest list\n    min_length = len(lst[0])\n\n    # Iterate through each list in the list of lists\n    for sublist in lst:\n        # Check if the length of the current sublist is smaller than the current minimum length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # Return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # Initialize minimum length as infinity\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)  # Update minimum length if current list has a smaller length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize the smallest length to infinity\n    min_len = float('inf')\n    # loop through each sublist in the list\n    for sublist in lst:\n        # loop through each element in the sublist\n        for element in sublist:\n            # if the length of the element is smaller than the current minimum length, update the minimum length\n            if len(str(element)) < min_len:\n                min_len = len(str(element))\n    # return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the minimum length to be the first list in the list of lists\n    min_length = len(lst[0])\n    # Loop through the rest of the lists in the list of lists\n    for i in range(1, len(lst)):\n        # Find the length of the current list and compare it to the minimum length\n        current_length = len(lst[i])\n        if current_length < min_length:\n            min_length = current_length\n    # Return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = len(lst[0])  \n\n    for i in range(1, len(lst)):  \n        if len(lst[i]) < min_len:  \n            min_len = len(lst[i])  \n\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = float('inf') #initialize variable to infinity\n    smallest_list = None #initialize variable to None\n\n    for i in range(len(lst)): #iterate through all lists in lst\n        for j in range(len(lst[i])): #iterate through all elements in each list\n            if lst[i][j] < min_length: #if element is smaller than current minimum\n                min_length = lst[i][j] #update minimum\n                smallest_list = lst[i] #update smallest list\n\n    return min_length #return length of smallest list\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # Initialize variables\n    count = 0\n\n    # Check if the number is 1 or less\n    if n <= 1:\n        return 0\n\n    # Loop through all numbers from 2 to the square root of the number\n    for i in range(2, int(n ** 0.5) + 1):\n        # If the number is divisible by the current number, add 1 to the count variable\n        if n % i == 0:\n            count += 1\n\n    # Return the count of divisors\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # check if the given integer is greater than 1\n    if n <= 1:\n        return 0\n\n    # initialize the count of divisors to 0\n    count = 0\n\n    # loop through each number between 2 and the square root of the given integer\n    for i in range(2, int(n**0.5)+1):\n        # check if the given integer is divisible by the current number\n        if n % i == 0:\n            # if it is, increment the count of divisors by 1\n            count += 1\n\n    # return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    This function calculates the number of divisors of a given integer n.\n    \"\"\"\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n    list1: A flattened list of lists containing elements.\n\n    Returns:\n    A dictionary containing frequency of each element in the list.\n    \"\"\"\n\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create an empty dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Iterate through the flattened list and update the frequency of each element in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for elem in list1:\n        # if the element is a list, recursively call the function on the list\n        if isinstance(elem, list):\n            for sub_elem in elem:\n                if sub_elem in freq_dict:\n                    freq_dict[sub_elem] += 1\n                else:\n                    freq_dict[sub_elem] = 1\n        else:\n            # if the element is not a list, check if it's already in the dictionary\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary\n    freq_dict = {}\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Iterate through the flattened list and update the frequency dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in frequency:\n                frequency[subitem] += 1\n            else:\n                frequency[subitem] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # Divide the product by the length of the list\n    result = product / len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply_result = 1\n    for number in numbers:\n        multiply_result *= number\n    return multiply_result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # base case: if n is 0, return 0\n    if n == 0:\n        return 0\n\n    # recursive case: divide n by 2 and append the corresponding digit to the result string\n    binary_string = str(decimal_to_binary(n // 2))\n    binary_string = str(n % 2) + binary_string\n\n    # return the final binary string with no leading zeros\n    return binary_string if binary_string[0]!= '0' else binary_string[1:]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Initialize an empty string to store the binary equivalent\n    binary_string = ''\n\n    # Loop through each bit of the decimal number\n    while n > 0:\n        # Get the last bit of the decimal number\n        last_bit = n % 2\n\n        # Add the last bit to the front of the binary string\n        binary_string = str(last_bit) + binary_string\n\n        # Divide the decimal number by 2 and remove the last bit\n        n = n // 2\n\n    # Remove any leading zeros from the binary string\n    binary_string = binary_string.lstrip('0')\n\n    # Return the binary string\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = \"\"\n    while n > 0: \n        remainder = n % 2 \n        binary_num = str(remainder) + binary_num \n        n = n // 2 \n    return binary_num "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to hold the binary equivalent of n\n    binary_str = ''\n    # loop through each digit of n from right to left\n    while n > 0:\n        # get the remainder of n divided by 2 and convert it to an integer\n        digit = n % 2\n        # append the integer to the beginning of binary_str\n        binary_str = str(digit) + binary_str\n        # divide n by 2 and remove the least significant digit\n        n //= 2\n    # return the binary_str, which now contains the binary equivalent of n\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n\n    # Find the smallest number that is not a palindrome\n    i = num - 1\n    while not is_palindrome(i):\n        i -= 1\n\n    return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(num):\n    '''\n    Returns True if the given integer is a palindrome, False otherwise.\n    '''\n    if num < 0:\n        num *= -1\n    reversed_num = 0\n    while num > 0:\n        remainder = num % 10\n        reversed_num = reversed_num * 10 + remainder\n        num //= 10\n    if num == reversed_num:\n        return True\n    return False\n\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num\n    next_num = num + 1\n    while not is_palindrome(next_num):\n        next_num += 1\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    str_num = str(num)\n    # Reverse the string and check if it is a palindrome\n    reversed_str_num = str_num[::-1]\n    if reversed_str_num == str_num:\n        # If the original number was a palindrome, return the next smallest palindrome\n        return num + 1\n    else:\n        # If the original number was not a palindrome, return the smallest palindrome greater than the original number\n        for i in range(num, sys.maxsize, -1):\n            if str(i) == str(i)[::-1]:\n                return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Returns True if the input number is a palindrome.\n    \"\"\"\n    if num < 0:\n        num = -num\n    reverse = 0\n    while num > reverse:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse or num == reverse // 10\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the input integer.\n    \"\"\"\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1\n\ndef main():\n    \"\"\"\n    Main function to test the functions.\n    \"\"\"\n    num = int(input(\"Enter an integer: \"))\n    print(\"The next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    def next_palindrome(n):\n        if n % 2 == 0:\n            return str(int(n/2) + 1) + str(int(n/2))\n        else:\n            return str(int((n-1)/2) + 1) + str(int(n/2)) + str(int(n/2)+1)\n    \n    def is_valid_palindrome(n):\n        return n == int(n[::-1])\n    \n    if is_palindrome(num):\n        return num\n    \n    n = 1\n    while True:\n        p = next_palindrome(n)\n        if is_valid_palindrome(p) and int(p) < num:\n            return int(p)\n        n += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # remove leading zeros from the number\n    while num and num[0] == '0':\n        num = num[1:]\n    \n    # reverse the number and check if it is a palindrome\n    num_rev = int(str(num)[::-1])\n    if str(num_rev) == str(num):\n        return num_rev\n    \n    # if not, increment the last digit and check if it is a palindrome\n    last_digit = num[-1]\n    while True:\n        next_num = str(int(num) + 1)\n        if last_digit == '9':\n            if next_num == '10':\n                return str(int(num))\n            else:\n                last_digit = '0'\n                num = next_num\n        else:\n            last_digit = str(int(last_digit) + 1)\n            num = next_num\n            break\n            \n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        return str(num) == str(num)[::-1]\n\n    def palindrome_digits(num):\n        '''\n        Helper function to extract digits from a palindrome number.\n        '''\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        digits.reverse()\n        return digits\n\n    def largest_palindrome(start):\n        '''\n        Helper function to find the largest palindrome starting with a given number.\n        '''\n        largest = start\n        for i in range(start, sys.maxsize):\n            if is_palindrome(i) and is_palindrome(i // 10):\n                digits = palindrome_digits(i)\n                if i // 10 > largest:\n                    largest = i // 10\n        return largest\n\n    def next_smallest(num):\n        '''\n        Main function to find the next smallest palindrome of a given number.\n        '''\n        max_pal = largest_palindrome(num)\n        for i in range(max_pal, num - 1, -1):\n            if is_palindrome(i):\n                return i\n        return -1\n\n    return next_smallest(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    digits = [int(digit) for digit in str(num)]\n    reversed_digits = digits[::-1]\n    largest_digit = max(reversed_digits)\n\n    for i in range(largest_digit, 0, -1):\n        if digits == reversed_digits:\n            break\n        digits.append(i)\n\n    return int(''.join(map(str, digits)))\n\nif __name__ == '__main__':\n    try:\n        num = int(input(\"Enter a positive integer: \"))\n        if num <= 0:\n            print(\"Invalid input. Please enter a positive integer.\")\n            sys.exit()\n        result = next_smallest_palindrome(num)\n        print(\"Next smallest palindrome of\", num, \"is\", result)\n    except ValueError:\n        print(\"Invalid input. Please enter a positive integer.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the input integer to a string\n    num_str = str(num)\n\n    # reverse the string\n    reversed_str = num_str[::-1]\n\n    # convert the reversed string to an integer and find the next smallest palindrome\n    next_num = int(reversed_str) + 1\n\n    # convert the next number to a string and check if it is a palindrome\n    next_num_str = str(next_num)\n    is_palindrome = next_num_str == next_num_str[::-1]\n\n    # if the next number is not a palindrome, find the next smallest palindrome\n    if not is_palindrome:\n        next_smallest_palindrome(num)\n\n    # return the next smallest palindrome\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Remove any leading zeros from the string\n    while num_str[0] == '0':\n        num_str = num_str[1:]\n\n    # Check if the string is a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, return the original integer\n        return num\n\n    # Initialize variables for the palindromes\n    next_palindrome = num\n    is_prime = True\n    palindromes = []\n\n    # Generate palindromes from 10 to n-1\n    for i in range(10, len(num_str)):\n        # Convert the current palindrome to an integer\n        current_palindrome = int(num_str[i:]) * 10 ** (len(num_str) - i)\n\n        # Check if the current palindrome is prime\n        is_prime = True\n        for j in range(2, current_palindrome // 2 + 1):\n            if current_palindrome % j == 0:\n                is_prime = False\n                break\n\n        # If the current palindrome is prime, add it to the list of palindromes\n        if is_prime:\n            palindromes.append(current_palindrome)\n\n    # Find the smallest palindrome in the list that is greater than the input number\n    for palindrome in palindromes:\n        if palindrome > num:\n            return palindrome\n\n    # If no palindromes are found, return the original integer\n    return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return \"Invalid input. k should be a positive integer less than or equal to the length of the array.\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        low, high = 1, len(arr)\n        while low <= high:\n            mid = (low + high) // 2\n            if k == mid:\n                return arr[mid-1]\n            elif k < mid:\n                high = mid - 1\n            else:\n                low = mid + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Error: Invalid input. k is greater than the length of the array.\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes an array and a number k and returns the kth smallest element in the array.\n    \"\"\"\n    if len(arr) < k or k < 1:\n        return None\n    \n    left = 1\n    right = len(arr)\n    while left < right:\n        pivot_index = (left + right) // 2\n        pivot_value = arr[pivot_index]\n        if pivot_value < arr[k-1]:\n            left = pivot_index + 1\n        else:\n            right = pivot_index\n    \n    return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = ''\n    for word in words:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char.isupper():\n            camel_case += '_' + char.lower()\n        else:\n            camel_case += char\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return ''.join(w.capitalize() for w in words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i].isupper():\n            camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_words = [words[0]]\n    for word in words[1:]:\n        camel_word = word.capitalize()\n        camel_words.append(camel_word)\n    # Combine the capitalized words into a camel case string\n    camel_case = ''.join(camel_words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].upper()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i] == \"_\":\n            camel_case += word[i+1].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert snake case to list of words\n    words = word.split('_')\n    \n    # capitalize first letter of each word\n    words = [word.capitalize() for word in words]\n    \n    # join words into a camel case string\n    camel_case_string = ''.join(words)\n    \n    return camel_case_string"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Compute the Eulerian number a(n, m) using the formula:\n    a(n, m) = (n^2 * m) // (n + m)\n    \"\"\"\n\n    if n == 0:\n        return m * m\n\n    if m == 0:\n        return n * n\n\n    if n == 1:\n        return m * (m - 1) // 2\n\n    if m == 1:\n        return n * (n - 1) // 2\n\n    numerator = n * n * m\n    denominator = n + m\n\n    return (numerator * denominator) // gcd(numerator, denominator)\n\n\ndef gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of two numbers using Euclid's algorithm.\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(n):\n        a *= (m - i) // i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the matrix\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n    \n    # Fill the matrix with 1's\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            matrix[i][j] = 1\n    \n    # Compute the Eulerian number\n    euler = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if matrix[i][j] == 1:\n                euler += 1\n    \n    return euler"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n\n    for i in range(1, n+1):\n        if (n-i) % m == 0:\n            return i\n\n    return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return eulerian_num(m, m)\n    elif m == 0:\n        return eulerian_num(n, n)\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return math.factorial(n) / (math.factorial(m) * math.factorial(n - m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Create a list of the possible factors of n\n    factors = [i for i in range(2, n+1) if n % i == 0]\n    \n    # Sort the factors in ascending order\n    factors.sort()\n    \n    # Initialize the sum of the first m terms to 0\n    sum_m = 0\n    \n    # Iterate over the first m factors\n    for i in range(min(m, len(factors))):\n        # Compute the sum of the first i terms\n        term_sum = sum([factors[j] for j in range(i)])\n        \n        # If the sum is greater than or equal to n, the Eulerian number a(n, m) is found\n        if term_sum >= n:\n            return n - term_sum + 1\n            \n    # If no Eulerian number is found, return None\n    return None"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the value of a(n, m)\n    a = ((n * m) ** (n - m + 1)) // (factorial(n - m + 1) * factorial(m))\n\n    # Return the value of a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base cases\n    if n == 0:\n        return m\n    elif n == 1:\n        return 0\n\n    # Recursive case\n    a1, a2 = 0, 1\n    for i in range(m):\n        a1, a2 = a2, a1 + a2\n    return a2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the factorial of n\n    factorial_n = 1\n    for i in range(1, n+1):\n        factorial_n *= i\n\n    # Calculate the factorial of m\n    factorial_m = 1\n    for i in range(1, m+1):\n        factorial_m *= i\n\n    # Calculate the Eulerian number\n    eulerian_num = (factorial_n // factorial_m) ** n\n    \n    return eulerian_num"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    # Return the sorted list of lists\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in `sort()` method\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = ''.join(sorted(input_list[i][j]))\n\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if type(element) == bool and element == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n\n    # Append the list to the tuple\n    test_tup += (test_list,)\n\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = list(test_tup)\n    test_tup.extend(test_list)\n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # use a loop to iterate over each element in the list and append it to the tuple\n    for elem in test_list:\n        test_tup = test_tup + (elem,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(item)\n    for item in test_tup:\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + (test_list,)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_list + test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup += (test_list[i],)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if not num1 or not num2 or not num3:\n            break\n        elif num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge two lists into one\n    merged = sorted(num1 + num2)\n    # Merge the sorted list with the third list\n    result = sorted(merged + num3)\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input, and returns a single sorted list.\n    \"\"\"\n\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Remove duplicates from the merged list\n    merged_list = list(set(merged_list))\n\n    # Sort the merged list in ascending order\n    merged_list.sort()\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the two sorted lists\n    merged_list = merge_two_lists(num1, num2)\n    # Merge the merged list with the third list\n    merged_list = merge_two_lists(merged_list, num3)\n    # Sort the merged list\n    sorted_list = heapq.nsmallest(len(merged_list), merged_list)\n    return sorted_list\n\n\ndef merge_two_lists(list1, list2):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    merged_list.extend(list1[i:])\n    merged_list.extend(list2[j:])\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        num1 (list): A list of numbers.\n        num2 (list): A list of numbers.\n        num3 (list): A list of numbers.\n\n    Returns:\n        list: The merged sorted list.\n    \"\"\"\n    # Combine three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Use heapq module to sort the list\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists as arguments and merges them into a single sorted list.\n    \"\"\"\n    # create a min heap to store the numbers in the lists\n    min_heap = []\n    # add the first list to the min heap\n    heapq.heappush(min_heap, num1)\n    # add the second list to the min heap\n    heapq.heappush(min_heap, num2)\n    # add the third list to the min heap\n    heapq.heappush(min_heap, num3)\n    # initialize an empty list to store the sorted numbers\n    sorted_list = []\n    # loop until the min heap is empty\n    while min_heap:\n        # pop the smallest number from the min heap\n        number = heapq.heappop(min_heap)\n        # add the number to the sorted list\n        sorted_list.append(number)\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # use a heap to merge the three sorted lists\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    \n    # extract the merged list from the heap\n    merged = []\n    while heap:\n        merged.append(heapq.heappop(heap))\n    \n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Create a new list to store the merged sorted list\n    merged_list = []\n\n    # Create a min heap of three lists\n    min_heap = [num1, num2, num3]\n\n    # Use the heapq.merge() function to merge the min heaps\n    heapq.merge(min_heap, merged_list)\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    sorted_list = []\n\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine all three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Use a min heap to merge the sorted lists\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Combine the sorted lists\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n    for j in range(len(s)):\n        if s[j] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_str = bin(s)[2:] #convert integer to binary string\n    binary_list = list(binary_str) #convert string to list of digits\n    rotated_list = [binary_list[i] for i in range(len(binary_list)) if i % n == 0] #rotate the list n times\n    odd_count = 0\n    for digit in rotated_list:\n        if int(digit) % 2 == 1:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    for i in range(n):\n        s = s[-len(s):] + s[:len(s)]\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # convert binary string to list of integers\n    arr = [int(i) for i in s]\n    # initialize count variable\n    count = 0\n    # loop through the array for n rotations\n    for i in range(n):\n        # append the last element of the array to the beginning of the array\n        arr.insert(0, arr.pop())\n    # loop through the array and count the number of odd integers\n    for i in arr:\n        if i % 2!= 0:\n            count += 1\n    # return the count of odd integers after the rotation\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = ''.join(format(ord(i), '08b') for i in s) # convert string to binary string\n    odd_count = 0\n    for _ in range(n):\n        new_binary = ''\n        for bit in binary_string:\n            if bit == '0':\n                new_binary += '1'\n            elif bit == '1':\n                new_binary += '0'\n        binary_string = new_binary\n    for bit in binary_string:\n        if bit == '1':\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize an empty string to store the rotated binary string\n    rotated_str = ''\n    # convert the given binary string to a list of integers\n    binary_list = [int(i) for i in s]\n    # rotate the binary list the specified number of times\n    for i in range(n):\n        rotated_list = binary_list[1:] + [binary_list[0]]\n        binary_list = rotated_list\n    # initialize the count of odd numbers\n    odd_count = 0\n    # loop through the rotated binary list and check if each element is odd\n    for i in binary_list:\n        if i % 2!= 0:\n            odd_count += 1\n    # return the count of odd numbers\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = bin(int(s, 2))[2:].zfill(len(s))  # convert binary string to fixed length string with leading zeros\n    rotated_s = ''\n    for i in range(n):\n        rotated_s = s[-1] + rotated_s + s[0]\n        s = s[1:]\n    odd_count = 0\n    for i in range(len(rotated_s)):\n        if rotated_s[i] == '1':\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Define an empty list to store the odd values in the binary string\n    odd_values = []\n    \n    # Initialize a counter variable to keep track of the number of odd values found\n    count = 0\n    \n    # Loop through the binary string s n times\n    for i in range(n):\n        \n        # Convert the binary string to a list of digits\n        binary_list = [int(digit) for digit in s]\n        \n        # Use a list comprehension to rotate the list by one position to the left\n        rotated_list = [digit for digit in binary_list[::-1]]\n        \n        # Loop through the rotated list to find odd values\n        for digit in rotated_list:\n            if digit % 2 == 1:\n                # If the digit is odd, append it to the odd_values list and increment the counter\n                odd_values.append(digit)\n                count += 1\n    \n    # Return the count of odd values found\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    result = 0\n    count = 0\n    \n    # Convert the binary string into a list of binary digits\n    binary_str = list(s)\n    \n    # Rotate the binary string n times\n    for i in range(n):\n        left = binary_str.pop(0)\n        right = binary_str.pop(-1)\n        binary_str.insert(0, left)\n        binary_str.insert(-1, right)\n        \n    # Count the number of odd numbers in the rotated binary string\n    for i in binary_str:\n        if int(i) % 2 == 1:\n            result += 1\n            \n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    # initialize variables\n    count = 0\n    # convert binary string to list of digits\n    binary_list = list(s)\n    # rotate the list of digits by n positions\n    rotated_list = binary_list[-n:] + binary_list[:-n]\n    # iterate through the rotated list\n    for digit in rotated_list:\n        # check if digit is odd\n        if int(digit) % 2!= 0:\n            count += 1\n    # return the count of odd digits\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize empty set to store common elements\n    common_elements = set()\n\n    # Loop through each list in the nested list\n    for lst in nestedlist:\n        # Loop through each element in the current list\n        for element in lst:\n            # Add the element to the set of common elements\n            common_elements.add(element)\n\n    # Return the common elements set\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # initialize an empty dictionary to store the common elements\n    common = {}\n\n    # iterate over each sublist in the nested list\n    for sublist in nestedlist:\n        # iterate over each element in the sublist\n        for elem in sublist:\n            # check if the element is already in the dictionary and if it has not been added yet\n            if elem in common and common[elem] == sublist:\n                # if it has been added already, add the sublist as the value to the common dictionary\n                common[elem].append(sublist)\n            # if the element is not already in the dictionary, add it as the key with the sublist as the value\n            elif elem not in common:\n                common[elem] = sublist\n\n    # return the common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i == j:\n                continue\n            for k in range(len(nestedlist[j])):\n                if nestedlist[i][k] == nestedlist[j][k]:\n                    common.append(nestedlist[i][k])\n                    break\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Flatten the nested list to a single list\n    flattened = [item for sublist in nestedlist for item in sublist]\n\n    # Use set() to get unique elements\n    unique_elements = set(flattened)\n\n    # Find common elements between the original nested list and the unique elements list\n    common_elements = set.intersection(set(nestedlist), unique_elements)\n\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        if len(set(sublist).intersection(set(common_elements))) > 0:\n            common_elements.extend(sublist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common_elements.append(nestedlist[i][j])\n            else:\n                if nestedlist[i][j] in common_elements:\n                    common_elements.remove(nestedlist[i][j])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set to store the common elements\n    common = set()\n\n    # iterate through each nested list\n    for lst in nestedlist:\n        # iterate through each element in the current list\n        for num in lst:\n            # add the element to the set if it's not already there\n            if num not in common:\n                common.add(num)\n\n    # return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the common elements\n    common_elements = set()\n    # Loop through each list in the nested list\n    for innerlist in nestedlist:\n        # Loop through each element in the inner list\n        for element in innerlist:\n            # Add the element to the common_elements set\n            common_elements.add(element)\n    # Convert the common_elements set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Find the common elements in a list of nested lists.\n\n    :param nestedlist: a list of nested lists\n    :return: a set containing the common elements\n    \"\"\"\n\n    # Initialize a set to store the common elements\n    common = set()\n\n    # Iterate over all elements in the nested list\n    for elem in nestedlist:\n        # Check if all elements in this list are also in the common set\n        if all(elem_in_list in common for elem_in_list in elem):\n            # If they are, add this list to the set of common lists\n            common.add(elem)\n\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Initialize a variable to keep track of whether all dictionaries in the list are empty or not\n    all_empty = True\n\n    # Iterate through each dictionary in the list\n    for item in list1:\n        # If any dictionary is not empty, set the variable to False and break out of the loop\n        if item:\n            all_empty = False\n            break\n\n    # Return the final value of the variable\n    return all_empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    for d in list1:\n        if not d:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the integer variable to 0\n    num = 0\n    # Iterate over the list of numbers and add each to the integer variable\n    for i in nums_list:\n        num += i\n    # Return the final integer value\n    return num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple of integers to a list\n    num_list = list(nums)\n    # Convert the list to a single integer by concatenating the elements\n    result = int(''.join(map(str, num_list)))\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if isinstance(item, list):\n            list_to_float(item)\n        elif isinstance(item, str):\n            try:\n                float(item)\n            except ValueError:\n                continue\n            else:\n                test_list.remove(item)\n                test_list.append(float(item))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Initialize a list to store the converted elements\n    converted_list = []\n\n    # Loop through each element in the test list\n    for element in test_list:\n\n        # If the element is a list, recursively call the function on it\n        if type(element) == list:\n            converted_list.append(list_to_float(element))\n\n        # If the element is a tuple, recursively call the function on it\n        elif type(element) == tuple:\n            converted_list.append(list_to_float(list(element)))\n\n        # If the element is an integer or a float, append it to the converted list\n        elif type(element) in [int, float]:\n            converted_list.append(element)\n\n        # If the element is a string, try to convert it to a float using the float() function\n        elif type(element) == str:\n            try:\n                converted_list.append(float(element))\n            except ValueError:\n                converted_list.append(element)\n\n    # Return the converted list\n    return converted_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, str):\n                try:\n                    float(item)\n                except ValueError:\n                    pass\n                else:\n                    test_list[sublist.index(item)][sublist[sublist.index(item)].index(item)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                element = float(element)\n                sublist[sublist.index(element)] = element\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n                row[row.index(element)] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist[sublist.index(element)] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                return False\n    return True"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                continue\n            else:\n                sublist[test_list.index(sublist)] = float(item)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for elem in row:\n            try:\n                elem = float(elem)\n            except ValueError:\n                pass\n            else:\n                row.remove(elem)\n    return test_list\n\ntest_list = [[1, 2, 3], [4, '5', 6], [7, 8.9, 9]]\nprint(list_to_float(test_list))"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Split the string on the space character\n    words = string.split()\n\n    # Return the list of strings\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # create an empty dictionary to store the elements and their frequency\n    freq = {}\n    # loop through the array and update the frequency dictionary\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    # loop through the dictionary and find the element that appears only once\n    for key in freq:\n        if freq[key] == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Use a hash table to keep track of the elements in the array\n    hash_table = {}\n\n    # Iterate through the array and add each element to the hash table\n    for num in arr:\n        if num in hash_table:\n            # The element already exists in the hash table, so it appears only once\n            return num\n        else:\n            hash_table[num] = True\n\n    # If we reach this point, the element appears only once in the array\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Loop through the array and increment the frequency count of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the element(s) with only one frequency\n    result = [key for key, value in freq.items() if value == 1]\n\n    # Return the element(s) that appear only once in the array\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    # Find the first occurrence of the element in the array\n    first_occurrence = 0\n    for i in range(1, len(arr)):\n        if arr[first_occurrence] == arr[i]:\n            first_occurrence += 1\n\n    # If the element appears only once, return its index\n    if first_occurrence == len(arr) - 1:\n        return first_occurrence\n\n    # Find the second occurrence of the element in the array\n    second_occurrence = first_occurrence + 1\n    while second_occurrence < len(arr) and arr[second_occurrence] == arr[first_occurrence]:\n        second_occurrence += 1\n\n    # Return the index of the second occurrence\n    return second_occurrence"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Initialize the unique element variable to None\n    unique_elem = None\n    \n    # Traverse through the array\n    for i in range(len(arr)):\n        # If the current element is the same as the unique element, increment the count variable\n        if arr[i] == unique_elem:\n            count += 1\n        # If the current element is different from the unique element, set the unique element to the current element and reset the count variable to 1\n        elif arr[i]!= unique_elem:\n            unique_elem = arr[i]\n            count = 1\n            \n    # If the count variable is 1, return the unique element\n    if count == 1:\n        return unique_elem\n    # If the count variable is 0, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize the frequency array to all 0's\n    freq = [0] * n\n\n    # Traverse through the array\n    for i in range(n):\n        # Find the frequency of current element\n        freq[arr[i]] += 1\n\n        # Traverse through the frequency array to find the first occurrence of the element\n        for j in range(n):\n            if freq[j] == 1:\n                # If the element is found, return its index\n                return j\n\n    # If no element is found, return -1\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique:\n            return None\n        else:\n            unique = arr[i]\n    return unique"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to keep track of the current element\n    current = arr[0]\n    # Initialize a variable to keep track of the count of occurrences of the current element\n    count = 1\n    # Initialize a variable to keep track of the element that appears only once in the array\n    unique = None\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # If the current element is the same as the previous element, increment the count\n        if arr[i] == current:\n            count += 1\n        # If the count reaches 2, update the unique element and reset the count to 1\n        elif count == 2:\n            unique = current\n            count = 1\n            current = arr[i]\n        # If the count reaches 1, update the current element to the next element in the array\n        elif count == 1:\n            current = arr[i]\n    # If the count reaches 2 after the loop ends, update the unique element\n    if count == 2:\n        unique = current\n    # Return the unique element\n    return unique"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # initialize count and element variables to -1\n    count = -1\n    element = -1\n\n    # loop through the array and check if each element is unique\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            count += 1\n            if count == 1:\n                element = arr[i]\n\n    # return the unique element\n    return element"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][0]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][0])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to keep track of the maximum absolute product and the maximum absolute value of the first number in each pair\n    max_abs_product = float('-inf')\n    first_max_abs = float('-inf')\n\n    # Loop through each tuple in the list\n    for tup in list1:\n        # Get the second number in the tuple\n        second_num = tup[1]\n\n        # Calculate the absolute value of the second number\n        abs_second_num = abs(second_num)\n\n        # Update the maximum absolute product and maximum absolute value if the product is greater than the current maximum product\n        if abs_second_num * tup[0] > max_abs_product * abs_second_num:\n            max_abs_product = abs_second_num * tup[0]\n            first_max_abs = abs_second_num\n        # Update the maximum absolute value if the absolute value of the second number is greater than the current maximum value\n        elif abs_second_num > first_max_abs:\n            first_max_abs = abs_second_num\n\n    # Return the maximum absolute product and maximum absolute value\n    return max_abs_product, first_max_abs"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize max_product and max_product_pair\n    max_product = float('-inf')\n    max_product_pair = (-float('inf'), -float('inf'))\n\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        # get the current tuple and its values\n        tup = list1[i]\n        a, b = tup\n\n        # compute the absolute difference between a and b\n        diff = abs(a - b)\n\n        # update max_product and max_product_pair if necessary\n        if diff > max_product:\n            max_product = diff\n            max_product_pair = (a, b)\n\n    return max_product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize maximum absolute product to 0\n    max_product = 0\n\n    # Loop through all pairs of tuples within the list\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n\n            # Calculate the absolute product of the two numbers in each tuple\n            product = abs(list1[i][0] * list1[j][1])\n\n            # Update the maximum absolute product if the current product is greater\n            if product > max_product:\n                max_product = product\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1] - list1[j][0]*list1[i][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize variables\n    max_product = -float('inf')\n    result = []\n\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the numbers and its absolute value\n            product = abs(list1[i][0] * list1[j][0])\n            # check if the product is greater than the current max_product\n            if product > max_product:\n                max_product = product\n                # append the tuple to the result list\n                result = [(list1[i], list1[j])]\n            elif product == max_product:\n                # if the product is equal to the current max_product, append the tuple to the result list\n                result.append((list1[i], list1[j]))\n    \n    return result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = 0\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            if list1[i][0] * list1[j][0] > max_abs_product:\n                max_abs_product = abs(list1[i][0] * list1[j][0])\n            if list1[i][1] * list1[j][1] > max_abs_product:\n                max_abs_product = abs(list1[i][1] * list1[j][1])\n    return max_abs_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit):\n        if num!= 1:\n            if num in range(2, limit):\n                is_sum = False\n                for i in range(2, limit):\n                    if num % i == 0:\n                        is_sum = True\n                        break\n                if not is_sum:\n                    amicable_sum += num\n            else:\n                amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize two lists to store amicable numbers and their factors\n    amicable_list = []\n    factor_list = []\n    # Iterate through numbers from 2 to limit\n    for num in range(2, limit+1):\n        # Check if number is amicable\n        if num in amicable_list:\n            continue\n        # Check if number is divisible by any number in factor_list\n        for factor in factor_list:\n            if num % factor == 0:\n                break\n        else:\n            # If number is not divisible by any factor, add to amicable_list\n            amicable_list.append(num)\n    # Return sum of amicable numbers\n    return sum(amicable_list)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a dictionary to store the sum of the first n amicable numbers\n    amicable_numbers = {}\n    # Initialize the dictionary with the first two amicable numbers\n    amicable_numbers[2] = 2\n    amicable_numbers[3] = 2\n    \n    # Loop through the remaining numbers up to the specified limit\n    for num in range(4, limit):\n        # Check if the number is in the dictionary\n        if num in amicable_numbers:\n            # Calculate the sum of the first n amicable numbers\n            amicable_sum = amicable_numbers[num]\n            # Check if the sum is less than or equal to the number\n            if amicable_sum <= num:\n                # Add the sum to the dictionary\n                amicable_numbers[num] += num\n    \n    # Sum all the values in the dictionary\n    amicable_sum = sum(amicable_numbers.values())\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        if num in [x for x in range(2, num) if num % x == 0]:\n            if num!= sum(range(1, num)):\n                amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable = 0\n    for i in range(2, limit):\n        # Check if the number is divisible by i and if the divisor is not i\n        if i in [2, 3] and i!= 2:\n            continue\n        else:\n            j = limit // i\n            if i == j and i!= j:\n                sum_of_amicable += i\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit+1):\n        if i < 1000: # for smaller numbers, the brute force approach is sufficient\n            num = i\n            for j in range(1, limit+1):\n                if j < 1000:\n                    if i!= j and (i+j) == limit:\n                        num += j\n                        break\n                else:\n                    break\n            else:\n                sum_amicable += num\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum to 0\n    sum = 0\n\n    # loop through numbers from 1 to limit\n    for num in range(1, limit + 1):\n        # check if num is a prime number\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        # check if num is an amicable number\n        if is_prime and is_amicable(num):\n            # add num to the sum\n            sum += num\n\n    # return the sum of all amicable numbers\n    return sum\n\ndef is_amicable(num):\n    '''\n    Helper function to check if a number is an amicable number.\n    '''\n    # check if num is divisible by 2\n    if num % 2 == 0:\n        return False\n\n    # loop through numbers from 1 to num/2\n    for i in range(1, num // 2 + 1):\n        # check if num is divisible by i\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        if i == 2:\n            amicable_numbers.add(i)\n            continue\n        j = 1\n        while i + j < limit + 1:\n            if i + j == limit:\n                amicable_numbers.add(i + j)\n                break\n            if i + j in amicable_numbers:\n                break\n            j += 1\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a list to store amicable numbers\n    amicable_numbers = []\n\n    # Loop through all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable with any number greater than it\n        for j in range(i+1, limit+1):\n            # Check if the sum of the two numbers is equal to the original number\n            if i + j == j + i and i!= j:\n                # Add the amicable number to the list of amicable numbers\n                amicable_numbers.append(i+j)\n\n    # Calculate the sum of the amicable numbers and return it\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_amicable_numbers(limit):\n    '''\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to that limit.\n    '''\n    amicable_sum = 0\n    \n    for num in range(1, limit+1):\n        if num == sum_of_divisors(num) and is_prime(num):\n            amicable_sum += num\n    \n    return amicable_sum\n\n\ndef is_prime(num):\n    '''\n    This function takes a number as input and returns True if it's a prime number, else False.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef sum_of_divisors(num):\n    '''\n    This function takes a number as input and returns the sum of its divisors (excluding 1 and itself).\n    '''\n    sum_of_divisors = 0\n    for i in range(1, num+1):\n        if num % i == 0 and i!= num:\n            sum_of_divisors += i\n    return sum_of_divisors"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # calculate the angle of the complex number\n    angle = cmath.phase(a + b*1j)\n\n    # convert the angle to degrees\n    angle = cmath.degrees(angle)\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculating the angle of the complex number\n    angle = cmath.phase(a+b*1j)\n    # Returning the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    angle = cmath.angle(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if not isinstance(a, cmath.complex) or not isinstance(b, cmath.complex):\n        print('Both inputs must be complex numbers')\n    else:\n        angle = cmath.phase(a*b)\n        return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    binary = []\n    for char in string:\n        binary.append(int(char))\n    max_diff = 0\n    for i in range(len(binary)):\n        for j in range(i+1, len(binary)):\n            diff = 0\n            for k in range(len(binary)):\n                if binary[i] == binary[k]:\n                    diff += 1\n                if binary[j] == binary[k]:\n                    diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        if ones > zeros:\n            max_diff = max(max_diff, zeros - ones)\n            ones = 0\n        elif zeros > ones:\n            max_diff = max(max_diff, ones - zeros)\n            zeros = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    length = len(string)\n    for i in range(length - 1):\n        diff = 0\n        for j in range(i + 1, length):\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n        max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    # Initialize variables to store count of 0s and 1s in the string\n    zero_count = 0\n    one_count = 0\n\n    # Loop through each character in the string\n    for char in string: \n        # If the character is a 0, increment the count of 0s\n        if char == '0': \n            zero_count += 1\n        # If the character is a 1, increment the count of 1s\n        else: \n            one_count += 1\n\n    # Find the maximum difference between the count of 0s and 1s in any sub-string of the string\n    max_diff = 0\n    for i in range(len(string)): \n        for j in range(len(string)): \n            # Calculate the count of 0s and 1s in the sub-string\n            sub_zero_count = 0\n            sub_one_count = 0\n            for k in range(i, j+1): \n                if string[k] == '0': \n                    sub_zero_count += 1\n                else: \n                    sub_one_count += 1\n\n            # Update the maximum difference if the sub-string has a higher count of 0s and 1s than the current maximum difference\n            if sub_zero_count > zero_count or (sub_zero_count == zero_count and sub_one_count > one_count): \n                max_diff = max(max_diff, abs(sub_zero_count - zero_count))\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = string.count('0', i, i + 1)\n        count_1 = string.count('1', i, i + 1)\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # initialize variables\n    max_diff = 0\n    prev_count = 0\n    curr_count = 0\n\n    # iterate through each character of the string\n    for char in string:\n\n        # check if the current character is a 0 or 1\n        if char == '0':\n            curr_count += 1\n        else:\n            curr_count = 0\n\n        # if the count of 1s is less than the count of 0s, update max_diff\n        if curr_count < prev_count:\n            max_diff = max(max_diff, curr_count - prev_count)\n\n        # update the previous and current count\n        prev_count = curr_count\n\n    # if the count of 1s is less than the count of 0s, update max_diff\n    if curr_count < prev_count:\n        max_diff = max(max_diff, curr_count - prev_count)\n\n    # return the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of the number of 0s and 1s in the string\n    num_0s = num_1s = 0\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is a 0, increment the number of 0s\n        if char == '0':\n            num_0s += 1\n        # If the character is a 1, increment the number of 1s\n        else:\n            num_1s += 1\n\n    # Initialize variables to keep track of the maximum difference between the number of 0s and 1s\n    max_diff = min_diff = abs(num_0s - num_1s)\n\n    # Iterate over each sub-string of the string\n    for i in range(len(string)):\n        # If the current sub-string has at least one character, check its difference between the number of 0s and 1s\n        if i > 0:\n            sub_string = string[i:len(string)]\n            if len(sub_string) > 1:\n                curr_diff = abs(num_0s - num_1s)\n                if curr_diff > max_diff:\n                    max_diff = curr_diff\n                if curr_diff < min_diff:\n                    min_diff = curr_diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    diff = 0\n    for i in range(1, len(string)):\n        if string[i] == '0' and string[i-1] == '1':\n            diff += 1\n        elif string[i] == '1' and string[i-1] == '0':\n            diff -= 1\n        else:\n            continue\n    return diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    \n    for char in string:\n        if char == '0':\n            zero_count += 1\n            one_count = 0\n        elif char == '1':\n            one_count += 1\n            zero_count = 0\n        else:\n            raise ValueError(\"Invalid character in binary string\")\n            \n        diff = abs(zero_count - one_count)\n        max_diff = max(diff, max_diff)\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        \n        # If the character is a 0, increment count_0 and check if count_1 is greater than 0\n        if char == '0':\n            count_0 += 1\n            if count_1 > 0:\n                count_diff = count_1 - count_0\n                max_diff = max(max_diff, count_diff)\n            count_1 = 0\n        \n        # If the character is a 1, increment count_1 and check if count_0 is greater than 0\n        elif char == '1':\n            count_1 += 1\n            if count_0 > 0:\n                count_diff = count_1 - count_0\n                max_diff = max(max_diff, count_diff)\n            count_0 = 0\n            \n    # Check if count_1 is greater than 0 and count_0 is greater than 0\n    if count_1 > 0 and count_0 > 0:\n        count_diff = count_1 - count_0\n        max_diff = max(max_diff, count_diff)\n        \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_divisor(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the common divisor of those two numbers.\n    \"\"\"\n    for i in range(1, min(a, b) + 1):\n        if (a % i == 0) and (b % i == 0):\n            return i\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the common divisors of those two numbers.\n    \"\"\"\n    if common_divisor(a, b) == 1:\n        return a + b\n    else:\n        return sum_of_common_divisors(a, common_divisor(a, b)) + sum_of_common_divisors(b, common_divisor(b, a))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    def common_divisors(num):\n        \"\"\"\n        This function takes a number as input and returns a set of its common divisors.\n        \"\"\"\n        divisors = set()\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.add(i)\n        return divisors\n    \n    def sum_common_divisors(a, b):\n        \"\"\"\n        This function takes two numbers as input and returns their sum of common divisors.\n        \"\"\"\n        divisors_a = common_divisors(a)\n        divisors_b = common_divisors(b)\n        common_divisors_ab = divisors_a.intersection(divisors_b)\n        return sum(common_divisors_ab)\n    \n    return sum_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # check if i is a common divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # add i to the sum\n            sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return 0\n\nprint(sum(12, 24)) # Output: 1"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # find the largest number\n    if a > b:\n        largest = a\n    else:\n        largest = b\n\n    # find the smallest number\n    if a < b:\n        smallest = a\n    else:\n        smallest = b\n\n    # find the common divisor\n    common = 1\n    for i in range(2, largest + 1):\n        if largest % i == 0 and smallest % i == 0:\n            common = i\n            break\n\n    # find the sum of common divisors\n    sum_divisors = 0\n    for i in range(smallest, largest + 1):\n        if i % common == 0:\n            sum_divisors += i\n\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = set()\n\n    # Find all the common divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n\n    # Sum all the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # finding all the common divisors of a and b\n    common = []\n    for i in range(1, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            common.append(i)\n\n    # summing the common divisors\n    sum_common = sum(common)\n\n    return sum_common\n\nprint(sum(60,120)) # Output: 120"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    It uses the Euclid's algorithm to find the common divisors of two numbers.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        This function takes two numbers as input and returns their greatest common divisor using Euclid's algorithm.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Finding the greatest common divisor of the two numbers\n    gcd_ab = gcd(a, b)\n\n    # Finding the sum of all the common divisors of the two numbers\n    sum_cd = 1\n    for i in range(1, gcd_ab + 1):\n        if gcd(a, i) == gcd(b, i):\n            sum_cd += i\n\n    return sum_cd\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Check if a and b are non-negative integers\n    if not (isinstance(a, int) and isinstance(b, int) and a >= 0 and b >= 0):\n        raise ValueError(\"Both a and b must be non-negative integers.\")\n\n    # Find the GCD of a and b\n    gcd = gcd(a, b)\n\n    # Calculate the sum of common divisors of a and b\n    result = a * b // gcd\n\n    return result\n\n\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of two given integers using the Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Args:\n    - n (int): maximum length of words to be considered\n    - words (list of str): a list of words\n\n    Returns:\n    - list of str: a list of words that are longer than n characters\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in a list of words that are longer than n characters long.\n    \n    Parameters:\n    n (int): the maximum length of words to be considered\n    words (list): a list of strings representing words\n    \n    Returns:\n    list: a list of strings representing words that are longer than n characters long\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes in a number n and a list of words and returns a list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Determine the dimensions of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if all elements in the matrix are the same\n    if rows * cols!= len(set(sum(my_matrix, []))) or rows * cols!= len(set(sum(my_matrix, [])[::-1])):\n        return False\n\n    # Check if the sum of each row and column is equal to the sum of the matrix\n    for i in range(rows):\n        if sum(my_matrix[i])!= sum(my_matrix) or sum(my_matrix[:, i])!= sum(my_matrix):\n            return False\n\n    # Check if the sum of each diagonal is equal to the sum of the matrix\n    for i in range(rows):\n        if my_matrix[i][i]!= my_matrix[i][rows - i - 1] or my_matrix[i][rows - i - 1]!= my_matrix[rows - i - 1][i]:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has exactly 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return \"Matrix must have exactly 3 rows and 3 columns\"\n    \n    # Check if each row and column has the same number of elements\n    for row in my_matrix:\n        if len(row)!= 3:\n            return \"Each row must have exactly 3 elements\"\n    \n    # Check if the sum of any row or column is the same as the sum of the diagonal\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    if row_sums == col_sums:\n        return True\n    elif row_sums == [row_sums[0] for row_sums in zip(row_sums, col_sums)]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize the sum of the row and column sums\n    row_sum = 0\n    col_sum = 0\n\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return False\n\n    # Check if the matrix is a magic square by iterating over the rows and columns\n    for i in range(3):\n        for j in range(3):\n            # Add the current element to the row and column sums\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n\n            # Check if the row and column sums are equal to the product of the matrix elements\n            if row_sum!= col_sum or row_sum!= my_matrix[i][i] or col_sum!= my_matrix[i][i]:\n                return False\n\n            # Reset the row and column sums for the next iteration\n            row_sum = 0\n            col_sum = 0\n\n    # The matrix is a magic square if the row and column sums are equal to the product of the matrix elements\n    return row_sum == col_sum == sum(sum(x) for x in my_matrix)"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has the right dimensions\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if each row and column sums to the same value\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(col[i] for col in my_matrix)\n        if row_sum!= col_sum:\n            return False\n    \n    # Check if the diagonal sums to the same value\n    diag_sum = sum(sum(row) for row in my_matrix)\n    if diag_sum!= sum(sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))):\n        return False\n    \n    # If all tests pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the size of the matrix\n    n = len(my_matrix)\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n\n        # Check if the i-th row is a magic square\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            if row_sum == n * (n + 1) // 2:\n                return True\n\n            # Check if the j-th column is a magic square\n            col_sum += my_matrix[j][i]\n            if col_sum == n * (n + 1) // 2:\n                return True\n\n        # Reset the row and column sums\n        row_sum = col_sum = 0\n\n    # If the matrix is not a magic square, return False\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = sum(sum(row) for row in my_matrix)\n\n    # Check for a magic square by checking each row for its sum\n    for row in my_matrix:\n        if sum(row)!= magic_sum:\n            return False\n\n    # Check for a magic square by checking each column for its sum\n    for col in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += my_matrix[i][col]\n        if col_sum!= magic_sum:\n            return False\n\n    # Check for a magic square by checking the main diagonal for its sum\n    diag_sum = 0\n    for i in range(rows):\n        diag_sum += my_matrix[i][i]\n    if diag_sum!= magic_sum:\n        return False\n\n    # Check for a magic square by checking the reverse diagonal for its sum\n    diag_sum = 0\n    for i in range(rows):\n        diag_sum += my_matrix[i][rows-i-1]\n    if diag_sum!= magic_sum:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n        for i in range(len(row)):\n            if row[i] == my_matrix[i][i]:\n                for j in range(len(row)):\n                    if row[j] == my_matrix[i][j] or my_matrix[i][j] == my_matrix[j][i]:\n                        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n*n!= len(my_matrix) * len(my_matrix[0]):\n        return False\n\n    # Check if the matrix contains all distinct numbers\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] == 0:\n                return False\n            for k in range(n):\n                if my_matrix[i][j] == my_matrix[i][k] or my_matrix[i][j] == my_matrix[k][j]:\n                    return False\n\n    # Check if the matrix is symmetric\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Create a copy of the input matrix for the purposes of checking\n    # if it's a magic square\n    magic_matrix = my_matrix.copy()\n\n    # Check if the matrix has a total of 15 elements (15 rows and columns)\n    if len(magic_matrix)!= 15:\n        return False\n\n    # Check if the sum of each row, column, and diagonal is 15\n    for i in range(len(magic_matrix)):\n        if sum(magic_matrix[i])!= 15 or sum(magic_matrix[j] for j in range(len(magic_matrix)))!= 15:\n            return False\n\n        if i == len(magic_matrix) - 1:\n            continue\n\n        if sum(magic_matrix[i][j] for j in range(len(magic_matrix[0])))!= 15:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Calculate the sum of the diagonal elements\n    diag1 = sum([sum(row) for row in my_matrix])\n    diag2 = sum([sum(row[-i-1] for row in my_matrix) for i in range(n)])\n    # Check if the sum of the diagonal elements is equal to the total sum of all elements in the matrix\n    if diag1 == diag2 and diag1 == sum([sum(row) for row in my_matrix]) and diag1 == sum([sum(row[-i-1] for row in my_matrix) for i in range(n)]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n\n    Args:\n        nums (list of int): A list of integers.\n\n    Returns:\n        int: The item with maximum frequency in the list.\n\n    Examples:\n        >>> max_occurrences([1, 2, 3, 2, 4, 2, 5, 2])\n        2\n    '''\n\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item\n"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    \n    # iterate over the list and count the frequency of each item\n    for num in nums:\n        freq[num] += 1\n        \n        # update the maximum frequency and item if necessary\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item in the defaultdict\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item\n\n    # If no items have the maximum frequency, return None\n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    \n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_item = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate over the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    max_freq = max(freq.values())\n    for item, freq in freq.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        count[num] += 1\n\n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with the maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n    for item, freq in freq.items():\n        if freq == max_freq:\n            max_item = item\n            break\n\n    # return the item with the maximum frequency\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each number in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the maximum frequency and the corresponding item\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = num\n            break\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for char in str1:\n        if char not in vowels:\n            str2 += char\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_index = 0\n    vowel_count = 0\n    result = ''\n\n    for char in str1:\n        if char in vowels:\n            if vowel_count % 2 == 0:\n                result += char\n            else:\n                result = char + result\n            vowel_index += 1\n        else:\n            result += char\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in str1:\n        if char.lower() in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_index = 0\n    result = ''\n    for char in str1:\n        if char in vowels:\n            vowel_index += 1\n        else:\n            if vowel_index > 0:\n                result = char + result\n            vowel_index = 0\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    reverse_list = []\n    \n    for char in str1:\n        if char in vowels_list:\n            reverse_list.insert(0, char)\n        else:\n            reverse_list.append(char)\n            \n    return ''.join(reverse_list)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    return str1[::-1][::-1][::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    str1 = str(tup1)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the built-in str() function\n    string_version = str(tup1)\n    # Return the converted string\n    return string_version"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the counter\n    counter = 1\n    \n    # Initialize the base number\n    base = 1\n    \n    # Calculate the nth hexagonal number\n    for i in range(1, n+1):\n        # Increment the counter and multiply by the base number\n        counter += 1\n        base *= 6\n        \n        # Calculate the nth hexagonal number\n        nth_hex = counter * base\n        \n        # Return the nth hexagonal number\n        print(nth_hex)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n - 1) * (2 * n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0: \n        return 0 \n    else: \n        return (n * (2 * n - 1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (5 * n * n) + (3 * n) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Initialize the first 6 hexagonal numbers\n    hexagonal_numbers = [1, 6, 11, 16, 21, 26]\n\n    # Check if the input n is valid\n    if n < 1 or n > 6:\n        print(\"Invalid input!\")\n    else:\n        # Print the nth hexagonal number\n        print(hexagonal_numbers[n-1])"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n*(3*n-1))/2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex = 0\n    for i in range(n):\n        hex = hex + 1\n    return hex * 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return 6 * n * (n + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    hex_num = n * (2 * n - 1) // 2\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    non_zeros = array('i')\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            non_zeros.append(1)\n    zeros_count = len(zeros)\n    non_zeros_count = len(non_zeros)\n    if non_zeros_count == 0:\n        return 0\n    else:\n        return zeros_count/non_zeros_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # create a counter to keep track of the number of non-zeroes in the array\n    non_zeroes = 0\n    # create a counter to keep track of the number of zeroes in the array\n    zeroes = 0\n\n    # iterate through the array\n    for num in nums:\n        # if the number is not zero, increment the non-zeroes counter\n        if num!= 0:\n            non_zeroes += 1\n        # if the number is zero, increment the zeroes counter\n        else:\n            zeroes += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = zeroes / non_zeroes if non_zeroes!= 0 else 0\n\n    # return the ratio as a float\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    non_zeros = len(nums) - sum(zeros)\n    ratio = non_zeros / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            zero_count.append(0)\n    non_zero_count = sum(zero_count)\n    zero_count = sum(zero_count)\n    ratio = non_zero_count / zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    non_zero_count = array('i', [0]*len(nums))\n    \n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(0)+1] += 1\n        else:\n            non_zero_count[non_zero_count.index(0)+1] += 1\n            \n    if sum(non_zero_count) == 0:\n        return 0\n    \n    zero_count_ratio = sum(zero_count)/sum(non_zero_count)\n    return zero_count_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1 if num == 0 else 0 for num in nums])\n    zero_sum = sum(count)\n    non_zero_sum = len(nums) - zero_sum\n    ratio = non_zero_sum / zero_sum\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n            \n    non_zero_ratio = non_zero_count / (non_zero_count + zero_count)\n    return non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    return zero_count/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Convert the array to an integer array for faster access\n    arr = array('i', nums)\n    \n    # Count the number of zeroes and non-zeroes\n    zeros = 0\n    nonzeros = 0\n    for num in arr:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n            \n    # Calculate the ratio of zeroes to non-zeroes\n    if nonzeros == 0:\n        return 0\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # convert the array to a list to avoid errors in the code\n    nums_list = list(nums)\n\n    # initialize the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # loop through the list and count the number of zeroes and non-zeroes\n    for num in nums_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    zero_ratio = 0\n    if non_zero_count == 0:\n        zero_ratio = 1\n    else:\n        zero_ratio = zero_count / non_zero_count\n\n    # return the ratio of zeroes to non-zeroes\n    return zero_ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def is_power_of_two(num):\n        \"\"\"\n        This function checks whether the given number is a power of 2 or not.\n        \"\"\"\n        return (num & (num - 1)) == 0\n\n    def count_bits_set(num):\n        \"\"\"\n        This function counts the number of bits set to 1 in the binary representation of the given number.\n        \"\"\"\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    if is_power_of_two(n):\n        # If the given number is a power of 2, then it can be represented as sum of non-zero powers of 2.\n        return True\n    else:\n        # If the given number is not a power of 2, then it cannot be represented as sum of non-zero powers of 2.\n        # Therefore, we need to check if the number of bits set to 1 in the binary representation of the given number\n        # is equal to the number of bits set to 1 in the binary representation of 2 raised to the power of the number of bits\n        # set to 1 in the binary representation of the given number.\n        bits_set_to_1_in_n = count_bits_set(n)\n        bits_set_to_1_in_2_raised_to_the_power_of_bits_set_to_1_in_n = 0\n        while bits_set_to_1_in_2_raised_to_the_power_of_bits_set_to_1_in_n <= bits_set_to_1_in_n:\n            bits_set_to_1_in_2_raised_to_the_power_of_bits_set_to_1_in_n <<= 1\n        return bits_set_to_1_in_2_raised_to_the_power_of_bits_set_to_1_in_n == bits_set_to_1_in_n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Find the count of powers of 2 in n\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n\n    # If count is odd, then n can be represented as sum of powers of 2\n    return count % 2 == 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    for i in range(1, n+1):\n        if (n - i) % 2 == 0 and (n - i) // 2 > 0:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return True\n    else: \n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0: \n                return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0:\n        return True\n\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n\n    def get_power_of_two(num):\n        return num & -num\n\n    total_sum = 0\n    while n > 0:\n        if is_power_of_two(n):\n            total_sum += get_power_of_two(n)\n            n = 0\n        else:\n            n = n - 1\n\n    if n == 0:\n        return total_sum > 0\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if n is power of 2\n    if n == 0:\n        return True\n    elif n & (n-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the given number is a power of 2 or not\n    if n & (n - 1) == 0:\n        # If it is a power of 2, then check if it can be represented as sum of non-zero powers of 2\n        return n == (1 << 32)\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return True\n    elif n == 2: \n        return True\n    elif n % 2 == 0: \n        if is_Sum_Of_Powers_Of_Two(n//2): \n            return True\n        else: \n            return False\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the given number is even or not\n    if n % 2 == 0:\n        return False\n\n    # Check if the given number is divisible by 2^i for any integer i\n    for i in range(int(n**0.5)+1):\n        if n % (2**i) == 0:\n            return False\n\n    # If the above two conditions are not satisfied, then the given number can be represented as sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    \n    :param r: The radius of the circle.\n    :return: The circumference of the circle, as a float.\n    '''\n    pi = 3.141592653589793  # define a constant for pi\n    circumference = 2 * pi * r  # calculate the circumference of the circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # Formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    print(f\"The circumference of the circle is {circumference:.2f}\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159  # assume the value of pi is defined elsewhere\n    circumference = 2 * pi * r  # formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    return 2 * 3.14159 * r"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    unique_nums = set()\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            unique_nums.update(extract_singly(sublist))\n        else:\n            unique_nums.add(sublist)\n    return list(unique_nums)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for num in sublist:\n            result.add(num)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened numbers\n    flattened_set = set()\n    \n    # Iterate over each element in the list of lists\n    for sublist in test_list:\n        # Iterate over each element in the sublist\n        for num in sublist:\n            # Add each number to the flattened_set\n            flattened_set.add(num)\n    \n    # Return the flattened set as a list\n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        flattened_list.extend(i)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    flattened_list = [item for sublist in test_list for item in sublist]\n    unique_numbers = set(flattened_list)\n    return unique_numbers"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    n = len(nums)\n    for i in range(n):\n        # find the largest element in the unsorted part of the array\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # swap the largest element with the first element of the unsorted part of the array\n        swap(nums, i, max_idx)\n\n        # reverse the unsorted part of the array from i+1 to n-1\n        for j in range(i+1, n):\n            swap(nums, j, i)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize a variable to keep track of the maximum number\n    max_num = max(nums)\n\n    # Loop through each element in the list\n    for i in range(len(nums)):\n        # Initialize a variable to keep track of the index of the maximum number\n        max_index = i\n\n        # Loop through each element after the current element\n        for j in range(i + 1, len(nums)):\n            # If the current element is greater than the maximum number, update the maximum number and index\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # If the maximum number has not been swapped with the current element, swap them\n        if i!= max_index:\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    n = len(nums)\n    \n    # Sort the list using bubble sort\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                # Swap the elements\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    # Bubble sort using the pancakes\n    for i in range(n-1, 0, -1):\n        # Move the largest element to the end\n        nums[i], nums[0] = nums[0], nums[i]\n        \n        # Move the pancake to the top\n        pancake_pos = i\n        \n        # Move the pancake to the left\n        while pancake_pos > 0:\n            pancake_pos -= 1\n            nums[pancake_pos], nums[pancake_pos+1] = nums[pancake_pos+1], nums[pancake_pos]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the largest element in the unsorted part of the list\n        largest = i\n        for j in range(i+1, n):\n            if nums[j] > nums[largest]:\n                largest = j\n        # swap the largest element with the i-th element\n        nums[i], nums[largest] = nums[largest], nums[i]\n        # print the sorted list\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the length of the list\n    n = len(nums)\n\n    # Repeat until the list is sorted\n    while True:\n\n        # Find the largest element in the list\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # If the largest element is already at the end of the list, the list is already sorted\n        if max_idx == 0:\n            return nums\n\n        # Swap the largest element with the last element in the list\n        nums[0], nums[max_idx] = nums[max_idx], nums[0]\n\n        # Reduce the length of the list by 1\n        n -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Reverse the list in ascending order\n    nums = nums[::-1]\n    # Initialize variables\n    n = len(nums)\n    swapped = True\n    \n    # Iterate until no swaps are needed\n    while swapped:\n        swapped = False\n        # Iterate over the list\n        for i in range(n-1):\n            # Compare adjacent elements\n            if nums[i] > nums[i+1]:\n                # Swap the elements\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                # Set the flag to True\n                swapped = True\n                \n    # Print the sorted list\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    The pancake sort algorithm is a sorting algorithm that works by sorting a list in ascending order using a technique called the \"pancake\" method.\n    In this method, the algorithm selects the largest element in the list and rearranges it to be at the end, then the next largest element, and so on, until the entire list is sorted.\n    The pancake method is similar to the bubble sort algorithm in that it repeatedly swaps adjacent elements if they are in the wrong order, but it is less efficient for large lists because it requires swaps of many elements.\n    '''\n\n    # Initialize the pancake index to the length of the list minus one\n    pancake_index = len(nums) - 1\n\n    # Initialize a variable to store the length of the pancake\n    pancake_length = 1\n\n    # While the pancake index is greater than 0, repeat the following steps\n    while pancake_index > 0:\n\n        # Set the maximum value to the value at the pancake index\n        max_value = nums[pancake_index]\n\n        # Set the current index to the pancake index minus the pancake length\n        current_index = pancake_index - pancake_length\n\n        # While the current index is greater than or equal to zero, repeat the following steps\n        while current_index >= 0:\n\n            # If the value at the current index is greater than the maximum value, swap them\n            if nums[current_index] > max_value:\n                nums[current_index], max_value = max_value, nums[current_index]\n\n            # Decrement the current index\n            current_index -= 1\n\n        # Decrement the pancake index\n        pancake_index -= 1\n\n        # Increment the pancake length\n        pancake_length += 1\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find the index of the maximum element in the current column\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the elements at the current index and the maximum element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # print(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def get_length(n):\n        '''\n        Calculate the length of the nth pancake.\n        '''\n        return 2*n-1\n\n    def bubble_sort(arr, n):\n        '''\n        Sort the sub-list from arr[0] to arr[n-1] using bubble sort.\n        '''\n        for i in range(n):\n            for j in range(0, n-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    def selection_sort(arr, n):\n        '''\n        Sort the sub-list from arr[0] to arr[n-1] using selection sort.\n        '''\n        for i in range(n-1):\n            min_index = i\n            for j in range(i+1, n):\n                if arr[j] < arr[min_index]:\n                    min_index = j\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\n    def pancake_sort_helper(arr, n, pancake):\n        '''\n        Sort the list using the nth pancake.\n        '''\n        for i in range(n-1, 0, -1):\n            pancake_length = get_length(i)\n            if pancake_length > 1:\n                bubble_sort(arr, pancake_length)\n            else:\n                selection_sort(arr, pancake_length)\n\n        return arr\n\n    return pancake_sort_helper(nums, len(nums), len(nums))"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to swap elements\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to count inversions\n    def count_inversions(nums):\n        n = len(nums)\n        i = 1\n        while i < n:\n            j = i\n            while j < n - 1 and nums[j] > nums[j + 1]:\n                j += 1\n            while nums[i] > nums[j]:\n                i += 1\n            if i < j:\n                swap(nums, i, j)\n        return i\n\n    # Main function to implement Pancake Sort\n    def pancake_sort(nums):\n        # Calculate the number of inversions\n        inversions = count_inversions(nums)\n\n        # If the number of inversions is zero, return the sorted list\n        if inversions == 0:\n            return nums\n\n        # Create a list of indices for swapping\n        indices = [i for i in range(len(nums))]\n\n        # Divide the list into two halves\n        mid = len(nums) // 2\n        left = nums[:mid]\n        right = nums[mid:]\n\n        # Recursively sort each half\n        left = pancake_sort(left)\n        right = pancake_sort(right)\n\n        # Merge the sorted halves\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                nums[k] = left[i]\n                i += 1\n            else:\n                nums[k] = right[j]\n                j += 1\n            k += 1\n\n        # Copy the remaining elements from the left half\n        while i < len(left):\n            nums[k] = left[i]\n            i += 1\n            k += 1\n\n        # Copy the remaining elements from the right half\n        while j < len(right):\n            nums[k] = right[j]\n            j += 1\n            k += 1\n\n        # Return the sorted list\n        return nums\n\n    # Return the sorted list\n    return pancake_sort(nums)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    # Initialize count variable to zero\n    count = 0\n\n    # Loop through each item in the first list\n    for item in list1:\n        # Check if the item is present in the second and third lists in the same position\n        if item == list2[list1.index(item)] and item == list3[list1.index(item)]:\n            # Increment count variable if the item is present in both lists\n            count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Parameters:\n    list1 (list): List of integers.\n    list2 (list): List of integers.\n    list3 (list): List of integers.\n\n    Returns:\n    int: Number of identical items in the same position of all three lists.\n    \"\"\"\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        if list2[i] == list3[i]:\n            count += 1\n        if list3[i] == list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    # Initialize two variables to store the maximum absolute difference and its index\n    max_diff = float('-inf')\n    index = 0\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Calculate the absolute difference between the current element and the next element in the array\n        abs_diff = abs(arr[i] - arr[i-1])\n        \n        # Update the maximum absolute difference and its index if the current difference is greater\n        if abs_diff > max_diff:\n            max_diff = abs_diff\n            index = i\n            \n    # Return the maximum absolute difference and its index\n    return max_diff, index"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 1:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize variables to store the maximum absolute difference and the current absolute difference\n    max_diff = 0\n    current_diff = abs(arr[1] - arr[0])\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Update the current absolute difference\n        current_diff = abs(arr[i] - arr[i-1])\n        # Update the maximum absolute difference if the current difference is greater than the previous difference\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    # Return the maximum absolute difference found\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf') #initialize the maximum difference to negative infinity\n    for i in range(len(arr)-1): #loop through the array starting from index 0\n        for j in range(i+1,len(arr)): #loop through the array starting from index i+1\n            diff = abs(arr[i]-arr[j]) #find the absolute difference between two elements in the array\n            if diff > max_diff: #if the current absolute difference is greater than the maximum difference, update the maximum difference\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    # Initialize two variables to store the maximum absolute difference and its index\n    max_diff = 0\n    index = 0\n    \n    # Iterate over the array and compare each element to its previous element\n    for i in range(1, len(arr)):\n        # Calculate the absolute difference between the current element and its previous element\n        diff = abs(arr[i] - arr[i-1])\n        \n        # Update the maximum absolute difference and its index if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n            index = i\n            \n    # Return the index of the maximum difference\n    return index"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # try to find a solution for each possible value of x and y\n    for x in range(-n // b + 1, n // b):\n        for y in range(-n // a + 1, n // a):\n            if a * x + b * y == n:\n                return (x, y)\n    # if no solution was found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the roots of the quadratic equation\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the roots exist\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        root1 = -b / (2*a)\n        return (root1, root1)\n    else:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        return (root1, root2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find the number of solutions\n    count = 0\n    while n > 0:\n        n -= a\n        count += 1\n    if count == 0:\n        return None\n    # find the solutions\n    solutions = []\n    for i in range(count + 1):\n        x = i * a\n        for j in range(count - i):\n            y = j * b\n            if x + y == n:\n                solutions.append((x, y))\n    if not solutions:\n        return None\n    # sort the solutions\n    solutions.sort()\n    return solutions[0]"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Find the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if there is a solution\n    if d < 0:\n        return None\n    elif d == 0:\n        return (int(-b/(2*a)),)\n    else:\n        # Find the roots\n        x1 = int((-b - d**0.5)/(2*a))\n        x2 = int((-b + d**0.5)/(2*a))\n        \n        # Check if the roots are unique\n        if x1 == x2:\n            return None\n        else:\n            return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    else:\n        x = n // b\n        y = n - a * x\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x0 = (-b + n**0.5) / (2 * a)\n    y0 = (-a + x0 * a) / b\n    if x0.is_integer() and y0.is_integer():\n        return (int(x0), int(y0))\n    elif x0.is_integer():\n        return (int(x0), None)\n    elif y0.is_integer():\n        return (None, int(y0))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Calculate discriminant\n    disc = b**2 - 4*a*n\n    \n    # If discriminant is less than zero, there is no real solution\n    if disc < 0:\n        return None\n    \n    # If discriminant is equal to zero, there is only one real solution\n    elif disc == 0:\n        return (-b/(2*a), -b/(2*a))\n    \n    # If discriminant is greater than zero, there are two real solutions\n    else:\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        \n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # check if the input is valid\n    if a == 0 and b == 0:\n        return None\n    \n    # check if the equation is reducible\n    d = gcd(a, b)\n    a //= d\n    b //= d\n    \n    if d < 2:\n        return None\n    \n    # create a list of all pairs of integers that satisfy the equation\n    pairs = [(x, y) for x in range(-n // b, n // b + 1) for y in range(-n // a, n // a + 1) if a * x + b * y == n]\n    \n    # find the first solution that satisfies the equation\n    for x, y in pairs:\n        if a * x + b * y == n:\n            return (x, y)\n    \n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are zero\n    if a == 0 and b == 0:\n        return None\n\n    # check if a and n are zero\n    if a == 0:\n        return (n // b, n % b)\n\n    # check if b and n are zero\n    if b == 0:\n        return (n // a, n % a)\n\n    # use the extended Euclidean algorithm to find x and y\n    d = a // b\n    x = n // a * d + n % a\n    y = n // b * d + n % b\n\n    # check if x and y satisfy ax + by = n\n    if x % a == 0 and y % b == 0:\n        return (x // a, y // b)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    x = (-b + (n / a)) / (2 * a)\n    y = (-b - (n / a)) / (2 * a)\n    if abs(a * x + b * y) == n:\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n\n    # Create a new list to store the result\n    result = []\n\n    # Loop through the first list\n    for item in list1:\n\n        # If the item is not present in the second list, append it to the result list\n        if item not in list2:\n            result.append(item)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from `list1` that are present in `list2`.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Loop through the list1 to find the elements to remove\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            # Remove the element from list1\n            del list1[i]\n            # Move the remaining elements back one position\n            for j in range(i, len(list1)):\n                list1[j] = list1[j+1]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the elements that are present in list1 but not in list2\n    result = [elem for elem in list1 if elem not in list2]\n    # return the new list\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 1:\n        # n is odd\n        return n * (n + 1) // 2\n    else:\n        # n is even\n        return n * (n // 2 + 1) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += (n-2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_even_series(n)\n    else:\n        return sum_odd_series(n)\n\n\ndef sum_even_series(n):\n    '''\n    Helper function for sum_series().\n    Calculates the sum of the series for even n.\n    '''\n    if n == 2:\n        return 0\n    else:\n        return (n - 2) + sum_even_series(n // 2)\n\n\ndef sum_odd_series(n):\n    '''\n    Helper function for sum_series().\n    Calculates the sum of the series for odd n.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (n - 1) + sum_odd_series(n // 2) + sum_odd_series(n // 4)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += n - 2 * i\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum_of_series = 0\n    while n - 2*i >= 0:\n        sum_of_series += n - 2*i\n        i += 1\n    return sum_of_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - i >= 0:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return 0\n    else:\n        return sum_series(n-1) + n - 2*n//2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using Heron's formula\n    area = (s**2 * l**2) / (4 * tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        a = tan(i*2*pi/l)\n        area += s*a\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/l) * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i*2*pi/l\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the angle of each side\n    angle = 360 / l\n    \n    # calculate the area of each side\n    area = s * tan(pi/l)\n    \n    # calculate the area of the polygon\n    area_poly = 0\n    for i in range(l):\n        area_poly += area * (i+1) / 2\n    \n    return area_poly"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-2*l+2*l*tan(pi/l)**2))/(4*tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i*2*pi/l\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += s * tan(i * pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += s * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s*tan(pi/l)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1.append(i)\n    div2 = []\n    for i in range(int(math.sqrt(n))+1, n+1):\n        if n % i == 0:\n            div2.append(i)\n    div1.sort()\n    div2.sort()\n    sum1 = sum(div1)\n    sum2 = sum(div2)\n    if sum1 == sum2:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the divisor sum of n \n    div_sum = sum(set(map(int, str(n))))\n    # Find the sum of the divisors of n \n    div_n = sum(set(map(int, str(n**0.5))))\n    # Check if the divisor sum of n is equal to the sum of the divisors of n \n    if div_sum == div_n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(map(int, str(n))))\n\n    # Check if the sum of the divisors of n is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Finding the divisors of n\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    divisors += [n]\n    # Finding the sum of the divisors\n    div_sum = sum(divisors)\n    \n    # Checking if the sum of divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n\n    Parameters:\n    n (int): The number whose divisors we want to check.\n\n    Returns:\n    bool: True if the sum of the divisors of n is the same as the sum of the divisors of n-1.\n\n    \"\"\"\n\n    if n <= 1:\n        return False\n\n    # Find the sum of the divisors of n\n    div_sum_n = sum(set(divisors(n)))\n\n    # Find the sum of the divisors of n-1\n    div_sum_n1 = sum(set(divisors(n-1)))\n\n    # Compare the two sums\n    if div_sum_n == div_sum_n1:\n        return True\n    else:\n        return False\n\n\ndef divisors(n):\n    \"\"\"\n    Find all the divisors of a given number.\n\n    Parameters:\n    n (int): The number whose divisors we want to find.\n\n    Returns:\n    list: A list of all the divisors of n.\n\n    \"\"\"\n\n    # Initialize the list of divisors\n    divisors_list = []\n\n    # Loop through all the numbers from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            # If the number is a divisor of n, add it to the list of divisors\n            divisors_list.append(i)\n            divisors_list.append(n//i)\n\n    # Return the list of divisors\n    return divisors_list"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            return i\n            \n    return None"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determines if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    for i in range(int(math.sqrt(n))+1, n+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes in an integer n and returns True if the sum of the divisors of n is the same as n and False otherwise.\n    '''\n    # Calculate the sum of the divisors of n\n    sum_div = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_div += i + n // i\n    \n    # Check if the sum of the divisors is equal to n\n    return sum_div == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0 \n    sum2 = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            sum1 += i \n        if n // i == i: \n            sum2 += i \n    return sum1 == sum2"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n\n    # Iterate over the string\n    for char in str1: \n        # If the character is a letter, increment the count in the dictionary\n        if char.isalpha(): \n            if char in char_count: \n                char_count[char] += 1\n            else: \n                char_count[char] = 1\n\n    # Initialize a counter variable to store the sum of counts of characters at the same position in the English alphabet\n    same_position_count = 0\n\n    # Iterate over the characters in the English alphabet\n    for i in range(ord('a'), ord('z') + 1): \n        # If the count of the current character in the dictionary is greater than 0, increment the counter\n        if char_count[chr(i)] > 0: \n            same_position_count += 1\n\n    # Return the count of characters at the same position in the English alphabet\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    alpha = alpha.lower()\n    for i in range(len(str1)):\n        if str1[i].lower() == alpha[i]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase and remove any non-alphabetic characters\n    str1 = ''.join(c for c in str1.lower() if c.isalpha())\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    # Iterate through the string and count the frequency of each character\n    for c in str1:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    # Iterate through the frequency dictionary and count the number of occurrences of each character\n    count = 0\n    for i in range(ord('a'), ord('z')+1):\n        if chr(i) in freq:\n            count += freq[chr(i)]\n    # Return the count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize the count variables\n    count_alpha = 0\n    count_other = 0\n\n    # Iterate through the string\n    for i in range(len(str1)):\n        # If the character is an alphabetic character, increment the count for that character\n        if str1[i].isalpha():\n            count_alpha += 1\n        # Otherwise, increment the count for any other character\n        else:\n            count_other += 1\n\n    # Return the count of both alphabetic and other characters\n    return count_alpha, count_other"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # convert string to lowercase for case insensitivity\n    str1 = str1.lower()\n    \n    # initialize counter variables\n    count = 0\n    prev_char = None\n    \n    # loop through string\n    for char in str1:\n        # check if character is in English alphabet\n        if char.isalpha() and char.lower() == chr(ord('a') + count):\n            count += 1\n        else:\n            count = 0\n            \n        # update previous character variable\n        prev_char = char\n    \n    # return count of characters that occur at the same position in English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    # initialize a dictionary to store the counts of each character\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is a letter in the English alphabet\n        if char.isalpha():\n            # check if the character is already in the dictionary\n            if char in char_count:\n                # increment the count for this character\n                char_count[char] += 1\n            else:\n                # add the character to the dictionary with a count of 1\n                char_count[char] = 1\n    # return the dictionary with the counts of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the count of each character in the English alphabet\n    char_count = {}\n    for char in \"abcdefghijklmnopqrstuvwxyz\":\n        char_count[char.lower()] = 0\n\n    # iterate through each character in the string and increment its count in the dictionary\n    for char in str1:\n        if char.lower() in char_count:\n            char_count[char.lower()] += 1\n\n    # return the count of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(ord('a') + i))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)): \n        for j in range(ord('a'), ord('z')+1): \n            if str1[i].lower() == chr(j).lower(): \n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to its ASCII code and subtract 96 to get its index in the English alphabet\n        index = ord(char) - 96\n\n        # Check if the index is already in the dictionary\n        if index in char_count:\n            # If it is, increment the count of that index\n            char_count[index] += 1\n        else:\n            # If not, add the index to the dictionary with a count of 1\n            char_count[index] = 1\n\n    # Initialize a variable to store the total count of characters\n    total_count = 0\n\n    # Loop through the dictionary to calculate the total count of characters\n    for count in char_count.values():\n        total_count += count\n\n    # Return the total count of characters\n    return total_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    This function takes a list A as input and returns the count of even pairs of integers that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] % 2 == 0 and A[j] % 2 == 0: \n                if (A[i] ^ A[j]) % 2 == 0: \n                    count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    # Create an empty dictionary to store the count of even pairs\n    even_pairs = {}\n\n    # Loop through the list of integers in A\n    for num in A: \n        # Check if the XOR of num and all other integers in A is even\n        if num % 2 == 0 and num in even_pairs: \n            even_pairs[num] += 1 \n        elif num % 2 == 0 and num not in even_pairs: \n            even_pairs[num] = 1\n\n    # Return the count of even pairs\n    return sum(value for key, value in even_pairs.items() if value > 1)"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1 \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 ^ A[j] % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n - 1)!= 0: # check if n is a power of 2\n        n += 1 # increase n until it is\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # initialize power to 1\n    power = 1\n\n    # loop while power is less than or equal to n\n    while power <= n:\n\n        # if power is less than or equal to n\n        if power <= n:\n\n            # return power\n            return power\n\n        # increment power by 1\n        power += 1\n\n    # if loop exits without finding a power greater than or equal to n, return None\n    return None"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 2\n    \n    if n == 0:\n        return 1\n    \n    # Find the integer logarithm of n\n    log_2_n = 0\n    while n > 1:\n        log_2_n += 1\n        n = n >> 1\n    \n    # Raise 2 to the power of the integer logarithm of n\n    result = 1\n    for i in range(log_2_n):\n        result *= 2\n    \n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # convert n to binary representation\n    binary_repr = bin(n)[2:]\n\n    # count the number of 1s in the binary representation\n    count = binary_repr.count('1')\n\n    # find the next power of 2 by multiplying 2 to the power of count - 1\n    next_pow = 2**(count - 1)\n\n    # return the next power of 2\n    return next_pow"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n % 2 == 0:\n        n //= 2\n    if n > 1:\n        n = n << 1\n    else:\n        n = 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 to 1\n    power_of_2 = 1\n    # While n is greater than or equal to the power of 2\n    while n >= power_of_2:\n        # Update the power of 2 to the next power of 2\n        power_of_2 <<= 1\n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to a given number n.\n    \"\"\"\n    # If n is already a power of 2, return n\n    if n & (n - 1) == 0:\n        return n\n    # Find the next largest power of 2\n    next_power = 1\n    while next_power < n:\n        next_power <<= 1\n    # If the next power of 2 is still less than n, then it is not a power of 2\n    if next_power < n:\n        next_power = 1 << 32\n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # First, check if n is already a power of 2\n    if n & (n - 1) == 0: \n        return n\n    \n    # If n is not a power of 2, find the next power of 2\n    n = n - 1\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    \n    return n + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # Find the smallest power of 2 greater than or equal to n\n    while n & (n - 1):  # While the binary representation of n has at least one 1\n        n = n | (n - 1)  # Set the least significant bit of n to 1\n\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i <<= 1\n    return i"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    This function takes a list of integers and an integer x as input and returns the count of the number x in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    This function counts the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count \n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n\n    Parameters:\n        lst (list): List to search in.\n        m (int): Start index (inclusive).\n        n (int): End index (inclusive).\n\n    Returns:\n        int: The sum of numbers in the list within the range [m, n].\n    \"\"\"\n    if m > n:\n        raise ValueError(\"The start index m must be less than or equal to the end index n.\")\n\n    # Initialize the sum to zero\n    sum_range = 0\n\n    # Loop over the indices in the range and add the numbers to the sum\n    for i in range(m, n+1):\n        if i < len(lst):\n            sum_range += lst[i]\n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i-1]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    if m < 0:\n        m = 0\n    if n > len(list1):\n        n = len(list1)\n    return sum(list1[m:n])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if the range is valid (i.e., m <= n)\n    if m > n:\n        raise ValueError('Invalid range')\n    # Initialize the sum to zero\n    sum_val = 0\n    # Loop through the list from index m to index n\n    for i in range(m, n+1):\n        # Check if the index is within the bounds of the list\n        if i >= len(list1):\n            break\n        # Add the current element to the sum\n        sum_val += list1[i]\n    # Return the sum\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a  # Formula to find the perimeter of a regular pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the area of the pentagon using Heron's formula\n    area = (5 * a ** 2) / (4 * math.tan(math.pi / 5))\n    \n    # calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    \n    # return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of each side\n    side1 = a\n    side2 = math.sqrt(3)*a/2\n    side3 = math.sqrt(3)*a/2\n    \n    # Add the lengths of all sides to get the perimeter\n    perimeter = side1 + side2 + side3\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula to calculate the perimeter of a regular pentagon\n    perimeter = 5*a\n    \n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    r = a/2\n    P = 2*math.pi*r\n    return P\n\nThis function takes an argument a, which is the length of the sides of the regular pentagon, and returns the perimeter of the pentagon. The formula for the perimeter of a regular pentagon is: P = 5a."
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a + 5*math.sqrt(3)\n\nprint(perimeter_pentagon(5))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula for perimeter of a pentagon\n    p = 5*a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n\n    count = 0\n    index = s.find('std')\n\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if'std' in word:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word.lower() =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # converting the tuple into a list\n    test_list = list(test_tuple)\n    # initializing a variable to keep track of the data type of the first element in the list\n    data_type = type(test_list[0])\n    # iterating over the list and checking if the data type of each element is the same as the first element\n    for item in test_list:\n        if type(item)!= data_type:\n            return False\n    # if all the elements have the same data type, the function returns True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n\n    # check the first element of the tuple\n    first_element = type(test_tuple[0])\n\n    # check if all the elements of the tuple have same data type or not\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n\n    # if all the elements have same data type, then return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for item in test_tuple:\n        data_types.append(type(item))\n    unique_data_types = set(data_types)\n    return len(unique_data_types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if tuple is empty\n    if not test_tuple:\n        return True\n    # iterate through tuple\n    for i in range(len(test_tuple)-1):\n        # check if the element in tuple at index i is of same type as the element at index i+1\n        if not isinstance(test_tuple[i], type(test_tuple[i+1])):\n            return False\n    # if all the elements in tuple have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n    # Iterate over the rest of the elements of the tuple\n    for element in test_tuple[1:]:\n        # If the data type of the current element is different from the first element, return False\n        if type(element)!= type(first_element):\n            return False\n    # If all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n    return all(type(test_tuple[0]) == data_type for data_type in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n    for item in test_tuple:\n        type_set.add(type(item))\n    return len(type_set) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # get the first element of the tuple\n    first_element = type(test_tuple[0])\n    # iterate over the tuple and get the data type of each element\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    # if no false value is returned, all the elements in the tuple have same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        i += 1\n    if count > n // 2:\n        return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n        if count == n // 2:\n            return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 1: \n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initializing a list to store the odd index characters\n    odd_index_list = []\n    # iterating over the characters of the given string\n    for i, char in enumerate(str):\n        # checking if the current character has an odd index\n        if i % 2 == 1:\n            # adding the current character to the odd_index_list\n            odd_index_list.append(char)\n    # converting the list to a string and returning it\n    return ''.join(odd_index_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    # Initialize an empty string to store the new string with odd index values removed\n    new_str = ''\n    # Iterate through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if int(str.index(char)) % 2 == 1:\n            # If the index is odd, add the character to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n        str (str): The input string.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns the modified string containing only the characters with odd index values.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2!= 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n\n    # First, check if a is smaller than b and c\n    if a < b and a < c:\n        return a\n    # If a is equal to b and c, return a\n    elif a == b and b == c:\n        return a\n    # If a is greater than b and c, return b\n    elif a > b and a > c:\n        return a"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Check if n is a power of 2\n    if n & (n - 1)!= 0:\n        return \"n must be a power of 2.\"\n\n    # Check if the range is valid\n    if l > r:\n        return \"l must be less than or equal to r.\"\n\n    # Check if all bits in the range are set\n    if l & (l - 1)!= 0 or r & (r - 1)!= 0:\n        return \"All bits in the range must be set.\"\n\n    # All conditions passed\n    return \"All bits are unset in the range.\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Iterate through each bit in the range\n    for i in range(l, r+1):\n        # Check if the bit in n is set (i.e. has a value of 1)\n        if (n & (1 << i))!= (1 << i):\n            # If not, return False\n            return False\n\n    # If we made it through the loop without returning False, then all the bits are set\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Loop through each bit in the given range\n    for i in range(l, r+1):\n        # Check if the bit is set (i.e., 1)\n        if (n & (1 << i)):\n            # If a bit is set, return False\n            return False\n    # If all the bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Find the length of the binary representation of n\n    length = len(bin(n)[2:])\n    # Create a bitmask with 1's in the range of l to r\n    mask = ((1 << length) - 1) << l\n    # Check if the bitwise AND of n and the mask is equal to 0\n    if (n & mask)!= 0:\n        return False\n    # If not, then all bits are set in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r - l + 1 == n:\n        return True\n    count = 0\n    for i in range(l, r+1):\n        count += (i & 1)\n    if count == n:\n        return True\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three integers as input and returns True if all the bits are set in the given range.\n    \"\"\"\n    # Initialize a variable to store the result\n    all_bits_set = True\n    # Loop through all the bits in the given range\n    for i in range(l, r + 1):\n        # Check if the i-th bit is unset\n        if not (n & (1 << i)):\n            # If it is unset, set all_bits_set to False\n            all_bits_set = False\n            # Break the loop\n            break\n    # Return the result\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the number of unset bits in the given range\n    count = 0\n\n    # Iterate over all the bits in the given range\n    for i in range(l, r+1):\n        # Count the number of unset bits in the current bitmask\n        count += n & 1\n\n        # Right shift the current bitmask by 1 bit\n        n = n >> 1\n\n    # Return True if all the bits in the given range are unset\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments n, l and r, where n is the integer number, \n    l is the lower bound of the range and r is the upper bound of the range.\n    It returns True if all the bits in the range are set to 1, False otherwise.\n    '''\n    n &= ((1 << (r - l + 1)) - 1) # Mask the range with all 1's and then check for unset bits\n    if n == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if l == 0:\n        return 0 # if all bits are set in the range\n    elif r == 0:\n        return 1 # if all bits are set in the range\n\n    elif l == r:\n        return all_Bits_Set_In_The_Given_Range(n,l,l)\n\n    else:\n        return all_Bits_Set_In_The_Given_Range(n,l,r-1) + all_Bits_Set_In_The_Given_Range(n,r,l-1)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n\n    # Count the number of negative and positive elements in the array\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # Move negative elements to the end of the array\n    for i in range(neg_count):\n        arr[i], arr[n-1-i] = arr[n-1-i], arr[i]\n\n    # Move positive elements to the end of the array\n    for i in range(pos_count):\n        arr[i+neg_count], arr[n-1-pos_count+i] = arr[n-1-pos_count+i], arr[i+neg_count]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers, one for each group of elements\n    negative_ptr = 0\n    positive_ptr = n - 1\n    \n    # Iterate over the array\n    for i in range(n):\n        # If the current element is negative, swap it with the negative pointer\n        if arr[i] < 0:\n            arr[negative_ptr], arr[i] = arr[i], arr[negative_ptr]\n            negative_ptr += 1\n        # If the current element is positive, swap it with the positive pointer\n        elif arr[i] > 0:\n            arr[positive_ptr], arr[i] = arr[i], arr[positive_ptr]\n            positive_ptr -= 1\n    \n    # Reverse the order of the array\n    arr = arr[::-1]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Count the number of negative and positive elements in the array\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # Calculate the total number of elements in the array\n    total_count = neg_count + pos_count\n\n    # Separate the array into two parts: negative and positive\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n\n    # Calculate the difference between the number of negative and positive elements in the first n elements and the total count\n    diff = total_count - n\n\n    # Re-arrange the elements of the positive part such that the relative order is preserved\n    # Since the number of negative and positive elements is the same, we can simply rotate the negative part by the same amount\n    pos_arr = pos_arr[diff:] + pos_arr[:diff]\n\n    # Combine the parts and return the final array\n    result = neg_arr + pos_arr\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg_index = []\n    pos_index = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_index.append(i)\n        else:\n            pos_index.append(i)\n    \n    neg_index.sort(reverse=True)\n    pos_index.sort()\n    \n    for i in range(n):\n        if i < len(neg_index):\n            arr[i], arr[neg_index[i]] = arr[neg_index[i]], arr[i]\n        else:\n            arr[i], arr[pos_index[i-n]] = arr[pos_index[i-n]], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    # Find the position of the smallest negative element\n    pos_start = 0\n    for i in range(1, n):\n        if arr[i] >= 0:\n            pos_start = i\n            break\n    # Move all negative elements to the beginning of the array\n    for i in range(pos_start, n):\n        arr[i], arr[0] = arr[0], arr[i]\n    # Find the position of the largest positive element\n    neg_start = n\n    for i in range(n, 2*n):\n        if arr[i] < 0:\n            neg_start = i\n            break\n    # Move all positive elements to the end of the array\n    for i in range(n, 2*n):\n        arr[i], arr[neg_start] = arr[neg_start], arr[i]\n    # Sort the array from the smallest negative to the largest positive\n    arr.sort()\n    # Move all negative elements to the beginning of the array\n    for i in range(neg_start, n):\n        arr[i], arr[0] = arr[0], arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # create a set to keep track of negative numbers\n    neg_set = set()\n    # loop through the first n elements of the array\n    for i in range(n):\n        # if the current element is negative, add it to the neg_set\n        if arr[i] < 0:\n            neg_set.add(arr[i])\n    # loop through the remaining elements of the array, and add them to the end of the neg_set\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_set.add(arr[i])\n    # loop through the neg_set and insert them in the first n positions of the array\n    i = 0\n    for num in neg_set:\n        arr[i] = num\n        i += 1\n    # loop through the remaining elements of the array and add them to the end of the array\n    for i in range(len(arr), n):\n        arr[i] = arr[n - 1 - i]\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize variables to keep track of negative and positive elements\n    neg = 0\n    pos = 0\n\n    # Loop through the array\n    for i in range(n):\n        # If the element is negative, increment the negative counter\n        if arr[i] < 0:\n            neg += 1\n        # If the element is positive, increment the positive counter\n        elif arr[i] > 0:\n            pos += 1\n\n    # Create a new array to store the re-arranged elements\n    new_arr = [0] * (n + neg + pos)\n\n    # Loop through the original array again and copy the elements to the new array\n    for i in range(n):\n        # If the element is negative, copy it to the front of the new array\n        if arr[i] < 0:\n            new_arr[neg] = arr[i]\n            neg += 1\n        # If the element is positive, copy it to the end of the new array\n        elif arr[i] > 0:\n            new_arr[n + pos - 1] = arr[i]\n            pos -= 1\n\n    # Return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a dictionary to store the original indices of each element\n    indices = {}\n    for i, element in enumerate(arr):\n        indices[element] = i\n\n    # Sort the array in descending order based on absolute value\n    sorted_arr = sorted(arr, key=lambda x: abs(x), reverse=True)\n\n    # Iterate through the sorted array and copy the elements to the desired position\n    for i, element in enumerate(sorted_arr[:n]):\n        if element < 0:\n            new_index = indices[abs(element)]\n            arr[i], arr[new_index] = arr[new_index], arr[i]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        elif arr[i] > 0:\n            pos_count += 1\n\n    # Move negative elements to the end of the array\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg_count] = arr[neg_count], arr[i]\n            neg_count -= 1\n\n    # Move positive elements to the beginning of the array\n    for i in range(n):\n        if arr[i] > 0:\n            arr[i], arr[pos_count] = arr[pos_count], arr[i]\n            pos_count += 1\n\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Loop through the array and add elements to the appropriate list\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n            \n    # Merge the two lists\n    merged_list = neg_list + pos_list\n    \n    # Shuffle the merged list\n    import random\n    random.shuffle(merged_list)\n    \n    # Create a new array with the first n elements of the merged list\n    new_arr = []\n    for i in range(n):\n        new_arr.append(merged_list[i])\n        \n    return new_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    # replace all blank spaces with the given character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character as input and returns a string where all blank spaces are replaced with the character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"%s\" % char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            str2 += char\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i!= \" \":\n            new_str += i\n        elif i == \" \":\n            new_str += char\n    return new_str"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Initialize an empty list to store the n largest numbers\n    large_list = []\n    \n    # Use a min heap to store the n largest numbers\n    heap = []\n    \n    # Traverse through the list and add each number to the min heap\n    for num in list1:\n        heapq.heappush(heap,num)\n        \n        # If the size of the heap becomes greater than n, remove the smallest number from the heap\n        while len(heap) > n:\n            heapq.heappop(heap)\n    \n    # Iterate through the heap and add the numbers to the large_list\n    for num in heap:\n        large_list.append(num)\n    \n    return large_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Creating a min heap to store the n largest elements\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n\n    # Popping the n largest elements from the min heap and appending them to the result list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Create a min heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # Pop the smallest elements from the heap\n    for i in range(n, len(list1)):\n        heapq.heappop(heap)\n        heapq.heappush(heap, list1[i])\n    \n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    # create a min heap with the first n elements of the list\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n\n    # remove the smallest element from the heap and add the next smallest element to the end of the list\n    for i in range(n, len(list1)):\n        heapq.heappushpop(min_heap, list1[i])\n\n    # return the heap as the result\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    list1 = list(set(list1))\n    heap = []\n    for num in list1:\n        # Add the number to the heap\n        heapq.heappush(heap, num)\n        # If the heap size is greater than n, remove the smallest number\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the heap back to a list\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, list1[i])\n    \n    # Extract the top n elements from the max heap and add them to the result list\n    result = []\n    while len(max_heap) > 0:\n        result.append(heapq.heappop(max_heap))\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    surface_area = 2 * (r**2 + h**2) * 3.14159265359\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 2 * 3.14 * r * h\n    print(\"Lateral surface area of a cylinder with radius\",r,\"and height\",h,\"is\",lateral_surface)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h # lateral surface area = 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    \n    # Calculate the cross sectional area of the cylinder\n    A = 2 * r * h\n    \n    # Calculate the lateral surface area of the cylinder\n    return 2 * A * r * h / 3"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of a cylinder\n    area = 2 * r * h + 2 * r * r\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n\n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The lateral surface area of the cylinder.\n    \"\"\"\n    area = 2 * 3.14 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    lateral_surface_area = 2 * pi * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Calculate the volume of a cube with side length l.\n    \"\"\"\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3  # volume of a cube is the cube of the side length\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to hold the even bits of n\n    even_bits = 0\n    # Loop through each bit of n and set the corresponding bit in even_bits to 1\n    for i in range(32):\n        if n & (1 << i):\n            even_bits |= (1 << i)\n    # Return the even_bits variable as the result of the function\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        n &= n - 1 # Clear the least significant 1 bit in n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the set bits\n    set_bits = []\n    \n    # Loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, add it to the set_bits list\n        if int(bit) % 2 == 0:\n            set_bits.append(int(bit))\n    \n    # Convert the set_bits list to an integer and return it\n    return int(''.join(map(str, set_bits)))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bit positions\n    even_bits = []\n\n    # Iterate over all the bits in the given number\n    for i in range(32):\n        # Get the ith bit of the number\n        bit = (n >> i) & 1\n\n        # If the bit is even, append its position to the even_bits list\n        if bit == 0:\n            continue\n        else:\n            even_bits.append(i)\n\n    # Set all even bits of the number to 1\n    for i in even_bits:\n        n |= 1 << i\n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate over each bit in the given number\n    for bit in bin(n)[2:]:\n        # Set the corresponding bit in the result to 1\n        if int(bit) == 0:\n            result = result | 1 << int(bit)\n        else:\n            result = result & ~(1 << int(bit))\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits_set = 0b0\n    for i in range(8):\n        if n & (1 << i):\n            even_bits_set |= 1 << i\n    return even_bits_set"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if bit == '1':\n            result.append('1')\n        # If the current bit is odd, leave it as is\n        else:\n            result.append('0')\n            \n    # Convert the list of bits back into an integer\n    return int(''.join(result), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n\n    # loop through each bit in the number\n    for i in range(32):\n        # check if the bit is even\n        if n & (1 << i) == 0:\n            # if even, set the corresponding bit in the result\n            result |= (1 << i)\n\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the number\n    for i in range(32):\n        # Check if the current bit is even\n        if (n >> i) & 1 == 0:\n            # If it is, set the corresponding bit in the result to 1\n            result |= 1 << i\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store even bits\n    even_bits = []\n\n    # Loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # Convert the bit to an integer\n        bit = int(bit)\n\n        # If the bit is even\n        if bit % 2 == 0:\n            # Append it to the even_bits list\n            even_bits.append(bit)\n\n    # Convert the even_bits list to a string\n    even_bits_string = ''.join(map(str, even_bits))\n\n    # Convert the even_bits_string to an integer and return it\n    return int(even_bits_string, 2)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Use the Counter class from the collections module to count the occurrences of each tuple in the unique_tuples set\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples into a set to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Convert the set back into a list of tuples\n    unique_tuples_list = list(unique_tuples)\n\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through the list of tuples and update the count of each unique tuple in the dictionary\n    for tuple in unique_tuples_list:\n        count_dict[tuple] = test_list.count(tuple)\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the occurrence of each tuple\n    occurrences = {}\n    \n    # loop through the test list and count the occurrences of each tuple\n    for item in test_list:\n        if item not in occurrences:\n            occurrences[item] = 0\n        occurrences[item] += 1\n    \n    # return the dictionary of occurrences\n    return occurrences"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of each tuple\n    count_dict = {}\n\n    # loop through the list of tuples\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create a Counter object to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return dict(count_dict)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring and substring!= str[i]:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each character to the end of the string\n        for j in range(i, len(str)):\n            # Check if the substring between i and j is non-empty\n            if str[i:j+1].strip()!= \"\":\n                # Increment the count\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substrings.append(str[i:j])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n): \n        for j in range(i+1, n+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substr = str[i:j]\n            if substr and substr.strip():\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n, previous=0, count=0):\n    if n == 0:\n        return count\n    if previous + n > m:\n        return get_total_number_of_sequences(m, n - 1, 0, count)\n    if previous + 2 * n > m:\n        return get_total_number_of_sequences(m, n - 1, 0, count)\n    return get_total_number_of_sequences(m, n - 1, previous + 2 * n, count + 1)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(2, m+1):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Find the number of possible sequences of length n\n    num_sequences = 0\n    for i in range(n):\n        num_sequences += (m // 2) + (m // 4) * (2 * i + 1)\n    \n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(m):\n        if i >= 2*m:\n            count += 1\n    for i in range(2, n+1):\n        count += m * ((n-i+1) // m)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables for the count and sum of sequences\n    count = 0\n    sum_sequences = 0\n\n    # Loop through all possible combinations of lengths from 1 to n\n    for i in range(1, n+1):\n        # Initialize variables for the count and sum of combinations of length i\n        count_i = 0\n        sum_i = 0\n\n        # Loop through all possible combinations of the previous length\n        for j in range(i):\n            # Check if the current combination meets the criteria\n            if 2*j < m and 2*j+i <= m:\n                # Add the combination to the sum of combinations and count of sequences\n                sum_i += 2*j+i\n                count_i += 1\n\n        # Update the count and sum of sequences\n        count += count_i\n        sum_sequences += sum_i\n\n    # Return the count of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables\n    total = 0\n    sequence = []\n    current_num = 2*m\n    \n    # Iterate through all possible sequences of length n\n    for i in range(n):\n        sequence.append(current_num)\n        current_num = min(current_num, m)\n        current_num += 2\n    \n    # Calculate the total number of possible sequences\n    for num in sequence:\n        total += num\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(2, m+1):\n        if i <= 2 * n:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid(seq):\n        if len(seq)!= n:\n            return False\n        prev_elem = 0\n        for elem in seq:\n            if elem < 0 or elem >= m:\n                return False\n            if elem <= 2 * prev_elem:\n                return False\n            prev_elem = elem\n        return True\n\n    total = 0\n    for i in range(m - n + 1):\n        seq = [i + 1] * n\n        if is_valid(seq):\n            total += 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    i = 1\n    while i <= m:\n        if i >= 2 * m and i <= m:\n            total_sequences += 1\n        i += 1\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for i in range(n):\n        total_number_of_sequences += ((m+1)//n)*((2*i+1)//n)\n    return total_number_of_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    else:\n        list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n\n    # check if the lengths of the two lists are equal\n    if len(list1)!= len(list2):\n        print(\"Error: The two lists must be of equal length.\")\n        return\n    \n    # replace the last element of the first list with the elements of the second list\n    for i in range(len(list1)-1,-1,-1):\n        list1[i] = list2[i]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        raise ValueError('The two lists must have the same length.')\n    else:\n        for i in range(len(list1)-1,-1,-1):\n            list1[i] = list2[0]\n            list2 = list2[1:]\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    n = len(list1)\n    \n    # Check if the second list is shorter than the first list\n    if len(list2) < n:\n        # Replace the last element of the first list with the elements of the second list\n        list1[n-1:] = list2\n    else:\n        # Otherwise, replace all the elements of the first list with the elements of the second list\n        list1[:] = list2\n        \n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number as input and returns the next perfect square greater than that number.\n    \"\"\"\n    # find the square root of the input number\n    sqrt_N = int(math.sqrt(N))\n    # convert the square root to a string\n    sqrt_str = str(sqrt_N)\n    # remove the last character (which is a digit) from the string\n    sqrt_str = sqrt_str[:-1]\n    # convert the string back to an integer\n    sqrt_N = int(sqrt_str)\n    # add 1 to the integer and check if it's a perfect square\n    next_N = sqrt_N + 1\n    while True:\n        next_sqrt_N = int(math.sqrt(next_N))\n        if next_sqrt_N**2 == next_N:\n            break\n        next_N += 1\n    return next_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def is_perfect_square(n):\n        \"\"\"\n        Check if a number is a perfect square.\n        \"\"\"\n        return int(math.sqrt(n))**2 == n\n\n    def is_prime(n):\n        \"\"\"\n        Check if a number is prime.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_prime_square(n):\n        \"\"\"\n        Check if a number is a prime square.\n        \"\"\"\n        if is_prime(int(math.sqrt(n))**2):\n            return True\n        return False\n\n    def is_divisible_by_square(n):\n        \"\"\"\n        Check if a number is divisible by a perfect square.\n        \"\"\"\n        if is_perfect_square(n):\n            return True\n        return False\n\n    def next_prime_square(n):\n        \"\"\"\n        Find the next prime square greater than a given number.\n        \"\"\"\n        next_prime = next(x for x in range(n+1, 2**31) if is_prime(x) and is_prime_square(x))\n        return next_prime\n\n    def next_prime_square_divisible_by_square(n):\n        \"\"\"\n        Find the next prime square divisible by a perfect square.\n        \"\"\"\n        next_prime = next(x for x in range(n+1, 2**31) if is_prime(x) and is_prime_square(x) and is_divisible_by_square(x))\n        return next_prime\n\n    # Find the next prime square greater than N\n    next_square = next_prime_square(N)\n\n    # Check if the next square is greater than 2^31 - 1\n    if next_square > (2**31) - 1:\n        # If yes, find the next perfect square greater than 2^31 - 1\n        next_square = next_prime_square_divisible_by_square(N)\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the largest square that is less than or equal to N\n    largest_square = int(math.sqrt(N))\n\n    # While the square is not greater than N, increment the square and try again\n    while (largest_square * largest_square) <= N:\n        largest_square += 1\n\n    # Return the next perfect square greater than N\n    return largest_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        sqrt_N += 1\n        if is_Perfect_Square(sqrt_N):\n            return sqrt_N\n\ndef is_Perfect_Square(N):\n    return int(math.sqrt(N))**2 == N\n\nN = int(input(\"Enter a number: \"))\nprint(\"Next Perfect Square:\", next_Perfect_Square(N))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Calculate the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Calculate the difference between the square root and the nearest integer\n    diff = int(sqrt_N) - sqrt_N\n\n    # Calculate the square of the difference\n    square_diff = diff * diff\n\n    # Calculate the sum of the difference and N\n    sum_diff_N = diff + N\n\n    # Check if the sum of the difference and N is greater than the square root of N\n    if sum_diff_N > sqrt_N:\n        # If it is, calculate the next perfect square by adding 1 to the square of the difference\n        next_sqrt = square_diff + 1\n\n        # Return the next perfect square\n        return next_sqrt\n\n    # If the sum of the difference and N is less than or equal to the square root of N\n    else:\n        # Calculate the next perfect square by subtracting 1 from the square of the difference\n        next_sqrt = square_diff - 1\n\n        # Return the next perfect square\n        return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N)) + 1\n\n    while True:\n        square = sqrtN * sqrtN\n        if square > N:\n            return square\n        sqrtN += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes in a number N and returns the next perfect square greater than N.\n    The next perfect square is a positive integer whose square is greater than N.\n    '''\n    if N == 1:\n        return 1\n\n    for i in range(1, int(math.sqrt(N))+1):\n        if i**2 > N and (i+1)**2 <= N:\n            return i**2\n\n    return (i+1)**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_square(num):\n        return int(math.sqrt(num)) ** 2 == num\n\n    def next_square(num):\n        x = int(math.sqrt(num))\n        while not is_square(x ** 2):\n            x += 1\n        return x ** 2\n\n    def next_per_square(num):\n        if num == 1:\n            return 2\n        elif num % 2 == 0:\n            return next_square(num)\n        else:\n            return next_square(num - 1)\n\n    if is_square(N):\n        return N\n    else:\n        return next_per_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n    \"\"\"\n    # find the square root of N\n    sqrt_N = int(math.sqrt(N))\n    # find the square of the square root of N\n    square_root_square = math.pow(sqrt_N, 2)\n    # find the difference between the given number and the square root of N\n    diff = N - square_root_square\n    # find the square root of the difference\n    square_root_diff = int(math.sqrt(diff))\n    # check if the square root of the difference is odd or even\n    if square_root_diff % 2 == 0:\n        # if even, increment the square root of the difference by 1\n        square_root_diff += 1\n    # find the square of the square root of the difference\n    square_diff = math.pow(square_root_diff, 2)\n    # return the next perfect square greater than N\n    return square_diff"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 1\n    \n    # calculate the square root of N\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        # try to find a square number greater than sqrt(N) that is also a perfect square\n        sqrt_N += 1\n        square_N = int(sqrt_N*sqrt_N)\n        if square_N > N:\n            # if we found a square number greater than sqrt(N) that is a perfect square, return it\n            return square_N\n\n        # if we couldn't find a square number greater than sqrt(N) that is a perfect square, try again\n        if square_N == N:\n            return next_Perfect_Square(N)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize the maximum sum to negative infinity\n    max_so_far = float('-inf')\n    \n    # Loop through the array\n    for i in range(len(arr)): \n        # If the element is decreasing, add it to the current maximum sum\n        if arr[i] < arr[i-1]: \n            max_so_far += arr[i] \n        # If the element is increasing, subtract it from the current maximum sum\n        else: \n            max_so_far -= arr[i-1]\n            \n    # Return the maximum sum\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    elif n == 3:\n        if arr[0] < arr[1] < arr[2]:\n            return arr[0] + arr[2]\n        else:\n            return arr[0] + arr[1]\n    else:\n        # The subsequence is increasing or decreasing\n        increasing = arr[0] < arr[1]\n        decreasing = arr[0] > arr[1]\n        for i in range(2, n):\n            if increasing:\n                increasing = arr[i] < arr[i-1]\n            else:\n                decreasing = arr[i] > arr[i-1]\n            if increasing:\n                if arr[i] < arr[i-1]:\n                    # Update the subsequence\n                    if decreasing:\n                        decreasing = False\n                    else:\n                        arr[i] += arr[i-1]\n            else:\n                if arr[i] > arr[i-1]:\n                    # Update the subsequence\n                    if increasing:\n                        increasing = False\n                    else:\n                        arr[i] += arr[i-1]\n        # Find the maximum subsequence sum\n        max_sum = arr[0] + arr[1]\n        for i in range(2, n):\n            max_sum = max(max_sum, arr[i] + arr[i-1])\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    \n    # Initialize variables\n    left_sum = 0\n    right_sum = 0\n    max_sum = float('-inf')\n    \n    # Iterate through the array\n    for num in arr:\n        # Update left sum\n        if num < arr[0]:\n            left_sum += num\n        # Update right sum\n        else:\n            right_sum += num\n        \n        # Update maximum sum\n        if right_sum - left_sum > max_sum:\n            max_sum = right_sum - left_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    elif n == 3:\n        if arr[0] <= arr[1] <= arr[2]:\n            return max(arr[0], arr[2])\n        elif arr[0] <= arr[2] <= arr[1]:\n            return max(arr[0], arr[1])\n        else:\n            return max(arr[1], arr[2])\n    else:\n        dp = [0] * (n + 1)\n        dp[1] = arr[0]\n        dp[2] = max(arr[0], arr[1])\n        for i in range(3, n + 1):\n            dp[i] = max(dp[i - 1], dp[i - 2] + arr[i - 1])\n        return dp[-1]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    \n    # Check if the array is bitonic or not\n    if arr[1] < arr[0]:\n        return max(arr[0] + arr[1], max_sum(arr[1:]))\n    elif arr[-2] < arr[-1]:\n        return max(arr[-1] + arr[-2], max_sum(arr[:-2]))\n    else:\n        return max_sum(arr[1:])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    A sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Check if the array is empty or contains only one element\n    if len(arr) <= 1:\n        return 0\n    \n    # Initialize variables to store the current maximum sum and the sum of the previous element\n    current_sum = arr[0]\n    previous_sum = arr[0]\n    \n    # Iterate over the array\n    for i in range(1, len(arr)):\n        # Check if the current element is increasing or decreasing\n        if arr[i] < arr[i-1]:\n            # If increasing, update the current maximum sum and continue with the next element\n            current_sum += arr[i]\n            previous_sum = current_sum\n        else:\n            # If decreasing, update the previous maximum sum and continue with the current element\n            current_sum = previous_sum\n            previous_sum = current_sum + arr[i]\n            \n    return current_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr\n    \n    n = len(arr)\n    dp = [0] * n\n    \n    # Initialize the first and last element of the dp array\n    dp[0] = arr[0]\n    dp[n-1] = arr[n-1]\n    \n    # Calculate the sum of the subarrays for increasing and decreasing arrays\n    for i in range(1, n-1):\n        if arr[i] < arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = dp[i-1] - arr[i-1]\n            \n    # Initialize the maximum sum of the subarrays\n    max_sum_inc = max(dp[0:n-1])\n    max_sum_dec = max(dp[1:n])\n    \n    # Find the maximum sum of the subarrays that are both increasing and decreasing\n    for i in range(2, n):\n        if dp[i-1] > dp[i]:\n            max_sum_inc = max(max_sum_inc, dp[i-1] + dp[i])\n        else:\n            max_sum_dec = max(max_sum_dec, dp[i] - dp[i-1])\n    \n    # Return the maximum sum of the subarrays that are both increasing and decreasing\n    return max(max_sum_inc, max_sum_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    max_sum = float('-inf')\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = arr[i]\n        if arr[i] >= arr[i-1]:\n            max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            # Check for increasing subsequence\n            if arr[i] > arr[i+2] and arr[i+1] < arr[i+2]:\n                continue\n            elif arr[i] > arr[i+1] and arr[i+1] < arr[i+2]:\n                continue\n            else:\n                # Calculate sum of increasing subsequence\n                sum = arr[i] + arr[i+1]\n                if sum > max_sum:\n                    max_sum = sum\n\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number / x) / 2\n    while y - x > 0.000001:\n        x = y\n        y = (x + number / x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n\n    Args:\n        number (int): The number for which to compute the square root.\n\n    Returns:\n        float: The square root of the input number using the babylonian method.\n    \"\"\"\n\n    # initialize variables for iterations and sum of squares\n    i = 1\n    s = 0\n\n    # loop until the sum of squares converges to within a tolerance\n    while abs(s * i - number) > 0.0001:\n        i += 1\n        s += (number / (2 * i - 1)) ** 2\n\n    # return the final value of the sum of squares\n    return i - 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables to keep track of iterations and square root\n    iterations = 0\n    current_guess = number / 2.0\n    previous_guess = 0.0\n\n    # Calculate the square root using the babylonian method\n    while abs(current_guess**2 - number) > 0.001:\n        iterations += 1\n        previous_guess = current_guess\n        current_guess = (number/current_guess + previous_guess/current_guess) / 2.0\n\n    # Return the result\n    return iterations, current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize a variable to track the number of iterations\n    iterations = 0\n    # Set the initial estimate of the square root\n    x = number / 2\n    # Set the tolerance level for the iteration\n    tolerance = 1e-6\n    # Perform the iteration until the desired tolerance is reached\n    while abs(x**2 - number) > tolerance:\n        # Update the estimate by taking the average of the current estimate and the square of the previous estimate\n        x = (x + number / x) / 2\n        # Increment the number of iterations\n        iterations += 1\n    # Return the estimate of the square root and the number of iterations\n    return x, iterations"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a number using the babylonian method.\n    '''\n    if number < 0:\n        print('Cannot compute square root of negative number')\n        return None\n    \n    low = 0.0\n    high = number\n    root = 0.0\n    \n    while abs(root**2 - number) > 0.00001:\n        mid = (low + high) / 2.0\n        root = mid\n        if root**2 < number:\n            low = mid\n        else:\n            high = mid\n    \n    print('The square root of', number, 'is approximately', root)\n    return root"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    y = (x+number/x)/2\n    while abs(x-y) > 0.00001:\n        x = y\n        y = (x+number/x)/2\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number//x) / 2\n    while abs(y-x) > 0.00001:\n        x = y\n        y = (x + number//x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    prev_guess = 1\n    guess = prev_guess\n    \n    while True:\n        next_guess = (prev_guess + number/prev_guess) / 2\n        if abs(next_guess - guess) < 0.00001:\n            return next_guess\n        prev_guess = guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 0.5 * (number + 1.0)\n    x1 = x0 + 1.0\n    x2 = x1 + 1.0\n    x3 = x2 + 1.0\n    x4 = x3 + 1.0\n    x5 = x4 + 1.0\n    x6 = x5 + 1.0\n    x7 = x6 + 1.0\n    x8 = x7 + 1.0\n    x9 = x8 + 1.0\n    x10 = x9 + 1.0\n    x11 = x10 + 1.0\n    x12 = x11 + 1.0\n    x13 = x12 + 1.0\n    x14 = x13 + 1.0\n    x15 = x14 + 1.0\n    x16 = x15 + 1.0\n    x17 = x16 + 1.0\n    x18 = x17 + 1.0\n    x19 = x18 + 1.0\n    x20 = x19 + 1.0\n    x21 = x20 + 1.0\n    x22 = x21 + 1.0\n    x23 = x22 + 1.0\n    x24 = x23 + 1.0\n    x25 = x24 + 1.0\n    x26 = x25 + 1.0\n    x27 = x26 + 1.0\n    x28 = x27 + 1.0\n    x29 = x28 + 1.0\n    x30 = x29 + 1.0\n    x31 = x30 + 1.0\n    x32 = x31 + 1.0\n    x33 = x32 + 1.0\n    x34 = x33 + 1.0\n    x35 = x34 + 1.0\n    x36 = x35 + 1.0\n    x37 = x36 + 1.0\n    x38 = x37 + 1.0\n    x39 = x38 + 1.0\n    x40 = x39 + 1.0\n    x41 = x40 + 1.0\n    x42 = x41 + 1.0\n    x43 = x42 + 1.0\n    x44 = x43 + 1.0\n    x45 = x44 + 1.0\n    x46 = x45 + 1.0\n    x47 = x46 + 1.0\n    x48 = x47 + 1.0\n    x49 = x48 + 1.0\n    x50 = x49 + 1.0\n    x51 = x50 + 1.0\n    x52 = x51 + 1.0\n    x53 = x52 + 1.0\n    x54 = x53 + 1.0\n    x55 = x54 + 1.0\n    x56 = x55 + 1.0\n    x57 = x56 + 1.0\n    x58 = x57 + 1.0\n    x59 = x58 + 1.0\n    x60 = x59 + 1.0\n    x61 = x60 + 1.0\n    x62 = x61 + 1.0\n    x63 = x62 + 1.0\n    x64 = x63 + 1.0\n    x65 = x64 + 1.0\n    x66 = x65 + 1.0\n    x67 = x66 + 1.0\n    x68 = x67 + 1.0\n    x69 = x68 + 1.0\n    x70 = x69 + 1.0\n    x71 = x70 + 1.0\n    x72 = x71 + 1.0\n    x73 = x72 + 1.0\n    x74 = x73 + 1.0\n    x75 = x74 + 1.0\n    x76"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    lower_bound = 0\n    upper_bound = number\n    epsilon = 0.00001\n\n    while abs(upper_bound - lower_bound) > epsilon:\n        mid_point = (upper_bound + lower_bound) / 2\n        if mid_point ** 2 < number:\n            lower_bound = mid_point\n        else:\n            upper_bound = mid_point\n\n    return round(upper_bound, 10)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    n = len(s)\n    # create a 2D table to store the length of longest palindromic subsequence for all substrings of length i\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # base case: all substrings of length 1 are palindromic subsequences\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill in the rest of the table\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            # check if s[i:j+1] is a palindromic substring\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # return the length of the longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize two variables to store the length of the longest palindrome substring\n    # and the start index of the longest palindrome substring\n    length = 1\n    start = 0\n\n    # Traverse through the string and check for palindrome substrings\n    for i in range(len(str)):\n        # Check if the substring starting from the i-th index is palindrome\n        for j in range(i, len(str)):\n            # Check if the substring starting from the j-th index is palindrome\n            if str[i:j+1] == str[i:j+1][::-1]:\n                # If it is, check if its length is greater than the current length\n                if j-i+1 > length:\n                    length = j-i+1\n                    start = i\n\n    # Return the length and start index of the longest palindrome substring\n    return length, start"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    n = len(str) \n    # create a list to store length of longest palindromic subsequence ending at each index \n    lps_list = [1] * n \n\n    # compute the length of longest palindromic subsequence ending at index i \n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            lps_list[i] = lps_list[i-1] + 1 \n        else: \n            # if str[i] is not equal to str[i-1], then we need to check if the \n            # length of the subsequence ending at index i-1 can be extended by \n            # expanding the range to include str[i] \n            max_len = 0 \n            for j in range(i-lps_list[i-1]+1): \n                if str[j] == str[i-j-1]: \n                    # check if the length of the subsequence starting from j and ending at i-1 is greater than max_len \n                    if lps_list[j] + 1 > max_len: \n                        max_len = lps_list[j] + 1 \n            lps_list[i] = max_len \n\n    # return the length of the longest palindromic subsequence \n    return max(lps_list) "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    n = len(str) \n    # Find the length of the given string\n\n    # Initialize variables to store the lengths of longest palindromic subsequences for odd and even lengths of strings respectively\n    odd_length = 1\n    even_length = 1\n\n    # Check for odd and even lengths of strings respectively\n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            # If the current character is same as the previous character, check if it forms a palindrome\n            odd_length = max(odd_length, even_length+2) \n        else: \n            # If the current character is different from the previous character, update the length of the longest palindromic subsequences for odd and even lengths of strings respectively\n            odd_length = even_length+1\n            even_length = 1\n\n    # Return the maximum length of the longest palindromic subsequences\n    return max(odd_length, even_length) "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(string):\n    if not string:\n        return 0\n\n    n = len(string)\n    dp = [1] * n\n    max_length = 1\n\n    for i in range(1, n):\n        if string[i] == string[i - 1]:\n            dp[i] = dp[i - 1] + 2\n            max_length = max(max_length, dp[i])\n        else:\n            j = 0\n            while j < i and string[j]!= string[i]:\n                j += dp[j]\n            dp[i] = j + 1\n            max_length = max(max_length, dp[i])\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(string):\n    # create a 2D array to store the length of the longest palindromic subsequence ending at each index\n    length = [[0] * len(string) for _ in range(len(string))]\n\n    # initialize the length of the longest palindromic subsequence to 1 for each index\n    for i in range(len(string)):\n        length[i][i] = 1\n\n    # initialize the length of the longest palindromic subsequence ending at the center to 1\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            length[i][i + 1] = 2\n\n    # fill in the length array using dynamic programming\n    for i in range(len(string) - 2, -1, -1):\n        for j in range(i + 2, len(string)):\n            if string[i] == string[j]:\n                length[i][j] = length[i + 1][j - 1] + 2\n            else:\n                length[i][j] = max(length[i + 1][j], length[i][j - 1])\n\n    # find the length of the longest palindromic subsequence\n    max_length = 0\n    for i in range(len(string)):\n        max_length = max(max_length, length[0][i])\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    # Initialize a list to store the lengths of subsequences\n    L = [1] * n\n    # Initialize two pointers, i and j, to the start and end of the string\n    i = 0\n    j = 0\n    # Iterate over the string and calculate the lengths of subsequences\n    while i < n - 1:\n        if s[i] == s[j]:\n            # If the current characters are equal, expand the subsequence by 1\n            i += 1\n            j += 1\n            L[i] = j - i\n            # Update the longest subsequence if the current subsequence is longer\n            if L[i] > L[j]:\n                L[j] = L[i]\n        elif j > 0:\n            # If the current characters are not equal, move the window to the left by 1\n            j = max(j - 1, 0)\n        else:\n            # If the current characters are not equal and there is no palindrome left, move the window to the right by 1\n            i += 1\n    # Return the length of the longest palindromic subsequence\n    return max(L)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize variables\n    n = len(str)\n    max_length = 1\n    start_index = 0\n\n    # Iterate through the string\n    for i in range(n):\n\n        # Compare with the characters on both ends of the current substring\n        substring = str[i:i+2]\n        if substring == substring[::-1]:\n            length = 2\n            if i - 1 >= 0 and substring == str[i-1:i+1]:\n                length += 1\n            if i + 1 < n and substring == str[i+1:i+3]:\n                length += 1\n\n            # Update max length and start index if current substring is longer\n            if length > max_length:\n                max_length = length\n                start_index = i - max_length + 1\n\n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    # creating a 2D array to store the length of longest palindromic subsequence for every substring\n    dp = [[0] * n for i in range(n)]\n    \n    # creating a character array to store characters of the longest palindromic subsequence\n    lps_str = \"\"\n    \n    # iterating through all substrings of the given string\n    for i in range(n):\n        # if the current character is the same as the next character, then the length of the longest palindromic subsequence\n        # till that point is one more than the length of the longest palindromic subsequence till that point.\n        if str[i] == str[i+1]:\n            dp[i][i+1] = dp[i][i] + 2\n            lps_str += str[i]\n        else:\n            # otherwise, the length of the longest palindromic subsequence till that point is one more than the\n            # maximum of the length of the longest palindromic subsequence till that point for the substrings that\n            # start from i to j where j is less than or equal to i+1.\n            max_length = 1\n            for j in range(i, n):\n                if str[i] == str[j]:\n                    max_length = max(max_length, dp[i][j-1])\n            dp[i][i+1] = max_length + 1\n            lps_str += str[i]\n    \n    # finding the maximum length among all the lengths of longest palindromic subsequences\n    max_length = max(dp[i][i] for i in range(n))\n    \n    # returning the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n\n    # Create a 2D array to store the length of the longest palindromic subsequence ending at index i and j\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the base case when the string is a single character\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill in the DP table using dynamic programming\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/(n-1)) + (1/(n-2)) +... + (1/(n-n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/2) + (1/3) + (1/4) + (1/5) +... + (1/n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / (2 * n - 1) + harmonic_sum(n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # initialize variables\n    sum_n_minus_one = 0\n    sum_n = 0\n    sum_harmonic = 0\n\n    # calculate the sum of n-1 and n\n    for i in range(n):\n        sum_n_minus_one += 1 / i\n        sum_n += 1 / (i+1)\n\n    # calculate the harmonic sum\n    for i in range(n):\n        sum_harmonic += 1 / (i+1)\n\n    # return the harmonic sum\n    return sum_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0.5 * (n * (n-1))\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 1\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #creating a set from the second array to remove duplicates\n    set_nums2 = set(array_nums2)\n    #creating an empty set to store the intersection\n    intersection = set()\n    #iterating through the first array\n    for num in array_nums1:\n        #if the number is in the second array and not already in the intersection set, add it to the intersection set\n        if num in set_nums2 and num not in intersection:\n            intersection.add(num)\n    #returning the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty dictionary to store the count of each element in array_nums1\n    count_dict = {}\n    # Iterate through each element in array_nums1\n    for num in array_nums1:\n        # If the element is already in the count dictionary, increment its count by 1\n        if num in count_dict:\n            count_dict[num] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            count_dict[num] = 1\n    # Initialize an empty list to store the intersection of array_nums1 and array_nums2\n    intersection_list = []\n    # Iterate through each element in array_nums2\n    for num in array_nums2:\n        # If the element is in the count dictionary and its count is greater than 0, add it to the intersection list\n        if num in count_dict and count_dict[num] > 0:\n            intersection_list.append(num)\n            # Decrement the count of the element in the count dictionary by 1\n            count_dict[num] -= 1\n    # Return the intersection list\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection_set = set(array_nums1) & set(array_nums2)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create a dictionary to store the elements of array_nums1 as keys and their frequency as values\n    freq_dict1 = {}\n    for num in array_nums1:\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        else:\n            freq_dict1[num] = 1\n\n    # Create a dictionary to store the elements of array_nums2 as keys and their frequency as values\n    freq_dict2 = {}\n    for num in array_nums2:\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        else:\n            freq_dict2[num] = 1\n\n    # Find the common elements in the two dictionaries\n    common_elements = [key for key in freq_dict1 if key in freq_dict2 and freq_dict1[key] == freq_dict2[key]]\n\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set of numbers from array_nums2\n    set_nums2 = set(array_nums2)\n    # Iterate over array_nums1 and check if each number is in set_nums2\n    intersection = []\n    for num in array_nums1:\n        if num in set_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty list to store the common elements\n    common_elements = []\n\n    # Iterate through the first array and check if each element exists in the second array\n    for num in array_nums1:\n        if num in array_nums2:\n            # If the element exists in the second array, append it to the common_elements list\n            common_elements.append(num)\n\n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array containing the common elements of the two arrays.\n    \"\"\"\n    common_elements = []\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    for num in set1:\n        if num in set2:\n            common_elements.append(num)\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    result = []\n    for num in array_nums1:\n        if num in array_nums2:\n            result.append(num)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Find the intersection by looping through array_nums2 and checking if each element is in the dictionary\n    intersection = []\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the number of occurrences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element, and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(element)\n        new_list.append(lst[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.insert(0, list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i-1])\n    result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the element before each element in the list.\n\n    Parameters:\n    lst: list of elements\n    element: element to insert\n\n    Returns:\n    list: a new list with the element inserted before each element in the original list\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    # Loop through the list and insert the element before each element\n    for i in range(len(list)):\n        list.insert(i, element)\n\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n\n    result = []\n\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        abs_value = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n\n        polar_num = (abs_value, angle)\n        result.append(polar_num)\n\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        real, imag = cmath.polar(number)\n        # Calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        # Print the polar coordinates\n        print(f\"Magnitude: {magnitude}, Angle: {angle}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        if isinstance(num, complex):\n            r = cmath.sqrt(num.real**2 + num.imag**2)\n            theta = cmath.phase(num)\n            polar_num = (r, theta)\n            print(polar_num)\n        else:\n            print(\"Invalid input\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    # Create an empty list to store the polar coordinates\n    polar_coords = []\n    \n    # Loop through each complex number in the input list\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        # Append the polar coordinates to the polar_coords list\n        polar_coords.append((r, theta))\n    \n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_numbers = []\n    for number in numbers:\n        r, theta = cmath.polar(number)\n        polar_numbers.append((r, theta))\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            angle = cmath.phase(num)\n            magnitude = cmath.abs(num)\n            result.append((angle, magnitude))\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Loop through each number in the list\n    for num in numbers:\n        # Convert the number to complex form\n        complex_num = complex(num)\n        # Calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(complex_num.real**2 + complex_num.imag**2)\n        angle = cmath.phase(complex_num)\n        # Print the polar coordinates of the complex number\n        print(\"{:.2f}+{}j\".format(magnitude, angle))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        x = num.real\n        y = num.imag\n        magnitude = cmath.sqrt(x**2 + y**2)\n        angle = cmath.phase(num)\n        polar_coords.append((magnitude, angle))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        modulus = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        print(f\"The complex number {num} is represented as a point in the {modulus} plane with an angle of {phase} radians.\")\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    '''\n    Returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j == i + n:\n                comb.append((l[i], l[j-1], l[j]))\n            elif j == len(l):\n                comb.append((l[i], l[j-1]))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    This function takes in a list and length n and generates all combinations (with repetition) of the elements of the list.\n    It returns a list of tuples containing each combination.\n    '''\n    result = []\n    for i in range(len(lst)-n+1):\n        combo = tuple(lst[i:i+n])\n        result.append(combo)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = list(combinations_with_replacement(l, n))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # function to generate all combinations of length n with replacement of elements of list\n    def generate_combinations(l, n):\n        return list(combinations_with_replacement(l, n))\n\n    # call the function to generate all combinations of length n with replacement of elements of list\n    result = generate_combinations(l, n)\n    \n    # convert the result to a list of tuples\n    result = [tuple(x) for x in result]\n    \n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations with repetition\n    comb = list(combinations_with_replacement(l, n))\n\n    # Return the list of combinations as a list of tuples\n    return [(tuple(i)) for i in comb]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[j] for j in range(i, i+n))\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a boolean list of size n+1 to store prime numbers\n    isPrime = [True] * (n+1)\n    isPrime[0] = False\n    isPrime[1] = False\n    \n    # Sieve of Eratosthenes to find all prime numbers up to n\n    for i in range(2, int(n**0.5)+1):\n        if isPrime[i]:\n            for j in range(i*i, n+1, i):\n                isPrime[j] = False\n    \n    # Count the number of prime numbers less than n\n    count = 0\n    for i in range(n+1):\n        if isPrime[i]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number as input and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    i = 2\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # if the first tuple is greater than the second tuple\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Ensure that both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples have different lengths.'\n    \n    # Compare each element of the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return test_tup1\n        elif test_tup1[i] < test_tup2[i]:\n            return test_tup2\n        else:\n            continue\n    \n    # If all elements are the same, return the first tuple\n    return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # compare the elements of the two tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            # if the first tuple is smaller, swap the elements\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n\n    return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # iterate over the tuples and compare the elements\n    for i in range(len(test_tup1)):\n        # compare the elements of the tuples and store the maximum value in the result tuple\n        if test_tup1[i] > test_tup2[i]:\n            result_tup = (test_tup1[i], test_tup2[i])\n        else:\n            result_tup = (test_tup2[i], test_tup1[i])\n    return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize max_tup with the first tuple\n    max_tup = test_tup1\n    \n    # check if the second tuple is greater than the first one\n    if max_tup < test_tup2:\n        max_tup = test_tup2\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the maximum value in each tuple.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    return (max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the input tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return\n    \n    # Initialize variables to hold the maximum values for each tuple\n    max_tup1 = max_tup2 = None\n    \n    # Iterate through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # Check if the current element of the first tuple is greater than the current maximum element\n        if test_tup1[i] > max_tup1 or (max_tup1 is None and i == 0):\n            max_tup1 = test_tup1[i]\n        \n        # Check if the current element of the second tuple is greater than the current maximum element\n        if test_tup2[i] > max_tup2 or (max_tup2 is None and i == 0):\n            max_tup2 = test_tup2[i]\n            \n    # Return the maximum values as a tuple\n    return (max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1[0], test_tup2[0])\n    if max_val == test_tup1[0]:\n        return test_tup1[1], test_tup2[1]\n    else:\n        return test_tup2[0], test_tup1[1]"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # Taking input from the user\n    tup1 = tuple(int(x) for x in input(\"Enter the first tuple elements: \").split())\n    tup2 = tuple(int(x) for x in input(\"Enter the second tuple elements: \").split())\n\n    # Finding the maximum element in each tuple and then finding the element with maximum value\n    max1 = max(tup1)\n    max2 = max(tup2)\n\n    # Checking if the maximum element in either tuple is greater than the other element\n    # If yes, then swapping the tuples to get the maximum element in the first tuple\n    if max1 > max2:\n        tup1, tup2 = tup2, tup1\n\n    # Printing the maximum elements in the two tuples\n    print(\"The maximum element in the first tuple is:\", max1)\n    print(\"The maximum element in the second tuple is:\", max2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a counter variable and a list to store the prime numbers\n    count = 0\n    primes = []\n    \n    # Use a loop to generate the first 100 primes and check if they are newman-shanks-williams primes\n    for i in range(100):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            if count == n:\n                return i\n            primes.append(i)\n    \n    # If no prime number is found after 100 iterations, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the list of primes to the first 10 primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    # Initialize the counter of primes to 0\n    count = 0\n    \n    # Loop through the list of primes and check if the nth prime is already in the list\n    for prime in primes:\n        if count == n:\n            return prime\n        elif prime ** 2 > n:\n            return primes[count-1]\n        elif prime ** 2 + 2 * prime + 1 > n:\n            return primes[count-2]\n        count += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    i = 5\n    while i <= 100:\n        if i % 2 == 0 or i % 3 == 0:\n            i += 2\n        else:\n            j = 5\n            while j <= 100:\n                if i ** j % 12 == 1:\n                    return i\n                j += 2\n            i += 2\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(n):\n        '''\n        Helper function to find the nth newman-shanks-williams prime number.\n        '''\n        num = 3\n        count = 0\n        while count < n:\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 2\n\n    return newman_shanks_williams(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    \n    # Initialize the list of primes up to the square root of n\n    primes = [2, 3]\n    sqrt_n = int(n ** 0.5) + 1\n    for i in range(5, sqrt_n + 1, 6):\n        if n % i == 0:\n            raise ValueError(\"n is not a newman\u2013shanks\u2013williams prime.\")\n        if i > 15:\n            break\n        primes.append(i)\n    \n    # Calculate the nth newman\u2013shanks\u2013williams prime number\n    count = 0\n    for prime in primes:\n        count += n // prime\n        if count == n:\n            return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    i = 2\n    while True:\n        if i % 2 == 0:\n            i += 1\n            continue\n        for j in range(3, int(i**0.5)+1, 2):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n            if count == n:\n                return i\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b = 2, 2\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        if b == 2:\n            count += 1\n    return a\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        i = 5\n        while i <= n:\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return i\n            i += 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize a list to store prime numbers\n    prime_list = []\n    # Initialize a variable to keep track of the current prime number\n    current_prime = 2\n    \n    # Loop until we have found the nth newman-shanks-williams prime number\n    while len(prime_list) < n:\n        # Check if the current prime number is a newman-shanks-williams prime\n        if is_newman_shanks_williams_prime(current_prime):\n            # Add the current prime number to the list of prime numbers\n            prime_list.append(current_prime)\n        # If the current prime number is not a newman-shanks-williams prime,\n        # increment it and try again\n        else:\n            current_prime += 1\n    \n    # Return the nth newman-shanks-williams prime number\n    return prime_list[n-1]\n\ndef is_newman_shanks_williams_prime(n):\n    \"\"\"\n    This function checks if a given number is a newman-shanks-williams prime.\n    \"\"\"\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Initialize the variables for the remainder and the sum of divisors\n    remainder = 0\n    sum_of_divisors = 0\n    \n    # Loop from 2 to the square root of the number\n    for i in range(2, int(n ** 0.5) + 1):\n        # If the number is divisible by the current divisor\n        if n % i == 0:\n            # Subtract the divisor from the number and add the result to the remainder\n            remainder = n - i\n            # Add the divisor to the sum of divisors\n            sum_of_divisors += i\n            # Check if the remainder is divisible by the current divisor\n            if remainder % i == 0:\n                # Subtract the divisor from the remainder and add the result to the sum of divisors\n                sum_of_divisors += remainder // i\n                # The number is not a newman-shanks-williams prime\n                return False\n    \n    # If the number is not divisible by any divisor greater than the square root of the number,\n    # it is a newman-shanks-williams prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n\n    # Define the first five newman-shanks-williams primes\n    primes = [2, 3, 5, 7, 11]\n\n    # Check if the sum of the first n-1 newman-shanks-williams primes is equal to 2n-1\n    for i in range(n-1):\n        if primes[i] + primes[i+1] == 2*n-1:\n            return primes[i] + 13\n        elif primes[i] + primes[i+1] == 2*n:\n            return primes[i] - 1\n\n    # If the sum of the first n-1 newman-shanks-williams primes is not equal to 2n-1, then the nth newman-shanks-williams prime is the sum of the first n-1 newman-shanks-williams primes minus one\n    return sum(primes[:n-1]) - 1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have equal lengths\"\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the two tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples must be of equal length.'\n    \n    # check if both tuples contain only numbers\n    for num in test_tup1 + test_tup2:\n        if not isinstance(num, (int, float)):\n            return 'Error: Tuples must contain only numbers.'\n    \n    # perform element-wise division operation\n    result = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n    \n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have equal length\")\n    # create a new tuple with division result element-wise\n    result_tup = tuple(elem1 / elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # check if the number of elements in each tuple is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Number of elements in each tuple is not equal.\")\n        return\n    \n    # loop through each element of the tuples and perform division\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    \n    # return the resultant tuple\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i]!= 0:\n            result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements!\")\n    result_list = []\n    for i in range(len(test_tup1)):\n        result = test_tup1[i] / test_tup2[i]\n        result_list.append(result)\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i]!= 0:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n        else:\n            result_tup += (None,)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    # create an empty list to store the result\n    result = []\n    # iterate over each element in the tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division\n        result.append(test_tup1[i] / test_tup2[i])\n    # return the result tuple\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the tuples should be same\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The number of elements in the tuples must be equal.\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Cannot divide by zero.\")\n            return\n\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    first_part_length = L\n    \n    # Create an empty list to store the first part of the list\n    first_part = []\n    \n    # Iterate through the list\n    for item in list1:\n        # Add each item to the first part of the list\n        first_part.append(item)\n        \n        # If the length of the first part of the list exceeds L, break out of the loop and start the second part of the list\n        if len(first_part) == first_part_length:\n            break\n    \n    # Create an empty list to store the second part of the list\n    second_part = []\n    \n    # Iterate through the rest of the list\n    for item in list1:\n        # Add each item to the second part of the list\n        second_part.append(item)\n        \n        # If the length of the second part of the list exceeds L, break out of the loop and stop the iteration\n        if len(second_part) == L:\n            break\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes a list and an integer L as input and splits it into two parts\n    where the length of the first part is L. It returns a tuple containing the two parts.\n    \"\"\"\n    if len(lst) % L!= 0:\n        raise ValueError(\"List length must be a multiple of L\")\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        first_half = list1[:L]\n        second_half = list1[L:]\n    else:\n        first_half = list1[:L+1]\n        second_half = list1[L+1:]\n    return first_half, second_half"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Create an empty list to store the first part of the list\n    first_part = []\n    \n    # Loop through the list and add elements to the first part until the length of the first part reaches L\n    while len(first_part) < L:\n        first_part.append(lst.pop(0))\n    \n    # Create an empty list to store the second part of the list\n    second_part = []\n    \n    # Loop through the list and add elements to the second part until the length of the second part reaches L\n    while len(second_part) < L:\n        second_part.append(lst.pop(-1))\n    \n    # Return a tuple containing the two parts of the list\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) % 2 == 0:\n        mid = len(list1) // 2\n        list2 = list1[mid:]\n        list1 = list1[:mid]\n    else:\n        mid = (len(list1) + 1) // 2\n        list2 = list1[mid+1:]\n        list1 = list1[:mid+1]\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 1:\n        L -= 1\n    \n    if L < 0:\n        return tuple()\n    \n    mid = len(list1) // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is valid\n    if L <= 0:\n        return \"Error: L should be greater than 0\"\n    # Check if L is smaller than the length of list1\n    elif L > len(list1):\n        return \"Error: L should be smaller than or equal to the length of the list\"\n    else:\n        # Split list1 into two parts\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts in a tuple\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    The first part of the list is returned as a tuple.\n    '''\n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n\n    # Check if the length of the list is greater than or equal to L\n    if len(list1) >= L:\n        # Split the list into two parts using slicing\n        first_part = list1[:L]\n        second_part = list1[L:]\n        # Return the resulting lists as a tuple\n        return (first_part, second_part)\n    else:\n        # Raise an error if the length of the list is less than L\n        raise ValueError(\"The length of the list must be greater than or equal to L.\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Define the number of dog years in a month\n    dog_years = [0, 12, 25, 38, 52, 66, 79, 93, 106, 120, 134, 148, 162, 176, 190, 204, 218, 232, 246]\n    \n    # Calculate the number of dog years based on the height in inches\n    dog_age = h_age / 12\n    for i in range(1, len(dog_years)):\n        if dog_age >= dog_years[i]:\n            dog_age -= dog_years[i - 1]\n            break\n    \n    return int(dog_age)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    dog_age_in_years = 7 * (h_age//7) + (h_age % 7)\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_dog_years = 7 * h_age\n    return dog_age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculating dog's years\n    dog_years = 7 * int(h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * int(h_age)\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise TypeError('Input must be a list.')\n    if not isinstance(step, int):\n        raise TypeError('Step must be an integer.')\n    if step <= 0:\n        raise ValueError('Step must be greater than 0.')\n\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Check if step is valid\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer.\")\n    \n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Loop through the list S and split it for every nth element\n    for i in range(0, len(S), step):\n        # Add the current sublist to the result list\n        result.append(S[i:i+step])\n    \n    # Return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Convert the input list to a generator\n    S = (x for x in S)\n\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Iterate over the input list and split it every nth element\n    for i, x in enumerate(S):\n        if i % step == 0:\n            result.append([x])\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    i = 0\n    results = []\n    while i < n:\n        if i % step == 0:\n            results.append(S[i:i+step])\n        i += 1\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n\n    # Convert the input list to a set to remove duplicates\n    S = set(S)\n\n    # Split the list into chunks of n elements\n    chunks = [S[i:i+step] for i in range(0, len(S), step)]\n\n    # Return the resulting list\n    return chunks"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = len(S)\n    result = []\n    i = 0\n    while i < L:\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        # If the length of the list is divisible by the step size, then we can split it into n equal parts\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        # If the length of the list is not divisible by the step size, then we need to split it into n+1 equal parts\n        return [S[i:i+step+1] for i in range(0, len(S), step+1)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the volume of the cube\n    volume = l**3\n    \n    # Calculate the lateral surface area of the cube\n    lateral_surface = 6 * volume / 5\n    \n    # Return the lateral surface area of the cube\n    return lateral_surface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    area = 6 * l ** 2\n    \n    # Return the lateral surface area\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l) ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l * l) + (2 * l * l) + (2 * l * l)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        sum += count**2\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the odd number to the sum\n        sum += i**2\n    \n    # return the sum of squares\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of squares of odd numbers\n    sum_of_squares = 0\n    # Initialize a variable to store the current number\n    current_number = 1\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Update the current number by incrementing it by 2\n        current_number += 2\n        # Add the square of the current number to the sum of squares of odd numbers\n        sum_of_squares += current_number**2\n        \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i*i\n        return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    current_number = 1\n    count = 0\n\n    while count < n:\n        if current_number % 2!= 0:\n            sum_of_squares += current_number ** 2\n            count += 1\n        current_number += 2\n\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    else:\n        for i in range(3, n+1, 2):\n            print(\"*\"*(2*i-1))\n        print(\"*\"*(2*n-1))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Find then'th star number.\n    \"\"\"\n    # initialize the star number as 1\n    star_num = 1\n    # loop through each digit in the integer representation of n\n    for digit in str(n):\n        # multiply the current digit by the previous star number\n        star_num *= int(digit)\n    # return the final result\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the count variable to 0\n    count = 0\n    # loop through the number of iterations specified by the user\n    for i in range(1, n+1):\n        # loop through the range of numbers from 1 to i\n        for j in range(1, i+1):\n            # print a star character for each number in the range\n            print('*', end='')\n        # print a newline character after each number is printed\n        print()\n        # increment the count variable\n        count += 1\n    # print the final value of the count variable\n    print('The', n, 'th star number is', count)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Calculate the base star number\n    base_star = 1\n\n    # Loop through the sequence of n numbers\n    for i in range(n):\n        # Print the current star number\n        print(base_star)\n\n        # Update the base star number by multiplying by 10\n        base_star *= 10"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        count = 1\n        result = \"\"\n        while count <= n:\n            result += \"*\"\n            count += 1\n        return result[:-1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize the first 50 numbers as the stars\n    stars = [1] * 50\n\n    # Calculate the sum of the first 25 numbers\n    sum_first_25 = sum(stars[:25])\n\n    # Calculate the sum of the last 25 numbers\n    sum_last_25 = sum(stars[-25:])\n\n    # Calculate the sum of the first n numbers\n    sum_n = sum(stars[:n])\n\n    # Return the difference between the sum of the first n numbers and the sum of the first 25 numbers\n    return sum_n - sum_first_25"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the result to 0\n    result = 0\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Add i to the result\n        result += i\n        # If the result is greater than n, exit the loop\n        if result > n:\n            break\n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the first star number to 1\n    first_star = 1\n    # Initialize the second star number to 1\n    second_star = 1\n    # Loop through the first n-1 stars\n    for i in range(n-1):\n        # Add the previous two star numbers to get the next star number\n        next_star = first_star + second_star\n        # Update the values of first_star and second_star for the next iteration\n        first_star = second_star\n        second_star = next_star\n    # Return the last star number\n    return second_star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return str(n) + find_star_num(n-1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper() # converting string to upper case\n    ascii_dict = {chr(i):i for i in range(256)} # creating a dictionary with ascii values\n    return ascii_dict[k] # returning the ascii value of the character"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,\n       'm': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122,\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80,\n        'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90\n    }\n    return ascii_dict.get(k.lower(), None)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0  # initialize a counter\n    total_sum = 0  # initialize the sum\n\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:  # check if the number is even\n                count += 1  # increment the counter\n                total_sum += arr[i]  # add the even number to the sum\n\n    return total_sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Initialize the sum variable to zero\n    sum_even = 0\n    # Loop through the list and add even numbers to sum_even\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    # Loop through the list again and add even numbers at even positions to sum_even\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    # Return the sum\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even_at_even_index = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_even_at_even_index += arr[i]\n\n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even_even_index = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_of_even_even_index += arr[i]\n            count += 1\n    if count == 0:\n        print(\"No even numbers at even positions\")\n    else:\n        return sum_of_even_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n    \n    return even_sum, even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i**5 % 2 == 0:\n            sum += i**5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    for i in range(n):\n        sum_even += i*i*i*i*i*2\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum variable\n    sum_even_power = 0\n    # Loop through the first n even numbers\n    for i in range(2, n+1, 2):\n        # Calculate the sum of the first i even numbers raised to the fifth power\n        sum_even_power += i ** 5\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [i for i in range(2, n+1, 2)] # Generate a list of the first n even natural numbers\n    even_to_the_fifth_power = [num ** 5 for num in even_numbers] # Raise each even number to the fifth power\n    return sum(even_to_the_fifth_power) # Return the sum of the raised even numbers\n\nn = 100\nprint(even_Power_Sum(n)) # Output: 1180"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize variables to hold the sum and current number\n    total = 0\n    current = 2\n\n    # Loop through the first n even natural numbers\n    for i in range(n):\n        # Raise the current number to the fifth power\n        power = current ** 5\n\n        # Check if the raised number is even\n        if power % 2 == 0:\n            # Add the raised number to the sum\n            total += power\n\n        # Increment the current number\n        current += 2\n\n    # Return the sum of the even natural numbers raised to the fifth power\n    return total"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] - test_tup2[i],)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same number of elements.\"\n    \n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup += (test_tup1[i] - test_tup2[i],)\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(sub_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = tuple(0 for i in range(len(test_tup1)))\n    \n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding element of the second tuple from the first tuple\n        result_tup[i] = test_tup1[i] - test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients\n    even_sum = 0\n\n    # Iterate over the numbers from 0 to n\n    for i in range(n+1):\n        # Calculate the i-th binomial coefficient\n        coeff = math.comb(n, i)\n\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            even_sum += coeff\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables for sum and even index count\n    sum_even_coeff = 0\n    count_even_coeff = 0\n\n    # Calculate the even index binomial coefficients\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_coeff += math.comb(n, i)\n            count_even_coeff += 1\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(1, n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coeff\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n    for i in range(2, n+1):\n        coeff_sum += math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n        if i % 2 == 0:\n            coeff_sum *= 2\n    return int(coeff_sum)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    The binomial coefficient C(n,k) is given by:\n    C(n,k) = n! / (k! * (n-k)!)\n    \n    This function uses the math module in Python to compute factorials, so make sure it is imported.\n    '''\n\n    # Initialize sum to 0\n    sum_even = 0\n\n    # Loop through even indices\n    for k in range(2, n+1, 2):\n        # Compute C(n,k)\n        coeff = math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\n        # Add to sum if even\n        if k % 2 == 0:\n            sum_even += coeff\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Define the sum of even index binomial coefficients to zero\n    even_binomial_sum = 0\n    \n    # Loop through all possible values of k\n    for k in range(1, n+1):\n        # Calculate the value of the kth term of the binomial coefficient\n        binomial_term = math.comb(n, k)\n        \n        # Check if the value of k is even\n        if k % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            even_binomial_sum += binomial_term\n            \n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial_coeffs = 0\n    i = 0\n    while i <= n:\n        j = 0\n        while j <= n:\n            if i == 0 or j == 0 or i + j == n + 1:\n                sum_even_binomial_coeffs += math.comb(n, i, j)\n            j += 1\n        i += 1\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Calculate the even index binomial coefficients using recursion\n    def even_binomial_coefficient(n, k):\n        # Base case\n        if k == 0 or k == n:\n            return 1\n        # Recursive case\n        else:\n            return (n-k+1)*even_binomial_coefficient(n, k-1) + even_binomial_coefficient(n, k-2)\n\n    # Initialize the sum of even index binomial coefficients to 0\n    even_sum = 0\n\n    # Loop through all possible values of k\n    for k in range(1, n+1):\n        # Calculate the sum of even index binomial coefficients for k\n        even_sum += even_binomial_coefficient(n, k)\n\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    if n < 0:\n        return \"Error: n must be a positive integer\"\n\n    if n == 0 or n == 1:\n        return 0\n\n    if n % 2 == 0:\n        even_binomial = 2 * math.factorial(n - 2) / (math.factorial(n - 4) * math.factorial(2))\n    else:\n        even_binomial = math.factorial(n - 2) / (math.factorial(n - 4) * math.factorial(2))\n\n    return round(even_binomial, 6)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of the even-indexed binomial coefficients.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    elif n == 1:\n        return \"The sum of even-indexed binomial coefficients is 0.\"\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                sum += math.comb(n, i)\n        return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * (r**2)  # Formula for calculating the area of the cylinder\n    volume = (area * h) / 3.0  # Formula for calculating the volume of the cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume using the formula V=\u03c0r\u00b2h\n    V = (3.14159*r**2*h)/3\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = 3.14159265358979323846 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume of the cylinder using the formula V = 1/3 * \u03c0 * r^2 * h\n    V = (1/3) * 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = (1/3) * 3.14 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * (r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14159 * r * r * h\n    return v"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Create an empty dictionary to store the filtered entries\n    filtered_dict = {}\n    \n    # Loop through each key-value pair in the original dictionary\n    for key,value in dict.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the key-value pair to the filtered dictionary\n            filtered_dict[key] = value\n    \n    # Return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Initialize a counter to keep track of the number of elements before the tuple element\n    count = 0\n    \n    # Loop through the tuple and count the number of elements before the tuple element\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i]!= test_tup[i+1]:\n            count += 1\n    \n    # Return the count of elements before the tuple element\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            if test_tup[i]!= test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                break\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal = decagonal * 10 + i\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = 0\n    for i in range(1,n+1):\n        decagonal_number += (i**2*3**i)\n    return decagonal_number\n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Function to calculate the nth decagonal number\n    def nth_decagonal(n): \n        return ((2*n) ** 2 + (2 * n + 1) ** 2) ** 0.5\n    # Calculate the nth decagonal number\n    decagonal_num = nth_decagonal(n)\n    # Check if the number is a decagonal number\n    if decagonal_num == int(decagonal_num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Decagonal numbers are numbers that can be expressed as the sum of two smaller numbers in the form of a square.\n    # In decagonal numbers, the number of squares in the number is equal to the number of rows, where each row has the same number of squares.\n    # For example, the decagonal number 1234 is equal to 1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 25.\n\n    # In order to find the nth decagonal number, we need to find the sum of n rows of squares.\n    # We can do this by recursively adding the squares of each row to get the squares of the rows.\n    # We can then calculate the sum of these squares to get the nth decagonal number.\n\n    # Since we are working with decimal numbers, we need to find the sum of the squares of each decimal number up to n.\n    # We can use the formula sqrt(n) * sqrt(n + 1) to find the square root of the decimal number n.\n    # We can then use the formula x^2 = (sqrt(n) * sqrt(n + 1)) - (sqrt(n) * sqrt(n - 1)) to find the square of the decimal number n.\n\n    # To find the squares of each row, we can use the formula (x * (x + 1)) / 2 for each x from 1 to n.\n    # For example, if we want the squares of the first row, we can use (1 * (1 + 1)) / 2 = 1 + 2 = 3, and if we want the squares of the second row, we can use (2 * (2 + 1)) / 2 = 2 + 4 = 6, and so on.\n\n    # Now that we have the squares of each row, we can find the sum of these squares to get the sum of the squares of all the rows.\n    # We can then use the formula sum(rows) = (2 * n * (n + 1)) / 6, where n is the number of rows.\n\n    # Finally, we can calculate the nth decagonal number by adding the sum of the squares of each row.\n    # We can then use the formula sum(decagonal_numbers) = (2 * n * (n + 1)) / 6, where n is the number of decagonal numbers.\n\n    # We can implement this algorithm in the following Python function:\n\n    if n == 1:\n        return 1\n\n    # Find the sum of the squares of each row\n    rows = [0] * n\n    for i in range(1, n + 1):\n        rows[i - 1] = (i * (i + 1)) / 2\n\n    # Find the sum of the squares of the decagonal numbers\n    decagonal_numbers = []\n    for i in range(1, n + 1):\n        decagonal_numbers.append(i * (2 * i - 1))\n\n    # Calculate the sum of the squares of all the rows\n    total_sum = sum(rows)\n\n    # Calculate the sum of the squares of the decagonal numbers\n    total_decagonal_sum = sum(decagonal_numbers)\n\n    # Add the sums of the squares of all the rows and the squares of the decagonal numbers to get the nth decagonal number\n    nth_decagonal_number = total_sum + total_decagonal_sum\n\n    return nth_decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if it is a decagonal number, else False.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n < 0:\n        return False\n\n    # Calculate the square of n\n    square_n = n*n\n\n    # Check if square_n is divisible by 13\n    if square_n % 13 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += i * (i + 1) / 2\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    \n    decagonal = 1\n    for i in range(1, n + 1):\n        decagonal = decagonal * (i * (3 * i - 1) // 2)\n    \n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the starting point for the decagonal sequence\n    start = 1\n    \n    # Loop through the sequence n times\n    for i in range(n):\n        # Compute the ith term of the sequence\n        decagonal = (i * (3 * i - 1)) // 2\n        \n        # Check if the ith term is equal to the nth input number\n        if decagonal == n:\n            return True\n    \n    # If we get here, the nth number is not in the decagonal sequence\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_helper(n):\n        if n == 1:\n            return 1\n        else:\n            return 4 * n - 3\n    \n    return decagonal_helper(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Helper function to check if a number is a decagonal number\n    def is_decagonal(num):\n        return (num + 2) // 2 == num // 2\n    \n    # Helper function to calculate the nth decagonal number\n    def nth_decagonal(n):\n        count = 0\n        num = 0\n        while count < n:\n            num += 1\n            if is_decagonal(num):\n                count += 1\n        return num\n    \n    # Return the nth decagonal number\n    return nth_decagonal(n)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes an array and an element as input and returns a tuple containing a boolean indicating if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # loop through the array to find the element\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    # if the element is not found, return False and -1\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, value in enumerate(dlist):\n        if value == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # Loop through the array to find the element\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    # If the element is not found, return False and -1\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_flag = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique_flag = False\n            break\n    return unique_flag"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, False otherwise.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_elements = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # set to store unique elements\n    unique_set = set()\n    # loop through list and add unique elements to set\n    for element in test_list:\n        unique_set.add(element)\n    # check if set is empty, if yes, all elements are unique, else not\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Convert the list to set to remove duplicate elements\n    unique_list = list(set(test_list))\n\n    # Check if the length of the unique_list is equal to the length of the original list\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of equal length\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    sub = [num1 - num2 for num1,num2 in zip(nums1,nums2)]\n    return sub"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # check the frequency of each digit\n    for digit in freq:\n        if freq[digit] > digit:\n            print(\"The frequency of digit '{}' is greater than the digit itself.\".format(digit))\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = []\n    for i in range(10):\n        freq.append(0)\n    temp = n\n    while temp!= 0:\n        freq[temp % 10] += 1\n        temp //= 10\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # loop through each digit in the number and update the frequency dictionary\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # loop through the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # if all digits pass the validation, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    # Loop through each digit in the number\n    for digit in str(n):\n        # If the digit is already present in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not present in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n    # Loop through the keys of the dictionary and check if the frequency of each digit is less than or equal to itself\n    for key in freq:\n        if freq[key] > int(key):\n            return False\n    # If the loop completes without returning False, the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for i in range(10):\n        freq[i] = n.count(str(i))\n\n    # check whether the frequency of each digit in the integer is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = set([int(d) for d in str(n)])\n    for d in digits:\n        count = digits.count(d)\n        if count > 1:\n            print(f\"Digit {d} appears {count} times in the integer. It should appear at most once.\")\n            return False\n        elif count == 0:\n            print(f\"Digit {d} is not present in the integer.\")\n            return False\n        elif count > 0:\n            print(f\"Digit {d} appears {count} times in the integer. It should appear at most once.\")\n            return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of digits in the integer\n    freq = {}\n    \n    # loop through each digit in the integer and increment its frequency in the dictionary\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # loop through the digits again and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # if the loop completes without returning False, then all digits are valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is not already in the dictionary, set its frequency to 1\n        if digit not in digit_freq:\n            digit_freq[digit] = 1\n        # If the digit is already in the dictionary, increment its frequency\n        else:\n            digit_freq[digit] += 1\n\n    # Loop through each digit in the dictionary\n    for digit in digit_freq:\n        # Check if the frequency of the digit is greater than or equal to the digit itself\n        if digit_freq[digit] > digit:\n            # If the frequency is greater, return False\n            return False\n\n    # If all digits have a frequency less than or equal to them, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Create a dictionary to store the frequency of digits in the integer\n    freq = {}\n    \n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its value by 1\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a value of 1\n        else:\n            freq[digit] = 1\n            \n    # Loop through each digit in the integer and check if its frequency is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n            \n    # If all digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    \n    for digit in str(n):\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    \n    for digit in count:\n        if count[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    # Check if all items in the list are equal to the given element\n    all_items_equal = True\n    for item in list:\n        if item!= element:\n            all_items_equal = False\n            break\n    # Return the result\n    return all_items_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n\n    Args:\n    list (list): The list to check.\n    element (any): The element to compare to.\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    if len(list) == 0:\n        return True\n\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All elements in the list are equal to the given element.\")\n    else:\n        print(\"Some elements in the list are not equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 1 and list[0] == element:\n        for i in range(1,len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(item == element for item in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        for i in range(1,len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"(?=.*a)(?=.*b.{2,3})\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b){2,3}'\n    matches = re.findall(pattern, text)\n    return len(matches)!= 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'a(?=b{2,3})'\n    result = re.search(pattern, text)\n\n    if result:\n        print(\"The pattern '{}' is found in the string '{}'\".format(pattern, text))\n    else:\n        print(\"The pattern '{}' is not found in the string '{}'\".format(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a.b{2,3}')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[bB]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The string contains the 'a' character followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain the 'a' character followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(k):\n        current_sum += a[i]\n\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    for i in range(n-1, k-1, -1):\n        current_sum -= a[i-k]\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the sum of the modified array\n    total_sum = (n*k) + (n-k) * a[0]\n\n    # Find the maximum sum of a contiguous subarray\n    max_sum = max(a[0], a[1])\n    for i in range(1, n):\n        max_sum = max(max_sum, a[i] + max_sum)\n\n    # Find the largest sum of a subarray that is repeated k times\n    max_subarray_sum = max(max_sum, total_sum)\n\n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a new list of length n*k containing the repeating array\n    repeated_array = [a[i] for i in range(n*k)]\n    \n    # Initialize the maximum sum and its index\n    max_sum = max_sum_index = a[0]\n    \n    # Traverse through the original array and update the maximum sum and its index\n    for i in range(1, n):\n        temp_sum = repeated_array[i] + a[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_sum_index = i\n    \n    # Return the maximum sum and its index\n    return max_sum, max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Function to find the maximum subarray sum of a non-negative array\n    def max_subarray_sum(arr, n): \n        max_sum = float('-inf') \n        curr_sum = 0 \n        for i in range(n): \n            curr_sum = max(curr_sum + arr[i], arr[i]) \n            max_sum = max(max_sum, curr_sum) \n        return max_sum\n\n    # Function to modify the input array\n    def modify_array(arr, k): \n        modified_arr = [] \n        for i in range(k): \n            modified_arr += arr \n        return modified_arr\n\n    # Function to find the maximum subarray sum of the modified array\n    def modified_max_subarray_sum(modified_arr, n, k): \n        max_sum = float('-inf') \n        curr_sum = 0 \n        for i in range(n): \n            curr_sum = max(curr_sum + modified_arr[i], modified_arr[i]) \n            max_sum = max(max_sum, curr_sum) \n        return max_sum\n\n    # Find the maximum subarray sum of the original array\n    max_sum_original = max_subarray_sum(a, n)\n\n    # Modify the original array k times\n    modified_arr = modify_array(a, k)\n\n    # Find the maximum subarray sum of the modified array\n    max_sum_modified = modified_max_subarray_sum(modified_arr, n, k)\n\n    # Return the maximum of the two maximum subarray sums\n    return max(max_sum_original, max_sum_modified)\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # create a new array of size k+1 by copying the given array\n    repeated_array = a * k\n\n    # initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n\n    # iterate through the repeated array and calculate the maximum subarray sum\n    for i in range(k):\n        current_sum = 0\n        for j in range(n):\n            current_sum += repeated_array[i+j]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # calculate the sum of the first k elements\n    first_k_sum = sum(a[:k])\n    # calculate the sum of the last k elements\n    last_k_sum = sum(a[-k:])\n    # find the maximum sum of a contiguous subarray\n    max_sum = max(first_k_sum, last_k_sum)\n    # iterate over the rest of the array and calculate the sum of the modified array\n    for i in range(k, n):\n        modified_sum = a[i-k] + first_k_sum + last_k_sum\n        # update the maximum sum if the modified sum is greater\n        max_sum = max(max_sum, modified_sum)\n        # shift the first k elements to the right\n        first_k_sum = first_k_sum - a[i-k-1]\n        # shift the last k elements to the left\n        last_k_sum = last_k_sum - a[i-k]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Create a modified array by repeating the given array k times\n    modified_array = [a[i] for i in range(n)]\n    for i in range(k-1):\n        modified_array.extend(a)\n    # Initialize the maximum sum and the current subarray sum\n    max_sum = max_subarray_sum = a[0]\n    # Loop through the modified array and find the maximum sum of a contiguous subarray sum\n    for i in range(len(modified_array)):\n        current_sum = max_subarray_sum + modified_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_subarray_sum = current_sum\n        elif current_sum == max_sum and current_sum > max_subarray_sum:\n            max_subarray_sum = current_sum\n    # Return the maximum sum of a contiguous subarray sum\n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize the maximum sum to be negative\n    max_sum = float('-inf')\n\n    # Initialize the current sum to be the first element of the array\n    curr_sum = a[0]\n\n    # Repeat the array k times\n    for i in range(k):\n        # Subtract the first element of the array from the current sum\n        curr_sum -= a[0]\n\n        # Add the first element of the array to the current sum\n        curr_sum += a[n-1]\n\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, curr_sum)\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i >= k:\n            curr_sum -= a[i - k]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a modified array of size n*k\n    modified_array = []\n    for i in range(k):\n        modified_array.extend(a)\n\n    # Initialize variables for the maximum subarray sum and its start index\n    max_sum = max_start = float('-inf')\n\n    # Traverse the modified array and keep track of the maximum subarray sum and its start index\n    for i in range(len(modified_array)):\n        current_sum = modified_array[i]\n        if i == 0:\n            max_sum = current_sum\n            max_start = i\n        else:\n            current_sum = max(current_sum, modified_array[i-1]+current_sum)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_start = i\n\n    return max_sum, max_start"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize the sum to zero\n    total = 0\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the even number to the sum\n        total += i*i\n    # return the total sum of squares of even natural numbers\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize a variable to store the sum of squares\n    sum_squares = 0\n    \n    # Iterate from 0 to n\n    for i in range(0,n):\n        \n        # Check if the number is even\n        if i % 2 == 0:\n            \n            # Add the square of the number to the sum of squares\n            sum_squares += i**2\n            \n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate through the first n even natural numbers and calculate the squares of each number\n    for i in range(2, n+1, 2):\n        sum += i**2\n\n    # Return the sum of squares\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0  \n    for i in range(2, n+1, 2):  \n        total += i*i  \n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the square of the current even natural number\n        square = i**2\n        # Add the square to the sum of squares\n        sum_of_squares += square\n        \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i * i * 2  # multiplying i by 2 and then squaring\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_squares = 0\n    for i in range(1, n+1, 2):\n        even_squares += i*i\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum_of_squares += i*i\n        i += 1\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_lengths.append(len(sublist))\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        max_lengths.append(max([len(x) for x in list1[i]]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_lengths.append(max(len(sublist), max(max_lengths))))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    max_len = max(lengths)\n    result = []\n    for i in range(len(list1)):\n        if len(list1[i]) == max_len:\n            result.append(list1[i])\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the maximum length of a list of lists.\n    '''\n    max_lengths = []\n    for i in list1:\n        if len(i) > max(max_lengths):\n            max_lengths = [len(i)]\n        elif len(i) == max(max_lengths):\n            max_lengths.append(len(i))\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths) or not max_lengths:\n            max_lengths = [len(sublist)]\n        else:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        max_length = max(len(lst), max_length)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for item in list1:\n        max_lengths.append(max(len(i) for i in item))\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initialize a list to store the counts of the number of ways to paint the fence\n    ways = []\n    # loop through all possible combinations of k colors for the first n-1 posts\n    for i in range(2, k+1):\n        # loop through all possible combinations of (n-1) colors for the first i-2 posts\n        for j in range(1, n-i+1):\n            # loop through all possible combinations of (i-1) colors for the remaining (n-i) posts\n            for k in range(1, i-1):\n                # calculate the number of ways to paint the fence with these colors\n                num_ways = (n-j-k)/(k-1)\n                # add this count to the list of counts of the number of ways to paint the fence\n                ways.append(num_ways)\n    # calculate the total number of ways to paint the fence using the last (n-i) colors\n    num_ways = n/(k-1)\n    # add this count to the list of counts of the number of ways to paint the fence\n    ways.append(num_ways)\n    # return the sum of all the counts in the list\n    return sum(ways)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list to store the number of ways for each combination of colors\n    ways = [[0 for _ in range(k+1)] for _ in range(n+1)]\n\n    # Base case: if there is only one color left, there is only one way to paint the fence\n    for i in range(1, k+1):\n        ways[1][i] = 1\n\n    # For each number of posts, count the number of ways for each combination of colors\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n\n    # Return the count of ways\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize an empty list to store the number of ways\n    ways = []\n\n    # Iterate from 1 to k\n    for i in range(1, k+1):\n\n        # Initialize a variable to store the number of ways for n posts with one color\n        ways.append(1)\n\n        # Iterate from 2 to n-2\n        for j in range(2, n-2):\n\n            # Increment the number of ways by the number of ways for (n-j) posts with one color and 2 adjacent colors\n            ways[-1] += ways[-2]*count_no_of_ways(n-j, k)\n\n    # Return the last element in the ways list (since it represents the number of ways for n posts with k colors)\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    count = 0\n    \n    # Create a list of colors\n    colors = []\n    for i in range(k):\n        colors.append(i)\n    \n    # Recursively count the number of ways\n    def helper(start, end, color):\n        global count\n        if start > end:\n            return\n        \n        if color == colors[-1]:\n            count += 1\n        \n        helper(start+1, end-1, color)\n        helper(start+1, end, color)\n        helper(start, end-1, color)\n    \n    helper(0, n-1, colors[0])\n    \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    def count_adjacent(arr, i, j, color):\n        \"\"\"\n        Helper function to count the number of adjacent posts with the same color.\n        \"\"\"\n        count = 0\n        while i >= 0 and j >= 0 and arr[i][j] == color:\n            count += 1\n            i -= 1\n            j -= 1\n        while i >= 0 and j < n and arr[i][j] == color:\n            count += 1\n            i -= 1\n            j += 1\n        while i < n and j >= 0 and arr[i][j] == color:\n            count += 1\n            i += 1\n            j -= 1\n        while i < n and j < n and arr[i][j] == color:\n            count += 1\n            i += 1\n            j += 1\n        return count\n\n    # Counting the number of ways for each color\n    ways = [0] * k\n    ways[0] = 1\n\n    # Iterating through all the colors\n    for color in range(1, k):\n        # Counting the number of ways for the current color\n        ways[color] = 0\n        for i in range(n):\n            ways[color] += ways[color - 1] * count_adjacent(arr, i, i + 1, color)\n\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        def helper(i, j):\n            if i == n:\n                return 1\n            if j > 0 and fence[i][j-1] == fence[i][j]:\n                return helper(i, j-1)\n            else:\n                return helper(i+1, j)\n        fence = [[0] * (n+1) for _ in range(k+1)]\n        for i in range(1, k+1):\n            for j in range(1, n+1):\n                if j <= i:\n                    fence[i][j] = 1\n        return helper(0, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    if n <= 0 or k <= 0:\n        return 0\n    \n    if k == 1:\n        return n\n    \n    memo = {}\n    memo[(n, k)] = 0\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if (i-1, j) in memo:\n                continue\n            memo[(i, j)] = count_no_of_ways(i-1, j)\n    \n    return memo[(n, k)]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    # base case\n    if k == 1:\n        return n\n\n    # Initialize a 2D array to store the count of ways for each number of adjacent same colors\n    # and total number of colors.\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and column values\n    for i in range(1, k + 1):\n        dp[0][i] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n\n    # Fill the rest of the array using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == j:\n                dp[i][j] = dp[i - 1][j]\n            elif i < j:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    # Return the count of ways for the last element\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Check if the given fence has at most n posts\n    if n > 2 * k:\n        return 0\n\n    # If the fence has only 1 post, there is only 1 way to paint it\n    if n == 1:\n        return 1\n\n    # Initialize variables for memoization\n    memo = {}\n\n    # Recursive function to count number of ways\n    def count_ways(post):\n        # Base case: if post is 1, there is only 1 way to paint it\n        if post == 1:\n            return 1\n\n        # Check if the combination of colors has been computed\n        if (post, k) in memo:\n            return memo[(post, k)]\n\n        # Check if the post is adjacent to the previous post\n        if post - 1 < k:\n            # If so, we can paint the previous post with the next color, which makes 2 ways to paint the current post\n            ways = count_ways(post - 1) + count_ways(post - 1)\n        else:\n            # If not, we cannot paint the previous post, so we can paint the current post with the next color\n            ways = count_ways(post)\n\n        # Store the combination of colors and the number of ways to paint the fence\n        memo[(post, k)] = ways\n        return ways\n\n    # Call the recursive function to count number of ways\n    return count_ways(n)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    # Create a boolean matrix to store whether each post has the same color as the previous post\n    same_color = [[False for j in range(k)] for i in range(n)]\n\n    # Initialize the number of ways to paint the fence to 1\n    ways = 1\n\n    # Iterate over all possible pairs of adjacent posts\n    for i in range(n):\n        for j in range(n):\n            if i < n-1 and j < n-1:\n                # If the current post has a different color than the previous post, increment the number of ways to paint the fence\n                if not same_color[i][j] and not same_color[i+1][j] and not same_color[i][j+1] and not same_color[i+1][j+1]:\n                    ways *= (k-1)\n                    same_color[i][j] = same_color[i+1][j] = same_color[i][j+1] = same_color[i+1][j+1] = True\n\n    return ways"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Use Euclidean algorithm to find gcd of n and m\n    while m!= 0:\n        temp = m\n        m = n % m\n        n = temp\n\n    # Calculate quotient\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    This function takes two numbers as inputs and returns their quotient.\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient using integer division\n    quotient = n // m\n    # Calculate the remainder using modulo operator\n    remainder = n % m\n    # If the remainder is greater than 0, add 1 to the quotient\n    if remainder > 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # calculate the quotient using integer division\n    quotient = n // m\n\n    # if the remainder is greater than 0, add 1 to the quotient\n    if n % m > 0:\n        quotient += 1\n\n    # return the rounded down quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers n and m as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Check if n is negative\n    if n < 0:\n        # If n is negative, change it to positive by making it positive modulo 2\n        n = abs(n) % 2\n    # Check if m is negative\n    if m < 0:\n        # If m is negative, change it to positive by making it positive modulo 2\n        m = abs(m) % 2\n    # Find the least common multiple of n and m using the extended Euclidean algorithm\n    q, r = extended_euclidean(n, m)\n    # Round down the quotient to the nearest integer\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2) # length of side a\n    b = math.sqrt((w**2 - h**2)**2 + h**2) # length of side b\n    c = math.sqrt((w**2 - h**2)**2 + (w**2 + h**2)**2) # length of side c\n    s = (a + b + c) / 2 # semiperimeter\n    t = math.sqrt(s * (s - a) * (s - b) * (s - c)) # third side\n    print(\"The third side of the right angled triangle is\", t)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt((w**2) + (h**2))\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # Calculate the cosine of the angle\n    cos_a = (w**2 + h**2 - s**2) / (2 * w * h)\n    \n    # Calculate the third side\n    third_side = math.sqrt(w**2 - (cos_a**2 * s**2))\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the right triangle\n    s = (w + h) / 2\n    \n    # Calculate the area of the triangle\n    a = math.sqrt(s * (s - w) * (s - h))\n    \n    # Calculate the third side of the triangle\n    b = a * h\n    \n    # Return the value of b\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \n    Args:\n        w (float): length of the base\n        h (float): height of the triangle\n    \n    Returns:\n        float: length of the third side of the triangle\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = (w ** 2 + h ** 2) ** 0.5\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    side_one = w\n    side_two = h\n    third_side = math.sqrt(side_one ** 2 + side_two ** 2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right angled triangle.\n\n    Inputs:\n    w: the length of one side of the triangle\n    h: the length of the other side of the triangle\n\n    Outputs:\n    The function returns the length of the third side of the triangle.\n\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - w) * (s - h) * (s - w + h))\n\n    # calculate the third side of the triangle\n    c = math.sqrt(w**2 + h**2 - area)\n\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize max_val with the first element of the list\n    max_val = listval[0]\n    # Loop through the rest of the list\n    for val in listval[1:]:\n        # If the current value is greater than max_val, update max_val\n        if val > max_val:\n            max_val = val\n    # Return the maximum value in the list\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the maximum value found so far\n    max_val = None\n\n    # Iterate over the list of values\n    for val in listval:\n        # If the current value is greater than the current maximum, update the max value\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list as input and returns the maximum value present in the list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0] # set the first number as the max\n    for num in listval:\n        if num > max_num:\n            max_num = num # update max_num if a new number is larger\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for num in listval:\n        if max_num is None or num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(lst):\n    '''\n    Given a list of heterogeneous values, returns the maximum value.\n    '''\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # initialize variables to keep track of the current maximum value and the current element type\n    max_val = None\n    current_type = None\n\n    # iterate through the list and find the maximum value and its corresponding element type\n    for item in listval:\n\n        # check if the current item is None\n        if item is None:\n            if current_type is None or current_type == type(item):\n                max_val = None\n            else:\n                max_val = item\n                current_type = type(item)\n            continue\n\n        # check if the current item is not None\n        if current_type is None:\n            current_type = type(item)\n\n        # check if the current item is a list\n        elif isinstance(item, list):\n\n            # if the current item is a list, recursively call the function to find the maximum value\n            if current_type == list:\n                if max_val is None:\n                    max_val = max_val(item)\n                else:\n                    max_val = max(max_val, max_val(item))\n            else:\n                # if the current item is a list of other types, recursively call the function to find the maximum value in each sub-list\n                if max_val is None:\n                    max_val = max_val(item)\n                else:\n                    max_val = max(max_val, max_val(item))\n\n        # check if the current item is an integer\n        elif isinstance(item, int):\n\n            # if the current item is an integer, compare it with the current maximum value\n            if current_type == int:\n                if max_val is None:\n                    max_val = item\n                elif item > max_val:\n                    max_val = item\n            else:\n                # if the current item is an integer of other types, compare it with the current maximum value\n                if max_val is None:\n                    max_val = item\n                elif item > max_val:\n                    max_val = item\n\n        # check if the current item is a float\n        elif isinstance(item, float):\n\n            # if the current item is a float, compare it with the current maximum value\n            if current_type == float:\n                if max_val is None:\n                    max_val = item\n                elif item > max_val:\n                    max_val = item\n            else:\n                # if the current item is a float of other types, compare it with the current maximum value\n                if max_val is None:\n                    max_val = item\n                elif item > max_val:\n                    max_val = item\n\n        # check if the current item is a string\n        elif isinstance(item, str):\n\n            # if the current item is a string, compare it with the current maximum value\n            if current_type == str:\n                if max_val is None:\n                    max_val = item\n                elif item > max_val:\n                    max_val = item\n            else:\n                # if the current item is a string of other types, compare it with the current maximum value\n                if max_val is None:\n                    max_val = item\n                elif item > max_val:\n                    max_val = item\n\n        # if the current item is of an unsupported type, raise an exception\n        else:\n            raise TypeError(\"Unsupported item type in list.\")\n\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    if number <= 1:\n        return 0\n    else:\n        divisors = [i for i in range(1, number+1) if number % i == 0]\n        return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize variables to store sum and divisor count\n    sum_of_divisors = 0\n    divisor_count = 0\n\n    # Loop through the number from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the number is divisible by the current divisor\n        if number % i == 0:\n            # If the divisor is prime, add it to the sum\n            if i > 1:\n                sum_of_divisors += i\n                divisor_count += 1\n            # If the divisor is not prime, check if it is divisible by the next larger prime number\n            else:\n                next_prime = 2\n                while next_prime <= number:\n                    if next_prime**2 > number:\n                        break\n                    if next_prime % i == 0:\n                        sum_of_divisors += i\n                        divisor_count += 1\n                        break\n                    next_prime += 1\n\n    # Return the sum of divisors of the number\n    return sum_of_divisors, divisor_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    result += left[i:]\n    result += right[j:]\n    \n    return result\n\ndef get_Inv_Count(arr): \n    sorted_arr = merge_sort(arr)\n    return count_inv(sorted_arr)\n\ndef count_inv(arr):\n    inv_count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - i - 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    # Sort the array\n    sorted_arr = merge_sort(arr)\n\n    # Count inversions\n    inv_count = 0\n    for i in range(len(sorted_arr) - 1):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        # get the index of the minimum element in the remaining unsorted part of the array\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n\n        # swap the minimum element with the i-th element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n        # count the number of inversions in the unsorted part of the array\n        inv_count += (min_idx - i)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Step 1: Calculate the total number of elements in the array\n    n = len(arr)\n\n    # Step 2: Use a sorting algorithm to sort the array in ascending order\n    arr = merge_sort(arr)\n\n    # Step 3: Count the inversions in the sorted array\n    inversion_count = 0\n    for i in range(1, n):\n        inversion_count += (n - i)\n\n    return inversion_count\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        # Sort the first i elements of the array\n        arr[0:i+1] = sorted(arr[0:i+1])\n\n        # Count the number of inversions\n        inv_count += sum([arr[i] < arr[j] for j in range(i)])\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n  \n    # Sort the array \n    arr.sort() \n  \n    # Count the inversions \n    for i in range(1, n): \n        j = i - 1\n        while j >= 0 and arr[j] > arr[i]: \n            j -= 1\n            inv_count += j + 1\n  \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)  # get the size of the array\n\n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Recursively count inversions in each half\n    inv_count_left = get_Inv_Count(left)\n    inv_count_right = get_Inv_Count(right)\n\n    # Count inversions in the two halves and add them up\n    inv_count_total = inv_count_left + inv_count_right\n\n    # Count inversions in the original array\n    inv_count_array = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count_array += 1\n\n    # Combine the two inversion counts and return the total\n    return inv_count_total + inv_count_array"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array using merge sort\n    merge_sort(arr, 0, n-1)\n    \n    # Count inversions\n    i = 1\n    while i < n:\n        inv_count += (n-i)\n        i *= 2\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize variables to keep track of inversions and the counts of elements in each half of the array\n    count = 0\n    left = 0\n    right = len(arr) - 1\n    \n    # Iterate through the array and count inversions\n    for i in range(len(arr)):\n        j = i + 1\n        \n        while j <= right:\n            if arr[i] > arr[j]:\n                count += right - j + 1\n                j += 1\n            else:\n                j += 1\n    \n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n\n    # Loop through each item in the input list\n    for item in list1:\n        # If the item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        # If the item is not a list, append it to the flattened list\n        else:\n            flattened_list.append(item)\n\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    :param list1: A nested list to be flattened.\n    :type list1: list\n    :return: A flat list containing all the elements of the nested list.\n    :rtype: list\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Args:\n        lst (list): A nested list structure.\n\n    Returns:\n        list: A flattened list structure.\n    \"\"\"\n    flattened_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    max_agg = defaultdict(int)\n    for sale, price in stdata:\n        max_agg[sale] += price\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict with dictionary values as defaultdicts\n    agg_dict = defaultdict(lambda: defaultdict(int))\n    \n    # populate the defaultdict with the given list of tuples\n    for item in stdata:\n        agg_dict[item[0]][item[1]] += item[2]\n    \n    # find the maximum aggregate for each department\n    max_agg = max(max(agg_dict[dept].values()) for dept in agg_dict)\n    \n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    for item in stdata:\n        data[item[0]].append(item[1])\n\n    max_aggr = 0\n    for val in data.values():\n        if sum(val) > max_aggr:\n            max_aggr = sum(val)\n\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for item, quantity in stdata:\n        freq[item] += quantity\n\n    # Sort the dictionary by the frequency of each item in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for item, quantity in sorted_freq:\n        max_agg += quantity * item\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from a list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    for item in stdata:\n        for amount, product in item:\n            agg_dict[product] += amount\n    max_agg = 0\n    for val in agg_dict.values():\n        max_agg = max(max_agg, val)\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the number of stocks in each price range\n    stock_count = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for price, stock in stdata:\n        # If the stock is in the range of 0.5-1, increment the count in the dictionary\n        if 0.5 <= price <= 1:\n            stock_count[price] += 1\n\n    # Calculate the maximum aggregate by iterating over the dictionary and finding the maximum count\n    max_count = 0\n    max_price = 0\n    for price, count in stock_count.items():\n        if count > max_count:\n            max_count = count\n            max_price = price\n\n    # Return the maximum aggregate\n    return max_price * max_count"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the maximum aggregate for each item\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, agg in stdata:\n        # If the current aggregate is greater than the previous maximum, update the maximum\n        if agg > max_agg[item]:\n            max_agg[item] = agg\n\n    # Calculate the maximum aggregate for each item and return the maximum\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    max_income = defaultdict(int)\n    for t in stdata:\n        if t[1] > max_income[t[0]]:\n            max_income[t[0]] = t[1]\n        if max_income[t[0]] > max_aggregate:\n            max_aggregate = max_income[t[0]]\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the max aggregate for each group of customers\n    max_aggr = defaultdict(int)\n\n    # loop through the list of tuples\n    for customer, purchase in stdata:\n        # get the max aggregate for the current group of customers\n        max_aggr[customer] = max(max_aggr[customer], purchase)\n\n    # get the maximum aggregate from the defaultdict\n    max_aggr = max(max_aggr.values())\n\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each month\n    max_aggregate_dict = defaultdict(int)\n\n    # iterate through the list of tuples\n    for month_sales, month_profit in stdata:\n        # add the profit to the maximum aggregate for the corresponding month\n        max_aggregate_dict[month_sales] += month_profit\n\n    # calculate the maximum aggregate across all months\n    max_aggregate = max(max_aggregate_dict.values())\n\n    return max_aggregate"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_half = bin(i)[2:]\n        last_half = bin(i)[2:][::-1]\n        if int(first_half, 2) == int(last_half, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(2*n)\n        first_sum = sum(binary[:n])\n        last_sum = sum(binary[-n:])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n\n    # loop through all possible binary sequences of length 2n\n    for i in range(2**n, 2**n+2**n):\n        # extract the first n bits and the last n bits of the sequence\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i)[-2-n:].zfill(n)\n\n        # if the sum of first n bits is same as the sum of last n bits, increment the count\n        if int(first_n, 2) + int(last_n, 2) == 2**n:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n), 2**2*(2*n+1)):\n        if sum(bin(i)[2:].zfill(n)) == sum(bin(i)[2:].zfill(n)[::-1]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    # create a list of binary sequences of length 2n and count the number of such sequences\n    count = 0\n    for i in range(2**n):\n        sequence = bin(i)[2:].zfill(2*n)\n        if int(sequence[:n]) == int(sequence[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n, 2**2*n, 2**n):\n        # Check if sum of first n bits is same as sum of last n bits\n        if sum(int(i[:2**n]) % 2 for i in bin(sum(int(i[:2**n]) % 2 for i in bin(i)[2:].lstrip('0')[::-1]))) == sum(int(i[-2*n:]) % 2 for i in bin(sum(int(i[-2*n:]) % 2 for i in bin(i)[2:].lstrip('0')[::-1]))) and len(bin(i)[2:].lstrip('0')[::-1]) == 2**n:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Helper function to count number of binary sequences with given sum\n    def count_seq(n, sum):\n        count = 0\n        for i in range(2**n):\n            if i % 2 == 0: # check if bit 0 is 0\n                continue\n            else: # check if bit 0 is 1\n                if sum - 2**(n-1) == i: # check if sum of first n bits is same as sum of last n bits\n                    count += 1\n        return count\n\n    # Count number of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits\n    count = 0\n    for i in range(n, 2*n+1):\n        count += count_seq(i, 2**(i-1))\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:].zfill(n)\n        if int(num[0:n//2]) == int(num[n//2:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        for j in range(1, 2**n+1):\n            if i%2 == j%2:\n                count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n\n    # Initialize a variable to store the maximum depth\n    max_depth = 0\n\n    # Loop through the dictionary keys and check their depth\n    for key in d:\n        depth = 1 + max(dict_depth(value) for value in d[key].values() if isinstance(value, dict))\n        if depth > max_depth:\n            max_depth = depth\n\n    # Return the maximum depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth to 0\n    depth = 0\n    \n    # Traverse the dictionary recursively\n    def traverse(dictionary):\n        nonlocal depth\n        if isinstance(dictionary, dict):\n            for value in dictionary.values():\n                traverse(value)\n            depth += 1\n    \n    traverse(d)\n    \n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    \n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        else:\n            current_depth = 0\n            \n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    if type(d) is not dict:\n        return 0\n    else:\n        max_depth = 0\n        for k, v in d.items():\n            new_depth = 1 + dict_depth(v)\n            if new_depth > max_depth:\n                max_depth = new_depth\n        return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            count += 1\n            count += dict_depth(value)\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    elif isinstance(d, list):\n        depth = max(dict_depth(v) for v in d)\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the final index after rotations\n    final_index = (index - rotations) % len(arr)\n\n    # If the final index is within the range of the array, return the element\n    if final_index >= 0 and final_index < len(arr):\n        return arr[final_index]\n\n    # If the final index is outside the range of the array, check if it belongs to a range and return the element from that range\n    for i in range(len(ranges)):\n        if ranges[i][0] <= final_index < ranges[i][1]:\n            return arr[final_index - ranges[i][0]]\n\n    # If the final index is still not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # The element we're looking for can be found at the index modulo the length of the array\n    element = arr[index % len(arr)]\n\n    # Initialize the position of the element relative to its initial position in the array\n    position = index\n    # Initialize the number of rotations we've made\n    rotations_made = 0\n\n    # Iterate through each rotation of the array\n    while rotations_made < rotations:\n        # Find the next position of the element relative to its initial position\n        next_position = (position + element) % len(arr)\n\n        # Update the position of the element relative to its initial position in the array\n        position = next_position\n\n        # Increment the number of rotations we've made\n        rotations_made += 1\n\n    # Return the element at the final position\n    return arr[position]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the original element at the given index\n    original_element = arr[index]\n    \n    # Perform rotations of the array to the left\n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(len(arr)-1):\n            arr[j] = arr[j+1]\n        arr[-1] = temp\n    \n    # Find the rotated element at the given index\n    rotated_element = arr[index]\n    \n    # Find the element at the given index after rotating the array\n    if rotated_element == original_element:\n        return original_element\n    elif rotated_element < original_element:\n        for i in range(len(ranges)-1, -1, -1):\n            if rotated_element >= arr[index] and rotated_element < arr[index]+ranges[i]:\n                return arr[index+ranges[i]-rotated_element]\n            elif rotated_element < arr[index]+ranges[i]:\n                return arr[index+ranges[i]]\n    else:\n        for i in range(len(ranges)-1, -1, -1):\n            if rotated_element >= arr[index] and rotated_element < arr[index]+ranges[i]:\n                return arr[index+ranges[i]]\n            elif rotated_element < arr[index]+ranges[i]:\n                return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a list of rotations and an index as input and returns the element at the given index after rotations.\n    \"\"\"\n\n    # Extract the number of elements in the array\n    n = len(arr)\n\n    # Calculate the total number of rotations\n    total_rotations = sum(rotations)\n\n    # Calculate the index of the element at the end of the first rotation\n    end_index = (n - 1) * rotations[0]\n\n    # Calculate the index of the element at the end of the last rotation\n    end_index_last_rotation = (n - 1) * (total_rotations - rotations[-1])\n\n    # Calculate the range of the first rotation\n    first_range = range(0, end_index + 1)\n\n    # Calculate the range of the last rotation\n    last_range = range(end_index_last_rotation, n)\n\n    # Calculate the combined range\n    combined_range = first_range + last_range\n\n    # Calculate the element at the given index after rotations\n    element = arr[index]\n\n    # Find the index of the element in the combined range\n    index_after_rotations = combined_range.index(element)\n\n    # Return the element at the given index after rotations\n    return arr[end_index_last_rotation + index_after_rotations]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array arr, range of rotations in rotations, and an index.\n    It returns the element at the given index after number of rotations.\n\n    Args:\n    arr: list of integers\n    ranges: list of lists of integers where the inner list represents the range of rotations for each element.\n    rotations: list of integers representing the number of rotations for each element.\n    index: integer representing the index of the element that needs to be found after rotations.\n\n    Returns:\n    The element at the given index after number of rotations.\n\n    Raises:\n    TypeError: If arr, ranges, rotations, or index is not a list or if the values in arr are not integers.\n    ValueError: If the length of arr does not match the length of ranges, rotations, or index.\n    \"\"\"\n    if not isinstance(arr, list) or not isinstance(ranges, list) or not isinstance(rotations, list) or not isinstance(index, int):\n        raise TypeError(\"All the inputs should be lists\")\n    \n    for i in arr:\n        if not isinstance(i, int):\n            raise TypeError(\"arr should contain only integers\")\n\n    if len(arr)!= len(ranges) or len(arr)!= len(rotations) or len(arr)!= len(index):\n        raise ValueError(\"The length of arr should match the length of ranges, rotations, and index\")\n\n    for i in ranges:\n        if not isinstance(i, list) or len(i)!= 2:\n            raise ValueError(\"ranges should contain only lists of length 2\")\n    \n    for i in rotations:\n        if not isinstance(i, int):\n            raise TypeError(\"rotations should contain only integers\")\n    \n    for i in arr:\n        if not (0 <= i < len(ranges)):\n            raise ValueError(\"index should be within the range of indices of the array\")\n\n    rotated_index = (index + rotations[index]) % len(ranges)\n    return arr[rotated_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the range of rotations required for element at index\n    total_rotations = 0\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            total_rotations += rotations[i]\n    \n    # Calculate the new index after rotations\n    new_index = (index - ranges[0]) % len(arr)\n    \n    # Calculate the element at the new index\n    if new_index == 0:\n        return arr[index]\n    elif new_index < total_rotations:\n        return arr[index] - rotations[new_index] - arr[index]\n    else:\n        return arr[index] - rotations[new_index] - arr[index] + arr[0]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \n    Args:\n    - arr: list of integers representing the array\n    - ranges: list of integers representing the ranges of rotations for each element in arr\n    - rotations: list of integers representing the number of rotations for each element in arr\n    - index: integer representing the index of the element to be found\n    \n    Returns:\n    - integer representing the element at the given index after number of rotations\n    \"\"\"\n    \n    # Calculate the total rotations required\n    total_rotations = sum(rotations)\n    \n    # Calculate the number of rotations required for each element\n    element_rotations = [sum(rotations[:i+1]) for i in range(len(rotations))]\n    \n    # Calculate the total number of rotations required after finding the element\n    element_after_rotations = total_rotations - sum(rotations[:index])\n    \n    # Calculate the range of rotations required for each element\n    element_ranges = [ranges[i] for i in range(len(rotations))]\n    \n    # Find the element at the given index after number of rotations\n    element_at_index = find_element(arr, element_rotations, element_after_rotations, element_ranges, index)\n    \n    return element_at_index\n\n\ndef find_element(arr, rotations, after_rotations, ranges, index):\n    \"\"\"\n    Helper function to find element at a given index after number of rotations.\n    \n    Args:\n    - arr: list of integers representing the array\n    - rotations: list of integers representing the number of rotations for each element in arr\n    - after_rotations: integer representing the total number of rotations required after finding the element\n    - ranges: list of integers representing the ranges of rotations for each element in arr\n    - index: integer representing the index of the element to be found\n    \n    Returns:\n    - integer representing the element at the given index after number of rotations\n    \"\"\"\n    \n    # If the index is at the end of the array, return the element at the index\n    if index == len(arr) - 1:\n        return arr[index]\n    \n    # If the after_rotations are 0, return the element at the index\n    if after_rotations == 0:\n        return arr[index]\n    \n    # Calculate the maximum number of rotations required for the remaining elements\n    max_rotations = max(rotations)\n    \n    # If the remaining rotations are greater than the maximum rotations, return None\n    if max_rotations > after_rotations:\n        return None\n    \n    # Calculate the remaining rotations after finding the element at the index\n    remaining_rotations = after_rotations - rotations[index]\n    \n    # Calculate the start index of the range of rotations required for the element at the index\n    start_index = element_index_to_range_index(index, ranges)\n    \n    # Find the element at the given index in the sub-array after the start index\n    element_at_subarray = find_element(arr[start_index:], rotations[start_index:], remaining_rotations, ranges[start_index:], index - start_index)\n    \n    # If the element at the sub-array is None, return None\n    if element_at_subarray is None:\n        return None\n    \n    # Calculate the element at the index after rotations\n    element_at_index = element_at_subarray\n    \n    # If the index is at the start of the array, return the element at the index\n    if index == 0:\n        return element_at_index\n    \n    # Calculate the start index of the range of rotations required for the element at the previous index\n    prev_start_index = element_index_to_range_index(index - 1, ranges)\n    \n    # Find the element at the previous index in the sub-array after the start index\n    element_at_prev_index = find_element(arr[:prev_start_index], rotations[:prev_start_index], remaining_rotations - rotations[prev_start_index], ranges[:prev_start_index], prev_start_index)\n    \n    # If the element at the previous index is None, return None\n    if element_at_prev_index is None:\n        return None\n    \n    # Calculate the element at the index\n    element_at_index = element_at_prev_index + element_at_index\n    \n    return element_at_index\n\n\ndef element_index_to_range_index(index, ranges):\n    \"\"\"\n    Helper function to convert the index of the element to the corresponding range index.\n    \n    Args:\n    - index:"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    def find_rotation_index(arr, ranges, rotations, index):\n        for i in range(len(ranges)):\n            if index < ranges[i]:\n                return i\n        return len(ranges) - 1\n\n    def find_element(arr, ranges, rotations, index):\n        i = find_rotation_index(arr, ranges, rotations, index)\n        while i < len(ranges):\n            if index == ranges[i]:\n                return arr[index]\n            elif index < ranges[i]:\n                return arr[ranges[i]]\n            index -= ranges[i] - ranges[i-1]\n            i += 1\n        return None\n\n    return find_element(arr, ranges, rotations, index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    This function takes in the array, ranges of rotations, index and returns the element at the given index after rotating it by the given number of rotations.\n    '''\n\n    # Calculate the total number of rotations\n    total_rotations = 0\n    for i in range(len(ranges)):\n        total_rotations += ranges[i] * rotations[i]\n\n    # Calculate the final index after rotating\n    final_index = (index + total_rotations) % len(arr)\n\n    # Return the element at the final index\n    return arr[final_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the number of rotations required\n    no_rotations = 0\n    for r in ranges:\n        if index >= r:\n            no_rotations += 1\n            index -= r\n\n    # Update the index after the rotations\n    index = (index % len(arr)) + (rotations * no_rotations)\n\n    # Return the element at the updated index\n    return arr[index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    pattern = r'^p.'\n    for word in words:\n        if re.match(pattern, word):\n            return word, words[words.index(word)+1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    for word in words:\n        if re.match(pattern, word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match('^p[a-zA-Z]+$', word)]\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^\\w+')\n    for word in words:\n        if pattern.match(word):\n            return word, words.pop(words.index(word))\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'p\\w+', words)\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p'.\"\n    else:\n        return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Find all words starting with 'p' using regex\n    pattern = re.compile(r'p\\w+')\n    p_words = re.findall(pattern,''.join(words))\n    # If there are at least two 'p' words, return them, otherwise return an empty tuple\n    if len(p_words) >= 2:\n        return p_words\n    else:\n        return ()"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Initialize two empty lists to store the words starting with 'p'\n    p_words = []\n    q_words = []\n\n    # Loop through the words in the input list\n    for word in words:\n\n        # Check if the first letter of the word is 'p'\n        if word[0].lower() == 'p':\n\n            # If the word is starting with 'p', add it to either the 'p_words' or 'q_words' list\n            p_words.append(word)\n        else:\n            q_words.append(word)\n\n    # Check if there are at least two words starting with 'p'\n    if len(p_words) >= 2:\n\n        # Randomly select two words from the 'p_words' list\n        selected_p_words = p_words[0:2]\n\n        # Randomly select two words from the 'q_words' list\n        selected_q_words = q_words[0:2]\n\n    else:\n\n        # If there are less than two words starting with 'p', return both 'q_words'\n        selected_p_words = []\n        selected_q_words = q_words[0:2]\n\n    # Return the selected 'p_words' and 'q_words'\n    return selected_p_words, selected_q_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p.*', word):\n            p_words.append(word)\n        if len(p_words) == 2:\n            break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+$'\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    # Initialize the sum of the prefix of the sequence up to index\n    for i in range(index):\n        curr_sum += a[i]\n    # If the last element is greater than or equal to k, add it to the sum as well\n    if a[index-1] >= k:\n        curr_sum += a[index-1]\n    # Initialize the array of increasing subsequences\n    is_increasing = [True] * n\n    # Iterate through the remaining elements of the sequence\n    for i in range(index, n):\n        # If the current element is less than the kth element, we cannot include it in the subsequence\n        if a[i] < k:\n            # If the element is increasing, update the maximum sum and mark all the elements before it as increasing\n            if is_increasing[i-1]:\n                curr_sum = max(curr_sum, curr_sum + a[i])\n                is_increasing[i] = True\n            # Otherwise, mark the element as not increasing and continue with the next one\n            else:\n                is_increasing[i] = False\n                curr_sum = 0\n        # If the current element is greater than or equal to the kth element, we include it in the subsequence\n        else:\n            # If the element is increasing, update the maximum sum and mark all the elements before it as increasing\n            if is_increasing[i-1]:\n                curr_sum = max(curr_sum, curr_sum + a[i])\n                is_increasing[i] = True\n            # Otherwise, mark the element as not increasing and continue with the next one\n            else:\n                is_increasing[i] = False\n                curr_sum = 0\n    # If the last element is less than the kth element, we cannot include it in the subsequence\n    if a[n-1] < k:\n        return 0\n    # Otherwise, return the maximum sum of the increasing subsequence up to k\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Initialize variables\n    current_sum = 0\n    max_sum = float('-inf')\n    inc_subseq_sum = 0\n    \n    # Iterate through the array\n    for i in range(index, n):\n        # Check if the current element is smaller than k\n        if a[i] < k:\n            # Add the element to the sum of the current subsequence\n            inc_subseq_sum += a[i]\n            \n            # Update the maximum sum if the current sum is greater than the previous maximum sum\n            if inc_subseq_sum > max_sum:\n                max_sum = inc_subseq_sum\n                \n            # Reset the current subsequence sum to the element plus the sum of the previous subsequence\n            current_sum = a[i] + inc_subseq_sum\n            \n        # If the current element is equal to k, add the element to the current subsequence and update the maximum sum\n        else:\n            inc_subseq_sum = a[i]\n            current_sum = a[i]\n            \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    elif index == k:\n        return a[k]\n    else:\n        max_so_far = max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k-1) + a[index])\n        return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    max_sum = max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k-1))\n    if index < k:\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index+1, k))\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k <= index:\n        return a[index]\n    if k == index + 1:\n        return a[index] + a[k]\n    if index == 0:\n        return max(a[0] + max_sum_increasing_subseq(a, n, index + 1, k),\n                    max_sum_increasing_subseq(a, n, index + 1, k + 1))\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k),\n                    max_sum_increasing_subseq(a, n, index - 1, k + 1),\n                    max_sum_increasing_subseq(a, n, index - 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    def is_valid_prefix(prefix_sum, i, k):\n        \"\"\"\n        Check if the prefix sum is valid or not.\n        \"\"\"\n        if k <= i:\n            return prefix_sum <= 0\n        else:\n            return prefix_sum <= a[k]\n\n    def find_longest_increasing_subseq(a, n, index, k):\n        \"\"\"\n        Find the longest increasing subsequence from prefix until ith index and also including a given kth element which is after i.\n        \"\"\"\n        max_sum = float('-inf')\n        current_sum = 0\n        prefix_sum = 0\n        prefix_index = index\n        for i in range(index, n):\n            if a[i] > a[prefix_index]:\n                prefix_index = i\n                current_sum = a[i] + prefix_sum\n            else:\n                current_sum = prefix_sum + a[i]\n            if is_valid_prefix(current_sum, i, k):\n                if current_sum > max_sum:\n                    max_sum = current_sum\n        return max_sum\n\n    return find_longest_increasing_subseq(a, n, index, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k == 0:\n        return 0\n    if index == n - 1:\n        return 0\n    if index >= k:\n        if a[index] > a[index - k]:\n            return max(max_sum_increasing_subseq(a, n, index, k - 1) + a[index], max_sum_increasing_subseq(a, n, index - 1, k))\n        else:\n            return max_sum_increasing_subseq(a, n, index - 1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n:\n        return 0, []\n\n    if k > index:\n        return 0, []\n\n    if k == index:\n        return a[index], [index]\n\n    if k < index:\n        dp = [0] * n\n        dp[index] = a[index]\n        for i in range(index):\n            if a[i] < a[index]:\n                temp = max(dp[i] + a[i], dp[i + 1])\n                dp[i + 1] = temp\n        return dp[index], list(range(index))\n\n    # k is greater than or equal to index\n    dp = [0] * (k + 1)\n    max_sum = 0\n    start = 0\n    for i in range(1, k + 1):\n        if i > index:\n            continue\n        temp = max(a[index] + dp[i - 1], dp[i])\n        dp[i] = temp\n        if temp > max_sum:\n            max_sum = temp\n            start = i - 1\n\n    return max_sum, list(range(index, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n    a: list of integers\n    n: integer\n    index: integer\n    k: integer\n\n    Returns:\n    max_sum: integer\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    prev_subseq_sum = 0\n\n    # Iterate over all indices from 0 to index\n    for i in range(index):\n        # Calculate the current subsequence sum\n        curr_subseq_sum = a[i] + prev_subseq_sum\n\n        # Check if the current subsequence sum is greater than the previous maximum sum\n        if curr_subseq_sum > max_sum:\n            max_sum = curr_subseq_sum\n\n        # Check if the current subsequence sum is equal to the kth element after the index\n        if curr_subseq_sum == k:\n            return max_sum\n\n        # Update the previous subsequence sum\n        prev_subseq_sum = curr_subseq_sum\n\n    # If the kth element is not after the index, then the maximum sum is either the previous subsequence sum or the first element of the sequence (which is always 0)\n    if k > index:\n        return max_sum\n\n    # If the kth element is after the index, then the maximum sum is the maximum subsequence sum that ends at index\n    return max_sum + a[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize maximum sum and current sum to 0\n    max_sum = 0\n    curr_sum = 0\n\n    # Traverse through the array from 0 to n-1\n    for i in range(n):\n        # If current element is less than or equal to k\n        if i <= k:\n            # Add current element to current sum\n            curr_sum += a[i]\n            # Update maximum sum if current sum is greater than maximum sum so far\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        else:\n            # If current element is greater than k, reset current sum to current element\n            curr_sum = a[i]\n\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        for j in range(n):\n            col.append(deepcopy(tuplex[i][j]))\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copy the original tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Get the indices of the mth element\n    ind_m = m - 1\n    \n    # For each element in the tuple\n    for i in range(len(tuplex_copy)):\n        # Get the index of the i-th element\n        ind_i = i - 1\n        \n        # If the i-th element is equal to mth element\n        if tuplex_copy[i] == m:\n            # Get the index of the j-th element\n            ind_j = ind_m\n            \n            # If the i-th element is greater than the mth element\n            if i > m:\n                # Get the index of the j-th element\n                ind_j = i - m\n            \n            # Set the i-th element to the j-th element\n            tuplex_copy[i] = tuplex_copy[ind_j]\n            \n            # Remove the j-th element from the tuple\n            del tuplex_copy[ind_j]\n            \n            # If there is only one element left in the tuple\n            if len(tuplex_copy) == 1:\n                return tuplex_copy\n    \n    # If the tuple doesn't contain the mth element\n    return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n == 0:\n        return ()\n    if m == 0:\n        return (tuplex[0],)\n    col = deepcopy(tuplex)\n    col = col[:-n]\n    if n < m:\n        col = col[:m]\n    else:\n        col += (tuplex[-1],)\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0 or n < 0:\n        return []\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i]))\n    for i in range(n):\n        col.append(deepcopy(tuplex[i+m]))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new list with the same length as the input list\n    colon = [None] * len(tuplex)\n    # loop through each element of the input list\n    for i in range(len(tuplex)):\n        # add a copy of the element to the colon list at the corresponding position\n        colon[i] = deepcopy(tuplex[i])\n        # split the tuple element into two parts at the specified index\n        # and add them to the colon list\n        colon[i][:m], colon[i][m:] = tuplex[i][n:n+m], tuplex[i][:n]\n    # return the colon list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    if m > len(tuplex) or n > len(tuplex[0]):\n        return None\n\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i]))\n\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Use deepcopy() to create a new tuple\n    colon = deepcopy(tuplex)\n    \n    # Get the size of the tuple\n    size = len(colon)\n    \n    # If the size is less than m, add m-size missing values\n    if size < m:\n        for i in range(m-size):\n            colon.append(0)\n    \n    # If the size is greater than m, remove the first n values\n    elif size > m:\n        for i in range(n):\n            colon.pop(0)\n    \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new tuple with the same elements as the input tuple\n    new_tup = deepcopy(tuplex)\n    # Get the length of the input tuple\n    length = len(tuplex)\n    # Loop through each element of the new tuple\n    for i in range(length):\n        # Get the starting index and ending index of the colon\n        start = i\n        end = i + n\n        # If the colon extends beyond the length of the input tuple, set the ending index to the length of the input tuple\n        if end > length:\n            end = length\n        # Set the elements of the colon to the first n elements of the input tuple\n        new_tup[i:end] = tuplex[:n]\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(deepcopy(tuplex[i:i+m]) for i in range(0, len(tuplex), m))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[:m] + (tuplex[m],) + new_tuplex[m+1:]\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Check if the length of the two input lists is equal\n    if len(nums1)!= len(nums2):\n        return \"Error: Input lists should have equal length.\"\n\n    # Initialize the largest products and their indices\n    max_product = float('-inf')\n    max_product_index1 = -1\n    max_product_index2 = -1\n\n    # Iterate through the combinations of the two input lists\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            # Find the product of the selected factors\n            product = nums1[i] * nums2[j-1]\n\n            # Check if the product is larger than the current largest product\n            if product > max_product:\n                max_product = product\n                max_product_index1 = i\n                max_product_index2 = j-1\n\n            # If the number of products we've found so far is equal to N, return the largest product\n            if N == 2:\n                return max_product\n\n    # If we've reached this point, there were not enough products to find\n    return \"Error: Not enough products found.\""
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize an empty list to store the largest products\n    largest_products = []\n\n    # loop through each element of the two lists\n    for i in range(len(nums1)):\n        # loop through each element of the second list\n        for j in range(len(nums2)):\n            # calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n\n            # if the product is larger than any previously calculated products, add it to the list\n            if product > max(largest_products):\n                largest_products.append(product)\n\n            # if the number of products we have found so far is equal to the desired number, break out of the inner loop\n            if len(largest_products) == N:\n                break\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the maximum products variables\n    max1 = 0\n    max2 = 0\n    max3 = 0\n    max4 = 0\n\n    # Loop through all possible combinations of selecting one factor from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            for k in range(len(nums1) - i):\n                for l in range(len(nums2) - j):\n                    # Calculate the maximum product from this combination\n                    max_product = max(nums1[i] * nums2[j], nums1[i] * nums2[l], nums1[k] * nums2[j], nums1[k] * nums2[l])\n\n                    # Update the maximum products if needed\n                    if max_product > max1:\n                        max4 = max3\n                        max3 = max2\n                        max2 = max1\n                        max1 = max_product\n                    elif max_product > max2:\n                        max4 = max3\n                        max3 = max2\n                        max2 = max_product\n                    elif max_product > max3:\n                        max4 = max3\n                        max3 = max_product\n                    elif max_product > max4:\n                        max4 = max_product\n\n    # Return the maximum N products\n    return max1, max2, max3, max4"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the largest product of any two factors\n    largest_product = 1\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if product > largest_product:\n                largest_product = product\n    \n    # Find the N largest products, with each product selected from the two input lists\n    for i in range(N):\n        largest_product = 0\n        for num1 in nums1:\n            for num2 in nums2:\n                product = num1 * num2\n                if product > largest_product:\n                    largest_product = product\n                    chosen_num1 = num1\n                    chosen_num2 = num2\n    \n    return chosen_num1, chosen_num2, largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    for i in range(N):\n        factor1 = max(nums1[:i+1])\n        factor2 = max(nums2[:i+1])\n        product = factor1 * factor2\n        max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    nums1 (list): List of integers.\n    nums2 (list): List of integers.\n    N (int): Number of largest products to find.\n\n    Returns:\n    list: List of integers representing the largest products of the selected factors.\n\n    Raises:\n    ValueError: If the length of the two lists is not equal.\n    ValueError: If the length of the selected factors is less than 1.\n    \"\"\"\n\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    if N < 1:\n        raise ValueError(\"The number of largest products to find must be at least 1.\")\n\n    # Create two lists of tuples, where each tuple contains a factor of the first list and the factor of the second list.\n    factors = []\n    for num1 in nums1:\n        for num2 in nums2:\n            factors.append((num1, num2))\n\n    # Sort the list of tuples in descending order of the absolute value of the product.\n    factors.sort(key=lambda x: abs(x[0] * x[1]), reverse=True)\n\n    # Extract the first N tuples from the sorted list of tuples.\n    selected_factors = factors[:N]\n\n    # Compute the product of the selected factors and return as a list.\n    result = [factor[0] * factor[1] for factor in selected_factors]\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through the first N elements of the sorted lists\n    for i in range(N):\n        # Calculate the product of the two smallest numbers\n        product = nums1[i] * nums2[i]\n\n        # Append the product to the result list\n        result.append(product)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    max_product_indices = []\n    \n    for i in range(N):\n        product1 = nums1[i]\n        product2 = nums2[i]\n        \n        if product1 > product2:\n            max_product = max(product1, max_product)\n            max_product_indices.append(i)\n        else:\n            max_product = max(product2, max_product)\n            max_product_indices.append(i)\n            \n    return max_product, max_product_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    product_sum = []\n    for num1 in nums1:\n        product = 1\n        for num2 in nums2:\n            product *= max(num1, num2)\n        product_sum.append(product)\n    product_sum.sort(reverse=True)\n    return product_sum[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_products = []\n\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        largest_products.append(product)\n\n    return largest_products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the maximum of those two numbers.\n    \"\"\"\n    return max(a, b)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list of characters\n    lst = list(str1)\n    # convert the list of characters to a tuple\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Split the string into individual characters\n    str_list = list(str1)\n    # Convert the list to a tuple\n    return tuple(str_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the integer to a binary string\n    bin_str = format(n, 'b')\n    # Loop through the binary string from right to left\n    for i in range(len(bin_str)-1, -1, -1):\n        # Check if the current bit is 0\n        if bin_str[i] == '0':\n            # Set the left most unset bit to 1\n            bin_str = bin_str[:i] + '1' + bin_str[i+1:]\n            # Convert the binary string back to an integer\n            n = int(bin_str, 2)\n            # Break out of the loop as we've found the left most unset bit\n            break\n    # Return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize a variable to keep track of the position of the leftmost unset bit\n    unset_bit_position = 0\n\n    # Iterate through the bits of n from right to left\n    for i in range(32, -1, -1): \n        if n & (1 << i) == 0: \n            # If a bit is found that is unset, set the unset_bit_position variable to the current bit position\n            unset_bit_position = i\n            # Break out of the loop since we have found the leftmost unset bit\n            break\n\n    # Set the leftmost unset bit in n to 1\n    n |= 1 << unset_bit_position\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert the number to binary\n    bin_n = bin(n)[2:]\n    # find the index of the leftmost unset bit\n    left_most_unset_bit_index = bin_n.find('1')\n    # if no unset bits exist, return the original number\n    if left_most_unset_bit_index == -1:\n        return n\n    # set the leftmost unset bit\n    else:\n        bin_n = bin_n[:left_most_unset_bit_index] + '1' + bin_n[left_most_unset_bit_index:]\n        return int(bin_n, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n > 0:\n        n &= (n-1)\n        count += 1\n    return count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert n to binary representation and count number of set bits from the right\n    count = 0\n    while n:\n        n &= (n-1)\n        count += 1\n\n    # set the left most unset bit to 1\n    bit = 1 << count\n    n |= bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the left most unset bit to -1\n    left_most_unset_bit = -1\n\n    # Iterate through the binary representation of n\n    for i in range(32):\n        # Check if the i-th bit is 1\n        if (n & (1 << i)) == 0:\n            # If it's not, set the left most unset bit to i\n            left_most_unset_bit = i\n            # Stop iterating through the binary representation\n            break\n\n    # If no unset bit was found, return n itself\n    if left_most_unset_bit == -1:\n        return n\n    # Otherwise, set the left most unset bit to 0 and return n with the bit set to 1\n    else:\n        return n | (1 << left_most_unset_bit)\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the bit position to -1\n    bit_position = -1\n    # Iterate over the bits of n from left to right\n    for i in range(32):\n        # If the current bit is set to 1, update the bit position\n        if n & 1 == 1:\n            bit_position = i\n            break\n        # Shift the bits to the right\n        n = n >> 1\n    # If there are no unset bits, return -1\n    if bit_position == -1:\n        return -1\n    # Set the left most unset bit to 1\n    return n | (1 << bit_position)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given number.\n    '''\n    # Initialize the rightmost set bit as 0\n    rightmost_set_bit = 0\n    \n    # Iterate over each bit from right to left\n    for i in range(32): \n        # If the current bit is unset, set it as the rightmost set bit\n        if (n >> i) & 1 == 0:\n            rightmost_set_bit = i\n            break\n    \n    # Set the leftmost unset bit as the rightmost set bit + 1\n    leftmost_unset_bit = rightmost_set_bit + 1\n    \n    # Set the leftmost unset bit to 1\n    n &= ~(~0 << leftmost_unset_bit)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in an integer n.\n    '''\n    # Initialize the leftmost unset bit to 1\n    leftmost_unset_bit = 1\n    \n    # Loop through all the bits in n\n    while leftmost_unset_bit & n:\n        # If the leftmost unset bit is set, shift it one position to the left\n        leftmost_unset_bit <<= 1\n        \n    return leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in the given integer.\n    It returns the new integer with the leftmost unset bit set.\n    \"\"\"\n    unset_bit = -n & (n ^ (n-1))\n    return n | unset_bit"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * (r**2) * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes two arguments: r (radius) and h (height). \n    It calculates the volume of a cone using the formula:\n    V = 1/3 * pi * r^2 * h\n    '''\n    V = 1/3 * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n\n    Args:\n    r (float): the radius of the base of the cone\n    h (float): the height of the cone\n\n    Returns:\n    float: the volume of the cone\n    '''\n\n    pi = math.pi\n    volume = (1/3) * pi * r**2 * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2 # formula for the area of a cone\n    volume = area * h # formula for the volume of a cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume using Heron's formula\n    # see https://en.wikipedia.org/wiki/Heron's_formula\n    s = (3 * r**2 + h**2) / (2 * h)\n    return math.sqrt(s * (s - r)**2)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments: r (radius) and h (height).\n    It returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    # Find the highest power of 2 that is less than or equal to n\n    for i in range(1, n+1):\n        if (1 << i) > n:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    \n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes a number n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Convert n to binary string\n    binary_str = bin(n)[2:]\n    # Find the length of the binary string\n    length = len(binary_str)\n    # Initialize the highest power of 2 to 1\n    highest_power = 1\n    # Loop through the binary string and check if the current digit is 1\n    for i in range(length - 1, -1, -1):\n        if binary_str[i] == '1':\n            # If it is 1, multiply the highest power of 2 by 2\n            highest_power *= 2\n    # Return the highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize a variable to store the highest power of 2\n    highest_power = 1\n\n    # Loop through all possible values of x from 1 to n and compare it to the current highest power of 2\n    while n > highest_power:\n        highest_power *= 2\n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2 found so far\n    highest_power = 1\n    \n    # Iterate from 2 to n (inclusive)\n    for i in range(2, n+1): \n        # Check if the current power of 2 is greater than the highest power found so far\n        if i > highest_power: \n            highest_power = i\n    \n    # Return the highest power of 2 found\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        for i in range(3, n+1):\n            if i & (i-1) == 0:\n                return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        i = 0\n        while n > 1:\n            i += 1\n            n = n >> 1\n        return 1 << i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return i\n        i += 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable to keep track of the highest power of 2\n    max_power = 0\n\n    # Loop through all the numbers from 1 to n, checking if each number is a power of 2\n    for i in range(1, n+1):\n        if i == 1:\n            # If the number is 1, it is the highest power of 2\n            max_power = 1\n        else:\n            # If the number is not 1, check if it is a power of 2\n            while i % 2 == 0:\n                i = i // 2\n                max_power += 1\n\n    # Return the highest power of 2 that is less than or equal to n\n    return max_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n): \n        a, b = b, a + b\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2)) % 1000000007"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string % element)\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_item = string.format(item)\n        new_list.append(new_item)\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # create a list of tuples to store the data\n    data = [(k, v) for k, v in zip(l1, l2) for _ in range(l3)]\n    # create an empty dictionary to store the result\n    result = {}\n    # iterate through the list of tuples and add the data to the result dictionary\n    for k, v in data:\n        if k not in result:\n            result[k] = [v]\n        else:\n            result[k].append(v)\n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(args)):\n        for j in range(len(args[i])):\n            key = args[i][j]\n            value = args[i+1][j]\n            if key not in result:\n                result[key] = [value]\n            else:\n                result[key].append(value)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    # iterate over each list\n    for i in range(len(l1)):\n        # add the list items as keys to the result dictionary\n        result[l1[i]] = l2[i]\n        # add the list items as values to the result dictionary\n        result[l1[i]][l3[i]] = l3[i]\n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # Create a nested dictionary to store the converted data\n    data = {}\n    \n    # Iterate through each list and append its elements to the corresponding keys in the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = l2[i]\n    for i in range(len(l1), len(l1)+len(l2)):\n        data[l1[i-len(l1)]].append(l3[i-len(l1)])\n    \n    # Return the converted dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    data = {}\n    for i in range(len(l1)):\n        data[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert the first list to a dictionary\n    d1 = dict(zip(l1[0], l1[1]))\n    \n    # Convert the second list to a dictionary\n    d2 = dict(zip(l2[0], l2[1]))\n    \n    # Convert the third list to a dictionary\n    d3 = dict(zip(l3[0], l3[1]))\n    \n    # Combine the three dictionaries into a single dictionary\n    result = {**d1, **d2, **d3}\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {'a':l1, 'b':l2, 'c':l3}\n    nested_dict = {}\n    for key, value in dict1.items():\n        nested_dict[key] = {'a':value}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for lst in args:\n        for i in range(len(lst)):\n            key = lst[i]\n            if isinstance(key, int):\n                key = str(key)\n            if key not in result:\n                result[key] = []\n            result[key].append(lst[i+1])\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Converts a list of lists into a nested dictionary.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            if j == 0:\n                key = item\n            elif j == 1:\n                value = item\n            else:\n                raise ValueError(\"Too many items in the list.\")\n            if key in result:\n                if isinstance(result[key], list):\n                    result[key].append(value)\n                else:\n                    result[key] = [result[key], value]\n            else:\n                result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List of strings.\n        l2 (list): List of integers.\n        l3 (list): List of floats.\n\n    Returns:\n        dictionary: Nested dictionary with lists as values.\n    \"\"\"\n\n    # Create a nested dictionary\n    nested_dict = {\n        'list_of_strings': l1,\n        'list_of_integers': l2,\n        'list_of_floats': l3\n    }\n\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # Base case: sum of first n natural numbers\n    if n == 1:\n        return n\n    \n    # Recursive case: find maximum sum by adding numbers from n/2, n/3, n/4, n/5\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def helper(n, memo):\n        if n <= 0:\n            return 0\n        if n in memo:\n            return memo[n]\n        memo[n] = max(helper(n // 2, memo) + helper(n // 3, memo) + helper(n // 4, memo) + helper(n // 5, memo), n)\n        return memo[n]\n\n    return helper(n, {})"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    half = n//2\n    third = n//3\n    fourth = n//4\n    fifth = n//5\n    \n    if half <= 1:\n        half_sum = n\n    else:\n        half_sum = get_max_sum(half)\n    \n    if third <= 1:\n        third_sum = n\n    else:\n        third_sum = get_max_sum(third)\n    \n    if fourth <= 1:\n        fourth_sum = n\n    else:\n        fourth_sum = get_max_sum(fourth)\n    \n    if fifth <= 1:\n        fifth_sum = n\n    else:\n        fifth_sum = get_max_sum(fifth)\n    \n    max_sum = max(half_sum + third_sum + fourth_sum + fifth_sum, n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base case: if n is 1, the maximum sum is 1\n    if n == 1:\n        return 1\n    \n    # recursive case: calculate maximum sum of (n/2), (n/3), (n/4), and (n/5)\n    sub_max1 = get_max_sum(n//2)\n    sub_max2 = get_max_sum(n//3)\n    sub_max3 = get_max_sum(n//4)\n    sub_max4 = get_max_sum(n//5)\n    \n    # find maximum sum of f(n/2), f(n/3), f(n/4), and f(n/5)\n    max_sum = max(sub_max1, sub_max2, sub_max3, sub_max4)\n    \n    # add n to the maximum sum\n    max_sum += n\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case: if n is 1 or 0, the maximum sum is n.\n    if n == 1 or n == 0:\n        return n\n    \n    # Recursive case: find the maximum sum of n/2, n/3, n/4, n/5 and n itself.\n    a = get_max_sum(n//2)\n    b = get_max_sum(n//3)\n    c = get_max_sum(n//4)\n    d = get_max_sum(n//5)\n    max_sum = max(a, b, c, d, n)\n    \n    # Return the maximum sum found.\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + n\n\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + n + get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize variables to keep track of maximum length and index of maximum length\n    max_length = 0\n    max_index = -1\n    \n    # iterate through each element of the list\n    for i in range(len(input_list)):\n        # check if current element is longer than maximum length\n        if len(input_list[i]) > max_length:\n            # update maximum length and index of maximum length\n            max_length = len(input_list[i])\n            max_index = i\n    \n    # return the list with the maximum length\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize max_length variable with the first element in the list\n    max_length = len(input_list[0])\n    # Iterate over the rest of the list\n    for i in range(1, len(input_list)):\n        # Check if the length of the current element is greater than max_length\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    # Return the list with maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes in a list and returns the list with the maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store the elements of the tuple\n    set_test_tup = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(set_test_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set_tup = set(test_tup)\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates and check if it's empty\n    return bool(len(set(test_tup)))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store the unique elements of the tuple\n    unique_set = set(test_tup)\n    # check if the length of the set is the same as the length of the tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Check if the tuple has any duplicates\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # initialize a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # otherwise, increment its count by 1\n        else:\n            char_count[char] += 1\n\n    # loop through the keys of the dictionary to find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the string again to find the first non-repeated character\n    for i in range(len(str1)):\n        if char_count[str1[i]] == 1:\n            return str1[i]"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store character counts\n    char_count = {}\n    # loop through the string and update the count for each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # loop through the string again and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    first_non_repeating = ''\n    for char in char_count:\n        if char_count[char] == 1:\n            first_non_repeating = char\n            break\n    \n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the characters and their frequency\n    char_freq = {}\n\n    # loop through the string and count the frequency of each character\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # loop through the string again and return the first character with frequency 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    # if no character has frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # creating an empty dictionary to store the frequency of each character in the string\n    char_freq = {}\n    # iterating through each character in the string\n    for char in str1:\n        # checking if the character is already present in the dictionary\n        if char in char_freq:\n            # if it is, then incrementing its frequency by 1\n            char_freq[char] += 1\n        else:\n            # if it is not, then adding it to the dictionary with a frequency of 1\n            char_freq[char] = 1\n    # iterating through each character in the string again to find the first non-repeated character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    # if no non-repeated character is found, then returning None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # iterate through the dictionary to find the first non-repeated character\n    for key, value in freq_dict.items():\n        if value == 1:\n            return key\n    \n    # if all characters are repeated, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    This function takes a string as input and returns True if the string starts and ends with the same character\n    or False otherwise.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    sorted_list = sorted([a,b,c])\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2-1] + sorted_list[n//2])/2\n    else:\n        return sorted_list[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    if a > b and a > c:\n        if b > c:\n            return a\n        else:\n            return c\n    elif b > a and b > c:\n        if a > c:\n            return b\n        else:\n            return c\n    else:\n        if a > b:\n            return c\n        else:\n            return b"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers\n    nums = sorted([a, b, c])\n\n    # Calculate the median\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        median = nums[len(nums) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sorting the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median based on the number of elements in the array\n    if len(sorted_numbers) % 2 == 0:\n        # If the array has even number of elements\n        median_index = len(sorted_numbers) // 2\n        median = (sorted_numbers[median_index-1] + sorted_numbers[median_index])/2\n    else:\n        # If the array has odd number of elements\n        median_index = len(sorted_numbers) // 2\n        median = sorted_numbers[median_index]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    nums = sorted([a,b,c])\n    \n    # calculate the mid-point of the sorted list\n    mid = len(nums)//2\n    \n    # check if the length of the list is odd or even\n    if len(nums) % 2 == 0:\n        # find the average of the two middle numbers\n        median = (nums[mid-1] + nums[mid]) / 2\n    else:\n        # return the middle number\n        median = nums[mid]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2-1] + sorted_numbers[n//2])/2\n    else:\n        median = sorted_numbers[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes in three numbers as input and returns their median.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Check if the numbers are distinct\n    if numbers[0] == numbers[1] or numbers[1] == numbers[2] or numbers[0] == numbers[2]:\n        return None\n\n    # Check if the numbers are odd or even\n    if len(numbers) % 2 == 0:\n        # Return the average of the two middle numbers\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        # Return the middle number\n        return numbers[len(numbers) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers.\n    \"\"\"\n    # First, we sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Next, we calculate the median\n    if len(nums) % 2 == 0:\n        # If the length of the list is even, we take the average of the two middle numbers\n        median = (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        # If the length of the list is odd, we take the middle number\n        median = nums[len(nums) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle number\n    middle_number = sorted_numbers[1]\n\n    # Check if the middle number is even or odd\n    if len(sorted_numbers) % 2 == 0:\n        # If the middle number is even, then the median is average of the two middle numbers\n        median = (middle_number + sorted_numbers[len(sorted_numbers) // 2 - 1]) / 2\n    else:\n        # If the middle number is odd, then the median is the middle number\n        median = middle_number\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        temp = num\n        while temp!= 0:\n            digit_sum += temp % 10\n            temp //= 10\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(d) for d in str(num)]\n        # Compute the sum of the digits\n        total = sum(digits)\n        # Print the sum of digits for each number\n        print(f\"{num}: {total}\")"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result += digit_sum\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_num = 0\n        for digit in str(num):\n            sum_num += int(digit)\n        sum_list.append(sum_num)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        # Convert the string to a list of digits\n        num_list = list(num_str)\n        # Initialize a variable to store the sum of digits in this number\n        digit_sum = 0\n        # Loop through each digit in the number\n        for digit in num_list:\n            # Convert the digit to an integer\n            digit_int = int(digit)\n            # Add the digit to the sum of digits in this number\n            digit_sum += digit_int\n        # Add the sum of digits in this number to the total sum\n        total += digit_sum\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        num_str = str(num)\n        total_sum += sum(int(digit) for digit in num_str)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = sum(map(int, str(num)))\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert the tuples to lists to perform bitwise xor operation\n    list_tup1 = list(test_tup1)\n    list_tup2 = list(test_tup2)\n    \n    # Perform bitwise xor operation on each element of the lists\n    for i in range(len(list_tup1)):\n        list_tup1[i] = list_tup1[i] ^ list_tup2[i]\n    \n    # Convert the modified list back to tuple and return the result\n    return tuple(list_tup1)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through each element in the first tuple and perform the bitwise xor operation with the corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] ^ test_tup2[i])\n    # Return the result as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    result_tup = ()\n\n    # iterate through each element in the tuple\n    for i in range(len(test_tup1)):\n        # perform bitwise xor operation\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum ^= test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize a variable to store the result\n    xor_result = 0\n    \n    # Loop through each element of the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i]\n        xor_result ^= test_tup2[i]\n    \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with 0 values\n    result_tup = (0, 0)\n    # Loop through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create a dictionary to keep track of the frequency of each tuple in the list\n    freq_dict = {}\n    # Loop through each element in the list\n    for elem in test_list:\n        # If the tuple is already in the dictionary, increment its frequency\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # If the tuple is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[elem] = 1\n    # Return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Iterate over the list and add each tuple to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n\n    # Return the size of the set, which represents the number of unique tuples in the list\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    from collections import Counter\n\n    # Create a set of unique tuples in the list\n    unique_tuples = set(tuple(i) for i in test_list)\n\n    # Count the number of unique tuples\n    freq = Counter(unique_tuples)\n\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    unique_tuples = [key for key, value in freq_dict.items() if value == 1]\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        for tup in item:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # loop through the second tuple\n        for j in range(len(test_tup2[0])):\n            # add the elements at the corresponding indices of both tuples\n            test_tup1[i] = test_tup1[i] + test_tup2[0][j]\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the resultant tuple\n    result_tup = []\n    \n    # Loop through each index of the two input tuples\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of the two input tuples and store the result in the resultant tuple\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    \n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        sub_result = []\n        for j in range(len(test_tup1[i])):\n            sub_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(sub_result)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = ()\n    # Loop through the input tuples\n    for i in range(len(test_tup1)):\n        # If the length of the result tuple is less than the length of the input tuple,\n        # append the next element of the input tuple to the result tuple\n        if len(result_tup) < len(test_tup1):\n            result_tup += (test_tup1[i] + test_tup2[i],)\n        # If the length of the result tuple is greater than or equal to the length of the input tuple,\n        # append the sum of the next element of both input tuples to the result tuple\n        else:\n            result_tup += (test_tup1[i] + test_tup2[i],)\n    # Return the final result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result_list.append(test_tup1[i][j] + test_tup2[i][j])\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples should have same number of elements.')\n\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a list to store the result of addition\n    result_list = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through each element of the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the element of the first tuple at index i and the element of the second tuple at index j\n            result_list.append(test_tup1[i][j] + test_tup2[i][j])\n    # Return the result as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize result list with length of longer tuple\n    result = [0] * len(test_tup1) if len(test_tup1) > len(test_tup2) else [0] * len(test_tup2)\n\n    # loop through each index of result list and add corresponding elements from test_tup1 and test_tup2\n    for i in range(len(result)):\n        result[i] = test_tup1[i] + test_tup2[i]\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        # Using list comprehension to append elements of each nested tuple\n        result_list.append([test_tup1[i][j] + test_tup2[i][j] for j in range(len(test_tup1[i]))])\n    # Returning the resultant nested list\n    return result_list"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    This function finds the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:  \n        return a  \n    else:  \n        return b  "
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their minimum.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(f\"{tuplex} is present in tuple1.\") \n    else: \n        print(f\"{tuplex} is not present in tuple1.\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} is present in the tuple.\")\n    else:\n        print(f\"{tuplex} is not present in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for tup in tuplex:\n        if tup in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in range(1, x+1):\n        if x % i == 0:\n            parity += 1\n    if parity % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # If x is even, parity is odd\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1) == 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The number is even.\"\n    else: \n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # check if the number is positive\n    if x > 0: \n        # if the number is positive, check if it is odd or even\n        if x % 2 == 0: \n            return False\n        else:\n            return True\n    else:\n        return None"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number x as input and returns True if it is odd and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    num_str = ''.join(sorted(num_str, reverse=True))\n    num_str = ''.join([str(int(c)) for c in num_str])\n    num_int = int(num_str)\n    return num_int\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a list of digits\n    num = str(n)\n    digits = [int(d) for d in num]\n\n    # find the index of the largest digit\n    max_index = digits.index(max(digits))\n\n    # swap the digits at the beginning and end of the list\n    digits[0], digits[-1] = digits[-1], digits[0]\n\n    # find the new number by joining the digits in reverse order\n    new_num = ''.join(str(d) for d in digits[::-1])\n\n    # convert the new number to an integer and return it\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    This function takes an integer n as input and returns the next bigger number by rearranging the digits.\n    The next bigger number is defined as the largest integer that can be formed by rearranging the digits of n.\n    \"\"\"\n    # Convert the given integer to a string\n    s = str(n)\n    \n    # Find the length of the string\n    length = len(s)\n    \n    # Initialize the next bigger number as an empty string\n    next_bigger = \"\"\n    \n    # Loop through the digits of the string in reverse order\n    for i in range(length-1, -1, -1):\n        # If the digit is 0, move on to the next digit\n        if int(s[i]) == 0:\n            continue\n        \n        # Check if the next digit can form a number greater than 0\n        next_digit = int(s[i]) + 1\n        if next_digit <= 9:\n            next_bigger = str(next_digit) + next_bigger\n            break\n        \n        # If the next digit can't form a number greater than 0, add it to the next bigger number and move on to the next digit\n        next_bigger = str(int(s[i]) + 10) + next_bigger\n    \n    # Convert the next bigger number back to an integer and return it\n    return int(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string and convert it to a list\n    num_str = str(n)\n    num_list = list(num_str)\n\n    # Find the position of the maximum number in the list\n    max_pos = max(num_list.index(x) for x in num_list)\n\n    # Create a new number by swapping the digits of the maximum number with the digits of the original number\n    new_num_list = [num_list[max_pos]] + [num_list[i] for i in range(max_pos) if i!= max_pos] + [num_list[max_pos]]\n    new_num = int(''.join(new_num_list))\n\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    sorted_digits = sorted(digits, reverse=True)\n    \n    for i in range(len(digits)):\n        if digits[i] == sorted_digits[i]:\n            digits[i] = sorted_digits[i+1]\n        else:\n            break\n            \n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    number_str = str(n)\n    # Initialize the result to be the same as the input number\n    result = n\n    # Loop through the digits of the input number in reverse order\n    for i in range(len(number_str)-1, -1, -1):\n        # Check if the digit is 9 or more\n        if int(number_str[i]) >= 9:\n            # Convert the digit to 0\n            result_str = str(0)\n            # Add the previous digits of the input number\n            for j in range(i):\n                result_str += str(int(number_str[j]))\n            # Add the current digit\n            result_str += str(int(number_str[i])+1)\n            # Convert the result to an integer and store it in the result variable\n            result = int(result_str)\n            # Break out of the loop since we have already found the next bigger number\n            break\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # convert number to string\n    num_str = str(n)\n    # create a new string with digits in reverse order\n    reversed_num = ''.join(reversed(num_str))\n    # concatenate the digits in reverse order with zeros until we reach the desired length\n    result = reversed_num + '0' * (len(reversed_num) - n.bit_length())\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # find the digits of n\n    digits = list(map(int, str(n)))\n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    # join the sorted digits back into a string\n    result = ''.join(map(str, digits))\n    # convert the result to an integer\n    result = int(result)\n    # add 1 to the result to get the next bigger number\n    result += 1\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # convert the given number to a string\n    num_str = str(n)\n    \n    # find the largest number in the string\n    max_num = max(int(num_str[i]) for i in range(len(num_str)))\n    \n    # find the number that is one greater than the largest number in the string\n    next_bigger = max_num + 1\n    \n    # convert the next bigger number to a string\n    next_bigger_str = str(next_bigger)\n    \n    # reverse the order of the digits in the next bigger number string\n    reversed_next_bigger_str = next_bigger_str[::-1]\n    \n    # find the length of the reversed next bigger number string\n    reversed_next_bigger_len = len(reversed_next_bigger_str)\n    \n    # reverse the order of the digits in the original number string\n    reversed_num_str = num_str[::-1]\n    \n    # create a new number by concatenating the reversed next bigger number string and the original number string\n    new_num_str = reversed_next_bigger_str + reversed_num_str\n    \n    # convert the new number string to an integer and return it\n    return int(new_num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    # Find the index of the largest digit\n    max_index = digits.index(max(digits))\n    # Create a new list with the digits in reverse order\n    new_digits = digits[::-1]\n    # Move the largest digit to the end of the new list\n    new_digits.append(digits[max_index])\n    # Combine the new digits into a new number\n    new_number = int(''.join(str(d) for d in new_digits))\n    # Check if the new number is greater than the original number\n    if new_number > n:\n        return new_number\n    else:\n        return rearrange_bigger(new_number)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    minheap = []\n    heapq.heapify(minheap)\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            if len(minheap) < k:\n                heapq.heappush(minheap, (-num1, -num2))\n            elif minheap[0][0] > -num1 or minheap[0][1] > -num2:\n                heapq.heappop(minheap)\n                heapq.heappush(minheap, (-num1, -num2))\n    \n    result = []\n    for _ in range(k):\n        pair = -heapq.heappop(minheap)\n        result.append(pair)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    \n    i,j = 0,0\n    while len(pairs) < k and i < len(nums1) and j < len(nums2):\n        if nums1[i] + nums2[j] < nums1[i] + nums2[j-1]:\n            heapq.heappush(nums1, -nums1[i])\n            i += 1\n        elif nums1[i] + nums2[j] > nums1[i-1] + nums2[j]:\n            heapq.heappush(nums2, -nums2[j])\n            j += 1\n        else:\n            pair = (nums1[i], nums2[j])\n            pairs.append(pair)\n            heapq.heappush(nums1, -nums1[i])\n            heapq.heappush(nums2, -nums2[j])\n            i += 1\n            j += 1\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n    \n    # Create two pointers for nums1 and nums2\n    i = 0\n    j = 0\n    \n    # While there are still k elements in the min heap and at least one element remains in each array\n    while len(min_heap) < k and i < len(nums1) and j < len(nums2):\n        # Compare the current pair with the smallest pair in the min heap\n        if (nums1[i] + nums2[j]) < min_heap[0][0]:\n            # If the pair is smaller than the smallest pair in the heap, update the min heap\n            heapq.heappushpop(min_heap, (nums1[i] + nums2[j], (i,j)))\n        else:\n            # If the pair is larger than the smallest pair in the heap, remove the smallest pair from the heap\n            heapq.heappop(min_heap)\n        \n        # Move the pointers to the next elements\n        i += 1\n        j += 1\n    \n    # Extract the k smallest pairs from the min heap\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    \n    # Sort the result in ascending order\n    result.sort()\n    \n    # Return the result\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap to store the pairs of numbers which are closest to each other\n    min_heap = []\n    \n    # Loop through the first array and for each number, calculate the number of pairs of numbers that are closest to it\n    for num1 in nums1:\n        closest_pairs = []\n        for num2 in nums2:\n            diff = abs(num1 - num2)\n            closest_pair = (diff, (num1, num2))\n            heapq.heappush(closest_pairs, closest_pair)\n        if len(closest_pairs) > k:\n            closest_pairs = sorted(closest_pairs, key=lambda x: x[0])[:k]\n        heapq.heappush(min_heap, closest_pairs)\n        \n    # Extract the required number of pairs from the min heap\n    pairs = []\n    while min_heap and k:\n        closest_pairs = heapq.heappop(min_heap)\n        pairs.extend(closest_pairs)\n        k -= 1\n        \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap to store the pairs with smallest values\n    min_heap = []\n    # Create a set to store the indices of the elements in the first array\n    index_set = set(range(len(nums1)))\n    # Iterate through the second array\n    for i in range(len(nums2)):\n        # If the element is not already in the index set, add it and update the index set\n        if nums2[i] not in index_set:\n            index_set.add(nums2[i])\n            # If the size of the heap is less than k, add the current pair to the heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[nums2.index(nums2[i])], nums2[i]))\n            # If the size of the heap is equal to k, compare the current pair with the smallest pair in the heap\n            elif len(min_heap) == k:\n                if nums1[nums2.index(nums2[i])] < min_heap[0][0]:\n                    min_heap[0] = (nums1[nums2.index(nums2[i])], nums2[i])\n                    heapq.heapify(min_heap)\n                elif nums1[nums2.index(nums2[i])] == min_heap[0][0]:\n                    heapq.heappush(min_heap, (nums1[nums2.index(nums2[i])], nums2[i]))\n            # If the size of the heap is greater than k, remove the smallest pair from the heap and add the current pair to the heap\n            else:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (nums1[nums2.index(nums2[i])], nums2[i]))\n    # Return the k smallest pairs\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n\n    # Iterate through the arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Calculate the difference between the two numbers\n            diff = num1 + num2\n\n            # If the difference is greater than 0, add the current pair to the min heap\n            if diff > 0:\n                heapq.heappush(min_heap, (diff, (num1, num2)))\n\n            # If we have found k pairs, break out of the inner loop\n            if len(min_heap) == k:\n                break\n\n    # Initialize the result list and sort the min heap\n    result = []\n    while min_heap:\n        diff, pair = heapq.heappop(min_heap)\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of tuples (diff, i, j) where diff is the absolute difference between nums1[i] and nums2[j]\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            diff = abs(nums1[i] - nums2[j])\n            heapq.heappush(min_heap, (-diff, i, j))\n            # if the heap size exceeds k, pop the smallest element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    \n    # create a list to store the smallest pairs\n    pairs = []\n    # iterate over the heap elements\n    while min_heap:\n        diff, i, j = heapq.heappop(min_heap)\n        # add the pair to the list\n        pairs.append((nums1[i], nums2[j]))\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the first array in ascending order\n    nums1.sort()\n    # Initialize a min heap\n    min_heap = []\n    # Initialize the result list\n    result = []\n    # Initialize the count variable\n    count = 0\n    \n    # Iterate over the second array\n    for num in nums2:\n        # Initialize a counter variable for the current number\n        curr_count = 0\n        # Initialize two pointers for the current number\n        left = 0\n        right = len(nums1) - 1\n        \n        # While there are elements in the min heap and the left pointer is less than or equal to the right pointer\n        while curr_count < k and left <= right:\n            # Calculate the current pair sum\n            pair_sum = nums1[left] + num\n            \n            # If the pair sum is smaller than the current smallest element in the min heap, pop it and add the pair to the result list\n            if pair_sum < nums1[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, pair_sum)\n                curr_count += 1\n            # Otherwise, increment the left pointer\n            else:\n                left += 1\n        \n        # If the current number has at least k pairs, add the current number to the result list\n        if curr_count >= k:\n            result.append(num)\n            count += 1\n    \n    # Return the result list and the count\n    return result, count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Build a min heap of tuples (min_distance, (index1, index2))\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            dist = abs(nums1[i] - nums2[j])\n            heapq.heappush(heap, (dist, (i, j)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    # Extract the k smallest pairs and return them as a list of tuples\n    pairs = []\n    while heap:\n        dist, (i, j) = heapq.heappop(heap)\n        pairs.append((nums1[i], nums2[j]))\n        if len(heap) < k:\n            continue\n        for _ in range(k - 1):\n            dist, (i, j) = heapq.heappop(heap)\n            pairs.append((nums1[i], nums2[j]))\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n        nums1 (list of integers): A list of integers.\n        nums2 (list of integers): A list of integers.\n        k (integer): The number of pairs to find.\n\n    Returns:\n        A list of tuples of the form (pair1, pair2), where pair1 is an element from the first array and pair2 is an element from the second array. The pairs are sorted in ascending order of their sum.\n\n    Examples:\n        >>> k_smallest_pairs([1, 7, 11], [2, 4, 6], 3)\n        [(1, 2), (1, 4), (1, 6), (7, 2), (7, 4), (7, 6), (11, 2), (11, 4), (11, 6)]\n    \"\"\"\n    # Create a min heap of size k to store the smallest pairs found so far\n    min_heap = []\n\n    # Iterate over the first array and add the first element to the min heap\n    heapq.heappush(min_heap, (nums1[0], 0))\n\n    # Iterate over the second array and remove the smallest element from the min heap\n    # and add the sum of the pair to the min heap\n    while len(min_heap) < k:\n        _, index1 = heapq.heappop(min_heap)\n        for index2, num2 in enumerate(nums2):\n            # Check if adding the current pair to the min heap would result in a larger sum than the current smallest pair\n            if num2 + heapq.heappop(min_heap)[0] < nums1[index1]:\n                heapq.heappush(min_heap, (num2 + nums1[index1], index1, index2))\n\n    # Pop k elements from the min heap and convert them to pairs\n    pairs = []\n    while min_heap:\n        pair, index1, index2 = heapq.heappop(min_heap)\n        pairs.append((nums1[index1], nums2[index2]))\n\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of the tuples in the list.\n    The minimum product is defined as the product of two tuples whose elements are the smallest among the pairs of tuples.\n    '''\n\n    # Calculate the sum of all the elements in the list\n    total_sum = sum(x for tup in list1 for x in tup)\n\n    # Create a dictionary to store the product of the smallest pairs of tuples\n    min_dict = {}\n\n    # Iterate over all the tuples in the list\n    for tup in list1:\n\n        # Calculate the product of the tuple elements\n        product = 1\n        for x in tup:\n            product *= x\n\n        # If the product is less than or equal to the current minimum product, update the dictionary with the new product\n        if product <= min_dict.get((tup[0], tup[1]), float('inf')):\n            min_dict[(tup[0], tup[1])] = product\n\n    # Calculate the minimum product and return it\n    min_product = min(min_dict.values())\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples\n    sorted_list = sorted(list1)\n    \n    # Initialize variables for the minimum product and the current product\n    min_product = sorted_list[0][0] * sorted_list[0][1]\n    curr_product = sorted_list[0][0] * sorted_list[0][1]\n    \n    # Iterate through the sorted list of tuples\n    for i in range(1, len(sorted_list)):\n        # Calculate the current product\n        curr_product = sorted_list[i][0] * sorted_list[i][1]\n        \n        # Update the minimum product if the current product is smaller\n        if curr_product < min_product:\n            min_product = curr_product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Function to calculate the product of two numbers\n    def product(a, b):\n        return a * b\n    \n    # Initialize variables to store the minimum and maximum product\n    min_product = float('inf')\n    max_product = float('-inf')\n    \n    # Iterate through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current pair\n            current_product = product(list1[i], list1[j])\n            \n            # Update the minimum and maximum products\n            if current_product < min_product:\n                min_product = current_product\n            if current_product > max_product:\n                max_product = current_product\n    \n    # Calculate the minimum product between the minimum and maximum products\n    min_product_tuple = min_product / max_product\n    \n    return min_product_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Calculate the product of the first element of each tuple\n    products = [a * b for a, b in list1]\n    # Find the minimum product\n    minimum_product = min(products)\n    # Return the minimum product\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be the largest possible integer\n    min_product = float('inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Initialize the current product to be the largest possible integer\n        current_product = float('inf')\n\n        # Loop through each remaining tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and update the current product if it's smaller\n            current_product = min(current_product, list1[i][0] * list1[j][1])\n\n        # Update the minimum product if the current product is smaller\n        min_product = min(min_product, current_product)\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Define a function to calculate the product of two tuples\n    def product_of_tuples(t1, t2):\n        return t1[0] * t2[1]\n\n    # Create an empty list to store the products of each tuple\n    products = []\n\n    # Loop through each tuple in the list\n    for t1 in list1:\n        # Loop through each tuple in the list again\n        for t2 in list1:\n            # If the tuples are different, calculate the product and append it to the products list\n            if t1!= t2:\n                products.append(product_of_tuples(t1, t2))\n\n    # Calculate the minimum product\n    min_product = min(products)\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be the maximum value of a float\n    minimum_product = float('inf')\n    # Loop through the list of tuples and find the minimum product\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Find the product of the two tuples and check if it is smaller than the current minimum\n            product = list1[i][0] * list1[j][1]\n            if product < minimum_product:\n                minimum_product = product\n    # Return the minimum product\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n    # Iterate over each tuple in the list\n    for i in range(len(list1)):\n        # Iterate over each other tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare it to the current minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value variable\n    min_value = listval[0]\n\n    # Iterate through the list and compare each element with minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    # loop through the remaining elements of the list\n    for i in range(1, len(listval)):\n        # if an element is smaller than the current minimum, update the minimum\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Check if the list is empty\n    if not listval:\n        return None\n    # Initialize variables for minimum value and list of values\n    min_val = float('inf')\n    min_list = []\n    # Iterate over the list and compare each value to the minimum value\n    for val in listval:\n        # Check if the value is smaller than the current minimum\n        if val < min_val:\n            # Update the minimum value and list of values\n            min_val = val\n            min_list = [val]\n        # Check if the value is already in the list and smaller than the current minimum\n        elif val < min_list[-1]:\n            # Add the value to the list of values\n            min_list.append(val)\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to first element of the list\n    min_val = listval[0]\n    # Loop through the rest of the list and compare each element with the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first value in the list\n    min_val = listval[0]\n    \n    # loop through the rest of the values in the list\n    for i in range(1, len(listval)):\n        # if the current value is smaller than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n            \n    # return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    min_val = lst[0]  # initialize min_val to the first element of the list\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:  # check if the current element is smaller than the min_val\n            min_val = lst[i]  # update min_val if the current element is smaller\n    return min_val  # return the min_val as the output"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    components = word.split('_')\n    return ''.join(x.capitalize() for x in components)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', word)\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i][0].upper() + words[i][1:]\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    pattern = r'_(.?)(?=[A-Z])'\n    return re.sub(pattern, lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words separated by underscores\n    words = re.findall(r'\\w+', word)\n    # Capitalize the first word and join the remaining words with underscores\n    camel_case_word = words[0].capitalize()\n    for i in range(1, len(words)):\n        camel_case_word += '_' + words[i]\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Split the word into a list of words\n    word_list = re.findall(r'\\b\\w+\\b', word)\n\n    # Convert the first letter to lower case\n    first_word = word_list[0].lower()\n\n    # Convert the rest of the words to camel case\n    rest_of_words = [word.capitalize() for word in word_list[1:]]\n\n    # Join the words into a camel case string\n    camel_case_word = ''.join(first_word + word for word in rest_of_words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first word\n    words[0] = words[0].capitalize()\n    # Combine the words with camel case\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert the first word to lowercase and remove the trailing underscore\n    camel_word = words[0].lower()\n    # Convert the remaining words to camel case and join them with underscores\n    camel_words = [word.title() for word in words[1:]]\n    return camel_word + ''.join(camel_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_list = re.findall(r'([a-z]+)', word.lower())\n    camel_word = ''.join(word.capitalize() for word in word_list)\n    return camel_word.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_words = []\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case_words.append(word)\n        else:\n            camel_case_words.append(word.capitalize())\n    return ''.join(camel_case_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'[A-Z]'\n    matches = re.findall(pattern, word)\n    if matches:\n        first_match = matches[0]\n        rest_of_word = re.sub(pattern, '', word)\n        camel_word = first_match.lower() + rest_of_word.lower()\n        return camel_word\n    else:\n        return word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # create an empty list to store the even numbers\n    even_list = []\n\n    # iterate through each number in the input list\n    for num in l:\n        # if the number is even, add it to the even list\n        if num % 2 == 0:\n            even_list.append(num)\n\n    # return the even list\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n\n    Args:\n        list1 (list of tuples): List of tuples to extract the nth element from.\n        n (int): The nth element to be extracted.\n\n    Returns:\n        The nth element from the list of tuples.\n    \"\"\"\n    if n < 1 or n > len(list1):\n        raise ValueError(\"n must be between 1 and the length of the list.\")\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer as input.\n    It returns the nth element from the list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0:\n        return None\n    elif n > len(list1):\n        return \"Invalid index. Index should be less than or equal to the length of the list.\"\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= len(list1):\n        return list1[n-1]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if isinstance(list1, list) and isinstance(list1[0], tuple):\n            return list1[n-1]\n        else:\n            raise TypeError(\"Input must be a list of tuples\")\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if len(list1) < n:\n        raise ValueError(\"List should have at least {} elements\".format(n))\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if there is any overlapping value \n    in the two sequences, False otherwise.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if there is any value in the first sequence that exists in the second sequence, and False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any value in list1 that exists in list2 and False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check whether any value in a sequence exists in another sequence or not.\n\n    Args:\n    list1 (sequence): A sequence of values.\n    list2 (sequence): Another sequence of values.\n\n    Returns:\n    bool: True if any value in `list1` exists in `list2`, False otherwise.\n    '''\n\n    # Create a dictionary to store the count of each value in `list2`\n    count = {}\n    for value in list2:\n        if value in count:\n            count[value] += 1\n        else:\n            count[value] = 1\n\n    # Iterate over each value in `list1` and check if it exists in `count`\n    for value in list1:\n        if value in count:\n            count[value] -= 1\n            if count[value] < 0:\n                return True\n        else:\n            return True\n\n    # If we make it here, no value in `list1` was found in `list2`\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # create a set of values in list1\n    set1 = set(list1)\n    # create a set of values in list2\n    set2 = set(list2)\n    # find the intersection of the two sets\n    common = set1.intersection(set2)\n    # check whether the intersection is empty or not\n    if common:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with the highest product.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n                \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2, min1, min2 = float('-inf'), float('-inf'), float('inf'), float('inf')\n    for i in arr:\n        if i > max1:\n            max2, max1 = max1, i\n        elif i > max2 and i!= max1:\n            max2 = i\n        if i < min1:\n            min2, min1 = min1, i\n        elif i < min2 and i!= min1:\n            min2 = i\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    # Initialize variables for minimum and maximum values\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Loop through the array to find the maximum and minimum values\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            # If the current element is negative, swap the values of min and max\n            min_val, max_val = max_val, min_val\n\n        # Update minimum and maximum values\n        min_val = min(min_val, arr[i])\n        max_val = max(max_val, arr[i])\n\n    # Initialize variables for the maximum and minimum products\n    max_product = max(min_val, max_val)\n    min_product = min(min_val, max_val)\n\n    # Loop through the array again to find the pair with the highest product\n    for i in range(len(arr)):\n        if min_val * arr[i] > max_product:\n            max_product = min_val * arr[i]\n            pair_index = i\n        elif max_val * arr[i] > max_product:\n            max_product = max_val * arr[i]\n            pair_index = i\n\n    # Return the pair with the highest product\n    return arr[pair_index]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function finds a pair with the highest product from a given array of integers.\n\n    :param arr: list of integers\n    :return: tuple of integers representing the pair with the highest product\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    max_pair = (0,0)\n    min_product = float('inf')\n    min_pair = (0,0)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n            elif current_product < min_product:\n                min_product = current_product\n                min_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n\n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables to keep track of the maximum product and its indices\n    max_product = float('-inf')\n    max_product_index = 0\n    second_max_product = float('-inf')\n    second_max_product_index = 0\n\n    # Loop through each element of the array\n    for i in range(len(arr)):\n        # Update the maximum product if the current element is greater than it\n        if arr[i] > max_product:\n            second_max_product = max_product\n            max_product = arr[i]\n            second_max_product_index = max_product_index\n        # Update the second maximum product if the current element is greater than it and greater than the current maximum product\n        elif arr[i] > second_max_product and arr[i]!= max_product:\n            second_max_product = arr[i]\n            second_max_product_index = i\n\n        # Update the maximum product index if the current element is greater than the current second maximum product\n        elif arr[i] > max_product and arr[i]!= second_max_product:\n            max_product_index = i\n\n    # Return the indices of the pair with the highest product\n    return max_product_index, second_max_product_index"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    if len(arr) < 2:\n        return None\n\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    max_product = float('-inf') # initialize the maximum product variable\n    max_pair = [] # initialize the maximum pair variable\n\n    # loop through the array and find the pair with the highest product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_product: # check if the product of the two elements is greater than the current maximum product\n                max_product = arr[i]*arr[j] # update the maximum product\n                max_pair = [arr[i], arr[j]] # update the maximum pair\n\n    return max_pair # return the maximum pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function takes an array of integers as input and finds a pair with the highest product.\n    \"\"\"\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    \n    for i in arr:\n        max1 = max(max1 * i, i)\n        min1 = min(min1 * i, i)\n        max2 = max(max2 * i, i)\n        min2 = min(min2 * i, i)\n        \n        if max1 == min1 or max2 == min2:\n            print(\"The pair with the highest product is:\", (max1, max2))\n            return\n    \n    print(\"The pair with the highest product is not found in the array.\")\n    return"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    common_list = []\n    for i in Input:\n        if i[0] not in common_list:\n            common_list.append(i[0])\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if (Input[i][1], Input[j][1]) not in result:\n                    result.append((Input[i][1], Input[j][1]))\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples where each tuple contains only \n    the common first element from the input list of tuples.\n    \"\"\"\n    # Create an empty dictionary to store the count of elements in each tuple\n    counts = {}\n    \n    # Iterate through the input list of tuples\n    for tup in Input:\n        # Get the first element of the tuple\n        first_elem = tup[0]\n        \n        # If the element is not already in the dictionary, add it with a count of 1\n        if first_elem not in counts:\n            counts[first_elem] = 1\n        # Otherwise, increment the count of the element in the dictionary\n        else:\n            counts[first_elem] += 1\n    \n    # Create an empty list to store the common first elements\n    common_elems = []\n    \n    # Iterate through the dictionary and add the elements with a count of 1 to the common_elems list\n    for elem, count in counts.items():\n        if count == 1:\n            common_elems.append(elem)\n    \n    # Create a new list of tuples where each tuple contains only the common first element from the input list\n    result = []\n    for tup in Input:\n        first_elem = tup[0]\n        if first_elem in common_elems:\n            result.append(tup)\n    \n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples and returns a list of tuples, where each tuple contains a list of\n    common first elements from the given list of tuples.\n    \"\"\"\n    # Initialize an empty list to store the common first elements for each tuple\n    common_elements = []\n    \n    # Iterate through each tuple in the input list\n    for tup in Input:\n        # Initialize an empty list to store the common elements of the current tuple\n        current_common = []\n        \n        # Iterate through each element in the current tuple\n        for elem in tup:\n            # If the current element is the first element of the tuple, add it to the list of common elements\n            if len(current_common) == 0 or elem!= current_common[-1]:\n                current_common.append(elem)\n        \n        # If there are any common elements, append the tuple with the common elements to the output list\n        if current_common:\n            common_elements.append((tup, current_common))\n    \n    # Return the output list of common first elements for each tuple\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store common elements and their frequency\n    common_elements = {}\n\n    # Loop through each tuple in the list\n    for tuple in Input: \n        # Check if the first element of the tuple is already in the dictionary\n        if tuple[0] in common_elements: \n            # If it is, increment its frequency by 1\n            common_elements[tuple[0]] += 1\n        else: \n            # If it's not, add it to the dictionary with a frequency of 1\n            common_elements[tuple[0]] = 1\n\n    # Initialize an empty list to store the common elements\n    result = []\n\n    # Loop through the dictionary and add the common elements to the result list\n    for key in common_elements: \n        if common_elements[key] == max(common_elements.values()): \n            result.append(key)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for tup in Input:\n        for element in tup:\n            if element not in common_elements:\n                common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for i in Input:\n        if len(common_first_element) == 0:\n            common_first_element.append(i[0])\n        elif common_first_element[-1] == i[0]:\n            common_first_element.append(i[0])\n        else:\n            break\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = set()\n    for i in Input:\n        first = i[0]\n        common_first.add(first)\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples containing the common first element of each tuple.\n    '''\n    common_elements = []\n    for tup in Input:\n        if tup[0] not in common_elements:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for tuple_obj in Input:\n        if common_element is None:\n            common_element = tuple_obj[0]\n        else:\n            if tuple_obj[0] == common_element:\n                common_element = common_element\n            else:\n                common_element = None\n                break\n    return common_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    This function finds the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = ''\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = \"\"\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_element = None \n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_element = i \n    return max_element "
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(x) for x in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        rounded_number = round(number)\n        total_sum += rounded_number\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(lst):\n    # loop through the list and round each number to the nearest integer\n    for i in range(len(lst)):\n        lst[i] = round(lst[i])\n    \n    # sum the rounded numbers and multiply by the length of the list\n    total = sum(lst)\n    total *= len(lst)\n    \n    # print the total sum multiplied by the length of the list\n    print(\"The total sum is:\", total)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(lst):\n    total_sum = sum([round(x) for x in lst])\n    print(total_sum * len(lst))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(10))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2): \n        # calculate the cube of the current number\n        cube = i**3\n\n        # add the cube to the sum\n        sum += cube\n\n    # return the sum of the cubes\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # Calculate the cube of the number\n        cube = i**3\n        \n        # Add the cube to the sum\n        sum += cube\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    '''\n    # initializing variables\n    sum_of_cubes = 0\n    count = 0\n\n    # iterating through the first n even natural numbers\n    while count < n:\n        # calculating the cube of the even number\n        cube = count ** 3\n\n        # adding the cube to the sum_of_cubes\n        sum_of_cubes += cube\n\n        # incrementing the count by 1\n        count += 1\n\n    # returning the sum_of_cubes\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize sum variable\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the current number\n        cube = i ** 3\n        # add the cube to the sum variable\n        sum += cube\n\n    # return the cube sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n cubes of even natural numbers.\n    \"\"\"\n    # Initialize the variable sum to 0\n    sum = 0\n    \n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the current even natural number\n        cube = i**3\n        # Add the cube to the sum\n        sum += cube\n    \n    # Return the sum of cubes of even natural numbers\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple as input and concatenates each element of the tuple by the specified delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function takes a tuple as input and concatenates each element by the specified delimiter.\n    '''\n    concatenated_string = delimiter.join([str(elem) for elem in test_tup])\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return 1 + find_Average_Of_Cube(n-1)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # iterate through the first n numbers\n    for i in range(n):\n        # calculate the cube of the number and add it to the sum\n        cube = i ** 3\n        sum += cube\n\n        # increment the count\n        count += 1\n\n    # calculate the average by dividing the sum by the count\n    average = sum / count\n\n    # return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n**3\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 3\n    return total / n ** 2\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    sum = 0\n    for i in range(1,n+1):\n        count += 1\n        sum += i**3\n    average = sum/count\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        count += 1\n    average_cube = sum_cubes / count\n    return average_cube\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # initialize variables\n    total = 0\n    count = 0\n    \n    # loop for n natural numbers\n    for i in range(n+1):\n        # calculate cube of i\n        cube = i ** 3\n        \n        # add cube to total and increment count\n        total += cube\n        count += 1\n    \n    # calculate average\n    average = total / count\n    \n    # print result\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        try:\n            rear_list.append(i[len(i)-1])\n        except IndexError:\n            pass\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, s in enumerate(test_tuple):\n        if len(s) % 2 == 1:\n            rear_indices.append(i)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_rear_index = []\n    for string in test_tuple:\n        rear_index = len(string) - 1\n        extracted_rear_index.append(string[rear_index])\n    return extracted_rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_element = string[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        rear_indices.append(i)\n    rear_indices = set(rear_indices)\n    rear_elements = []\n    for i, string in enumerate(test_tuple):\n        if i in rear_indices:\n            rear_elements.append(string[len(string)-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern for the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Search the date string using the pattern\n    result = re.search(pattern, dt)\n    # If a match is found, convert the date format using the datetime module\n    if result:\n        year, month, day = int(result.group(1)), int(result.group(2)), int(result.group(3))\n        formatted_date = '{}-{}-{}'.format(day, month, year)\n        return formatted_date\n    # If no match is found, return the original date string\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Convert a date in yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        dt (str): Date in yyyy-mm-dd format.\n\n    Returns:\n        str: Date in dd-mm-yyyy format.\n    \"\"\"\n    # Define regular expression pattern for date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search for matches in the input string\n    matches = re.search(pattern, dt)\n\n    # Check if any matches were found\n    if matches:\n        # Extract the year, month, and day from the matches\n        year, month, day = matches.groups()\n\n        # Convert the year to a 2-digit string\n        year = str(year).zfill(2)\n\n        # Format the output string\n        output = f\"{day}-{month}-{year}\"\n\n        # Return the output string\n        return output\n    else:\n        # If no matches were found, return the input string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Replace '-' with '/' in the string\n    dt = re.sub(r'[-/]', '/', dt)\n\n    # Split the string into year, month, and day\n    year, month, day = dt.split('/')\n\n    # Convert the month from a number to a string\n    month = str(month)\n\n    # Pad the month with a leading zero if it has less than two digits\n    if len(month) == 1:\n        month = '0' + month\n\n    # Combine the day, month, and year to create the new date format\n    new_date = day + '-' + month + '-' + year\n\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the pattern in the given date string\n    match = re.match(pattern, dt)\n    \n    # If the pattern is found, extract the groups and join them using dashes\n    if match:\n        return '-'.join(match.groups())\n    \n    # If the pattern is not found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.sub() method to replace the date format with the desired format\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    yyyy_mm_dd_match = re.match(yyyy_mm_dd_pattern, dt)\n    if yyyy_mm_dd_match:\n        year = int(yyyy_mm_dd_match.group(1))\n        month = int(yyyy_mm_dd_match.group(2))\n        day = int(yyyy_mm_dd_match.group(3))\n        mm_dd_yyyy = f'{day}-{month}-{year}'\n        return mm_dd_yyyy\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = day + '-' + month + '-' + year\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern to match date format\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n\n    # Use re.match() to match the pattern to the input string\n    match = re.match(pattern, dt)\n\n    # If the pattern is matched, use group() method to extract the date components\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Use f-strings to format the output string in the required format\n        output_string = f'{day}-{month}-{year}'\n        return output_string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match yyyy-mm-dd format\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n\n    # Find all the occurrences of the pattern in the string\n    match = pattern.findall(dt)\n\n    # If there are no matches, return the original date\n    if not match:\n        return dt\n\n    # Extract the year, month, and day from the first match\n    year, month, day = match[0]\n\n    # Create a formatted date string in dd-mm-yyyy format\n    new_date = f'{day}-{month}-{year}'\n\n    # Return the formatted date string\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the pattern in the given date string and extract groups\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        \n        # Reverse the month and day order and pad the day with a leading zero\n        new_date = '-'.join([day, month, year])\n        return new_date\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the largest gap using the formula: gap = gap / 2 + 1\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        # Insert sort on the gap size elements\n        for i in range(gap, n):\n            j = i\n            temp = my_list[i]\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap size\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest power of 2 that is less than or equal to n\n    n = len(my_list)\n    p = 1\n    while p < n:\n        p = p * 2\n\n    while p > 0:\n        for i in range(p, n):\n            temp = my_list[i]\n            j = i\n            while j >= p and my_list[j-p] > temp:\n                my_list[j] = my_list[j-p]\n                j -= p\n            my_list[j] = temp\n        p //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step 1: Calculate the gap sequence\n    gap = n // 2\n    while gap > 0:\n        # Step 2: Move the gap to the next position\n        gap //= 2\n        # Step 3: Insertion sort for gap sequence\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Define the increment step\n    increment = len(my_list) // 2\n    \n    # Keep track of the number of steps taken\n    steps = 0\n    \n    # Loop until the increment step is less than the length of the list\n    while increment > 0:\n        # Loop through each element of the list\n        for i in range(increment, len(my_list)):\n            # Compare the current element with its neighbors\n            j = i\n            while j >= increment and my_list[j] > my_list[j - increment]:\n                # Swap the elements\n                my_list[j], my_list[j - increment] = my_list[j - increment], my_list[j]\n                # Move the pointer to the left\n                j -= increment\n                # Update the number of steps taken\n                steps += 1\n        # Decrease the increment step\n        increment //= 2\n    \n    # Return the sorted list and the number of steps taken\n    return my_list, steps"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n            print(\" \".join(str(x) for x in my_list))\n            \n        gap //= 2\n        \n    print(\" \".join(str(x) for x in my_list))"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    return tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # check if the input tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have equal lengths.')\n\n    # initialize the output tuple with the length of the first tuple\n    result_tup = tuple([0] * len(test_tup1))\n\n    # iterate through the tuples and extract the elementwise and elements\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] & test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same length')\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Args:\n    test_tup1 (tuple): The first tuple to be processed.\n    test_tup2 (tuple): The second tuple to be processed.\n\n    Returns:\n    (tuple): The tuple containing the elementwise and of the two input tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    \n    and_tup = tuple(i and j for i, j in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_list = []\n    \n    # Iterate through each element of the two input tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements of the two input tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        \n        # Extract the elementwise and of the elements\n        and_elem = tup1_elem & tup2_elem\n        \n        # Add the elementwise and tuple to the and_list\n        and_list.append((tup1_elem, tup2_elem, and_elem))\n    \n    # Return the and_list\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return\n\n    result_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tuple(x1 & x2) for x1, x2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to hold the elementwise and tuples\n    and_tuples_list = []\n    \n    # Loop through the elements in the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements from each tuple\n        a, b = test_tup1[i], test_tup2[i]\n        \n        # Extract the elementwise and of the two elements\n        and_element = a & b\n        \n        # Append the elementwise and to the and_tuples_list\n        and_tuples_list.append(and_element)\n    \n    # Return the and_tuples_list\n    return and_tuples_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same number of elements.\")\n        return None\n    \n    # iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # extract the elements from the tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        # compute the elementwise and\n        and_elem = tup1_elem & tup2_elem\n        # append the and element to the result list\n        and_tup.append(and_elem)\n        \n    # return the result list as a tuple\n    return tuple(and_tup)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (-b + discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        return -b/(2*a)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    root1 = (-b + (b**2-4*a*c)) / (2*a)\n    root2 = (-b - (b**2-4*a*c)) / (2*a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Calculate the two roots of the discriminant\n    root1 = (-b + disc**0.5) / (2*a)\n    root2 = (-b - disc**0.5) / (2*a)\n\n    # Find the minimum of the two roots\n    min_root = root1 if root1 < root2 else root2\n\n    # Return the directrix\n    return min_root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n\n    # find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is positive or negative, indicating that the parabola is not a quadratic\n    if discriminant < 0:\n        return \"The parabola is not a quadratic.\"\n    \n    # calculate the directrix\n    directrix = (-b + discriminant**0.5)/(2*a)\n    \n    # return the directrix\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b ** 2 - 4 * a * c\n\n    if delta > 0:\n        directrix = (-b + delta ** 0.5) / (2 * a)\n        print(\"The directrix of the parabola is:\", directrix)\n    elif delta == 0:\n        directrix = (-b) / (2 * a)\n        print(\"The directrix of the parabola is:\", directrix)\n    else:\n        print(\"The parabola is not defined in this region.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a (float): The first term of the equation\n    b (float): The second term of the equation\n    c (float): The constant term of the equation\n\n    Returns:\n    float: The directrix of the parabola\n\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (-b + discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        return -b/(2*a)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (-b**2 + 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (-b**2 + 4*a*c)**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    directrix = (-b + determinant**0.5) / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        print(\"There is no real root\")\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        print(\"The directrix is:\", root1)\n        print(\"The other root is:\", root2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets to eliminate duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # check if the intersection of the sets is non-empty\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # create a set of unique elements from both lists\n    unique_elements = list(set(list1 + list2))\n    # iterate over the unique elements and check if any are present in both lists\n    for element in unique_elements:\n        if element in list1 and element in list2:\n            return True\n    # if no common element was found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element, False otherwise.\n    \"\"\"\n    # Create a set from both lists to remove duplicates and sort the elements\n    set1 = sorted(set(list1))\n    set2 = sorted(set(list2))\n\n    # Iterate over the sets and compare the elements\n    for elem in set1:\n        if elem in set2:\n            return True\n\n    # If no common element has been found, return False\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2 * math.tan(math.pi / 6)\n    area_half = 0.5 * area\n    trapezium_length = area_half * height\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # calculate the length of the trapezium using the formula\n    length = 2 * area / 3\n\n    # calculate the median of the trapezium\n    median = 0.5 * length\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + 2 * height\n    \n    # Calculate the difference between the perimeter and area\n    diff = abs(perimeter - area)\n    \n    # Calculate the median length of the trapezium\n    median = 0.5 * diff\n    \n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5*base1*base2 + height\n\n    # Calculate the length of the base of the trapezium that is longer than the base of the other trapezium\n    long_base = min(base1,base2)\n\n    # Calculate the length of the other base of the trapezium\n    short_base = max(base1,base2)\n\n    # Calculate the length of the base of the other trapezium that is longer than the base of the trapezium\n    other_long_base = long_base - short_base\n\n    # Calculate the length of the other base of the other trapezium\n    other_short_base = other_long_base - base1\n\n    # Calculate the areas of the two trapezium bases and the other bases\n    long_base_area = 0.5*long_base*long_base\n    short_base_area = 0.5*short_base*short_base\n    other_long_base_area = 0.5*other_long_base*other_long_base\n    other_short_base_area = 0.5*other_short_base*other_short_base\n\n    # Calculate the total area of the trapezium\n    total_area = long_base_area + short_base_area + other_long_base_area + other_short_base_area\n\n    # Calculate the area of the trapezium that is longer than the other bases\n    other_long_trapezium_area = other_long_base_area + other_short_base_area\n\n    # Calculate the area of the trapezium that is shorter than the other bases\n    other_short_trapezium_area = long_base_area + short_base_area\n\n    # Calculate the ratio of the area of the shorter trapezium to the total area\n    ratio = other_short_trapezium_area/total_area\n\n    # Calculate the length of the shorter trapezium\n    shorter_trapezium_length = other_long_base + other_short_base + other_long_base*ratio\n\n    # Calculate the length of the longer trapezium\n    longer_trapezium_length = short_base + long_base*ratio\n\n    # Find the median of the two trapezium bases and the other bases\n    long_base_median = 0.5*(long_base + other_long_base)\n    short_base_median = 0.5*(short_base + other_short_base)\n\n    # Calculate the area of the trapezium that is longer than the other bases and the shorter trapezium\n    other_long_short_trapezium_area = other_long_base_area + other_short_base_area + other_long_base*ratio\n\n    # Calculate the area of the trapezium that is shorter than the other bases and the shorter trapezium\n    other_short_short_trapezium_area = long_base_area + short_base_area + short_base*ratio\n\n    # Calculate the ratio of the area of the shorter trapezium to the total area\n    ratio = other_short_short_trapezium_area/total_area\n\n    # Calculate the length of the shorter trapezium\n    shorter_short_trapezium_length = other_long_base + other_short_base + other_long_base*ratio\n\n    # Calculate the length of the longer trapezium\n    longer_long_trapezium_length = short_base + long_base*ratio\n\n    # Find the median of the two trapezium bases and the other bases and the shorter trapezium\n    long_base_short_base_median = 0.5*(long_base_median + other_long_base + other_long_base*ratio)\n    short_base_short_base_median = 0.5*(short_base_median + other_short_base + other_short_base*ratio)\n\n    # Calculate the area of the trapezium that is longer than the other bases, the shorter trapezium, and the other bases\n    other_long_short_other_base_area = other_long_base_area + other_short_base_area + other_long_base*ratio + other_short_base*(other_"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculates the median length of a trapezium given its base1, base2, and height.\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the lengths of the base1 and base2 sides\n    base1_length = area / (2 * base1)\n    base2_length = area / (2 * base2)\n\n    # Calculate the length of the shorter side\n    if base1_length < base2_length:\n        shorter_side = base1_length\n    else:\n        shorter_side = base2_length\n\n    # Calculate the length of the longer side\n    if base1_length > base2_length:\n        longer_side = base1_length\n    else:\n        longer_side = base2_length\n\n    # Calculate the length of the trapezium\n    total_length = shorter_side + longer_side\n\n    # Calculate the median length of the trapezium\n    median_length = total_length / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium given the base and height of each side.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height\n    \n    # Calculate the area of the base\n    base_area = 0.5 * base1 * base1\n    \n    # Calculate the area of the top\n    top_area = 0.5 * base2 * height\n    \n    # Calculate the total area\n    total_area = area + base_area + top_area\n    \n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2)\n    \n    # Calculate the median of the trapezium\n    median = trapezium_length * (total_area - area) / (2 * total_area)\n    \n    # Return the median value\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function calculates the median length of a trapezium based on its\n    base1, base2 and height.\n\n    Args:\n    base1 (float): the length of the first base of the trapezium.\n    base2 (float): the length of the second base of the trapezium.\n    height (float): the height of the trapezium.\n\n    Returns:\n    float: the median length of the trapezium.\n    \"\"\"\n    area = 0.5 * base1 * base2\n    perimeter = base1 + base2\n    mid_point = 0.5 * perimeter\n    if height > area:\n        half_height = 0.5 * height\n        base_top = 0.5 * area - half_height\n        base_bottom = 0.5 * area + half_height\n        if base_top <= base_bottom:\n            return mid_point - base_top\n        else:\n            return mid_point - base_bottom\n    else:\n        half_base = 0.5 * base1\n        base_top = 0.5 * area - height\n        base_bottom = 0.5 * area + height\n        if base_top <= base_bottom:\n            return mid_point - base_top\n        else:\n            return mid_point - base_bottom"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height/2\n    side1 = base1 + half_height\n    side2 = base2 + half_height\n    return (side1 + side2) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the shorter base\n    shorter_base = min(base1,base2)\n    # Calculate the length of the longer base\n    longer_base = max(base1,base2)\n    # Calculate the height of the trapezium\n    trapezium_height = 0.5 * (longer_base + shorter_base)\n    # Calculate the length of the trapezium\n    trapezium_length = area * (trapezium_height/2)\n    # Find the middle of the trapezium\n    middle = trapezium_length/2\n    # Return the median length of the trapezium\n    return middle"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2 + height) / 2"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # initialize a variable to store the count of elements greater than the entered number\n    count = 0\n\n    # iterate over each element in the array\n    for i in arr:\n        # if the element is greater than the entered number, increment the count variable\n        if i > number:\n            count += 1\n\n    # return the count of elements greater than the entered number\n    return count"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba{1,}\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    pattern = re.compile(r'a(b+)')\n    matches = pattern.findall(text)\n\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w*b\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba.*b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a[b]*\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r\"a.*b\")\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n.\n    '''\n    # Take the last digit of n using integer division\n    last_digit = n % 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to string\n    num = str(n)\n    # take the last character of the string\n    last_char = num[-1]\n    # convert the last character to integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the negative numbers.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list with negative numbers from the input list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a new list containing all the negative numbers in the original list.\n    \"\"\"\n    new_lst = []\n    for num in lst:\n        if num < 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 1:\n            odd_str += char\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            if int(char)%2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert string to a list of characters\n    char_list = list(str1)\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each character in the list\n    for char in char_list:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is, add it to the result string\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the even characters\n    even_str = \"\"\n    # iterate over each character in the input string\n    for char in str1:\n        # if the character is odd, append it to the even_str\n        if char % 2!= 0:\n            even_str += char\n    # return the even_str as the result of the function\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # split the string into characters\n    chars = list(str1)\n    # initialize an empty string to store the result\n    result = ''\n    # iterate over the characters in the list\n    for char in chars:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if it is odd, add it to the result\n            result += char\n    # return the result as a string\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0]:\n                if test_list[i][1] == test_list[j][1]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    Args:\n        test_list (list): A list of tuples containing integers.\n\n    Returns:\n        int: The number of bidirectional tuple pairs in the input list.\n    \"\"\"\n\n    # Initialize a counter for bidirectional tuple pairs\n    count = 0\n\n    # Iterate over the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the tuples are in the reverse order\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[j][0]) in test_list or (test_list[i][0], test_list[j][1]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of all the integers in the list\n    total = 0\n    \n    # Iterate over each element in the list\n    for num in L:\n        # Check if the element is a multiple of 5\n        if num % 5 == 0:\n            # Add the multiple to the total variable\n            total += num\n            \n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to hold the result\n    result = 0\n    \n    # iterate over each integer in the list\n    for num in L:\n        # add the integer to the result\n        result += num\n        \n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the sum of the list elements\n    total = 0\n    \n    # iterate over the list and add each element to the sum variable\n    for num in L:\n        total += num\n    \n    # return the sum of all the elements in the list\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n\n    Args:\n        L (list): A list of integers.\n\n    Returns:\n        int: The sum of all elements in the list.\n    \"\"\"\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate over the elements of the list\n    for num in L:\n        # Check if the current element is a multiple of 256\n        if num % 256 == 0:\n            # If it is, concatenate the corresponding character to the result string\n            result += chr(num)\n    # If there are any remaining characters in the result string, append them to the result\n    if len(result) > 0:\n        result += chr(ord(result[-1])+1)\n    # Return the result as an integer\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total = total * num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all the adverbs in the text\n    adverbs = re.findall(r'\\b\\w*[aeiou]s\\b\\w*', text)\n\n    # Find their positions in the text\n    positions = []\n    for i, adverb in enumerate(adverbs):\n        positions.append((i, text.find(adverb), text.find(adverb) + len(adverb)))\n\n    # Sort the adverb positions by their starting index\n    positions = sorted(positions, key=lambda x: x[1])\n\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define a regular expression pattern for finding adverbs\n    pattern = r'\\b(\\w+?)(?<!\\w)(\\w+?)\\b'\n    # find all non-word characters in the text using re.findall()\n    non_word_chars = re.findall(r'[^\\w\\s]', text)\n    # join all the non-word characters together into a single string\n    text = ''.join(non_word_chars)\n    # use re.sub() to replace any remaining non-word characters with spaces\n    text = re.sub(r'[^\\w\\s]','', text)\n    # split the text into words using re.findall()\n    words = re.findall(r'\\b\\w+\\b', text)\n    # find all the adverbs in the text using re.findall()\n    adverbs = re.findall(pattern, text)\n    # initialize a dictionary to store the adverb positions\n    position_dict = {}\n    # iterate through the adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        # get the adverb and its position in the text\n        adverb_position = i\n        # add the adverb to the dictionary with its position as the key\n        position_dict[adverb] = adverb_position\n    # return the dictionary of adverb positions\n    return position_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # define a regular expression pattern to find adverbs\n    pattern = r'\\b[A-Za-z]+\\s*[A-Za-z]+\\b'\n    # use re.findall to find all matches in the text\n    matches = re.findall(pattern, text)\n    # loop over all matches and find their positions in the sentence\n    for i, match in enumerate(matches):\n        # split the match into parts\n        parts = match.split()\n        # if the first part is an adverb, return the index and adverb\n        if parts[0] in ['very', 'well', 'badly', 'finally', 'clearly', 'dramatically', 'quite','much', 'extremely']:\n            return i, parts[0]\n    # if no adverbs are found, return None\n    return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Split the text into sentences\n    sentences = text.split(\".\")\n\n    # Loop through each sentence\n    for i, sentence in enumerate(sentences):\n        # Split the sentence into words\n        words = re.findall(r'\\b\\w+\\b', sentence)\n\n        # Loop through each word in the sentence\n        for j, word in enumerate(words):\n            # Check if the word is an adverb\n            if word in ADJECTIVES:\n                # Check if there is already an adverb in this sentence\n                if not has_adverb:\n                    # If not, set has_adverb to True\n                    has_adverb = True\n\n                # Check if the word is a direct object adverb\n                if word in DIRECT_OBJECT_ADJECTIVES:\n                    # If it is, check if it's the first adverb\n                    if j == 0:\n                        # If it is, set the first_adverb_position to the index of the word\n                        first_adverb_position = j\n                        # Set the first_adverb_word to the word\n                        first_adverb_word = word\n                    # If it's not the first adverb, check if it's part of a larger adverb phrase\n                    elif words[j-1] in ADJECTIVES:\n                        # If it is, set the second_adverb_position to the index of the word\n                        second_adverb_position = j\n                        # Set the second_adverb_word to the word\n                        second_adverb_word = word\n                        # Stop looping through words in this sentence\n                        break\n                # Check if the word is an indirect object adverb\n                elif word in INDIRECT_OBJECT_ADJECTIVES:\n                    # If it is, check if it's the first adverb\n                    if j == 0:\n                        # If it is, set the first_adverb_position to the index of the word\n                        first_adverb_position = j\n                        # Set the first_adverb_word to the word\n                        first_adverb_word = word\n                    # If it's not the first adverb, check if it's part of a larger adverb phrase\n                    elif words[j-1] in ADJECTIVES:\n                        # If it is, set the second_adverb_position to the index of the word\n                        second_adverb_position = j\n                        # Set the second_adverb_word to the word\n                        second_adverb_word = word\n                        # Stop looping through words in this sentence\n                        break\n                # Check if the word is a possessive adverb\n                elif word in POSSESSIVE_ADJECTIVES:\n                    # If it is, check if it's the first adverb\n                    if j == 0:\n                        # If it is, set the first_adverb_position to the index of the word\n                        first_adverb_position = j\n                        # Set the first_adverb_word to the word\n                        first_adverb_word = word\n                    # If it's not the first adverb, check if it's part of a larger adverb phrase\n                    elif words[j-1] in ADJECTIVES:\n                        # If it is, set the second_adverb_position to the index of the word\n                        second_adverb_position = j\n                        # Set the second_adverb_word to the word\n                        second_adverb_word = word\n                        # Stop looping through words in this sentence\n                        break\n\n    # Check if there was an adverb found\n    if has_adverb:\n        # If there was, return the adverb and its positions\n        return (first_adverb_word, first_adverb_position), (second_adverb_word, second_adverb_position)\n    # If there was no adverb found, return None\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    adverbs = re.findall(r\"\\b\\w*[aeiou]\\w*([.,;?!])\\b\", text)\n    adverb_positions = []\n    for adverb, position in adverbs:\n        adverb_positions.append((adverb, text.find(adverb) + len(adverb), position))\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern to find adverbs\n    pattern = r'(\\b|\\B)([a-z][A-Z]|[A-Z][a-z])\\b'\n    \n    # Use the pattern to find all the occurrences of adverbs\n    adverbs = re.findall(pattern, text)\n    \n    # Return a list of tuples containing the adverb and its position in the sentence\n    return [(adverb, text.index(adverb)) for adverb in adverbs]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['great', 'nice', 'amazing', 'amazed', 'lovely', 'loved', 'delicious', 'delightful', 'fantastic', 'flamboyant', 'funny', 'funny', 'awesome', 'excellent', 'fantastic']\n\n    # Splitting the sentence into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Looping through each word\n    for i, word in enumerate(words):\n        # Checking if the word is an adverb\n        if word in adverbs:\n            # Printing the adverb and its position in the sentence\n            print(f\"{word} at position {i + 1}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w*adverb\\w*\\b'\n    adverbs = re.findall(pattern, text)\n    if adverbs:\n        print(\"Adverbs found: \")\n        for i, adv in enumerate(adverbs):\n            print(f\"{i+1}. {adv}\")\n    else:\n        print(\"No adverbs found in the given sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regular expression pattern for finding adverbs\n    pattern = r\"\\b(?:(?:adv|advmod|expl)(?:\\s*\\(\\s*([a-z]+)\\s*\\))?)\\b\"\n\n    # Use regex to find all matches in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize empty list to store adverb positions\n    adverb_positions = []\n\n    # Iterate over all matches and append their positions to the list\n    for match in matches:\n        adverb = match.group(1)\n        if adverb:\n            adverb_positions.append((match.start(), match.end()))\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    regex = r'\\b\\w*ing\\b'\n    matches = re.findall(regex, text)\n    for match in matches:\n        adverbs.append(match)\n    return adverbs"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    volume = l * l * l\n    surface_area = 2 * (area + volume)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * l**2\n    print(\"The surface area of the cube is:\", s)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    pos_ratio = pos_count / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Initialize variables for positive count and negative count\n    positive = 0\n    negative = 0\n\n    # Iterate through the array and count the number of positive and negative numbers\n    for num in nums:\n        if num > 0:\n            positive += 1\n        else:\n            negative += 1\n\n    # Calculate the ratio of positive numbers to total numbers\n    ratio = positive / len(nums)\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_array = array('i')\n    for num in nums:\n        if num > 0:\n            positive_array.append(num)\n    positive_sum = sum(positive_array)\n    total_sum = sum(nums)\n    return positive_sum / total_sum"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to an array of integers\n    nums = array('i', nums)\n\n    # Initialize variables to store the count of positive and negative numbers\n    positive_count = 0\n    negative_count = 0\n\n    # Loop through the array\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            positive_count += 1\n        # Check if the number is negative\n        elif num < 0:\n            negative_count += 1\n\n    # Calculate the ration of positive numbers\n    positive_ratio = positive_count / (positive_count + negative_count)\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i')\n    negative_nums = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n        else:\n            negative_nums.append(num)\n\n    pos_count = len(positive_nums)\n    neg_count = len(negative_nums)\n    pos_ratio = pos_count / (pos_count + neg_count)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # create an array to store the positive numbers\n    positive_arr = array('i')\n\n    # loop through the input array and add positive numbers to the positive_arr array\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n\n    # calculate the ratio of positive numbers to the total number of elements\n    positive_ratio = len(positive_arr) / len(nums)\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n\n    if positive_count == 0:\n        return 0\n    else:\n        return (positive_count / (positive_count + negative_count)) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the list of integers to an array of integers\n    arr = array('i', nums)\n    \n    # count the number of positive integers in the array\n    pos_count = sum(1 for x in arr if x > 0)\n    \n    # calculate the ration of positive integers as a float\n    pos_ratio = pos_count / len(nums)\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ration of positive numbers in the array.\n    '''\n    pos_arr = array('i')  # create an integer array to store positive numbers\n\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)  # append positive numbers to the array\n\n    pos_count = len(pos_arr)  # get the number of positive numbers in the array\n    total_count = len(nums)  # get the total number of numbers in the array\n\n    return pos_count/total_count  # calculate the ration of positive numbers in the array"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list for easy counting\n    nums_list = list(nums)\n    \n    # Initialize two counters for positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n    \n    # Iterate through the list of integers\n    for num in nums_list:\n        # If the number is positive, increment the positive counter\n        if num > 0:\n            pos_count += 1\n        # If the number is negative, increment the negative counter\n        elif num < 0:\n            neg_count += 1\n            \n    # Find the ration of positive numbers\n    pos_ratio = pos_count / len(nums_list)\n    \n    # Return the positive ratio as a float\n    return pos_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Returns the largest negative number in the given list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf') # initialize largest as negative infinity\n    for num in list1:\n        if num < 0 and num > largest: # check if the number is negative and greater than largest\n            largest = num # update largest to the current number if it's greater\n    return largest # return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    largest = -1000000 # initialize largest with smallest possible integer value\n\n    for num in list1: # iterate over each number in the list\n        if num < 0: # if the number is negative, check if it's larger than largest\n            if num > largest:\n                largest = num # update largest if necessary\n\n    return largest # return largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -float('inf')\n    for num in list1:\n        if num < 0:\n            if num > largest_num:\n                largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf') # initialize the largest number as negative infinity\n\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num # update the largest number if it is smaller than the current number\n\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i]) - K):\n            test_list[i] = test_list[i][:j] + test_list[i][j+K:]\n        test_list[i] = tuple(test_list[i])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            test_list[i] = tuple(test_list[i])\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tup[:K]\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + tuple(test_list[i][K:])[1:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            result.append(test_list[i][:K])\n        else:\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tup in enumerate(test_list):\n        if len(tup) > K:\n            test_list[i] = tup[:K]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    else:\n        for i in range(len(test_tup1)):\n            print(\"Multiplication of elements at index {}: {}\".format(i, test_tup1[i] * test_tup2[i]))"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Length of the two tuples should be equal.\")\n        return None\n    \n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = tuple(test_tup1[0]*test_tup2[0])\n    \n    # Loop through the first tuple and multiply the corresponding element of the result tuple with the corresponding element of the second tuple\n    for i in range(1, len(test_tup1)):\n        result_tup += (test_tup1[i]*test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check if the length of both tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        return \"The length of both tuples must be same.\"\n    \n    # initialize the result tuple with the same length as the first tuple\n    result_tup = tuple([0] * len(test_tup1))\n    \n    # perform the multiplication of the tuple elements\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count = Counter(lst)\n    # Create a dictionary to store the count of each element in the tuple\n    count_in_tup = Counter(tup)\n    # Merge the two dictionaries\n    result = {k: count[k] + count_in_tup[k] for k in count if k in count_in_tup}\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    # Use Counter to count the occurrences of each element of list in tuple\n    counts = Counter(tup)\n    \n    # Count the occurrences of each element of list in tuple\n    count_lst = []\n    for elem in lst:\n        if elem in counts:\n            count_lst.append(counts[elem])\n        else:\n            count_lst.append(0)\n    \n    # Return the counts of each element in the list\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the tuple and the values are the count of the elements in the list that appear in the tuple.\n\n    Example:\n    tuple = (1, 2, 3, 4, 4, 5)\n    lst = [1, 2, 3, 4, 5, 6]\n    Output: {1: 1, 2: 1, 3: 1, 4: 2, 5: 1, 6: 1}\n    '''\n\n    count_dict = Counter(tup)\n    count_dict = {key: val for key, val in count_dict.items() if val!= 0}\n    count_dict = Counter(count_dict)\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for elem in lst: \n        count[elem] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Creating a dictionary to store the occurrence of each element in the list\n    count_dict = {}\n    for elem in lst: \n        count_dict[elem] = count_dict.get(elem, 0) + 1\n    \n    # Counting the occurrence of each element in the tuple\n    count_tup = Counter(tup)\n    \n    # Comparing the two dictionaries and storing the difference in a new dictionary\n    diff_dict = {k: v for k, v in count_dict.items() if k not in count_tup}\n    \n    # Returning the difference dictionary\n    return diff_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    return {key: count_dict[key] for key in lst}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return {i: count[i] for i in lst}\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    return count_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are elements of the list and the values are the count of occurrences of that element in the list.\n    '''\n    count_dict = Counter(lst)\n    return {k: count_dict[k] for k in count_dict}\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Use Counter to count the occurrence of each element in the tuple and the list\n    count_dict = Counter(tup)\n    count_list = Counter(lst)\n    # Merge the two dictionaries and sort the elements based on their occurrence count\n    merged_dict = dict(count_dict)\n    merged_dict.update(count_list)\n    sorted_dict = dict(sorted(merged_dict.items(), key=lambda x: x[1], reverse=True))\n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413,"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**2 + i) / (2*i - 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n\n    # Calculate the perrin numbers\n    for i in range(1, n+1):\n        sum += i\n\n    # Return the sum of perrin numbers\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i**2\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Calculate the sum of Perrin numbers\n    for i in range(1, n+1):\n        sum += (i + 1)**2\n\n    # Return the sum of Perrin numbers\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, n):\n    \"\"\"\n    Extract n-sized strings from a list of strings.\n\n    Args:\n    str_list (list of strings): list of strings from which to extract strings\n    n (int): size of the strings to extract\n\n    Returns:\n    list of strings: list of n-sized strings extracted from str_list\n\n    \"\"\"\n    return [str[i:i+n] for i in range(0, len(str), n)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and a size (int) as input and returns a list of extracted strings.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), 2):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) == l:\n            result.append(s)\n            if len(result) == l:\n                break\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and the size of the strings to extract.\n    It returns a new list with the extracted strings.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size of strings as input.\n    It returns a list of extracted strings.\n    '''\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n    str_list: a list of string values.\n    size: the size of the strings to be extracted.\n\n    Returns:\n    A list of strings with specified size.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extract the specified size of strings from a given list of string values.\n    '''\n    str_list = [str for str in str_list if len(str) >= l]\n    return str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        if len(s) >= l:\n            extracted_strings.append(s[:l])\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    This function takes a string as input and removes all whitespaces from it.\n    \n    Args:\n    text1 (string): The input string.\n    \n    Returns:\n    string: The modified string with all whitespaces removed.\n    \"\"\"\n    \n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+', '', text1)\n    \n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n\n    # replace all whitespaces with empty string\n    text1 = re.sub(r'\\s+', '', text1)\n\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    text = re.sub(pattern, '', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expression\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = actual_cost / sale_amount * 100 - 100\n    if loss_percentage < 0:\n        return 0\n    else:\n        return loss_percentage"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        loss_amount = actual_cost - sale_amount \n        return loss_amount \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    This function takes a number as input and returns the sum of its even factors.\n    '''\n    # initialize a variable to keep track of the sum of even factors\n    sum = 0\n    \n    # loop through all the numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # check if i is even (i.e., divisible by 2)\n        if i % 2 == 0:\n            # if it is, add it to the sum\n            sum += i\n    \n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize variables\n    even_sum = 0\n\n    # Iterate through all odd numbers up to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        # Check if i is evenly divisible by n\n        if n % i == 0:\n            # If it is, add it to the even_sum\n            even_sum += i\n\n    # Check if any odd number up to n is evenly divisible by n\n    for i in range(3, n+1, 2):\n        if n % i == 0:\n            # If it is, add it to the even_sum\n            even_sum += i\n\n    # Return the sum of even factors\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize the sum to 0\n    total = 0\n\n    # loop through all odd numbers less than or equal to n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # check if i is evenly divisible by n\n        if n % i == 0:\n            # if it is, add it to the total\n            total += i\n\n    # return the total\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            sum += i\n            n //= i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            if n%2 == 0 : \n                sum += i \n    return sum "
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[zZ]\\w+\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b(z)\\w*\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b(z)\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b[a-zA-Z]+\\w*[zZ]\\w*\\b'\n    matches = re.findall(regex, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Use the re.findall() method to find all words in the text that contain the letter 'z'\n    words_with_z = re.findall(r'\\b[a-zA-Z]+z\\b', text)\n    \n    # Print the number of words that contain 'z'\n    print(\"There are\", len(words_with_z), \"words in the text that contain 'z'.\")\n    \n    # If there are words with 'z' in the text, print them\n    if words_with_z:\n        print(\"The words that contain 'z' are:\")\n        for word in words_with_z:\n            print(word)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13):\n        return days_in_month[monthnum - 1]\n    else:\n        return \"Invalid month number.\"\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        if monthnum2 in ['01', '03', '05', '07', '08']:\n            return True\n        elif monthnum2 == '12':\n            return True\n        else:\n            return False\n    elif monthnum2 in ['04', '06', '09', '11']:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    month_dict = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum2 in month_dict:\n        if month_dict[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # converting the month number to its corresponding month name\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    month = months[monthnum2-1]\n    # checking whether the month name has 31 days or not\n    if month in ['February', 'April', 'June', 'September', 'November']:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum > 12:\n        return \"Invalid month number. Please enter a month number between 1 and 12.\"\n    elif monthnum == 2 and is_leap_year(year):\n        return \"Invalid month number. February cannot have 29 days in a leap year.\"\n    elif monthnum < 2 or monthnum > 12:\n        return \"Invalid month number. Please enter a month number between 1 and 12.\"\n    elif monthnum == 2:\n        return \"February has {} days in a standard year.\".format(days_in_month[monthnum])\n    else:\n        return \"The month has {} days in a standard year.\".format(days_in_month[monthnum])\n\ndef is_leap_year(year):\n    '''\n    Function to check whether the given year is a leap year or not.\n    '''\n    if year % 4!= 0:\n        return False\n    if year % 100!= 0:\n        return True\n    if year % 400!= 0:\n        return False\n    return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # check if the month number is between 1 and 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n\n    # check if the month number has 31 days\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return \"31 days\"\n        else:\n            return \"28 days\"\n    elif monthnum2 in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if monthnum2 % 4 == 0:\n            if monthnum2 % 100 == 0:\n                if monthnum2 % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            if len(sub_lst) < min_len:\n                min_len = len(sub_lst)\n                min_lst = sub_lst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    This function will find the sublist with the minimum length.\n    It takes a list as input and returns the sublist with the minimum length.\n    '''\n    \n    min_length = len(lst[0])\n    min_sublist = []\n    \n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_sublist = i\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # Initialize minimum length and index of minimum length sublist\n    min_len = len(lst)\n    min_index = 0\n    \n    # Iterate through the list of sublists\n    for i in range(len(lst)):\n        \n        # Calculate the length of the current sublist\n        sublist_len = len(lst[i])\n        \n        # Check if the current sublist length is smaller than the minimum\n        if sublist_len < min_len:\n            \n            # Update the minimum length and index\n            min_len = sublist_len\n            min_index = i\n    \n    # Return the sublist having minimum length\n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    # Find the minimum length sublist\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    # Return the minimum length sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist having the minimum length.\n    '''\n    min_length = float('inf') # initialize the minimum length as infinity\n    min_sublist = [] # initialize the minimum sublist as an empty list\n    for i in lst: # iterate over the list\n        if len(i) < min_length: # check if the length of the sublist is less than the minimum length\n            min_length = len(i) # update the minimum length if it is\n            min_sublist = i # update the minimum sublist if it is\n    return min_sublist # return the minimum sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Args:\n        l (float): The length of the rectangle.\n        b (float): The width of the rectangle.\n\n    Returns:\n        float: The area of the rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'([A-Z]+|[a-z]+)'\n    result = re.sub(pattern, '', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z][a-z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    uppercase_matches = uppercase_pattern.findall(str1)\n    for match in uppercase_matches:\n        str1 = str1.replace(match.upper(), '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n\n    # Use the re.sub() function to replace the uppercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile(r'[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # define pattern for uppercase letters\n    pattern = r'[A-Z]+'\n    \n    # replace uppercase letters with empty string\n    result = re.sub(pattern, '', string)\n    \n    # return result\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n\n    # Use the re.findall() function to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(pattern, string)\n\n    # Use the re.sub() function to replace all uppercase substrings with an empty string\n    string = re.sub(pattern, '', string)\n\n    return string, uppercase_substrings"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use the re.sub() function to remove uppercase substrings from the string\n    str1 = re.sub(r'(?i)[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst: \n        result.append(item[0]) \n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst: \n        for element in sublist: \n            print(element)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            for j in range(len(lst[i])):\n                lst[i][j] = lst[i][j][0]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper = 0\n    for char in string:\n        if char.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(lst)\n    comb = []\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            comb.append(lst[j:j+i])\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for combo in combinations_helper(list1, i):\n            combinations.append(combo)\n    return combinations\n    \ndef combinations_helper(lst, n):\n    '''\n    Helper function to generate all combinations of length n from the list lst.\n    '''\n    combination = []\n    for i in range(len(lst)):\n        combination.append(lst[i])\n        if len(combination) == n:\n            yield combination\n            combination.pop()\n        else:\n            yield from combinations_helper(lst[i+1:], n-1)\n            combination.pop()"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        res = []\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)+1):\n                res.append(list1[i:j])\n        return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store all combinations\n    all_combinations = []\n    # loop through each element in the list\n    for i in range(len(list1)):\n        # create a new empty list for each combination\n        current_combination = []\n        # loop through each element after the current one\n        for j in range(i+1, len(list1)):\n            # add the current and next element to the current combination\n            current_combination.append(list1[j])\n            # add the current combination to the list of all combinations\n            all_combinations.append(current_combination[:])\n            # remove the last element from the current combination\n            current_combination.pop()\n    # return the list of all combinations\n    return all_combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    return list(combinations(list1, len(list1)))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_list = set(list1)\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through each unique element of the list\n    for i in unique_list:\n        # Create a list of combinations by appending each element to the list\n        combination = [i]\n        for j in range(1, len(list1)+1):\n            # Append the j-th element to the combination list\n            combination.append(list1[j-1])\n\n        # Check if the combination is already in the list, otherwise add it\n        if combination not in combinations:\n            combinations.append(combination)\n\n    # Return the list of combinations\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store the combinations\n    combinations = []\n    \n    # Create a helper function to generate combinations\n    def generate_combinations(index, current_combination):\n        if index == len(list1):\n            # If we've reached the end of the list, add the combination to the list of combinations\n            combinations.append(current_combination[:])\n        else:\n            # Otherwise, add the current element to the combination and generate the remaining combinations\n            generate_combinations(index+1, current_combination + [list1[index]])\n            generate_combinations(index+1, current_combination)\n            \n    # Call the helper function to generate the initial combinations\n    generate_combinations(0, [])\n    \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Update the current product\n        current_product *= num\n\n        # Update the maximum product if the current product is greater than the max product\n        if current_product > max_product:\n            max_product = current_product\n\n        # Update the current product to be the previous product\n        current_product = max(num, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0], 1\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far, max_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    max_sum = 0\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = 1\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product > 0:\n            max_sum += current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array, find the maximum product of any contiguous subarray.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if current_product <= 0:\n            current_product = num\n        else:\n            current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    max_ending_here = 1\n\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n\n        if current_product < 0:\n            current_product = 1\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input and returns True if all values in the dictionary are same\n    and False otherwise.\n    '''\n    values = []\n    for i in range(n):\n        value = dict.get(i)\n        if value not in values:\n            values.append(value)\n        else:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(value == dict[n] for value in dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    return all(v == values[0] for v in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = next(iter(dict.values()))\n    for val in dict.values():\n        if val!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if all the values in the dictionary are same\n    all_same = True\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            all_same = False\n            break\n    # If all values are same, return True else return False\n    return all_same"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            all_same = False\n            break\n    return all_same"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the length of the dictionary is less than or equal to n\n    if len(dict) <= n:\n        return False\n\n    # Initialize a variable to store the first value in the dictionary\n    first_value = next(iter(dict.values()))\n\n    # Check if all values in the dictionary are the same as the first value\n    for value in dict.values():\n        if value!= first_value:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for val in dict.values():\n        count += 1\n        if count == n:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n        elif first_value!= value:\n            return False\n        count += 1\n    if count!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for key, value in dict.items():\n        if value!= dict[key]:\n            all_same = False\n            break\n    return all_same"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= '' and v!= [] and v!= {} and v!= False}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value is not None and value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Create an empty list to store the non-empty items\n    result = []\n    \n    # Iterate over the dictionary items\n    for key, value in dict1.items():\n        # Check if the item is not None or an empty string\n        if value is not None and value!= '':\n            # If the item is not empty, add it to the result list\n            result.append((key, value))\n    \n    # Return the result dictionary\n    return dict(result)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    # Find the maximum subsequence of arr\n    max_seq = []\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_seq = [arr[i]]\n            max_val = arr[i]\n        elif arr[i] < max_val:\n            max_seq.append(arr[i])\n            max_val = max_seq[-1]\n\n    # Compute the maximum product of the subsequence\n    if len(max_seq) == 1:\n        return 0\n    return max(max_seq[0] * max_seq[1], max_seq[-1] * max_seq[-2])"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    \n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    prev_num = arr[0]\n    \n    # Iterate through the list\n    for i in range(1, len(arr)):\n        # Check if the current number is greater than the previous number\n        if arr[i] > prev_num:\n            # Update the maximum product and reset the current product\n            max_product = max(max_product, current_product)\n            current_product = 1\n        else:\n            # Update the current product\n            current_product *= arr[i]\n            prev_num = arr[i]\n            \n    # Check if there is any remaining product in the current subsequence\n    max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    max_product = float('-inf')\n    curr_product = 1\n\n    for i in range(n):\n        if i == 0:\n            curr_product = arr[0]\n        elif i == n-1:\n            curr_product = arr[n-1]\n        else:\n            curr_product = arr[i] * arr[i+1]\n\n        if curr_product > max_product:\n            max_product = curr_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Initialize a variable to store the maximum product so far\n    max_product_so_far = float('-inf')\n    # Initialize a variable to store the maximum product for each element in the array\n    max_product_for_each_element = [0] * n\n    # Initialize a variable to store the maximum product for each increasing subsequence of the array\n    max_product_for_each_increasing_subsequence = [0] * n\n    \n    # Compute the maximum product for each element in the array\n    for i in range(n):\n        max_product_for_each_element[i] = arr[i] * max_product_for_each_element[i-1]\n    \n    # Compute the maximum product for each increasing subsequence of the array\n    for i in range(1, n):\n        max_product_for_each_increasing_subsequence[i] = max(arr[i] * max_product_for_each_increasing_subsequence[i-1], arr[i] * max_product_for_each_increasing_subsequence[i-2] + arr[i-1] * max_product_for_each_increasing_subsequence[i-1])\n    \n    # Compute the maximum product formed by multiplying numbers of an increasing subsequence of the array\n    max_product_result = max_product_for_each_increasing_subsequence[n-1]\n    for i in range(n-2, -1, -1):\n        max_product_result = max(max_product_for_each_increasing_subsequence[i], max_product_for_each_increasing_subsequence[i] + max_product_result)\n        \n    return max_product_result"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product of numbers in an increasing subsequence of that array.\n\n    Args:\n    arr: A list or array of integers\n\n    Returns:\n    The maximum product of numbers in the increasing subsequence\n    \"\"\"\n\n    if not arr:\n        return 0\n\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    # Create an empty list to store the maximum product for each subsequence\n    max_products = []\n    # Create an empty list to store the increasing subsequence\n    subsequence = []\n    # Initialize the maximum product to negative infinity\n    max_product_so_far = float('-inf')\n\n    for num in arr:\n        # Append the number to the increasing subsequence if it is greater than the current maximum\n        if num > max_product_so_far and num not in subsequence:\n            subsequence.append(num)\n            # Update the maximum product if the maximum product for the current subsequence is greater than the previous maximum product\n            max_product_for_subsequence = max(subsequence) * min(subsequence)\n            max_products.append(max_product_for_subsequence)\n            # Remove the minimum number from the subsequence to find the next maximum product\n            subsequence.remove(min(subsequence))\n        # If the number is less than or equal to the maximum product for the current subsequence,\n        # update the maximum product for the current subsequence and remove the number from the subsequence\n        elif num <= max_product_so_far and num in subsequence:\n            subsequence.remove(num)\n            # Update the maximum product for the current subsequence if the maximum product for the current subsequence is greater than the previous maximum product\n            max_product_for_subsequence = max(subsequence) * min(subsequence)\n            max_products.append(max_product_for_subsequence)\n        # If the number is equal to the maximum product for the current subsequence, do nothing\n        else:\n            pass\n        # Update the maximum product for the entire array\n        max_product_so_far = max(max_product_so_far, max(max_products))\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_ending_here = float('-inf')\n    min_ending_here = float('inf')\n\n    for i in range(n):\n        if arr[i] > arr[i-1]:\n            max_ending_here = max(max_ending_here*arr[i], arr[i])\n            min_ending_here = min(min_ending_here*arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here*arr[i], min_ending_here*arr[i])\n            min_ending_here = min(min_ending_here*arr[i], arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    current_product = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            current_product = 1\n        else:\n            current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Check if the tuple has more than two elements\n    if len(test_tup) < 2:\n        raise ValueError(\"The tuple must have at least two elements to perform pairwise addition.\")\n\n    # Initialize variables to store the sum of adjacent elements\n    current_sum = 0\n    previous_sum = 0\n\n    # Iterate through the tuple and add the adjacent elements to the sum\n    for i in range(1, len(test_tup)):\n        current_sum += test_tup[i]\n        previous_sum += test_tup[i-1]\n\n    # Return the final sum\n    return current_sum + previous_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    result = 0\n    \n    for i in range(length-1):\n        result += test_tup[i+1] - test_tup[i]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns the pairwise addition of the neighboring elements of the tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) % 2 == 1: # if length of tuple is odd\n        raise ValueError(\"The given tuple has odd length.\")\n    result = 0\n    for i in range(1, len(test_tup)-1):\n        result += test_tup[i]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    # Loop through the tuple and add the neighboring elements to get the final sum\n    total_sum = 0\n    for i in range(len(test_tup)-1):\n        total_sum += test_tup[i+1]\n    \n    return total_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the result list\n    result = []\n    # Loop through the tuple\n    for i in range(1, len(test_tup)-1):\n        # Add the pairwise elements and append to the result list\n        result.append(test_tup[i] + test_tup[i-1] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    \n    # Initialize variables to keep track of the sum of the first and second elements\n    prev_sum = 0\n    curr_sum = 0\n    \n    # Iterate over the tuple and add the neighboring elements to the sum\n    for i in range(len(test_tup)):\n        curr_sum = prev_sum + test_tup[i]\n        prev_sum = curr_sum\n    \n    return curr_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        return (test_tup[0] + test_tup[1],) + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Initialize the sum of the neighboring elements to 0\n    sum_neighboring_elements = 0\n\n    # Loop through the tuple and add the neighboring elements to the sum\n    for i in range(1, len(test_tup)):\n        sum_neighboring_elements += test_tup[i-1] + test_tup[i]\n\n    return sum_neighboring_elements"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product*num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for num in arr:\n        total = (total * num) % n\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    # Initialize the result to 1\n    result = 1\n    # Iterate over each element in the array\n    for num in arr:\n        # Multiply the current result by the current element modulo n\n        result = (result * num) % n\n    # Return the final result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    # Calculate the product of all array elements modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and a number n and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # initialize result as 1\n    result = 1\n\n    # initialize a and b as 1 and n respectively\n    a = 1\n    b = n\n\n    # loop through the array elements\n    for i in range(len(arr)):\n        # calculate the product modulo n\n        product = (arr[i] * a) % b\n\n        # update result\n        result = result * product\n\n        # update a and b\n        a = a * (n - arr[i] + 1) % n\n        b = (b * (n - arr[i] + 1)) % n\n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes in an array and a number n, and returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            continue\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    '''\n    # Check if the list is empty\n    if len(l) == 0: \n        return False\n    \n    # Initialize variables\n    curr_num = l[0]\n    prev_num = -1\n    \n    # Loop through the list\n    for i in range(1, len(l)): \n        # Check if the current number is equal to the previous number + 1\n        if l[i] == curr_num + 1: \n            curr_num += 1\n        # If the current number is not equal to the previous number + 1, set the variables to the current number and move on to the next iteration\n        else: \n            curr_num = l[i]\n            prev_num = l[i-1]\n    \n    # If the loop completes without finding any consecutive numbers, return False\n    if curr_num == prev_num + 1: \n        return False\n    \n    # If the loop completes without finding any consecutive numbers, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # initialize variables\n    num = l[0]\n    count = 1\n    \n    # loop through list and check for consecutive numbers\n    for i in range(1, len(l)):\n        if l[i] == num + 1:\n            count += 1\n        else:\n            if count == 1:\n                num = l[i]\n            else:\n                return False\n            count = 1\n            \n    # check for remaining numbers in list\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return False\n    prev_num = l[0]\n    for num in l[1:]:\n        if num == prev_num + 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # check if the list has less than 2 elements\n    if len(l) < 2:\n        return False\n    \n    # check if the first and second elements are consecutive\n    if l[0] + 1!= l[1]:\n        return False\n    \n    # loop through the rest of the list\n    for i in range(2, len(l)):\n        # check if the current element is consecutive\n        if l[i] - l[i-1]!= 1:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Use set() to get unique elements from both lists\n    unique_elements = set(test_list1).intersection(set(test_list2))\n    # Convert the set to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_tuples = set(test_list1) & set(test_list2)\n    return list(common_tuples)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Sort the two lists to make it easy to find the intersection of elements\n    test_list1.sort()\n    test_list2.sort()\n    \n    # Initialize an empty list to store the intersection of elements\n    intersection = []\n    \n    # Iterate over each element in the sorted lists\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        # If the elements are equal, add them to the intersection list and move to the next pair\n        if test_list1[i] == test_list2[j]:\n            intersection.append(test_list1[i])\n            i += 1\n            j += 1\n        # If the element in the first list is smaller, move to the next element in the first list\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        # If the element in the second list is smaller, move to the next element in the second list\n        else:\n            j += 1\n    \n    # Return the intersection list\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                intersection.append(t1)\n                break\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create an empty set to store the common elements of both the lists\n    common_elements = set()\n\n    # Iterate through the first list and check if each element is present in the second list\n    for element in test_list1:\n        if element in test_list2:\n            # If the element is present in both lists, add it to the set of common elements\n            common_elements.add(element)\n\n    # Convert the set to a tuple and return it\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_elements = set(test_list1) & set(test_list2)\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert both lists to sets to remove duplicates and then convert back to lists\n    set1 = list(set(test_list1))\n    set2 = list(set(test_list2))\n\n    # create an empty set to store the intersection\n    intersection = set()\n\n    # iterate over the elements of each set and add the common elements to the intersection set\n    for element in set1:\n        if element in set2:\n            intersection.add(element)\n\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Initialize a new string to store the modified string\n    modified_str = \"\"\n\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is the character to be replaced\n        if char == ch:\n            # Replace the character with the new character\n            modified_str += newch\n        # Otherwise, add the original character to the modified string\n        else:\n            modified_str += char\n\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(str1)\n    # Loop through each character in the list\n    for i in range(len(chars)):\n        # If the character is the one we want to replace, replace it with the new character\n        if chars[i] == ch:\n            chars[i] = newch\n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in three arguments:\n    1. str1: The string in which we want to replace characters.\n    2. ch: The character that we want to replace.\n    3. newch: The character that we want to replace all occurrences of ch with.\n\n    The function replaces all occurrences of ch with newch in the string str1 and returns the new string.\n    \"\"\"\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes a string and two characters as input and returns a new string with all occurrences of the first character replaced by the second character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary into a Counter object\n    counter = Counter(dict1)\n    \n    # sort the counter in descending order of values\n    sorted_counter = counter.most_common()\n    \n    # create a new dictionary with sorted counter\n    sorted_dict = {k:v for k,v in sorted_counter}\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object to count the frequency of values in the dictionary\n    counter = Counter(dict1.values())\n    \n    # Sort the keys of the Counter object by value (highest to lowest)\n    sorted_keys = sorted(counter, key=lambda x: counter[x], reverse=True)\n    \n    # Create a new dictionary with the sorted keys and values\n    sorted_dict = {}\n    for key in sorted_keys:\n        sorted_dict[key] = dict1[key]\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a list of tuples\n    lst = list(dict1.items())\n\n    # Sort the list based on the values in the tuples\n    lst.sort(key=lambda x: x[1], reverse=True)\n\n    # Convert the sorted list back to a dictionary\n    sorted_dict = dict(lst)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        smallest = nums[0]\n        largest = nums[0]\n        for num in nums[1:]:\n            if num < smallest:\n                smallest = num\n            elif num > largest:\n                largest = num\n        return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Find the sum of the largest and smallest values in a given array.\n    \"\"\"\n    # Find the largest and smallest values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    # Return the sum of the largest and smallest values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the smallest value in the array\n    smallest = float('inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    # Find the largest value in the array\n    largest = float('-inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum value in the array\n    max_value = max(nums)\n    min_value = min(nums)\n    \n    # Add the maximum and minimum value to find the sum\n    return max_value + min_value"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the largest and smallest values to the first element of the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Iterate through the array and update the largest and smallest values as needed\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Initialize variables to store the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Initialize the largest and smallest values to the first two elements of the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Iterate through the remaining elements of the array\n    for num in nums[1:]:\n        # Update the largest and smallest values if necessary\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the same string in lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings\n    lower_case_substrings = re.findall('[a-z]+', str1)\n\n    # Loop through each substring and remove it from the string\n    for lower_case_substring in lower_case_substrings:\n        str1 = re.sub(lower_case_substring, '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the string\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n    # Remove the lowercase substrings from the string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    pattern = re.compile('[a-z]*')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Using regular expressions to find and remove lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and removes all lowercase substrings from the string.\n    '''\n    pattern = r'(?i)\\b[a-z]+\\b'\n    matches = re.findall(pattern, str1)\n    for match in matches:\n        str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert all characters to lowercase\n    str2 = str1.lower()\n    # Split the string into substrings\n    substrings = re.findall(r'[a-z]+', str2)\n    # Remove the substrings from the string\n    for substring in substrings:\n        str2 = re.sub(substring, '', str2)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    \n    # Find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # Remove each lowercase substring from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the integer.\n    '''\n    return n
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input is a string or not\n    if type(n)!= int:\n        raise TypeError('Input must be a number.')\n    # Convert the input to a string and then split it into a list of digits\n    digits = list(str(n))\n    # Return the first digit of the list\n    return digits[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10 ** (len(str(n)) - 1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_num = str(n)\n    first_digit = first_num[0]\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    str_num = str(n)\n\n    # Return the first character of the string\n    return str_num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = n // 10**len(str(n))  \n    return first"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    # create an empty list for odd numbers\n    odd_list = []\n\n    # iterate through the list\n    for num in list:\n\n        # check if the number is odd\n        if num % 2!= 0:\n\n            # if the number is odd, add it to the odd_list\n            odd_list.append(num)\n\n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to find the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        return sum\n    \n    # Function to find the sum of the first n natural numbers\n    def sum_natural(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    \n    # Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    difference = sum_cubes(n) - sum_natural(n)\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # calculate the sum of cubes of first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculate the sum of first n natural numbers\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # calculate the difference between the two sums\n    diff = abs(sum_cubes - sum_natural)\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(n):\n        sum_of_cubes += i*i*i\n        sum_of_natural_numbers += i\n    \n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initializing sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # calculating sum of cubes of first n natural numbers\n    for i in range(n):\n        sum_cubes += i ** 3\n        \n    # calculating sum of natural numbers\n    for i in range(n):\n        sum_natural += i\n    \n    # finding difference between sum of cubes and sum of natural numbers\n    diff = sum_cubes - sum_natural\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    \n    for i in range(n):\n        sum_cubes += i**3\n        sum_numbers += i\n        \n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    # function to calculate the sum of cubes of first n natural numbers\n    def cube_sum(n):\n        return sum([i**3 for i in range(1, n+1)])\n\n    # function to calculate the sum of first n natural numbers\n    def sum_of_numbers(n):\n        return sum([i for i in range(1, n+1)])\n\n    # calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = cube_sum(n)\n\n    # calculate the sum of first n natural numbers\n    sum_of_natural_numbers = sum_of_numbers(n)\n\n    # calculate the difference between the two sums\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of the first n natural numbers\n    sum_n = sum(range(1, n+1))\n\n    # Find the sum of the cubes of the first n natural numbers\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n\n    # Return the difference\n    return abs(sum_n - sum_cubes)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    # Find the sum of the first n natural numbers\n    sum_of_first_n = 0\n    for i in range(1, n+1):\n        sum_of_first_n += i\n    # Find the difference between the sum of cubes and the sum of the first n natural numbers\n    difference = sum_of_cubes - sum_of_first_n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            xor = A[i] ^ A[j] \n            if xor % 2 == 1 : \n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize a dictionary to store the count of each xor value\n    count_dict = {}\n\n    # Iterate through the array A\n    for i in range(N) : \n\n        # Calculate the xor value of A[i] and A[(i+1)%N]\n        xor_val = A[i] ^ A[(i+1)%N]\n\n        # If the xor value is odd, increment its count in the dictionary\n        if xor_val % 2!= 0 : \n            if xor_val in count_dict : \n                count_dict[xor_val] += 1\n            else : \n                count_dict[xor_val] = 1\n\n    # Calculate the total count of odd xor values\n    odd_count = sum(count_dict.values())\n\n    # Return the final result\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor_value = A[i] ^ (A[i+1] if i!= N-1 else 0)\n        if xor_value % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = sum(A)\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_diff = A[i] ^ A[j]\n            if xor_diff % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in a list of integers A and an integer N as input.\n    It returns the count of odd pairs in the list A whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] & 1: # check if xor is odd\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    # create a dictionary to store the count of odd pairs\n    odd_count = {}\n\n    # loop through the array and count the odd pairs\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n\n            if xor_value % 2!= 0:\n                if xor_value in odd_count:\n                    odd_count[xor_value] += 1\n                else:\n                    odd_count[xor_value] = 1\n\n    # return the count of odd pairs\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize a counter to 0\n    count = 0\n\n    # Iterate through all pairs of elements in A\n    for i in range(N):\n        for j in range(i + 1, N):\n            # Check if the xor of the two elements is odd\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor & 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isupper() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower(), string))"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c)-32 if c.isupper() else ord(c)+32) if ord(c)>=97 and ord(c)<=122 else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c.lower()) ^ 32) if c.isupper() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    sum = 0\n    for i in range(10):\n        sum += abs(n1%10 - n2%10)\n        n1 //= 10\n        n2 //= 10\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize variables to store the sum of per-digit differences and their corresponding digits\n    sum_diff = 0\n    n1_digits = []\n    n2_digits = []\n    # Convert the two integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    # Loop through each digit in n1 and n2\n    for i in range(max(len(n1_digits), len(n2_digits))):\n        # If the digits are different, add their difference to the sum_diff\n        if n1_digits[i]!= n2_digits[i]:\n            sum_diff += abs(n1_digits[i] - n2_digits[i])\n    # Return the sum of per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings and remove any leading zeros\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_str = n1_str.lstrip('0')\n    n2_str = n2_str.lstrip('0')\n\n    # Initialize the sum to zero\n    digit_sum = 0\n\n    # Loop through each digit in the two numbers and calculate the per-digit difference\n    for i in range(max(len(n1_str), len(n2_str))):\n        n1_digit = int(n1_str[i]) if i < len(n1_str) else 0\n        n2_digit = int(n2_str[i]) if i < len(n2_str) else 0\n        digit_diff = abs(n1_digit - n2_digit)\n        digit_sum += digit_diff\n\n    # Return the sum of the per-digit differences\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both numbers to a string\n    num1 = str(n1)\n    num2 = str(n2)\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through each digit in both numbers\n    for i in range(len(num1)):\n        # Subtract the digits from the corresponding digits in the second number\n        diff = int(num1[i]) - int(num2[i])\n\n        # Add the absolute value of the difference to the total sum\n        total_sum += abs(diff)\n\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    sum_diff = 0\n    num1 = n1\n    num2 = n2\n\n    while num1 > 0 or num2 > 0:\n        digit_sum = sum(int(digit) for digit in str(num1)) + sum(int(digit) for digit in str(num2))\n        sum_diff += abs(digit_sum - 10)\n        num1 //= 10\n        num2 //= 10\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert both integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Calculate the per-digit difference between the two lists\n    diff = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n\n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = [int(digit) for digit in str(n1)]\n    n2_list = [int(digit) for digit in str(n2)]\n    \n    sum_of_diff = 0\n    \n    for i in range(len(n1_list)):\n        diff = abs(n1_list[i] - n2_list[i])\n        sum_of_diff += diff\n    \n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_sum = 0\n    for i in range(10):\n        num1 = n1 // 10**i\n        num2 = n2 // 10**i\n        diff = num1 - num2\n        total_sum += abs(diff)\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_diff += diff\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the two integers into strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum of the differences\n    sum_diff = 0\n\n    # Loop through each digit in the strings\n    for i in range(len(n1_str)):\n        # Subtract the corresponding digits of the two integers\n        diff = int(n1_str[i]) - int(n2_str[i])\n        # Add the difference to the sum of the differences\n        sum_diff += diff\n\n    # Return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        max_sum = max(a[0], a[0] + max_sub_array_sum(a[1:], size-1))\n        return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if i >= size - size // 2:\n            if current_sum > max_sum:\n                max_sum = current_sum\n            current_sum -= a[i - size // 2]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(len(a)):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i >= size - 1:\n            curr_sum -= a[i-size+1]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Traverse through the list from the beginning and calculate the sum of the current subarray\n    for i in range(size):\n        current_sum += a[i]\n        \n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If the current sum is negative, reset it to 0\n        elif current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return 0\n    \n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        else:\n            max_ending_here = 0\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n\n    if size == 1:\n        return a[0]\n\n    max_sum = max(a[0], a[1])\n    current_sum = max_sum\n\n    for i in range(2, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the given tuples to lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n    \n    # Find the union of the two lists\n    union_list = list(set(tup1_list + tup2_list))\n    \n    # Sort the union list in ascending order\n    union_list.sort()\n    \n    # Convert the union list back to a tuple\n    union_tup = tuple(union_list)\n    \n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # Remove duplicates from the combined list\n    unique_list = list(set(combined_list))\n    # Sort the unique list in ascending order\n    sorted_list = sorted(unique_list)\n    # Output the sorted list\n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples using the + operator\n    combined_tup = test_tup1 + test_tup2\n    # Convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    # Convert the set back to a sorted list and return it\n    return sorted(unique_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # get the union of the two given tuples\n    union = test_tup1 + test_tup2\n\n    # sort the union in ascending order\n    union = sorted(union)\n\n    # print the sorted union\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty list to hold the union of the tuples\n    union_list = []\n    # loop through each element in the first tuple\n    for element in test_tup1:\n        # check if the element is already in the union list\n        if element not in union_list:\n            # if not, add it to the list\n            union_list.append(element)\n    # loop through each element in the second tuple\n    for element in test_tup2:\n        # check if the element is already in the union list\n        if element not in union_list:\n            # if not, add it to the list\n            union_list.append(element)\n    # sort the union list in ascending order\n    union_list.sort()\n    # output the union list\n    print(\"Union of the elements in the given tuples:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    \n    # convert the list into a set to remove duplicates\n    unique_list = list(set(combined_list))\n    \n    # sort the list in ascending order\n    unique_list.sort()\n    \n    # output the sorted list as a tuple\n    return tuple(unique_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    \n    # Sort the combined list in ascending order\n    combined_list.sort()\n    \n    # Output the union of the elements in the sorted list\n    print(\"Union of elements in the sorted list:\", combined_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Convert the union set to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Output the union list\n    print(\"Union of the elements of the two tuples:\", union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Using set union to find the union of two sets\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n    union_set = set_1.union(set_2)\n    # Converting the set to a list and sorting it\n    sorted_list = sorted(union_set)\n    # Printing the sorted list\n    print(sorted_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables to keep track of the length of the longest sublist and the index of the current sublist\n    max_length = 0\n    current_length = 0\n\n    # Loop through the list of sublists\n    for i in range(len(lst)):\n        # Add the length of the current sublist to the running total\n        current_length += len(lst[i])\n\n        # If the current sublist is longer than the running total, update the max_length and restart the current_length counter\n        if current_length > max_length:\n            max_length = current_length\n            current_length = 0\n\n    # Return the max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    longest_sublist = []\n    for sublist in lst:\n        if len(sublist) > len(longest_sublist):\n            longest_sublist = sublist\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    sublist = []\n    max_length = 0\n\n    for i in lst:\n        if not sublist:\n            sublist.append(i)\n        else:\n            while sublist[-1] < i:\n                if len(sublist) > max_length:\n                    max_length = len(sublist)\n                sublist.pop()\n            sublist.append(i)\n\n    while sublist:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n        sublist.pop()\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            length = 1\n        else:\n            for j in range(i):\n                if lst[i] > lst[j]:\n                    length += 1\n                    break\n    return length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst): \n    '''\n    This function takes a list of strings as input and returns the length of the longest sublist in the list.\n    '''\n\n    max_length = 0\n    current_length = 0\n\n    for i in lst:\n        current_length = len(i)\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    # Initialize variables to store the current sublist and its length\n    max_length = 0\n    current_sublist = []\n    \n    # Iterate through the list\n    for item in lst:\n        # If the current item is the start of a new sublist, update the length\n        if item not in current_sublist:\n            current_sublist = [item]\n        else:\n            # Add the current item to the sublist\n            current_sublist.append(item)\n        \n        # Update the maximum length if the length of the current sublist is greater\n        current_length = len(current_sublist)\n        if current_length > max_length:\n            max_length = current_length\n            \n    # Return the maximum length of any sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize variables to keep track of the length of each sublist\n    sublist_lengths = [0] * len(lst)\n    \n    # initialize variables to keep track of the indices of the longest sublists\n    max_length_indices = [0] * len(lst)\n    \n    # initialize variables to keep track of the current sublist being considered\n    current_sublist_length = 0\n    current_sublist_start = 0\n    \n    # loop through the list and update the variables accordingly\n    for i, num in enumerate(lst):\n        # if the current number is smaller than the smallest number in the sublist,\n        # update the current sublist start index and the length of the sublist\n        if num < lst[current_sublist_start]:\n            current_sublist_start = i\n            current_sublist_length = 1\n        # if the current number is greater than or equal to the smallest number in the sublist,\n        # add 1 to the length of the sublist\n        elif num >= lst[current_sublist_start]:\n            current_sublist_length += 1\n        \n        # if the current sublist length is greater than the previous longest sublist length,\n        # update the variables to keep track of the new longest sublist\n        if current_sublist_length > sublist_lengths[max_length_indices[current_sublist_start]]:\n            sublist_lengths[max_length_indices[current_sublist_start]] = current_sublist_length\n            max_length_indices[current_sublist_start] = i\n    \n    # return the length of the longest sublist\n    return max(sublist_lengths)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    max_length = 0\n    curr_length = 0\n\n    # Iterate through the list\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            curr_length += 1\n        else:\n            # Update max_length if curr_length becomes greater\n            max_length = max(max_length, curr_length)\n            curr_length = 0\n\n    # Update max_length if curr_length is greater\n    max_length = max(max_length, curr_length)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for item in lst:\n        current_length += 1\n        if max_length < current_length:\n            max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    #initialize a variable to store the length of the longest sublist\n    max_length = 0\n\n    #loop through each element in the list\n    for i in range(len(lst)):\n\n        #initialize a variable to store the current sublist\n        current_sublist = []\n\n        #loop through each element in the list after the current one\n        for j in range(i+1, len(lst)):\n\n            #add the element to the sublist\n            current_sublist.append(lst[j])\n\n            #if the length of the sublist is longer than the current max length, update the max length\n            if len(current_sublist) > max_length:\n                max_length = len(current_sublist)\n\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and returns a list of extracted values.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n    \n    # Use the pattern to find all matches in the input string\n    matches = pattern.findall(text)\n    \n    # Create a list to store the extracted values\n    values = []\n    \n    # Loop through each match and extract the value between the quotation marks\n    for match in matches:\n        # Strip the leading and trailing quotation marks from the value\n        value = match[1:-1]\n        # Add the value to the list of extracted values\n        values.append(value)\n    \n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"' # matches strings enclosed in double quotes\n    matches = re.findall(pattern, text) # find all matches in the string\n    values = [match.strip('\"') for match in matches] # remove quotes and whitespace from matches\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n\n    # Find all the matches between quotation marks\n    matches = re.findall(r'\"(.*?)\"', text)\n\n    # Loop through the matches and extract the values\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"' # use regular expression to match strings surrounded by double quotes\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.strip('\"')) # remove double quotes from the string\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'(\".*?\")'\n    \n    # Use the re.findall() function to match all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop over the matches and extract the values between the quotation marks\n    values = []\n    for match in matches:\n        # Remove any leading or trailing whitespace from the value\n        value = match.strip('\"')\n        # Add the value to the list of values\n        values.append(value)\n    \n    # Return the list of values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\\\")[^\\\"]*(?=\\\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n\n    # loop through the list of integers\n    for i in range(n):\n        # loop through the list of integers again\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n    arr (list): List of integers.\n    n (int): Size of the list.\n\n    Returns:\n    int: Number of possible unordered pairs where both elements are unequal.\n\n    \"\"\"\n\n    # Initialize a counter variable to keep track of the number of pairs\n    count = 0\n\n    # Iterate through the list and for each element in the list\n    for i in range(n):\n        # Iterate through the remaining elements in the list\n        for j in range(i+1, n):\n            # If both elements are not equal, increment the count by 1\n            if arr[i]!= arr[j]:\n                count += 1\n\n    # Return the count of unordered pairs\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # initialize an empty list to store characters\n    chars = []\n    # iterate through each character in the string\n    for char in word:\n        # append the character to the list\n        chars.append(char)\n    # return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    This function splits a given string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    This function takes a string and splits it into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum to 0\n    sum = 0\n    \n    # iterate through each digit of the input number\n    while n > 0:\n        # add the current digit to the sum\n        sum += n % 10\n        \n        # remove the last digit from the number\n        n //= 10\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string to work with the digits\n    digits = str(n)\n\n    # Initialize the sum to zero\n    total = 0\n\n    # Loop over each digit in the string\n    for digit in digits:\n        # Convert the digit to an integer and add it to the total\n        total += int(digit)\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n    # Loop through each digit in the input number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        # Add it to the total\n        total += digit\n        # Remove the last digit from the number\n        n //= 10\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to hold the sum\n    total = 0\n    # Loop through each digit of n and add it to the total\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over each digit of the integer\n    while n > 0:\n        # Get the last digit of the integer\n        digit = n % 10\n        # Add it to the sum\n        sum += digit\n        # Remove the last digit from the integer\n        n = n // 10\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Use a loop to iterate through each digit of the number\n    sum = 0\n    while n > 0:\n        # Add the current digit to the sum\n        sum += n % 10\n        # Remove the last digit from the number\n        n = n // 10\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert n to a string\n    n_str = str(n)\n    # initialize sum\n    sum = 0\n    # iterate over the digits of n\n    for digit in n_str:\n        # convert digit to integer\n        digit_int = int(digit)\n        # add the digit to sum\n        sum += digit_int\n    # return sum\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty or not\n    if len(list1) <= 1:\n        return True\n\n    # Check if the first element is smaller or greater than the last element\n    if list1[0] >= list1[-1]:\n        return False\n\n    # Check if the list is sorted or not\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order\n    and False otherwise.\n\n    If the list is empty, the function returns True.\n\n    Parameters:\n    list1 (list): List to be checked for sorting.\n\n    Returns:\n    bool: True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n\n    # loop through the list and compare adjacent elements\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = {}\n    return [empty_dict for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, lst in enumerate(list1):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty list to store unique numbers\n    unique_nums = []\n\n    # loop through each list in the input list\n    for num_list in nums:\n        # loop through each number in the list\n        for num in num_list:\n            # check if the number is not already in the unique_nums list\n            if num not in unique_nums:\n                # add the number to the list of unique numbers\n                unique_nums.append(num)\n\n    # return the list of unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # convert all lists to sets to remove duplicates\n    unique_nums = {x for lst in nums for x in lst}\n    \n    # convert back to a list of lists\n    result = [list(set(lst)) for lst in nums]\n    \n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the input list to set to remove duplicates\n    nums_set = set(nums)\n    # Convert the set back to a list and return it\n    return list(nums_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_nums = set()\n    for num in nums:\n        # Add unique numbers to set\n        unique_nums.add(num)\n    # Convert set back to list\n    unique_list = list(unique_nums)\n    # Return list of unique numbers\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the list of lists to a set to remove duplicates\n    unique_nums = set([num for sublist in nums for num in sublist])\n    # Convert the set back to a list\n    unique_list = list(unique_nums)\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the lists to sets\n    sets = set(nums)\n    # Convert the sets to lists\n    lists = list(sets)\n    # Return the lists with duplicate numbers removed\n    return lists"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    # create a dictionary to store the counts of each number in the lists\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # create a new list to store the unique numbers\n    unique_nums = []\n    \n    # iterate over the counts dictionary and add the numbers that have a count of 1\n    for key in count_dict:\n        if count_dict[key] == 1:\n            unique_nums.append(key)\n    \n    # return the unique numbers in the new list\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Calculate the product of the unique numbers in a given list.\n\n    Parameters:\n    list_data (list): a list of integers\n\n    Returns:\n    int: the product of the unique numbers in the list\n    '''\n\n    unique_numbers = list(set(list_data))  # get a list of unique numbers from the input list\n\n    product = 1  # initialize the product to 1\n\n    for num in unique_numbers:  # iterate over the unique numbers\n        product *= num  # multiply the current number by the product\n\n    return product  # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Remove duplicates from the list\n    unique_list = list(set(list_data))\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create an empty dictionary to store the unique numbers\n    unique_dict = {}\n    \n    # iterate through the list\n    for num in list_data:\n        # check if the number is already in the dictionary\n        if num in unique_dict:\n            # increment the count for the number in the dictionary\n            unique_dict[num] += 1\n        else:\n            # add the number to the dictionary with a count of 1\n            unique_dict[num] = 1\n            \n    # initialize the product variable to 1\n    product = 1\n    \n    # iterate through the unique numbers in the dictionary\n    for num, count in unique_dict.items():\n        # multiply the product by the number and its count\n        product *= num * count\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n\n    # Creating a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n\n    # Calculating the product of the unique numbers\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    # create a set to store unique numbers from the input list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    result = 1\n    for num in unique_nums:\n        result *= num\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of unique numbers in a given list.\n\n    Parameters:\n    list_data (list): A list of numbers.\n\n    Returns:\n    int: The product of unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return (1 if not unique_nums else 1) * reduce(lambda x,y: x*y, unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    \n    if len(unique_list) == 0:\n        return 0\n    \n    product = 1\n    for num in unique_list:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    # create a set to remove duplicates from the given list\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Initialize an empty set to store unique numbers\n    unique_numbers = set()\n    # Loop through each element in the list\n    for num in list_data:\n        # If the number is not already in the set, add it\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h  # pi is a mathematical constant defined as 3.14 in Python\n    "
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to calculate surface area of a cylinder\n    area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    \n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * h # formula to find the area of a cylinder\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    surface_area = 2*pi*(r**2 + h**2)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*r*h # Formula for surface area of a cylinder\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the area using the formula:\n    # A = pi*r^2*h\n    A = 2 * 3.14 * r**2 * h\n\n    # Return the result:\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the volume of the cylinder\n    V = 2 * 3.14159 * r * r * h\n    # calculate the surface area of the cylinder\n    A = 2 * 3.14159 * r * h\n    # return the surface area of the cylinder\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # pi is a mathematical constant representing the value of pi\n    pi = 3.14159265359\n    # calculate the surface area of the cylinder using the formula A = 2*pi*r*h\n    A = 2*pi*r*h\n    return A"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    # Check if the first list is sublist of the second list\n    if A == B:\n        return True\n    \n    # Traverse through the first list and check if it is a sublist of B\n    for i in range(len(A)):\n        if A[i:] == B:\n            return True\n    \n    # If we reach here, the first list is not a sublist of the second list\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if the length of A is greater than B\n    if len(A) > len(B):\n        return False\n\n    # Initialize the index for A and B\n    i = 0\n    j = 0\n\n    # Check if all elements of A are present in B\n    while i < len(A):\n        if A[i] == B[j]:\n            j += 1\n            i += 1\n        else:\n            j = 0\n            i += 1\n\n    # Check if all elements of B are present in A\n    if j == len(B):\n        return True\n\n    # If no sublist is found, return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n\n    # Check if A is a sublist of B \n    if len(A) > len(B): \n        return False \n\n    i = 0 \n    j = 0 \n\n    # Traverse both lists \n    while i < len(A) and j < len(B): \n        \n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n        else: \n            j += 1 \n\n    # If both lists are traversed completely, then it is a sublist of B. \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n\n    return j == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) < len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n    \n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    # check if both lists have the same length\n    if len(A)!= len(B):\n        return False\n\n    # traverse through the list A and check if it contains all the elements in list B\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if B.count(A[i]) == 0:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Checks whether a list A is a sublist of list B.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(len(B)):\n            if A == B[i:]:\n                return True\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the last digit of its factorial.\n\n    Example:\n    Input: 5\n    Output: 5\n\n    Input: 10\n    Output: 2\n    \"\"\"\n    # Get the factorial of the input number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input number to a string\n    str_n = str(n)\n\n    # Get the last digit of the string\n    last_digit = int(str_n[-1])\n\n    # Calculate the factorial\n    factorial = 1\n    for i in range(1, last_digit + 1):\n        factorial *= i\n\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Convert the input number to a string\n    n_str = str(n)\n    \n    # Convert the first digit of the input number to an integer\n    first_digit = int(n_str[0])\n    \n    # Calculate the factorial of the input number\n    factorial = 1\n    for i in range(1, first_digit+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Convert the number to a string\n    s = str(n)\n    \n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, int(n)+1):\n        factorial *= i\n    \n    # Extract the last digit of the factorial\n    last_digit = int(factorial % 10)\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    # find the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # find the last digit of the factorial\n    last_digit = str(fact)[-1]\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Finding factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extracting last digit of factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # function to find the factorial of a number\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # find the last digit in the factorial of n\n    last_digit = n % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Finding the factorial of a number\n    factorial = 1\n    i = n\n    while i > 0:\n        factorial *= i\n        i -= 1\n\n    # Finding the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Returning the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Combine the 3 lists into a single list\n    combined_list = list1 + list2 + list3\n    \n    # Flatten the combined list into a single list\n    flat_list = [item for sublist in combined_list for item in sublist]\n    \n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes 3 lists of the same length and returns a single flat list,\n    interleaving them.\n    \"\"\"\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Iterate through each list\n    for i in range(len(list1)):\n        # Add the i-th element of list1 to the interleaved list\n        interleaved_list.append(list1[i])\n        # Add the i-th element of list2 to the interleaved list\n        interleaved_list.append(list2[i])\n        # Add the i-th element of list3 to the interleaved list\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists of the same length and returns a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j] and list1[i] <= list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] and list2[j] <= list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n            \n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n        \n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n        \n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n        \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    if i < len(list1):\n        result.extend(list1[i:])\n    if j < len(list2):\n        result.extend(list2[j:])\n    if k < len(list3):\n        result.extend(list3[k:])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check that all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n\n    # Initialize the result list with the first element of each list\n    result = list1[0] + list2[0] + list3[0]\n\n    # Interleave the other elements of each list\n    for i in range(1, len(list1)):\n        result += list1[i] + list2[i] + list3[i]\n\n    # Return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # iterate through each element of the lists\n    for i in range(len(list1)):\n        # append the first element of the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # append the second element of the second list to the interleaved list\n        interleaved_list.append(list2[i])\n        # append the third element of the third list to the interleaved list\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns a single list of the same length,\n    where each element is the concatenation of the corresponding elements of the input lists.\n\n    For example, if `list1` is `[1, 2, 3]`, `list2` is `[4, 5, 6]` and `list3` is `[7, 8, 9]`,\n    the function should return the list `[1, 4, 7, 2, 5, 8, 3, 6, 9]`.\n    \"\"\"\n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Loop through the lists and concatenate the corresponding elements\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of the first tuple's elements\n    set1 = set(test_tup1)\n    # Create a set of the second tuple's elements\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Find the difference between the two sets\n    difference = set1.difference(set2)\n    # Find the symmetric difference of the two sets\n    sym_diff = set1.symmetric_difference(set2)\n    # Return the dissimilar elements as a list\n    return list(intersection) + list(difference) + list(sym_diff)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through the first tuple\n    for item1 in test_tup1:\n        # Check if the item is in the second tuple\n        if item1 not in test_tup2:\n            # If not, add it to the list of dissimilar elements\n            dissimilar_list.append(item1)\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through the elements of both tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # Add the dissimilar element to the list\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [x for x in test_tup1 if x not in test_tup2] + [x for x in test_tup2 if x not in test_tup1]"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # If the element is not in the second tuple, add it to the set\n        if test_tup1[i] not in test_tup2:\n            dissimilar_set.add(test_tup1[i])\n\n    # Return the set of dissimilar elements\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # loop through each element of the first tuple and check if it's in the second tuple\n    for element in test_tup1:\n        if element not in test_tup2:\n            # if the element is not in the second tuple, add it to the dissimilar list\n            dissimilar_list.append(element)\n    # return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # use set() to remove duplicates\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n    # find the intersection of the two sets\n    common_elements = unique_tup1.intersection(unique_tup2)\n    # find the elements in only one of the tuples that are not in the intersection\n    dissimilar_elements = unique_tup1 - common_elements\n    if not dissimilar_elements:\n        # if there are no dissimilar elements, return None\n        return None\n    else:\n        # return the list of dissimilar elements\n        return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_list = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            new_list.append(even_ele(element, even_fnc))\n        else:\n            if even_fnc(element):\n                new_list.append(element)\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    Args:\n        test_tuple: a nested mixed tuple\n        even_fnc: a function that takes an element of the nested mixed tuple and returns True if it's even, False otherwise\n\n    Returns:\n        a new nested mixed tuple with uneven elements removed\n    '''\n\n    # create a new list to store the even elements\n    even_list = []\n\n    # loop through each element of the nested mixed tuple\n    for element in test_tuple:\n        # if the element is even using the provided even_fnc function, add it to the even_list\n        if even_fnc(element):\n            even_list.append(element)\n\n    # return the new nested mixed tuple with even elements only\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            even_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # initialize an empty list for even elements\n    even_list = []\n\n    # loop through each element in the mixed tuple\n    for item in test_tuple:\n        # check if the element is even using the even_fnc() function\n        if even_fnc(item):\n            # add even elements to the even_list\n            even_list.append(item)\n\n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_list = []\n    for t in test_tuple:\n        if not even_fnc(t):\n            uneven_list.append(t)\n    return uneven_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # define a function to check if an element is even\n    def is_even(x):\n        if type(x) == int:\n            return x % 2 == 0\n        else:\n            return False\n\n    # define a function to check if an element is odd\n    def is_odd(x):\n        return not is_even(x)\n\n    # use filter() function to filter out even elements from the nested mixed tuple\n    filtered_tuple = list(filter(even_fnc, test_tuple))\n\n    # return the filtered tuple\n    return filtered_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Convert the tuple to a list\n    list_test_tuple = list(test_tuple)\n    \n    # Define a function to check if an element is even\n    def is_even(num):\n        return num % 2 == 0\n\n    # Remove uneven elements from the list using a list comprehension and a custom function\n    filtered_list = [num for num in list_test_tuple if even_fnc(num)]\n\n    # Convert the filtered list back to a tuple\n    final_tuple = tuple(filtered_list)\n\n    # Return the final tuple\n    return final_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for sublist in test_tuple:\n        if all(even_fnc(x) for x in sublist):\n            result.append(sublist)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        else:\n            result.append(even_fnc(item))\n    return result\n\ndef is_even(x):\n    '''\n    A function to check if a number is even.\n    '''\n    return x % 2 == 0\n\nmixed_tuple = ((1, 2, 3, (4, 5, 6)), (7, 8, 9, (10, 11, 12, (13, 14)))))\nprint(even_ele(mixed_tuple, is_even))  # Output: [(2, 4, 6, (8, 10, 12, (14))), (8, 10, 12, (14))]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            result.append(even_fnc(item))\n        else:\n            result.append(even_fnc(item))\n    return result\n\ndef remove_even(lst):\n    '''\n    Remove even elements from a list.\n    '''\n    return [x for x in lst if x % 2!= 0]\n\ntest_tuple = (1, 2, (3, 4, (5, 6, (7, 8, 9), 10)), 12, [13, 14, [15, 16, [17, 18, 19], 20], 21], 22)\nresult = even_ele(test_tuple, remove_even)\nprint(result)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes in the base and height of a square pyramid and returns the surface area of the pyramid.\n    '''\n    return (base * height) + (2 * base * height)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 6 * b**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of each side of the pyramid\n    a = b\n    h = s\n\n    # Calculate the area of the base of the pyramid\n    base_area = 0.5*b*b\n\n    # Calculate the surface area of the pyramid\n    surface_area = 6*(a*h + b*h + a*b + 2*a*h + 2*b*h + 2*a*b)\n\n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of a square pyramid\n    surface_area = (2*b*s) + (2*b*s) + ((b*b)*(s*s))\n    print(\"The surface area of the pyramid is:\", surface_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculating the surface area of the pyramid\n    surface = (b*s**2) + (b*s**2) + (b*s**2)\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s + b*s + s*s + 2*b*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the area of the pyramid\n    area = (b**2) * s\n    # Calculate the surface area of the pyramid\n    surface_Area = 2 * area + (b**2) * (s**2)\n    # Return the surface area of the pyramid\n    return surface_Area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base and side of the pyramid\n    base_area = 0.5 * b * b\n    side_area = 0.5 * b * s\n    \n    # Calculate the total surface area of the pyramid\n    total_area = base_area + side_area\n    \n    # Return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the length of each side of the pyramid\n    a = b/2\n    c = s - b\n\n    # Calculate the surface area of the pyramid using Heron's formula\n    area = 0.5 * b * s * (b + s - c)\n\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the base area\n    base_area = b * b\n    \n    # Calculate the height area\n    height_area = s * b\n    \n    # Add the two areas and return the result\n    return base_area + height_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty.\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"Dictionary is not empty\")\n    else:\n        print(\"Dictionary is empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n\n    Args:\n    dict1 (dict): The dictionary to be checked\n\n    Returns:\n    bool: True if the dictionary is empty, False otherwise\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * catalan_number(n - 1) // (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 4*catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += catalan_number(i) * catalan_number(n-i)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    n = n + 1\n    numerator = 1\n    denominator = 1\n    for i in range(1, n + 1):\n        numerator = numerator * i\n        denominator = denominator * (2 * i - 1)\n    result = numerator // denominator\n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Number should be a positive integer.\")\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 4 * (catalan_number(n - 1) + catalan_number(n - 2))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n should be non-negative.\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        catalan_num = 0\n        for i in range(n):\n            catalan_num += i * (2*i+1)\n        for i in range(1, n):\n            catalan_num += i * (2*i-1)\n        return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * 2**(n-1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n\n    for i, match in enumerate(matches):\n        start, end = match.span()\n        print(f\"{i+1}. {text[start:end]}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'(?<=\\W)([a-zA-Z]+)ly(?=\\W)'\n    matches = re.findall(pattern, text)\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]+ly\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find all adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    # print the list of adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        print(f'{i+1}. {adverb}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\bly\\b'\n\n    # Use the re.findall() method to find all the positions of all adverbs in the text\n    positions = re.findall(pattern, text)\n\n    # Create an empty list to store the adverbs\n    adverbs = []\n\n    # Loop through all the positions and extract the adverbs\n    for position in positions:\n        adverb = text[position - 3:position + 2]\n        adverbs.append(adverb)\n\n    # Return the list of adverbs\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define regular expression pattern for adverbs ending with ly\n    pattern = r\"\\b(ly)\\b\"\n    # Use the re.findall() function to find all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # Create a list to store the positions of the matches\n    positions = []\n    # Loop through each match and append its position to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return a tuple of the matches and positions\n    return matches, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+(ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern to match adverbs ending with \"ly\"\n    pattern = r\"\\b[a-zA-Z]+ly\\b\"\n\n    # Find all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store positions of adverbs ending with \"ly\"\n    positions = []\n\n    # Loop through each match and append its position to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n\n    # Return the list of positions of adverbs ending with \"ly\"\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = re.compile(r'\\b(\\w+ly\\w+)\\b', re.IGNORECASE)\n    \n    # Find all matches in the text using the regular expression pattern\n    matches = re.findall(pattern, text)\n    \n    # Print the adverbs and their positions in the text\n    for match in matches:\n        print(match, text.index(match))"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items based on their price\n    items.sort(key=lambda x: x[1])\n    # Create a min-heap of size n\n    min_heap = []\n    # Loop through the items and add them to the min-heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # If the size of the min-heap is greater than n, remove the item with the lowest price from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the dataset based on the price of the items\n    items.sort(key=lambda x: x[1], reverse=True)\n    # Initialize the result list\n    result = []\n    # Add the top n items to the result list\n    for i in range(n):\n        result.append(items[i][0])\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and the number of items to be returned as input. \n    It uses the heapq module to find the n most expensive items in the dataset.\n    \"\"\"\n    # initialize an empty list to store the n most expensive items\n    most_expensive = []\n    \n    # loop through the items in the dataset\n    for item in items:\n        # if the item is less than or equal to the last item in the heap, replace the last item\n        if len(most_expensive) < n or item > most_expensive[0]:\n            heapq.heappushpop(most_expensive, item)\n            \n    # return the n most expensive items\n    return most_expensive"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Returns the n most expensive items in a given dataset.\n    \"\"\"\n\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add each one to the min heap if it's cheaper than the current min\n    for item in items:\n        if not min_heap or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n\n        # If the heap has reached its maximum size, remove the item with the lowest price from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Extract the n most expensive items from the heap and return them\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the n most expensive items in descending order\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in decreasing order of prices\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Create a min-heap of size n to store the n most expensive items\n    heap = []\n    # Iterate through the sorted items and add them to the heap if their prices are greater than or equal to the price of the smallest item in the heap\n    for item in sorted_items:\n        if len(heap) < n or item[1] >= heap[0][1]:\n            heapq.heappush(heap, item)\n        else:\n            heapq.heappop(heap)\n    # Extract the n most expensive items from the heap and return them as a list of tuples\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes in a list of items and an integer n, and returns a list of the n most expensive items.\n    \"\"\"\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    # Loop through the items and add them to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # If the heap size exceeds n, remove the item with the highest price\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the list of n most expensive items\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order based on price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Return the n most expensive items\n    return sorted_items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-item for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items in the dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Check if the list is empty\n    if len(l) == 0:\n        return l\n    \n    # Find the index of the nth element\n    for i in range(len(l)):\n        if i == n-1:\n            break\n    \n    # Add the first part to the end of the list\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return 'Invalid input. Please provide a positive integer for n.'\n    # Split the list at nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # Add the first part to the end of the second part\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the nth element is out of range\n    if n > len(l):\n        return \"Error: The nth element is out of range\"\n    \n    # split the list at the nth element\n    new_list = l[:n] + [l[n]] + l[n+1:]\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create a new empty list to store the first n elements\n    first_part = []\n\n    # iterate through the input list and add the first n elements to the new list\n    for i in range(n):\n        first_part.append(l[i])\n\n    # add the rest of the elements to the new list\n    for i in range(n, len(l)):\n        first_part.append(l[i])\n\n    # return the new list with the first part added to the end\n    return first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"Error: List length should be greater than or equal to the element you want to split at\")\n        return\n    else:\n        return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_list = l[:n]\n    return split_list + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        arr1 = l[:n]\n        arr2 = l[n:]\n        arr1.append(arr2)\n        return arr1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if type(l)!= list:\n        print(\"Error: Input must be a list\")\n        return None\n    if n < 0 or n > len(l):\n        print(\"Error: Index out of range\")\n        return None\n    split_index = n\n    if len(l) == 1:\n        return l\n    else:\n        return l[split_index:] + l[:split_index]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < len(l):\n        return [l[n]] + l[:n]\n    else:\n        return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) == 0:\n        return \"Error: Empty list\"\n\n    min_val = max_val = nums[0]\n    for num in nums[1:]:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # sort the list in descending order\n    nums.sort(reverse=True)\n    # return the difference between the largest and smallest values in the sorted list\n    return nums[0] - nums[1]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list in ascending order\n    nums.sort()\n    # find the difference between largest and smallest value\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables to store the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n\n    # iterate through the list and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # calculate the difference between the largest and smallest values\n    diff = largest - smallest\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Find the difference between the largest and smallest values\n    return abs(nums[-1] - nums[0])"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        diff = max_val - min_val\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return \"Error: List is empty\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables to store the number of perfect squares between a and b\n    count = 0\n    num = a\n    # Loop through all possible perfect squares between a and b\n    while num <= b:\n        count += 1\n        num = num**2\n    # Return the number of perfect squares between a and b\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    while a <= b:\n        square = a * a\n        if square == a:\n            squares.append(square)\n        a += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    while a <= b:\n        squares.append(a**2)\n        a += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i ** 2 == b:\n            print(i)\n        elif i ** 2 < b:\n            print(i ** 2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize variables for the number of perfect squares\n    perfect_square_count = 0\n    num = a\n\n    # iterate through numbers between a and b, checking for perfect squares\n    while num <= b:\n        # check if the number is a perfect square\n        if num ** 2 == num:\n            perfect_square_count += 1\n        num += 1\n\n    # return the number of perfect squares\n    return perfect_square_count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        root = i ** 0.5\n        if root.is_integer():\n            perfect_square = int(root) ** 2\n            if perfect_square == i:\n                print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == i:\n            print(i)\n        elif square > i:\n            print(i, square)\n        elif square < i:\n            break"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Create a list of all numbers between a and b, inclusive\n    numbers = list(range(a, b+1))\n    # Initialize a boolean list of the same size as the numbers list\n    is_prime = [True] * len(numbers)\n    # Set the first element of the boolean list to False\n    is_prime[0] = False\n    # Loop through the boolean list and set each element to False if it is not a prime number\n    for i in range(2, int(b**0.5)+1):\n        if is_prime[i]:\n            for j in range(i*i, len(numbers), i):\n                is_prime[j] = False\n    # Create a list of all the prime numbers between a and b\n    primes = [x for x in numbers if is_prime[x-a]]\n    # Create a list of perfect squares between a and b\n    perfect_squares = []\n    for prime in primes:\n        perfect_square = prime**2\n        if perfect_square >= a and perfect_square <= b:\n            perfect_squares.append(perfect_square)\n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b + 1):\n        square = i*i\n        if square == i**2:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = i ** 2\n        if square == i:\n            squares.append(square)\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    return r*cmath.cos(phi), r*cmath.sin(phi)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert radian to degree\n    theta_deg = cmath.phase(theta)*180/cmath.pi\n\n    # Convert degree to radian\n    theta_rad = theta_deg*cmath.pi/180\n\n    # Convert rectangular coordinates\n    x = r*cmath.cos(theta_rad)\n    y = r*cmath.sin(theta_rad)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert angle from degrees to radians\n    theta = theta*cmath.pi/180.0\n    \n    # Calculate rectangular coordinates\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    \n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function takes in polar coordinates (r,theta) and returns the rectangular coordinates (x,y)\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Calculate the magnitude and angle of the vector in radians\n    mag = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n\n    # Convert the magnitude to rectangular coordinates\n    rect_x = mag * cmath.cos(theta)\n    rect_y = mag * cmath.sin(theta)\n\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    phi = cmath.phase(r+1j*theta)\n    x = r*cmath.cos(phi)\n    y = r*cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert phi to radians\n    phi = cmath.radians(phi)\n\n    # Calculate x and y components\n    x = r*cmath.cos(phi)\n    y = r*cmath.sin(phi)\n\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r * cmath.exp(1j*theta)\n    y_rect = r * cmath.exp(-1j*theta)\n    return x_rect.real, x_rect.imag, y_rect.real, y_rect.imag"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes two arguments, r and theta, which are the polar coordinates\n    of a point in a 2D plane. The function converts these coordinates to a rectangular\n    coordinate system by calculating the x and y coordinates using the formulas:\n    \n    x = r * cos(theta)\n    y = r * sin(theta)\n    \n    and returns a tuple containing these values.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return (x,y)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # Print the new list\n        print(newList)\n    else:\n        print(\"The list must have at least two elements to be interchanged.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List should have at least two elements to swap.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"The list must have at least two elements to swap them.\")\n        return None\n    else:\n        first_element = newList[0]\n        second_element = newList[-1]\n        newList[0] = second_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements to be swapped.\"\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 2:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    else:\n        print(\"The list must have at least 2 elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Interchange the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the new list\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    for i in range(k):\n        product *= (n-i)\n    return product\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base case: if k is 0, the sum of the product of consecutive binomial co-efficients is 1\n    if k == 0:\n        return 1\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Calculate the binomial coefficient of k and n-k\n    binomial_coeff = math.comb(n, k)\n    \n    # Calculate the product of consecutive binomial coefficients and add it to the sum variable\n    for i in range(1, k+1):\n        binomial_coeff = binomial_coeff * i\n    \n    # Add the binomial coefficient to the sum variable\n    sum += binomial_coeff\n    \n    # Calculate the sum of the product of consecutive binomial coefficients and add it to the sum variable\n    for i in range(1, n-k+1):\n        binomial_coeff = math.comb(n, i) * math.comb(n-i, k-i)\n        sum += binomial_coeff\n    \n    # Return the final sum of the product of consecutive binomial coefficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    count = 0\n    for i in range(n + 1):\n        count += i * k ** i\n    return count"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    sum_coeff = 0\n    for i in range(k, n+1):\n        coeff = (coeff * (n-i+1)) // i\n        sum_coeff += coeff\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coefficients = [1]\n    for i in range(1, n+1):\n        next_binomial = i*(i-1)//(k-1)\n        binomial_coefficients.append(binomial_coefficients[-1] + next_binomial)\n    return binomial_coefficients[-1]"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Compute the sum of the product of consecutive binomial co-efficients.\n\n    :param n: the number of elements in the sequence\n    :param k: the number of consecutive elements to include in the sequence\n    :return: the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    result = 0\n    # Initialize the first k elements of the sequence\n    seq = [1] * k\n    # Compute the sum of the sequence\n    for i in range(k, n + 1):\n        # Compute the i-th binomial coefficient\n        b = (n + 1 - i) // i\n        # Compute the product of the sequence with the next binomial coefficient\n        seq.append(seq[-1] * b)\n        # Compute the sum of the sequence\n        result += seq[-1]\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop from k to n and calculate the product of consecutive binomial coefficients\n    for i in range(k,n+1):\n        sum += (n-i+1) * (i) * (binomial_Coeff(n-1,i-1))\n    # Return the sum variable\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two integer arguments n and k and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0 or n < k: \n        return \"Invalid input\"\n\n    # Initialize the result variable\n    result = 1\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(k,n+1):\n        result *= i\n\n    # Return the result\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^0+(?=\\d)\", \"\", ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        ip = ip.replace('0', '')\n        return ip\n    else:\n        print(\"Invalid IP address\")"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'\n    return re.sub(pattern, r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet\n    ip = re.sub(r'^\\d+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        ip_list = ip.split('.')\n        ip_list = [int(i) for i in ip_list]\n        if ip_list[0] == 0:\n            ip_list.pop(0)\n        return '.'.join([str(i) for i in ip_list])\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeros from each octet\n    ip = re.sub(r'^\\d+(\\.0)+', '', ip)\n    # remove leading zeros from the entire ip address\n    ip = re.sub(r'^(0+\\.)+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        ip = re.sub(r'^0+(\\d+)$', r'\\1', ip)\n        return ip\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    even_num = lst[0]\n    odd_num = lst[1]\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0:\n        return abs(even - odd)\n    else:\n        return abs(odd - even)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd numbers in a given list.\n    \"\"\"\n    # Initialize variables to hold even and odd numbers\n    even = 0\n    odd = 0\n\n    # Loop through the list and check if the number is even or odd\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n\n    # Find the difference between the even and odd numbers and return the result\n    return abs(even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n        elif first_even is not None and first_odd is not None:\n            return first_even - first_odd\n    return \"There is no even and odd number in the list.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"The list should have at least two elements\"\n    elif list1[0] % 2 == 0 and list1[1] % 2!= 0:\n        return list1[0] - list1[1]\n    elif list1[0] % 2!= 0 and list1[1] % 2 == 0:\n        return list1[1] - list1[0]\n    else:\n        return \"The first even number is not the first odd number\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(list1) < 2:\n        return None\n    \n    # Initialize variables to store even and odd numbers\n    even = None\n    odd = None\n    \n    # Iterate through the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n    \n    # Check if even and odd numbers were found\n    if even is None or odd is None:\n        return None\n    \n    # Return the difference between even and odd numbers\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if even_num is None:\n                even_num = i\n            else:\n                even_num = min(even_num, i)\n        else:\n            if odd_num is None:\n                odd_num = i\n            else:\n                odd_num = min(odd_num, i)\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return list1[even_num] - list1[odd_num]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n        if even_num and odd_num:\n            break\n    if even_num is None or odd_num is None:\n        return \"No even or odd number found\"\n    else:\n        return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - odd_num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - even_num\n    return even_num - odd_num"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the binary strings to lists of bits\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # calculate the length of the binary strings\n    len1 = len(str1)\n    len2 = len(str2)\n\n    # initialize two pointers for the strings\n    i = 0\n    j = 0\n\n    # initialize a variable to store the minimum number of swaps\n    swaps = 0\n\n    # while both pointers are within the limits of the binary strings\n    while i < len1 and j < len2:\n\n        # if the bits at the current positions are different, increment the swap count\n        if list1[i]!= list2[j]:\n            swaps += 1\n\n        # move the pointers to the next positions\n        i += 1\n        j += 1\n\n    # return the minimum number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert them.\n\n    :param str1: A binary number represented as a string.\n    :param str2: Another binary number represented as a string.\n    :return: The minimum number of swaps required to convert the two binary numbers.\n    \"\"\"\n    # Remove any leading zeros from the string\n    str1 = str1.lstrip('0')\n    str2 = str2.lstrip('0')\n\n    # Check if the strings are of equal length\n    if len(str1)!= len(str2):\n        raise ValueError(\"The two binary numbers must have the same length.\")\n\n    # Initialize the swap count and index variables\n    swap_count = 0\n    i, j = 0, 0\n\n    # Iterate over the strings from the right to the left\n    while i < len(str1):\n        # Check if the characters at the current indices are equal\n        if str1[i]!= str2[j]:\n            # If they are not, increment the swap count and swap the characters at the indices\n            swap_count += 1\n            str1[i], str1[j] = str1[j], str1[i]\n            str2[i], str2[j] = str2[j], str2[i]\n            i = 0\n            j = 0\n        # If the characters are equal, move to the next index\n        else:\n            i += 1\n            j += 1\n\n    # Return the minimum number of swaps required to convert the two binary numbers\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Check if the strings are of equal length\n    if len(str1)!= len(str2):\n        return \"Strings are not of equal length\"\n\n    # Create a dictionary to store the frequency of each digit in str1 and str2\n    freq1 = {}\n    freq2 = {}\n\n    for i in range(len(str1)):\n        if str1[i] in freq1:\n            freq1[str1[i]] += 1\n        else:\n            freq1[str1[i]] = 1\n\n        if str2[i] in freq2:\n            freq2[str2[i]] += 1\n        else:\n            freq2[str2[i]] = 1\n\n    # Find the maximum frequency in str1 and str2\n    max_freq = 0\n    for key in freq1:\n        if freq1[key] > max_freq:\n            max_freq = freq1[key]\n\n    for key in freq2:\n        if freq2[key] > max_freq:\n            max_freq = freq2[key]\n\n    # Find the minimum number of swaps required to convert one string to another\n    swaps = 0\n    for i in range(len(str1)):\n        if freq1[str1[i]] > max_freq:\n            swaps += freq1[str1[i]] - max_freq\n            max_freq = freq1[str1[i]]\n        elif freq2[str2[i]] > max_freq:\n            swaps += freq2[str2[i]] - max_freq\n            max_freq = freq2[str2[i]]\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return \"Invalid input strings\"\n    \n    n = len(str1)\n    count = 0\n    swap = []\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            if str1[i] == \"0\" and str2[i] == \"1\":\n                swap.append(i)\n            else:\n                swap.append(n-i-1)\n        else:\n            swap.append(n-i-1)\n            \n    for i in range(n):\n        if str1[i] == str2[i]:\n            count += swap.pop(0)\n        else:\n            if str1[i] == \"0\":\n                str1[i] = \"1\"\n                str2[i] = \"0\"\n            else:\n                str1[i] = \"0\"\n                str2[i] = \"1\"\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n    Args:\n    str1 (str): A binary number represented as a string.\n    str2 (str): Another binary number represented as a string.\n\n    Returns:\n    int: The minimum number of swaps required to convert str1 to str2.\n\n    Raises:\n    ValueError: If either of the input strings is not a valid binary number.\n\n    Examples:\n    min_Swaps(\"101010101010\", \"110011001100\") # Output: 1\n    min_Swaps(\"101010101010\", \"111111111111\") # Output: 2\n    \"\"\"\n\n    def valid_binary(binary_number):\n        \"\"\"\n        Helper function to check if a binary number is valid or not.\n\n        Args:\n        binary_number (str): A binary number represented as a string.\n\n        Returns:\n        bool: True if the binary number is valid, False otherwise.\n\n        Raises:\n        ValueError: If the input string is not a valid binary number.\n        \"\"\"\n        if not isinstance(binary_number, str):\n            raise ValueError(\"Input should be a binary number represented as a string.\")\n        if len(binary_number) % 2!= 0:\n            raise ValueError(\"Length of the binary number should be even.\")\n        if any(char not in {'0', '1'} for char in binary_number):\n            raise ValueError(\"Binary number should only contain 0s and 1s.\")\n        return True\n\n    def binary_to_int(binary_number):\n        \"\"\"\n        Helper function to convert a binary number to its corresponding integer value.\n\n        Args:\n        binary_number (str): A binary number represented as a string.\n\n        Returns:\n        int: The corresponding integer value of the binary number.\n\n        Raises:\n        ValueError: If the input string is not a valid binary number.\n        \"\"\"\n        if not valid_binary(binary_number):\n            raise ValueError(\"Input should be a valid binary number.\")\n        return int(binary_number, 2)\n\n    def int_to_binary(number, length):\n        \"\"\"\n        Helper function to convert an integer to its binary representation with the given length.\n\n        Args:\n        number (int): An integer.\n        length (int): The desired length of the binary representation.\n\n        Returns:\n        str: The binary representation of the integer with the given length.\n\n        Raises:\n        ValueError: If the length is not a positive integer.\n        \"\"\"\n        if not isinstance(length, int) or length <= 0:\n            raise ValueError(\"Length should be a positive integer.\")\n        binary_representation = bin(number)[2:]\n        return '0' * (length - len(binary_representation)) + binary_representation\n\n    def swap_bits(bit1, bit2, binary_number):\n        \"\"\"\n        Helper function to swap two bits in a binary number.\n\n        Args:\n        bit1 (int): The index of the first bit to swap.\n        bit2 (int): The index of the second bit to swap.\n        binary_number (str): A binary number represented as a string.\n\n        Returns:\n        str: The modified binary number with the two bits swapped.\n\n        Raises:\n        ValueError: If either of the input indexes are not valid bits.\n        \"\"\"\n        if bit1 < 0 or bit1 >= len(binary_number) or bit1 == bit2:\n            raise ValueError(\"Invalid index for bit1.\")\n        if bit2 < 0 or bit2 >= len(binary_number) or bit2 == bit1:\n            raise ValueError(\"Invalid index for bit2.\")\n        temp = int(binary_number[bit1], 2)\n        binary_number = binary_number[:bit1] + binary_number[bit1+1:bit2+1] + binary_number[bit2+1:]\n        binary_number = binary_number[:bit1] + str(temp ^ int(binary_number[bit2], 2)) + binary_number[bit1+1:]\n        return binary_number\n\n    def find_min_swaps(str1, str2):\n        \"\"\"\n        Main function to find the minimum number of swaps required to convert one binary number to another.\n\n        Args:\n        str1 (str): A binary number represented as a string.\n        str2 (str): Another binary number represented as a string.\n\n        Returns:\n        int: The minimum number of swaps required to convert str1 to str2.\n\n        Raises:\n        ValueError: If either of the input strings"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings into integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Iterate through the bits of each number and swap them if they differ\n    swaps = 0\n    for i in range(32):\n        if num1 & (1 << i)!= num2 & (1 << i):\n            num1 ^= 1 << i\n            num2 ^= 1 << i\n            swaps += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    i, j = 0, 0\n    \n    while i < n1 and j < n2:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        elif str1[i] < str2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    return n1 - i + n2 - j"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to binary\n    binary1 = ''.join(map(str, bin(int(str1,2))[2:]))\n    binary2 = ''.join(map(str, bin(int(str2,2))[2:]))\n\n    # Check if strings are of equal length\n    if len(binary1)!= len(binary2):\n        raise ValueError(\"Input strings are not of equal length\")\n\n    # Initialize swap count and swap table\n    swap_count = 0\n    swap_table = {}\n\n    # Iterate through each position in the binary string\n    for i in range(len(binary1)):\n        # Check if the characters are equal\n        if binary1[i]!= binary2[i]:\n            # If not, check if there is a swap that can be made\n            if (i - swap_count) in swap_table:\n                swap_count += swap_table[(i - swap_count)]\n            else:\n                # If not, add the new swap to the swap table and increment the swap count\n                swap_table[(i - swap_count)] = 1\n                swap_count += 1\n\n    # Return the swap count\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the input strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize the minimum number of swaps to be infinity\n    min_swaps = float('inf')\n    \n    # Initialize the current binary number to be swapped\n    curr_binary = 0\n    \n    # Iterate over all possible binary numbers\n    for i in range(32):\n        # Check if the current binary number is already present in the binary number\n        if bin(num1 | curr_binary)[2:] == bin(num2 | curr_binary)[2:]:\n            # If it is, calculate the number of swaps needed to convert the binary numbers\n            swaps = 0\n            while num1 | curr_binary!= num2 | curr_binary:\n                # If the bit positions of the binary numbers are not equal, increment the swap count\n                swaps += 1\n                # Swap the bits of the binary numbers\n                curr_binary = (curr_binary << 1) | (num1 & 1)\n                num1 = (num1 >> 1) | ((num2 & 1) << 31)\n                num2 = (num2 >> 1) | ((curr_binary & 1) << 31)\n            \n            # Update the minimum number of swaps if the current binary number is smaller than the current minimum\n            if swaps < min_swaps:\n                min_swaps = swaps\n    \n    # Return the minimum number of swaps required to convert the binary numbers\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert them.\n\n    :param str1: A binary number represented as a string.\n    :param str2: Another binary number represented as a string.\n    :return: The minimum number of swaps required to convert the two binary numbers.\n    \"\"\"\n    # Convert both binary strings to lists of digits\n    list1 = [int(digit) for digit in str1]\n    list2 = [int(digit) for digit in str2]\n\n    # Initialize the two pointers for swapping\n    i = 0\n    j = 0\n\n    # Initialize the minimum number of swaps as infinity\n    min_swaps = float('inf')\n\n    # Iterate until both pointers reach the end of their respective lists\n    while i < len(list1) and j < len(list2):\n        # Compare the current digits of both lists\n        if list1[i]!= list2[j]:\n            # Swap the digits if they are not equal\n            temp = list1[i]\n            list1[i] = list2[j]\n            list2[j] = temp\n\n            # Update the minimum number of swaps\n            min_swaps = min(min_swaps, i + j)\n\n            # Increment the pointers for swapping\n            i += 1\n            j += 1\n        elif list1[i] == list2[j]:\n            # Increment both pointers for swapping\n            i += 1\n            j += 1\n\n    # Return the minimum number of swaps required to convert the binary numbers\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write(\"Enter the tuple elements: \")\n    elements = sys.stdin.readline().split()\n    size = 0\n    for element in elements:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.setrecursionlimit(1000000)\n    total_size = 0\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            total_size += sys.getsizeof(tuple_list[i][j])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the total size of the tuple\n    total_size = sys.getsizeof(tuple_list)\n    # Return the size in bytes\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    tuple_size_bytes = sys.getsizeof(tuple_list)\n    return tuple_size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write(\"Size of tuple in bytes: \")\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    sys.stdout.write(str(size) + \"\\n\")"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes\n    of the tuple, which is calculated as the sum of the size of each individual element in the tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        size_of_tup = sys.getsizeof(tup)\n        total_size += size_of_tup\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both arrays must have the same length.\")\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return arr1[i] if i == len(arr1) else arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three arguments: arr1, arr2, and k.\n\n    arr1 and arr2 are two sorted arrays of integers.\n\n    k is the integer value that represents the kth element to be found in arr1 and arr2.\n\n    The function returns the kth element from arr1 and arr2.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = k = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr1[i], arr1[k] = arr1[k], arr1[i]\n            k += 1\n            i += 1\n        else:\n            arr2[j], arr2[k] = arr2[k], arr2[j]\n            k += 1\n            j += 1\n    return arr1[:k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    m, n = len(arr1), len(arr2)\n    i, j = 0, 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            else:\n                m -= 1\n                n -= 1\n                k -= 2\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # If the length of both arrays is less than k, return None\n    if n1 < k or n2 < k:\n        return None\n\n    # Initialize two pointers to 0 and find the median of the two arrays\n    i = j = 0\n    if n1 > n2:\n        while i <= n1:\n            arr1[i], arr2[j] = arr2[j], arr1[i]\n            i += 1\n            j += 1\n    else:\n        while j <= n2:\n            arr1[i], arr2[j] = arr2[j], arr1[i]\n            i += 1\n            j += 1\n\n    # Calculate the median of the two arrays\n    median = (arr1[k-1] + arr2[k-1]) / 2\n\n    # Initialize two pointers to 0 and find k-th element of the array\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if arr1[i] < median:\n            i += 1\n        elif arr1[i] > median:\n            j += 1\n        else:\n            return arr1[i]\n\n    # If k-th element is not found, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == n2:\n                return arr2[j]\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == n2:\n                return arr2[j]\n            k -= 1\n            i += 1\n            j += 1\n    \n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments: the first sorted array, the second sorted array, and the value of k.\n    The function will return the kth smallest element in the sorted array.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    return arr2[j] if i == n1 else arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Initialize sum to zero\n    sum = 0\n    # Convert the number to a string\n    num_str = str(n)\n    # Loop through each digit in the string and add the cube of the digit to the sum\n    for digit in num_str:\n        digit_int = int(digit)\n        sum += digit_int ** 3\n    # Compare the sum to the original number\n    return sum == n\n\ndef main():\n    # Prompt the user to enter a number\n    num = int(input(\"Enter a number: \"))\n    # Check if the number is an Armstrong number\n    if is_armstrong(num):\n        print(f\"{num} is an Armstrong number.\")\n    else:\n        print(f\"{num} is not an Armstrong number.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(num):\n    num = int(num)\n    total = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    return num == total\n\nprint(is_armstrong(153)) # Output: True\nprint(is_armstrong(1634)) # Output: False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(num):\n    num_str = str(num)\n    sum_of_squares = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        power -= 1\n        sum_of_squares += int(digit) ** power\n\n    return num == sum_of_squares"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    Function to check if a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    sum_of_squares = 0\n    for i in num_str:\n        sum_of_squares += int(i)**3\n    return sum_of_squares == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is an armstrong number, and False otherwise.\n    An armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    digits = [int(digit) for digit in str(number)]\n    n = len(digits)\n    total = sum([digit ** n for digit in digits])\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # initializing sum variable to 0\n    sum = 0\n\n    # converting the number to a string\n    number_string = str(number)\n\n    # iterating through the string and adding each digit to the sum variable\n    for digit in number_string:\n        sum += int(digit) ** len(number_string)\n\n    # checking if the sum of the digits is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num = number\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    sum = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    length = len(str(num))\n    sum = 0\n    for i in range(length):\n        digit = num % 10\n        sum += digit ** length\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether a given number is armstrong or not.\n    \"\"\"\n    # Convert the given number to a string\n    n_str = str(n)\n    # Initialize the sum variable\n    sum = 0\n    # Iterate through each digit of the number\n    for digit in n_str:\n        # Multiply the current digit with the power of the number of digits\n        digit_int = int(digit)\n        sum += digit_int ** len(n_str)\n    # Return True if the sum is equal to the original number\n    return sum == n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Number should be a positive integer.\")\n    elif number == 1:\n        return \"Sum:\", 0, \"Average:\", 0\n    else:\n        sum = 0\n        for i in range(1, number + 1):\n            sum += i\n        average = sum / number\n        return \"Sum:\", sum, \"Average:\", average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total/count\n    print(\"Sum of first\", number, \"natural numbers is:\", total)\n    print(\"Average of first\", number, \"natural numbers is:\", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n    average = total / count\n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = 0\n    sum_square = 0\n    for i in range(1, n+1):\n        sum_num += i\n        sum_square += i*i\n    average = sum_num / n\n    return sum_num, sum_square, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        count += 1\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n\n    # iterate through the first n natural numbers\n    for i in range(1, number+1):\n        # add the current number to the sum and increment the count\n        sum += i\n        count += 1\n\n    # find the average and return the result as a tuple\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer input and returns True if it's even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n%2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if it's even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the characters and their occurrences\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character\n    first_repeated = None\n    for char in char_count:\n        if char_count[char] > 1:\n            if first_repeated is None:\n                first_repeated = char\n            else:\n                return first_repeated\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # find the first character in the dictionary that appears more than once\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no character appears more than once, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Convert the string to a dictionary to count the frequency of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character and return its index\n    for i, char in enumerate(str1):\n        if char_count[char] > 1:\n            return i"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    # create a dictionary to store the counts of each character in the string\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    # find the first repeated character in the dictionary\n    for char, count in char_counts.items():\n        if count > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    # iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # find the first character with a frequency greater than 1\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    # if no character has a frequency greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    current_number = 1\n    \n    while current_number <= n:\n        if all(current_number % i!= 0 for i in range(2, int(current_number**0.5)+1)):\n            ludic_numbers.append(current_number)\n        current_number += 1\n    \n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucids = []\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i*j == j**2:\n                lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    # Create a list to store all lucid numbers\n    lucid_list = []\n\n    # Iterate through all numbers between 1 and n\n    for i in range(1, n+1):\n\n        # Check if i is a lucid number\n        is_lucid = True\n\n        # Iterate through all numbers between 1 and sqrt(i)\n        for j in range(1, int(i**0.5)+1):\n\n            # If i is divisible by j, set is_lucid to False and break the loop\n            if i % j == 0:\n                is_lucid = False\n                break\n\n        # If i is a lucid number, add it to the list\n        if is_lucid:\n            lucid_list.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n + 1):\n        if sum(int(j) for j in str(i)) == i:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    def is_lucid(num):\n        '''\n        Check if a given number is a lucid number.\n        '''\n        if num < 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    lucid_nums = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_nums.append(i)\n        i += 1\n\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n    \n    # Loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # Check if the integer is a lucid number\n        is_lucid = True\n        # Loop through all integers from 1 to the square root of the current integer\n        for j in range(1, int(i**0.5)+1):\n            # If the integer is divisible by the current integer or its square root, then it is not a lucid number\n            if i % j == 0 or j % i == 0:\n                is_lucid = False\n                break\n        # If the integer is a lucid number, add it to the list of lucid numbers\n        if is_lucid:\n            lucid_numbers.append(i)\n    \n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [2, 3]\n    i = 5\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, i//2+1)):\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if sum([int(d) for d in str(i)]) == i:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    s = s.split()\n    s = s[::-1]\n    s = \" \".join(s)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # split the string into a list of words\n    reversed_words = [word[::-1] for word in words]  # reverse each word using slicing\n    return \" \".join(reversed_words)  # join the reversed words back together with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    words = words[::-1]  # reverse the order of the words\n    reversed_string = \" \".join(words)  # join the words back together with spaces\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words into a string\n    reversed_s =''.join(reversed_words)\n    # return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # Split the string into a list of words\n    reversed_words = []  # Create an empty list to store the reversed words\n    for i in range(len(words)-1, -1, -1):  # Loop through the words from the end to the beginning\n        reversed_words.append(words[i])  # Append the reversed word to the list\n    reversed_s =''.join(reversed_words)  # Join the reversed words with spaces\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words using the split() method\n    words = s.split()\n    \n    # Reverse each word in the list using the reverse() method\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n        \n    # Join the words back into a string using the join() method\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # Check if the given number is less than 2.\n    if num < 2:\n        return False\n\n    # Check if the given number is equal to 2 or 3.\n    if num == 2 or num == 3:\n        return True\n\n    # Check if the given number is divisible by any number other than 2 and 3.\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # If the given number is not divisible by any number other than 2 and 3, then it is a prime number.\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(prime_num(5))  # Output: True\nprint(prime_num(7))  # Output: False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i*i <= num:\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # Check if the number is 1 or less\n    if num <= 1:\n        return False\n\n    # Check if the number is divisible by 2\n    if num == 2:\n        return True\n\n    # Check if the number is divisible by any number between 3 and the square root of the number\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n\n    # If the loop completes without finding a divisor, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function checks if a given integer is a prime number or not.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    # compile regex pattern\n    regex_pattern = re.compile(pattern)\n    # search for pattern in text\n    match = regex_pattern.search(text)\n    # if match found, return string, start index, end index\n    if match:\n        return match.group(), match.start(), match.end()\n    # otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # Find all occurrences of pattern in text\n    matches = re.finditer(pattern, text)\n\n    # Create a list to store the results\n    results = []\n\n    # Iterate through all matches and store the results in the list\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        results.append((match.group(), start, end))\n\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        literal = text[start:end]\n        literals.append((literal, start, end))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Use re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literals = re.findall(pattern, text)\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regular expressions to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches are found, return None\n    if not matches:\n        return None\n\n    # Otherwise, return the first match as a tuple\n    return matches[0]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return (2*bell_Number(n-1)) - bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the bell number array with zeros\n    bell_array = [0] * (n + 1)\n    bell_array[0] = 1\n    bell_array[1] = 1\n    \n    # Fill the bell number array using the recurrence relation\n    for i in range(2, n + 1):\n        bell_array[i] = bell_array[i-1] + bell_array[i-2]\n    \n    # Return the nth bell number\n    return bell_array[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Error: Negative values are not allowed.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    bell_list = [0, 1]\n    for i in range(2, n+1):\n        bell_list.append(bell_list[i-1] + bell_list[i-2])\n    return bell_list[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 2 \n    else: \n        return bell_Number(n-1) + bell_Number(n-2) "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n and returns the nth Bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0: \n        return None\n    elif n == 0: \n        return 0\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Remove the k'th element from the list\n    k = L - 1\n    if k > len(list1):\n        return list1\n    elif k == len(list1):\n        return []\n    else:\n        list1.pop(k)\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create a new list without the k'th element\n    new_list = [num for num in list1 if num!= list1[L-1]]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and L as parameters. L is the value of the kth element to be removed.\n    The function returns a new list with the same elements except for the k'th element, which is removed.\n    '''\n    # create a new list to store the new list without the kth element\n    new_list = list(set(list1) - set([list1[L-1]]))\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1:\n        return list1\n    else:\n        return remove_kth_element(list1[1:], L-1) + [list1[0]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    count = 0\n    for i in range(len(list1)):\n        if count == L - 1:\n            new_list.append(list1[i])\n            count = 0\n        else:\n            count += 1\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [x for x in list1[:L-1] if x!= list1[L-1]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    new_list = []\n    for i in range(L):\n        new_list.append(list1[i])\n    new_list.pop(L-1)\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(lst, k):\n    '''\n    This function removes the kth element from the given list and returns the modified list.\n    '''\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max value to the first element of the first row\n    max_val = test_list[0][0]\n\n    # iterate over each row in the matrix\n    for row in test_list:\n        # check if the current row has a value greater than the max value\n        if row[N-1] > max_val:\n            # update max value\n            max_val = row[N-1]\n\n    # return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j == N-1:\n                print(max(test_list[i][j]))"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the maximum value of the Nth column.\n\n    Args:\n    matrix: A list of lists representing the matrix.\n    N: An integer representing the column index of the desired maximum value.\n\n    Returns:\n    The maximum value of the Nth column.\n    \"\"\"\n\n    # Check if the matrix is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"The input matrix must be a list of lists.\")\n\n    # Check if the Nth column index is valid\n    if N < 0 or N >= len(matrix[0]):\n        raise ValueError(\"The Nth column index must be between 0 and the number of columns (exclusive).\")\n\n    # Find the maximum value of the Nth column\n    max_value = float('-inf')\n    for row in matrix:\n        if row[N] > max_value:\n            max_value = row[N]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initializing the maximum value\n    max_val = float('-inf')\n    # Loop through the list of lists to find the maximum value of then'th column\n    for i in range(len(test_list)):\n        if i % N == 0:\n            # If the current index is a multiple of N, we update the max_val\n            if max_val < test_list[i][N-1]:\n                max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column = []\n    for row in test_list:\n        column.append(row[N-1])\n    return max(column)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if i % N == 0:\n            max_value = max(max_value, max(test_list[i]))\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first row\n    num_rows = len(test_list)\n\n    # Check if the length of the matrix is at least 2 rows\n    if num_rows < 2:\n        print(\"The length of the matrix must be at least 2 rows.\")\n        return\n\n    # Check if the value of N is valid\n    if N > num_rows or N < 1:\n        print(\"The value of N must be between 1 and the number of rows of the matrix.\")\n        return\n\n    # Initialize a variable to store the maximum value\n    max_value = test_list[0][N-1]\n\n    # Loop through the remaining rows of the matrix\n    for i in range(1, num_rows):\n        # Check if the current value is greater than the maximum value\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n\n    # Return the maximum value of then'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    col_max = [0] * n\n    for i in range(n):\n        max_val = test_list[0][i]\n        for j in range(1, len(test_list)):\n            if test_list[j][i] > max_val:\n                max_val = test_list[j][i]\n        col_max[i] = max_val\n    return col_max"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max_value to the first element in the first row of the matrix\n    max_value = test_list[0][0]\n    # loop through each element in the matrix\n    for i in range(1, len(test_list)):\n        # if the current element is greater than max_value, update max_value\n        if test_list[i][0] > max_value:\n            max_value = test_list[i][0]\n    # return the maximum value in then'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Define a function to find the nth column of a matrix\n    def nth_column(matrix, n):\n        return [row[n-1] for row in matrix]\n    \n    # Define a function to calculate the maximum value of then'th column of a matrix\n    def find_max(matrix):\n        n = N\n        max_value = max(nth_column(matrix, n))\n        return max_value\n    \n    # Find the maximum value of then'th column of the given matrix\n    max_value = find_max(test_list)\n    \n    # Return the maximum value of then'th column\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        first_elem = sublist[0]\n        second_elem = sublist[1]\n        new_sublist = [first_elem, second_elem]\n        merged_list.append(new_sublist)\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []  \n    for i in lst:  \n        result.append([i[0], i[1]])  \n    return result  "
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    '''\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum of each tuple\n    cum_sum_list = []\n    \n    # Iterate through each tuple in the test_list\n    for tup in test_list:\n        # Initialize a variable to keep track of the current cumulative sum\n        curr_sum = 0\n        \n        # Iterate through each value in the current tuple\n        for val in tup:\n            # Add the current value to the cumulative sum\n            curr_sum += val\n            \n            # Append the cumulative sum to the cum_sum_list\n            cum_sum_list.append(curr_sum)\n    \n    # Return the cum_sum_list\n    return cum_sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cumulative_sum += val\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to zero\n    cum_sum = 0\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Add each tuple's value to the cumulative sum\n        cum_sum += tup[1]\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    \"\"\"\n\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if type(test_list[i]) == tuple:\n            cum_sum += sum(test_list[i])\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Loop through each tuple in the input list\n    for tup in nums:\n        # Calculate the sum of all the values in the current tuple\n        total = sum(tup)\n        \n        # Calculate the average value of the current tuple\n        avg = total / len(tup)\n        \n        # Append the average value to the averages list\n        averages.append(avg)\n        \n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        avg = sum(nums[i]) / len(nums[i])\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        average_list.append(avg)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        averages.append(sum(nums[i])/len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the averages\n    avg_list = []\n\n    # Loop through each tuple in the list\n    for tup in nums:\n        # Calculate the sum of all the values in the tuple\n        total = sum(tup)\n        # Calculate the average of the tuple\n        avg = total / len(tup)\n        # Add the average to the avg_list\n        avg_list.append(avg)\n\n    # Return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum_ = sum(num)\n        count = len(num)\n        avg = sum_ / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    result = []\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n        result.append(total/count)\n        total = 0\n        count = 0\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = [0, 0]\n    count = 0\n    for sub_list in nums:\n        for num in sub_list:\n            total[0] += num\n            total[1] += 1\n            count += 1\n    return [total[0]/total[1], total[1]]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        avg = total / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs element wise modulo.\n    \"\"\"\n    # create a new tuple with the element wise modulo operation\n    result_tup = tuple([num1 % num2 for num1, num2 in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n\n    Args:\n    test_tup1 (tuple): First tuple to be tested.\n    test_tup2 (tuple): Second tuple to be tested.\n\n    Returns:\n    tuple: Tuple of element wise modulo of two input tuples.\n    '''\n\n    # Perform element-wise modulo using the modulo operator\n    mod_tup = [(a % b) for a, b in zip(test_tup1, test_tup2)]\n\n    return mod_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    current_x = 0\n    current_y = 0\n    jumps = 0\n    reached_destination = False\n\n    # Iterate over all steps\n    for i in range(steps):\n        # Check if we have reached the destination\n        if current_x == d and current_y == 0:\n            reached_destination = True\n            break\n        # If not, move in the appropriate direction\n        if current_x < d:\n            current_x += 1\n        elif current_x > d:\n            current_x -= 1\n        elif current_y < d:\n            current_y += 1\n        else:\n            current_y -= 1\n        jumps += 1\n\n    # If we have reached the destination, return the number of jumps taken\n    if reached_destination:\n        return jumps\n    # If not, return -1 because we did not reach the destination\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    i = 0\n    count = 0\n    x = 0\n    \n    # Iterate through each step in the given list\n    while i < len(steps):\n        if steps[i] == 1:\n            x += d\n            i += 1\n            count += 1\n        elif steps[i] == -1:\n            x -= d\n            i += 1\n            count += 1\n        else:\n            i += 1\n            \n    # Check if the point (d, 0) is reached from origin\n    if x == d:\n        return count\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    n = len(steps) \n    count = 0\n\n    # Initialize two pointers, one for each row of steps\n    ptr1 = 0\n    ptr2 = 0\n\n    # Keep track of the distance travelled in each row\n    dist = [0] * n\n\n    # Fill the distance array with the distance from the origin to each point\n    for i in range(n):\n        dist[i] = steps[i][0] * (n - i - 1) + steps[i][1] * i\n\n    # Find the minimum distance from the first point to the point of interest\n    min_dist = min(dist)\n\n    # If the minimum distance is less than the distance to the origin, there are no jumps\n    if min_dist < d:\n        return 0\n\n    # Initialize the pointers\n    ptr1 = 0\n    ptr2 = 0\n\n    # Initialize a boolean variable to keep track of whether we have reached the point of interest\n    visited = False\n\n    # Keep track of the jumps made so far\n    jumps = 0\n\n    # Iterate until we have reached the point of interest or we have made enough jumps\n    while not visited and jumps < min_dist:\n        # Update the pointers\n        ptr1 += 1\n        ptr2 += 1\n\n        # Check if we have reached the point of interest\n        if ptr2 == n:\n            visited = True\n            break\n\n        # Update the jumps made so far\n        jumps += dist[ptr2]\n\n    # Return the number of jumps made\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    jumps = 0\n    steps_taken = 0\n    \n    # Loop until steps taken is equal to steps\n    while steps_taken < steps:\n        \n        # Check if the point of (d, 0) has been reached\n        if d == 0:\n            return jumps\n        \n        # Move to the left or down\n        if steps_taken == steps - 1:\n            d -= 1\n        else:\n            d += 1\n        \n        # Increment the steps taken\n        steps_taken += 1\n        \n        # Increment the jumps\n        jumps += 1\n    \n    # If no point of (d, 0) is reached, return jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d:\n        return -1 # Negative value indicates an invalid input\n    jumps = 0\n    i = 0\n    j = 0\n    while j < d:\n        if steps - j < d:\n            j = steps\n        else:\n            j += d\n        i += 1\n        jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    end_point = (steps, 0)\n    while end_point!= (0, 0):\n        count += 1\n        end_point = (max(end_point[0]-1, 0), end_point[1]+1)\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    # If distance is greater than steps, then there is no solution\n    if d > steps:\n        return 0\n    \n    # If the distance is less than or equal to steps, then we can reach the destination\n    if d == steps:\n        return 1\n    \n    # Initialize variables\n    jumps = 0\n    step = 1\n    \n    # Loop through each step until the distance is less than or equal to the steps\n    while d <= steps:\n        # If the distance is greater than the steps, then we need to add a step to the jump count\n        if d > steps:\n            jumps += 1\n            d = d - step\n        \n        # Otherwise, we need to move closer to the destination\n        else:\n            d = d - step\n        \n        # Increment the step size\n        step += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_jumps = steps // d # Calculating the maximum number of jumps required\n    jumps = 0 # Initializing the number of jumps required\n    index = 0 # Initializing the index of the list\n    while index < len(steps):\n        if steps[index] == d: # Checking if the current point is (d, 0)\n            jumps += 1\n            index += 1 # Moving to the next point in the list\n        elif steps[index] < d: # Checking if the current point is less than (d, 0)\n            jumps += 1\n            index += 1 # Moving to the next point in the list\n        else: # If the current point is greater than or equal to (d, 0)\n            index += 1 # Moving to the next point in the list\n    return jumps if jumps < max_jumps else max_jumps # Returning the minimum number of jumps required"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    step = 1\n    while step <= steps:\n        jumps += 1\n        step += d\n    return jumps - 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    i = 0\n    count = 0\n    \n    while i < len(steps):\n        if steps[i] == d:\n            count += 1\n            i += d\n        else:\n            i += 1\n            \n    return count"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as inputs, and divides each element in the first list by the corresponding element in the second list.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #check if the length of lists are equal\n    if len(nums1)!= len(nums2):\n        return \"Lists are not equal\"\n    #create a new list to store the result\n    result = []\n    #loop through the lists\n    for i in range(len(nums1)):\n        #divide the elements of the lists\n        result.append(nums1[i]/nums2[i])\n    #return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # loop through the lists and divide the elements\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n        \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists have different lengths.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero.\")\n            return None\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have same length.\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their element-wise division.\n    '''\n    # Check if the length of the two lists is equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: Both lists must have the same length.\")\n        return\n    \n    # Divide the lists element-wise and store the result in a new list\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: Division by zero is not allowed.\")\n            return\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print('Lists are not equal length')\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append('Error')\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    for num in num_list:\n        result += num\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty list to store numbers\n    nums = []\n    # iterate over each word in the list\n    for word in words:\n        # if the word is a number, append it to the nums list\n        if word.isnumeric():\n            nums.append(word)\n        # otherwise, add the word to the end of the list\n        else:\n            words.append(word)\n    # join the list of words back into a string\n    result = \" \".join(words)\n    # return the modified string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    num_list = []\n    other_list = []\n\n    # Split the string into two lists: num_list and other_list\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            other_list.append(char)\n\n    # Join the two lists into a new string: final_str\n    final_str = ''.join(num_list + other_list)\n\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = [num for num in test_str if num.isdigit()]\n    result = []\n    for char in test_str:\n        if char not in numbers:\n            result.append(char)\n    return ''.join(result) + ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create an empty list to store the numbers\n    nums = []\n\n    # Iterate through the characters in the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Append the number to the list\n            nums.append(char)\n\n    # Reverse the list of numbers\n    nums = nums[::-1]\n\n    # Join the numbers together and return the result\n    return ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_found = False\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_found = True\n            break\n    if num_found:\n        # move all numbers to the end of the string\n        start_index = len(test_str)-1\n        end_index = -1\n        while end_index!= start_index:\n            end_index = test_str[start_index:].find(test_str[start_index])\n            if end_index == -1:\n                break\n            test_str = test_str[:start_index] + test_str[start_index+end_index+1:]\n            start_index += end_index\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # remove non-numeric characters from string\n    test_str = ''.join(filter(str.isdigit, test_str))\n    # create list of numbers in string\n    nums = list(map(int, test_str))\n    # reverse list of numbers\n    nums.reverse()\n    # join list of numbers with string\n    result = ''.join(map(str, nums))\n    # return result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Find all the numbers in the string\n    numbers = re.findall(r'\\d+', test_str)\n\n    # Reverse the list to get the numbers in reverse order\n    numbers.reverse()\n\n    # Join the numbers back together into a string\n    result = ''.join(numbers)\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize a variable to store the position of the last character of the string\n    last_pos = len(test_str) - 1\n    \n    # Loop through the characters of the string from the first to the second last\n    for i in range(last_pos - 1, -1, -1):\n        # If the character is a number, move it to the end of the string\n        if test_str[i].isdigit():\n            # Find the position of the number in the string\n            num_pos = i\n            \n            # Move the number to the end of the string by swapping with the last character of the string\n            test_str = test_str[:num_pos] + test_str[num_pos+1:]\n            \n            # Update the position of the last character of the string\n            last_pos = len(test_str) - 1\n            \n            # Exit the loop once the number is moved to the end of the string\n            break\n    \n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    count = 0\n    max_size = 0\n    start = 0\n    \n    for i in range(1, n):\n        if a[i] % a[start] == 0:\n            count += 1\n            if count > max_size:\n                max_size = count\n                start = i\n        else:\n            count = 0\n    \n    if count > max_size:\n        max_size = count\n        start = 0\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize two pointers, left and right, to the first and last indices of the list\n    left = 0\n    right = len(a) - 1\n    # Initialize the size of the largest subset to 1\n    size = 1\n    # Initialize the largest subset to be the first element of the list\n    largest_set = [a[0]]\n    # Iterate until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Check if the current element is divisible by the last element of the largest subset\n        if a[left] % largest_set[-1] == 0:\n            # If it is, append it to the largest subset and move both pointers to the right\n            largest_set.append(a[left])\n            left += 1\n            right -= 1\n        else:\n            # If it isn't, move the right pointer to the right\n            right -= 1\n        # If the size of the largest subset is greater than the current size, update it\n        if len(largest_set) > size:\n            size = len(largest_set)\n    # Return the size of the largest subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # initialize a set to store the remaining numbers in the list\n    remaining = set(a)\n\n    # initialize a dictionary to store the number of remaining numbers for each subset size\n    subset_sizes = {}\n\n    # loop through all possible subset sizes\n    for size in range(1, len(a)+1):\n\n        # initialize an empty list to store the subset\n        subset = []\n\n        # loop through all possible starting indices for the subset\n        for start in range(len(a)-size+1):\n\n            # check if the remaining numbers in the subset add up to a multiple of size\n            if sum(a[start:start+size]) % size == 0:\n\n                # add the subset to the dictionary if it is not already there\n                if subset not in subset_sizes or subset_sizes[subset] < size:\n                    subset_sizes[subset] = size\n\n                # add the current subset to the list of subsets with the largest size\n                if subset_sizes[subset] == size:\n                    if subset not in largest_subsets:\n                        largest_subsets[subset] = size\n\n    # return the largest subset with the maximum size\n    return max(largest_subsets, key=largest_subsets.get)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    # create a list to store the sum of pairs\n    sums = []\n\n    # iterate through the list\n    for i in range(len(a)):\n        # iterate through the remaining numbers in the list\n        for j in range(i+1, len(a)):\n            # check if the sum of the current pair is divisible by 2\n            if a[i] + a[j] % 2 == 0:\n                # add the sum to the list of sums\n                sums.append(a[i] + a[j])\n\n    # sort the list in ascending order\n    sums.sort()\n\n    # return the length of the largest subset\n    return len(sums)\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    n = len(a)\n    arr = [0] * (n + 1)\n\n    # Calculate prefix sum of the array\n    for i in range(1, n + 1):\n        arr[i] = arr[i - 1] + a[i - 1]\n\n    # Initialize variables to store the size of largest subsets\n    max_size = 0\n    subset_size = 0\n\n    # Traverse through the array and find the maximum size subset\n    for i in range(n, -1, -1):\n        if arr[i] % arr[i + 1] == 0:\n            subset_size += 1\n            if subset_size > max_size:\n                max_size = subset_size\n        else:\n            subset_size = 0\n\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Initialize variables\n    n = len(a)\n    count = 0\n    subset = []\n    max_size = 0\n\n    # Sort the input list\n    a.sort()\n\n    # Iterate through the sorted list\n    for i in range(n-1):\n        # Calculate the maximum size of a subset that includes the current number\n        j = i + 1\n        while j < n and a[j] % a[i]!= 0:\n            j += 1\n        max_size = max(max_size, j - i)\n\n        # Check if the maximum size is greater than the current subset size\n        if max_size > count:\n            count = max_size\n            subset = a[i:j]\n\n    return count, subset\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    # create a dictionary to store the sizes of the largest subsets of a[i]\n    sizes = {}\n    # initialize the size of the largest subset to 0\n    max_size = 0\n    # iterate over the elements of the list\n    for i in range(len(a)):\n        # compute the size of the largest subset of a[i]\n        subset_size = i\n        # check each element a[j] of the list to see if it divides a[i]\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                # if a[j] divides a[i], we can add 1 to the size of the subset\n                subset_size += 1\n            else:\n                # if a[j] does not divide a[i], we cannot add 1 to the size of the subset\n                break\n        # update the size of the largest subset if we have found a larger one\n        sizes[i] = subset_size\n        if subset_size > max_size:\n            max_size = subset_size\n    # return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n\n    # Initialize variables\n    max_subset = 1\n    current_subset = 1\n    left = 0\n    right = 0\n\n    # Iterate through the list\n    while right < n:\n        # If the number at the right end of the list is divisible by the number at the left end of the list,\n        # update the current subset and move the right pointer\n        if a[right] % a[left] == 0:\n            current_subset += 1\n            right += 1\n        else:\n            # If the number at the right end of the list is not divisible by the number at the left end of the list,\n            # decrement the current subset and move the left pointer to the right of the left pointer\n            current_subset -= 1\n            left += 1\n\n        # Update the maximum subset found so far\n        if current_subset > max_subset:\n            max_subset = current_subset\n\n    return max_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n\n    # Use a set to store the numbers that have already been seen\n    seen = set()\n\n    # Initialize the largest subset size to 0\n    max_size = 0\n\n    # Loop over the numbers in the list\n    for num in a:\n        # Check if the number is divisible by every number in the set\n        for factor in seen:\n            if num % factor == 0:\n                # If it is, check if it's larger than the current largest subset size\n                if num - factor > max_size:\n                    max_size = num - factor\n        # Add the number to the set of seen numbers\n        seen.add(num)\n\n    # Return the largest subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    n = len(a)\n    largest = 0\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        largest = max(largest, dp[i])\n\n    return largest"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n    \"\"\"\n    # Find the median of the two lists\n    mid = n // 2\n    if n % 2 == 0:\n        median1 = (arr1[mid - 1] + arr1[mid]) / 2\n        median2 = (arr2[mid - 1] + arr2[mid]) / 2\n    else:\n        median1 = arr1[mid]\n        median2 = arr2[mid]\n\n    # Find the median of the combined list\n    combined_list = arr1[:mid] + arr2[mid:]\n    if len(combined_list) % 2 == 0:\n        median_combined = (combined_list[len(combined_list) // 2 - 1] + combined_list[len(combined_list) // 2]) / 2\n    else:\n        median_combined = combined_list[len(combined_list) // 2]\n\n    # Return the median\n    return median_combined"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays and sort them\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2-1] + merged_arr[n//2])/2.0\n    else:\n        median = merged_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    Args:\n        arr1 (list): A list of numbers.\n        arr2 (list): A list of numbers.\n        n (int): The size of the two lists.\n\n    Returns:\n        float: The median of the two sorted lists.\n    \"\"\"\n    # Concatenate the two sorted lists\n    combined_list = arr1 + arr2\n    combined_list.sort()\n\n    # Find the median of the combined list\n    if n % 2 == 0:\n        median = (combined_list[n // 2 - 1] + combined_list[n // 2]) / 2\n    else:\n        median = combined_list[n // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays into a single sorted array\n    merged_arr = sorted(arr1 + arr2)\n    \n    # Find the midpoint of the merged array\n    midpoint = len(merged_arr) // 2\n    \n    # If the length of the merged array is odd, return the middle element\n    if len(merged_arr) % 2 == 1:\n        return merged_arr[midpoint]\n    \n    # If the length of the merged array is even, return the average of the two middle elements\n    else:\n        return (merged_arr[midpoint - 1] + merged_arr[midpoint]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists and sort it\n    combined_list = arr1 + arr2\n    combined_list.sort()\n\n    # Find the length of the combined list\n    length = len(combined_list)\n\n    # Find the middle index\n    middle = length // 2\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # Return the average of the middle two elements\n        return (combined_list[middle - 1] + combined_list[middle]) / 2\n    else:\n        # Return the middle element\n        return combined_list[middle]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into one sorted list\n    merged_list = arr1 + arr2\n    \n    # Find the middle index of the merged list\n    mid = n // 2\n    \n    # If the length of the merged list is odd, the median is the middle element\n    if n % 2!= 0:\n        return merged_list[mid]\n    \n    # If the length of the merged list is even, the median is the average of the two middle elements\n    else:\n        return (merged_list[mid] + merged_list[mid-1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one sorted list\n    merged_list = arr1 + arr2\n    \n    # Find the middle index of the merged list\n    mid = n // 2\n    \n    # If the middle index is odd, take the middle element\n    if n % 2 == 1:\n        median = merged_list[mid]\n    # If the middle index is even, take the average of the middle two elements\n    else:\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two arrays into one\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n\n    # Find the median index\n    mid = n // 2\n\n    # If the length of the array is odd\n    if n % 2 == 1:\n        median = sorted_arr[mid]\n    # If the length of the array is even\n    else:\n        median = (sorted_arr[mid - 1] + sorted_arr[mid]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Combine the two arrays into a single array\n    combined_arr = arr1 + arr2\n    # Sort the combined array\n    combined_arr.sort()\n    # Find the median\n    if n % 2 == 0:\n        median = (combined_arr[n//2 - 1] + combined_arr[n//2]) / 2\n    else:\n        median = combined_arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # If either list has only one element, return that element as the median.\n    if len(arr1) == 1:\n        return arr1[0]\n    elif len(arr2) == 1:\n        return arr2[0]\n\n    # Merge the two sorted lists.\n    arr = arr1 + arr2\n\n    # Sort the merged list.\n    arr.sort()\n\n    # Calculate the median.\n    if n % 2 == 0:\n        return (arr[n//2-1] + arr[n//2])/2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n\n    # create an empty list to store the results\n    results = []\n\n    # iterate through the numbers in the list\n    for num in nums:\n        # compute the nth power of the number and add it to the results list\n        results.append(num**n)\n\n    # return the results list\n    return results"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_list = []\n    for num in nums:\n        power = num ** n\n        power_list.append(power)\n    return power_list"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    power_list = []\n    for num in nums:\n        power = 1\n        for i in range(n):\n            power *= num\n        power_list.append(power)\n    return power_list"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n\n    # convert the string to uppercase using the capitalize method\n    upper_string = string.capitalize()\n\n    # return the uppercase string\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # If the list has only one element, return the list unchanged\n    if length == 1:\n        return newList\n    \n    # Otherwise, swap the first and last element\n    firstElement = newList[0]\n    lastElement = newList[length-1]\n    newList[0] = lastElement\n    newList[length-1] = firstElement\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    # swapping the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # interchange first and last element\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    \n    # print the modified list\n    print(\"Modified List:\", newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    # Create a copy of the original list\n    newListCopy = newList[:]\n    # Find the index of the first and last elements in the list\n    firstIndex = 0\n    lastIndex = len(newList) - 1\n    # Interchange the first and last elements\n    newListCopy[firstIndex], newListCopy[lastIndex] = newListCopy[lastIndex], newListCopy[firstIndex]\n    # Return the modified list\n    return newListCopy"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return \"List must have at least 2 elements\"\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # swap first and last element using slicing\n    newList[:] = newList[::-1]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    firstElement = newList[0]\n    lastElement = newList[-1]\n    newList[0] = lastElement\n    newList[-1] = firstElement\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the length of the semi-circle\n    h = r * math.sqrt(3)\n    # calculate the area of the largest triangle\n    area = (math.sqrt(3) / 4) * h * (r ** 2 - h ** 2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    # finding semi-circle radius\n    semi_circle_radius = r / 2\n    \n    # finding perimeter of a triangle with given semi-circle radius\n    a = semi_circle_radius\n    b = semi_circle_radius\n    c = 0\n    \n    # finding the area of the triangle using Heron's formula\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-perimeter of the semicircle\n    s = 2*math.pi*r\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 0.5*(s**2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Step 1: Calculate the area of a triangle using Heron's formula.\n    def heron_area(a, b, c):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n    \n    # Step 2: Find the semi-perimeter of the triangle using the formula: perimeter = a + b + c/2\n    a = r\n    b = r\n    c = 2 * r\n    \n    # Step 3: Calculate the area of the triangle using the formula: area = sqrt(s(s-a)(s-b)(s-c))\n    area = heron_area(a, b, c)\n    \n    # Step 4: Calculate the semi-perimeter of the inscribed triangle\n    perimeter = a + b + c\n    \n    # Step 5: Calculate the area of the largest inscribed triangle\n    max_area = 0\n    for i in range(1, 361):\n        semi_perimeter = i / 180 * perimeter\n        area = math.sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c))\n        if area > max_area:\n            max_area = area\n    \n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 2 * r\n    a = math.sqrt(s * (s - r) * (s - r - r))\n    b = math.sqrt(s * (s + r) * (s + r + r))\n    area = a + b\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle with sides of length r\n    area = 0.5 * r * r\n    \n    # Calculate the area of a right triangle with base r and height h\n    h = r**2\n    area_h = 0.5 * r * h\n    \n    # Calculate the area of the largest triangle inscribed in the semicircle\n    area_largest = max(area_h, area)\n    \n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Use Heron's formula to find the area of the largest triangle that can be inscribed in a semicircle\n    a = (3 * r ** 2) ** 0.5\n    b = (2 * r ** 2) ** 0.5\n    area = math.sqrt(a ** 2 + b ** 2)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = 0.5 * r * r\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3 * r ** 2) / (4 * (r ** 2) + 1)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): Radius of the semicircle\n\n    Returns:\n    area (float): Area of the largest triangle that can be inscribed in the semicircle.\n    '''\n\n    # Calculating the semi-circle radius\n    semi_circle_radius = r / math.tan(math.pi / 3)\n\n    # Calculating the semi-circle area\n    semi_circle_area = math.pi * semi_circle_radius**2\n\n    # Calculating the angle of the triangle\n    angle = math.acos((semi_circle_radius**2 + r**2 - semi_circle_area) / (2 * semi_circle_radius * r))\n\n    # Calculating the area of the triangle\n    area = (1/2) * r * r * math.sin(angle)\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the input array is sorted\n    if len(array)!= len(set(array)):\n        return \"Input array is not sorted\"\n    # If the input array is empty or contains only unique elements, return the first element\n    if len(array) == 0 or len(set(array)) == len(array):\n        return array[0]\n    # Find the missing number by iterating through the array and comparing with the sorted array\n    for i in range(start,end):\n        if i not in array:\n            return i\n    return \"The missing number is not found\""
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): The starting index of the search range. Defaults to 0.\n        end (int): The ending index of the search range. Defaults to the length of the list.\n\n    Returns:\n        int: The smallest missing number.\n\n    Examples:\n        find_First_Missing([1, 3, 4, 6, 7]) # Output: 2\n        find_First_Missing([1, 2, 4, 6, 8], start=1, end=4) # Output: 3\n        find_First_Missing([5, 6, 7, 8, 9]) # Output: 1\n    \"\"\"\n\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    max_num = max(array)\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < len(array) and array[mid] == mid + 1:\n            start = mid + 1\n        elif mid > 0 and array[mid] == mid - 1:\n            end = mid - 1\n        else:\n            return mid + 1\n    return start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    for i in range(start,end+1):\n        if i!=array[i]:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i] == i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an unsorted list of natural numbers as input and returns the first missing number in the list.\n\n    Args:\n    array (list): List of unsorted natural numbers.\n    start (int): Index of the first element of the array to be considered.\n    end (int): Index of the last element of the array to be considered.\n\n    Returns:\n    int: The first missing number in the sorted array.\n\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers as input and returns the smallest missing number in the array.\n\n    Args:\n    array (list): a list of natural numbers\n\n    Returns:\n    int: the smallest missing number in the array\n\n    \"\"\"\n    # If the input array is empty, return -1\n    if not array:\n        return -1\n\n    # If the input array has only one element, return 1\n    if len(array) == 1:\n        return 1\n\n    # If the input array has only two elements, return 2\n    if len(array) == 2:\n        return 2\n\n    # If the input array has only three elements, return 3\n    if len(array) == 3:\n        return 3\n\n    # If the start and end indices are not provided, calculate them using the length of the array\n    if end is None:\n        end = len(array) - 1\n\n    # If the start index is greater than the end index, return -1\n    if start > end:\n        return -1\n\n    # Initialize the first missing number to 1\n    first_missing = 1\n\n    # Loop through the array from the start index to the end index\n    for i in range(start, end + 1):\n        # Check if the current element is present in the array\n        if i + 1 in array:\n            # If it is present, remove it from the array\n            array.remove(i + 1)\n        else:\n            # If it is not present, increment the first missing number and add it to the array\n            first_missing += 1\n            array.append(first_missing)\n\n    # Return the first missing number\n    return first_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i] == i:\n            continue\n        else:\n            return i\n    return len(array)"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    evens = []\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    even_list = []  # empty list to hold even numbers\n    \n    for num in list:  # iterate through each number in the list\n        if num % 2 == 0:  # check if the number is even\n            even_list.append(num)  # if it is, append it to the new list\n    \n    return even_list  # return the new list of even numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    # adjacent tiles\n    if x > 0:\n        adj.append((x-1,y))\n    if x < 19:\n        adj.append((x+1,y))\n    if y > 0:\n        adj.append((x,y-1))\n    if y < 19:\n        adj.append((x,y+1))\n    # recursive call for adjacent tiles\n    for a in adj:\n        if a not in sub:\n            sub.append(a)\n            adjac(a, sub)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    # loop through all possible adjacent coordinates\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            # check if the coordinate is within the boundary of the grid\n            if 0 <= x + dx < n and 0 <= y + dy < n:\n                # if it is, add it to the list of adjacent coordinates\n                sub.append((x + dx, y + dy))\n                \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 5:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 5:\n        adj.append((x, y+1))\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    if y-1 >= 0:\n        adjacent.append((x, y-1))\n    if y+1 < len(grid):\n        adjacent.append((x, y+1))\n    if x-1 >= 0:\n        adjacent.append((x-1, y))\n    if x+1 < len(grid[0]):\n        adjacent.append((x+1, y))\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                new_row = row + i\n                new_col = col + j\n                if 0 <= new_row < len(sub) and 0 <= new_col < len(sub[new_row]):\n                    if sub[new_row][new_col] == ele:\n                        continue\n                    adj.append((new_row, new_col))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=None):\n    if sub is None:\n        sub = []\n    if type(ele) == tuple:\n        for i in range(len(ele)):\n            if i == 0 or i == len(ele)-1:\n                continue\n            sub.append((ele[i], ele[i+1]))\n    elif type(ele) == list:\n        for i in range(len(ele)):\n            adjac(ele[i], sub)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    dx = [1, -1, 0, 0]\n    dy = [0, 0, 1, -1]\n    n = len(dx)\n    for i in range(n):\n        for j in range(n):\n            if (x + dx[i], y + dy[j]) not in sub:\n                sub.append((x + dx[i], y + dy[j]))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    # iterate over all possible directions and get the coordinates of the adjacent cells\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]\n    for dx, dy in directions:\n        nx, ny = x + dx, y + dy\n        if nx < 0 or ny < 0 or nx >= len(sub) or ny >= len(sub[0]):\n            continue\n        sub[ny][nx] = ele\n        sub[y][x] = (nx, ny)\n        \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n        ele: (int, int)\n            The given coordinate tuple.\n        sub: list, optional\n            A list of sub-coordinates to be checked for adjacent coordinates.\n            By default, an empty list is used.\n\n    Returns:\n        list:\n            A list of adjacent coordinate tuples.\n    \"\"\"\n\n    # Define the adjacent directions and initialize the list to store the adjacent coordinates\n    directions = [(0, -1), (1, 0), (0, 1), (-1, 0)]\n    adjacent = []\n\n    # Check each adjacent direction for the given coordinate tuple\n    for direction in directions:\n        # Calculate the adjacent coordinates using the direction\n        x, y = ele[0] + direction[0], ele[1] + direction[1]\n        # Check if the adjacent coordinates are within the bounds of the grid\n        if 0 <= x < rows and 0 <= y < cols:\n            # Check if the adjacent coordinates are not already in the list\n            if (x, y) not in sub and (x, y) not in adjacent:\n                adjacent.append((x, y))\n\n    # Return the adjacent coordinate list\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n\n    # check north, east, south, west neighbors\n    adj.append((x, y-1))\n    adj.append((x+1, y))\n    adj.append((x, y+1))\n    adj.append((x-1, y))\n\n    # add subordinates\n    if sub:\n        for subordinate in sub:\n            adj.extend(adjac(subordinate, sub))\n\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with underscores and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = [' ', '\\t', '\\n', '\\r']\n    underscore = '_'\n\n    for space in spaces:\n        text = text.replace(space, underscore)\n\n    for underscore in spaces:\n        text = text.replace(underscore, space)\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase to make the replacement case insensitive\n    text = text.lower()\n    # Initialize an empty string to store the replaced text\n    replaced_text = ''\n    # Iterate through each character in the string\n    for char in text:\n        # If the character is a space, replace it with an underscore\n        if char =='':\n            replaced_text += '_'\n        # If the character is an underscore, replace it with a space\n        elif char == '_':\n            replaced_text +=''\n        # If the character is not a space or an underscore, add it to the replaced text as is\n        else:\n            replaced_text += char\n    # Return the replaced text\n    return replaced_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # function to replace spaces with underscores\n    def replace_spaces_underscore(text):\n        return text.replace(' ', '_')\n    \n    # function to replace underscores with spaces\n    def replace_underscore_spaces(text):\n        return text.replace('_','')\n    \n    # call the functions to replace spaces with underscores and vice versa\n    replaced_underscore = replace_spaces_underscore(text)\n    replaced_space = replace_underscore_spaces(replaced_underscore)\n    \n    # print the replaced strings\n    print(\"Replaced underscore string:\", replaced_underscore)\n    print(\"Replaced space string:\", replaced_space)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n    \n    # Iterate over the words\n    for i in range(len(words)):\n        # If the word contains a space\n        if'' in words[i]:\n            # Replace the space with an underscore\n            words[i] = words[i].replace(' ', '_')\n        # If the word does not contain a space\n        else:\n            # Replace the underscore with a space\n            words[i] = words[i].replace('_','')\n    \n    # Join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    j = 0\n    \n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    num_list = list(set(num_list) - set(zero_index))\n    num_list += zero_index\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        return num_list[:zero_index] + num_list[zero_index+1:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    non_zero_index = []\n\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n        else:\n            non_zero_index.append(i)\n\n    zero_index.reverse()\n    for index in zero_index:\n        num_list.pop(index)\n        non_zero_index.remove(index)\n\n    for i in non_zero_index:\n        num_list.insert(i, 0)\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list[len(num_list) - 1], num_list[zero_index] = num_list[zero_index], num_list[len(num_list) - 1]\n        return move_zero(num_list)\n    else:\n        return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Initialize two pointers - one at the beginning of the list and one at the end of the list.\n    i = 0\n    j = len(num_list) - 1\n\n    # Iterate through the list while the pointers are within the valid range.\n    while i < j:\n        # If the element at the beginning of the list is not zero, move the pointer to the right.\n        if num_list[i]!= 0:\n            i += 1\n        # If the element at the end of the list is zero, swap the elements and move the pointer to the left.\n        elif num_list[j] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        # If the element at the end of the list is not zero, move the pointer to the left.\n        else:\n            j -= 1\n\n    # Return the modified list.\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n): \n        xor_sum ^= arr[i]\n        for j in range(i+1,n): \n            xor_sum ^= arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize a variable to store the sum of xor of all pairs\n    xor_sum = 0\n    # Iterate over all pairs of numbers\n    for i in range(n):\n        for j in range(i+1,n):\n            # Calculate the xor of the current pair\n            xor_pair = arr[i] ^ arr[j]\n            # Add the xor to the sum\n            xor_sum += xor_pair\n    # Return the sum of xor of all pairs\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function takes a list of n integers and returns the sum of xor of all pairs of numbers.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and its size as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(iterable.pop())\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap from the given list\n    heap = hq.heapify(iterable)\n    # extract the minimum element from the heap\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n    \n    # Extract the elements one by one and add them to a new list\n    sorted_list = []\n    while hq.heapq:\n        sorted_list.append(hq.heappop(iterable))\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using a heap sort algorithm.\n\n    Args:\n        iterable (list): A list to be sorted.\n\n    Returns:\n        list: The sorted list.\n    \"\"\"\n    # Create a min heap of the given list\n    heap = [None] * len(iterable)\n    for i in range(len(iterable)):\n        heap[i] = iterable[i]\n\n    # Sort the list by repeatedly extracting the root element from the heap and placing it at the end\n    for i in range(len(iterable)-1, 0, -1):\n        # Extract the root element from the heap\n        heap[0], heap[i] = heap[i], heap[0]\n\n        # Update the heap after extracting the root element\n        for j in range(i//2):\n            # Calculate the index of the parent element\n            parent_index = j\n\n            # If the parent is smaller than its child, swap them\n            if heap[parent_index] > heap[2*parent_index+1]:\n                parent_index = 2*parent_index+1\n\n            if heap[parent_index] > heap[2*parent_index+2]:\n                parent_index = 2*parent_index+2\n\n            if parent_index!= j:\n                # Swap the parent and child elements\n                heap[j], heap[parent_index] = heap[parent_index], heap[j]\n\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.nlargest(len(iterable), iterable)\n    return list(heap)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap from the given list\n    heap = hq.heapify(iterable)\n    \n    # sort the min heap and extract all its elements in a list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # calculate profits and losses\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # check if no profit or loss\n    if profit == 0 or loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount > 0:\n        return True\n    elif actual_cost - sale_amount < 0:\n        return False\n    else:\n        return None"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return False\n    elif sale_amount == 0:\n        return True\n    else:\n        if actual_cost - sale_amount >= sale_amount:\n            return noprofit_noloss(actual_cost - sale_amount, sale_amount)\n        else:\n            return noprofit_noloss(actual_cost, sale_amount - actual_cost)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss.\n    \"\"\"\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount: \n        return True \n    else: \n        return False "
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit and no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n        actual_cost (int): The actual cost of the item sold\n        sale_amount (int): The amount of the item sold\n\n    Returns:\n        bool: True if the given amount has no profit and no loss, False otherwise\n    \"\"\"\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss for the sale\n    profit = sale_amount - actual_cost\n    loss = sale_amount - actual_cost - actual_cost * (profit / sale_amount)\n\n    # Check if there is any profit or loss\n    if profit <= 0 and loss <= 0:\n        print(\"The sale amount has no profit and no loss\")\n    else:\n        print(\"The sale amount has a profit of {:.2f}% and a loss of {:.2f}%\".format(profit * 100, loss * 100))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v # in m/s\n    temperature = t # in Celsius\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * math.exp((17.625 * temperature) / (temperature + 243.5))) + (0.3965 * math.exp(-0.1332 * temperature))\n    if wind_speed >= 10:\n        wind_chill_index = (13.12 + (0.6215 * temperature) - (11.37 * math.exp((17.625 * temperature) / (temperature + 243.5))) + (0.3965 * math.exp(-0.1332 * temperature))) * 0.5\n    wind_chill_index = round(wind_chill_index)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = (13.12 + 0.6215 * t - 11.37 * math.pow(0.5, 0.16) + 0.3965 * math.pow(v, 0.16))\n    return int(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_speed = v * 1.60934 # convert from km/h to m/s\n    wind_speed_rounded = round(wind_speed) # round the wind speed to the nearest integer\n    \n    # calculate the wind chill temperature\n    if t < 0:\n        wchill = -16.67 + 0.033 * t + 0.0015 * t * t\n    elif t <= 10:\n        wchill = 13.12 + 0.6215 * t - 0.0168 * t * t + 0.00076 * t * t * t\n    elif t <= 15:\n        wchill = 35.74 + 0.622 * t - 0.0427 * t * t + 0.00974 * t * t * t\n    elif t <= 20:\n        wchill = 58.59 + 0.63 * t - 0.113 * t * t + 0.0224 * t * t * t\n    else:\n        wchill = 76.71 + 0.629 * t - 0.185 * t * t + 0.0344 * t * t * t\n    \n    wchill_rounded = round(wchill) # round the wind chill temperature to the nearest integer\n    \n    # calculate the wind chill index\n    if wind_speed_rounded <= 0:\n        wchill_index = 0\n    elif wchill_rounded <= 0:\n        wchill_index = 0\n    else:\n        wchill_index = 13.12 + 0.6215 * wind_speed_rounded - 0.0168 * wind_speed_rounded * wind_speed_rounded + 0.00076 * wind_speed_rounded * wind_speed_rounded * wind_speed_rounded\n    \n    wchill_index_rounded = round(wchill_index) # round the wind chill index to the nearest integer\n    \n    return wchill_index_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature in celsius\n    wc = (237.3 + (0.6215 * v) + (13.3984 * t) - (0.1148 * t**2) + (0.000468 * v**2) - (0.000001 * v**3))\n\n    # Calculate the wind chill index\n    wci = round(wc)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return None\n    else:\n        # Calculate the heat index\n        heat_index = 35.74 + 0.6215 * t - 35.757 * math.log(t) + 0.4275 * v\n        # Calculate the wind chill index\n        wind_chill_index = round(heat_index - 32)\n        return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # converting temperature from celsius to fahrenheit\n    t = (t * 9/5) + 32\n    \n    # calculating wind chill formula\n    if t <= 0:\n        return None\n    elif v <= 0:\n        return None\n    else:\n        w = 35.74 + (0.6215*t) - (35.75*math.log(v)) + (0.4275*t*math.log(v))\n        w = round(w)\n        return w"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to kelvin\n    t_k = t + 273.15\n    # calculate the wind chill coefficient\n    wc_c = (0.14 - 0.0111 * math.log10(v) + 0.00024 * math.log10(v**2)) * 0.1666666667\n    # calculate the wind chill index\n    wci = math.ceil((wc_c - 273.15) / (0.0065 * math.exp((wc_c - 273.15) / 0.0065) + 273.15))\n    # round the wind chill index to the nearest integer\n    wci = round(wci)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temperature = t\n    wind_chill_index = 0\n\n    # Calculate the dew point temperature\n    dew_point = 243.04 * (math.log(temperature / 216.6))**(-0.133) - 459.67\n\n    # Calculate the wind chill index\n    if wind_speed <= 0:\n        wind_chill_index = 9999\n    else:\n        wind_chill_index = 35.74 + 0.6215 * (temperature - dew_point) + 35.75 * (temperature - dew_point)**2 - 0.4275 * (temperature - dew_point)**3 + 10.14 * (temperature - dew_point)**4\n        wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 0.0065  # heat capacity of water vapor at constant pressure (J/kg/K)\n    R = 8.314  # ideal gas constant (J/kg/K)\n    t = t + 273.15  # convert to Kelvin\n    v = v * 1.60934  # convert to m/s\n    if t > 290:\n        return \"Error: Temperature too high\"\n    if v > 10:\n        return \"Error: Wind speed too high\"\n    if v < 0:\n        return \"Error: Wind speed too low\"\n    if t < 0:\n        return \"Error: Temperature too low\"\n    if t > 100:\n        return \"Error: Temperature too high\"\n    if v > 200:\n        return \"Error: Wind speed too high\"\n    if v < 2:\n        return \"Error: Wind speed too low\"\n    if t < 0:\n        return \"Error: Temperature too low\"\n    if v > 100:\n        return \"Error: Wind speed too high\"\n    if v < 2:\n        return \"Error: Wind speed too low\"\n    if t < 0:\n        return \"Error: Temperature too low\"\n    # calculate the specific heat capacity of air at constant pressure\n    cv = c * (273.15 - t)\n    # calculate the latent heat of vaporization of water\n    qv = cv * (1 - 0.622 * math.exp(-0.0001 * t))\n    # calculate the moisture deficit (kg/m^2)\n    h = v * (2 * math.pi * R * t) / cv\n    # calculate the moisture deficit per unit wind speed (kg/m^2/m/s)\n    h_v = h / v\n    # calculate the wind chill index\n    wci = 35.74 + 0.6215 * t - 35.75 * math.exp(-(t - 290) / 10) + 0.4275 * h_v - 0.14 * h_v**2 + 0.015 * h_v**3\n    wci = round(wci)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate wind chill index\n    wc = (24.0 * math.log10(v)) - (0.13 * t_f) + 32.0\n    \n    # Convert to integer\n    wc_int = int(wc)\n    \n    # Round to the nearest integer\n    wc_int_rounded = round(wc_int)\n    \n    # Return wind chill index rounded to the nearest integer\n    return wc_int_rounded"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name.startswith(name[0].upper()):\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_list = []\n    for name in sample_names:\n        if not name.startswith('a'):\n            names_list.append(name)\n    sum_length = sum([len(name) for name in names_list])\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            length_sum += len(name)\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            pass\n        else:\n            names_length_sum += len(name)\n    return names_length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            valid_names.append(name)\n    return sum(len(name) for name in valid_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum variable to zero\n    total_length = 0\n    \n    # Loop through the list of names\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if not name[0].isupper():\n            # Add the length of the name to the total length\n            total_length += len(name)\n            \n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize sum to 0\n    total_sum = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip to the next name\n            continue\n        # add the length of the name to the total sum\n        total_sum += len(name)\n    \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the non-lowercase names\n    non_lowercase_names = []\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, add the name to the non_lowercase_names list\n            non_lowercase_names.append(name)\n        # If the name does not start with a lowercase letter, continue to the next name in the list\n        else:\n            continue\n    # Return the sum of the lengths of all non-lowercase names in the list\n    return sum([len(name) for name in non_lowercase_names])"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    pattern = r'\\(.*?\\)'  # find all parenthesis\n    result = re.sub(pattern, '', items)  # remove all parenthesis\n\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as an input and removes the parenthesis and what is inbetween them.\n    '''\n    pattern = r'\\((.*?)\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^\\)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\(.*?\\))' # regular expression pattern to match parenthesis\n    return re.sub(pattern, '', items) # use the regular expression to replace the parenthesis with an empty string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Removing the parenthesis using regex\n    items = re.sub(r'\\(.*?\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]+\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expressions to remove the parenthesis and what is inbetween them\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\(.*?\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n    return (2*n - 1)*(n + 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the sum of nonagonal numbers\n    nonagonal_sum = 0\n    \n    # loop through the numbers starting from 1 and add them up to find the nth nonagonal number\n    for i in range(1, n+1):\n        nonagonal_sum += i + (n-i)\n    \n    return nonagonal_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2*n - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = [1]\n    for i in range(2, n + 1):\n        nonagonal_numbers.append(nonagonal_numbers[-1] + nonagonal_numbers[-2])\n    return nonagonal_numbers[n]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    side1 = 1\n    side2 = 2\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            print(side1)\n        else:\n            print(side2)\n        side1 += side2\n        side2 += 1\n        i += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 2:\n        return None\n    elif n == 2:\n        return 1\n    else:\n        return 2 * (is_nonagonal(n - 1) - is_nonagonal(n - 2))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Calculate the number of squares in the triangle\n    squares = n * (n + 1) // 2\n\n    # Calculate the sum of the squares\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Check if the sum of squares is equal to squares\n    if sum_of_squares == squares:\n        return True\n    else:\n        return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the first two nonagonal numbers\n    nonagonal1 = 1\n    nonagonal2 = 4\n\n    # loop n-2 times to calculate the nth nonagonal number\n    for i in range(n-2):\n        # calculate the sum of the previous two nonagonal numbers\n        nonagonal3 = nonagonal1 + nonagonal2\n        # update the values of nonagonal1, nonagonal2, and nonagonal3\n        nonagonal1 = nonagonal2\n        nonagonal2 = nonagonal3\n\n    # return the nth nonagonal number\n    return nonagonal3"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    c = 1\n\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n\n    return c\n\nprint(is_nonagonal(6)) # output: 10"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 1 + (4*n - 1)**2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Create a pattern that matches the word 'z' except at the start and end of the word\n    pattern = r'(?<=\\b)z(?=\\b)'\n\n    # Use the re.search() method to search for 'z' in the text\n    match = re.search(pattern, text)\n\n    # If 'z' is found, return True. Otherwise, return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b[zZ]\\w+\\b' # match word with 'z' at start and end\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    pattern = r'\\b[zZ]\\w+\\b' # '\\b' matches word boundary, [zZ] matches 'z', and \\w+ matches any word character (letters, digits, etc.)\n    result = re.search(pattern, text)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern that matches 'z' at the start and end of a word\n    pattern = r'(?<=\\b)(?=\\b)z(?=\\b)(?<=\\b)'\n\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # remove any punctuation from the text\n    text = re.sub('[^\\w\\s]', '', text)\n\n    # split the text into words\n    words = text.split()\n\n    # iterate over the words and check if the middle word contains 'z'\n    for i in range(len(words)):\n        if i < len(words) // 2:\n            if 'z' in words[i] or 'Z' in words[i]:\n                return True\n        else:\n            if 'z' in words[i] or 'Z' in words[i]:\n                return True\n\n    # if we haven't found a 'z' in the middle of the words, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b[zZ]\\w+\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Loop through the words\n    for word in words:\n        # Check if the word contains 'z' except at the start and end of the word\n        if 'z' in word[0:2] and 'z' in word[-2:]:\n            return True\n    \n    # If we make it through the loop without finding a match, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Define the pattern for matching 'z' at the start and end of the word\n    pattern = r'\\b(z)\\b'\n\n    # Use the re.search() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Check if there are any occurrences of the pattern\n    if len(matches) > 0:\n        # Print a message indicating that the pattern was found\n        print(f\"The pattern '{pattern}' was found in the text.\")\n    else:\n        # Print a message indicating that the pattern was not found\n        print(f\"The pattern '{pattern}' was not found in the text.\")"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Initializing the left and right pointers.\n    left = 0\n    right = len(input) - 1\n    \n    # Looping until the left pointer is less than k.\n    while left < k: \n        # Increasing the left pointer.\n        left += 1\n    \n    # Looping until the right pointer is greater than or equal to k.\n    while right >= k: \n        # Swapping the elements at the left and right pointers.\n        input[left], input[right] = input[right], input[left] \n        # Increasing the left pointer and decreasing the right pointer.\n        left += 1\n        right -= 1\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    n = len(input)\n    for i in range(k, n):\n        input[i], input[i-k] = input[i-k], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from position 0 to k-1\n    input = input[:k][::-1] + input[k:]\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the array\n    n = len(input)\n    \n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n        \n    # Reverse the array from k to n-1\n    for i in range(k, n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n        \n    # Reverse the array from n-k to n-1\n    for i in range(n-k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize the length of the array\n    n = len(input)\n\n    # Reverse the array from 0 to k-1\n    for i in range(0, k):\n        input[0], input[i] = input[i], input[0]\n\n    # Reverse the array from k to n-1\n    for i in range(k, n-1):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n\n    # Reverse the array from n-1 to 0\n    for i in range(n-1, 0, -1):\n        input[i], input[0] = input[0], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # reverse the array from index 0 to k-1\n    input[0:k] = input[0:k][::-1]\n\n    # reverse the array from k to end\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # get the length of the input array\n    n = len(input)\n    \n    # check if k is valid\n    if k > n or k <= 0:\n        return \"Invalid position\"\n    \n    # initialize two pointers: left and right\n    left, right = 0, k - 1\n    \n    # reverse the array using two pointers\n    while left < right:\n        # swap the values at the left and right pointers\n        input[left], input[right] = input[right], input[left]\n        \n        # move the pointers towards each other\n        left += 1\n        right -= 1\n    \n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from start to k-1\n    for i in range(0, k-1):\n        temp = input[i]\n        input[i] = input[k-i-1]\n        input[k-i-1] = temp\n    \n    # Reverse the array from k to end\n    for i in range(k, len(input)-1):\n        temp = input[i]\n        input[i] = input[len(input)-i-1]\n        input[len(input)-i-1] = temp\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    left = 0\n    right = n-1\n    while left < k-1:\n        # Swap left and right elements\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n        left += 1\n        right -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    if k >= n:\n        return input\n    left = 0\n    right = k - 1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup, test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary and add the values from the input dictionary to the new dictionary\n    new_dict = {**test_dict}\n    # add the new dictionary to the input tuple\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with the same keys as the input dictionary\n    new_dict = {k:v for k,v in test_dict.items()}\n    # Add the new dictionary to the tuple\n    new_tuple = (test_tup, new_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Add the dictionary to the tuple\n    new_tup = test_tup + (test_dict,)\n    # Return the modified tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # add the dictionary to the tuple\n    test_tup = tuple(test_tup.items() + test_dict.items())\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Extract the keys of the dictionary as a list\n    dict_keys = list(test_dict.keys())\n    \n    # Iterate through each key in the tuple\n    for key in test_tup:\n        # If the key is present in the dictionary, add the corresponding value to the tuple\n        if key in dict_keys:\n            test_tup += (test_dict[key],)\n    \n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with key-value pairs from the original tuple and the new dictionary\n    new_dict = {**test_tup, **test_dict}\n    # Convert the new dictionary to a tuple\n    new_tup = tuple(new_dict.items())\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    visited = [[False] * N for i in range(N)]\n    visited[0][0] = True\n    queue = [(0, 0)]\n\n    while queue:\n        r, c = queue.pop(0)\n\n        # Check if we have reached the bottom-right cell\n        if r == N-1 and c == N-1:\n            avg = cost[r][c]\n            if avg > max_avg:\n                max_avg = avg\n            continue\n\n        # Move right\n        if not visited[r][c+1]:\n            queue.append((r, c+1))\n            visited[r][c+1] = True\n\n        # Move down\n        if not visited[r+1][c]:\n            queue.append((r+1, c))\n            visited[r+1][c] = True\n\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize the variables\n    n = len(cost)\n    max_avg = 0\n    max_path = []\n    \n    # Calculate the maximum average\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                path = [(j, 1), (j+1, 1)]\n            elif j == 0:\n                path = [(i, 1), (i+1, 1)]\n            else:\n                path = [(i, 1), (i+1, 1), (j, 1), (j+1, 1)]\n            \n            total_cost = 0\n            num_cells = 0\n            for k, cell in enumerate(path):\n                if k == 0:\n                    total_cost += cost[cell[0]][cell[1]]\n                    num_cells += 1\n                elif k == 1:\n                    total_cost += cost[cell[0]][cell[1]]\n                    num_cells += 1\n                else:\n                    total_cost += cost[cell[0]][cell[1]] + cost[cell[0]][cell[1]-1]\n                    num_cells += 2\n            \n            avg_cost = total_cost/num_cells\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = path\n    \n    # Return the maximum average path\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for i in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                dp[i][j] = cost[i][j]\n            elif i < j:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Get the dimensions of the matrix\n    N = len(cost)\n    \n    # Initialize a variable to store the maximum average path\n    max_avg_path = 0\n    \n    # Iterate over all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if the cell is reachable from the top-left cell\n            if i == 0 and j == 0:\n                continue\n            \n            # Check if the cell is reachable from the current cell\n            if i == 0 or j == 0 or i == N-1 or j == N-1:\n                continue\n            \n            # Calculate the total cost and the number of cells visited in the path\n            total_cost = cost[i][j] + cost[i-1][j] + cost[i][j-1] + cost[i-1][j-1]\n            num_cells = 4\n            \n            # Update the maximum average path if necessary\n            if total_cost / num_cells > max_avg_path:\n                max_avg_path = total_cost / num_cells\n    \n    return max_avg_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    max_path_avg = 0\n    max_path = []\n    \n    # Traverse all possible paths and compute their average\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Check if current cell is the final cell in the path\n            if i == len(cost)-1 and j == len(cost[i])-1:\n                # If it is, update max_path_avg and max_path variables\n                max_path_avg = max(max_path_avg, sum(cost[i][j]) / (i+1))\n                max_path = [(i, j)]\n            else:\n                # If not, check if we can move to the right or down\n                if j+1 < len(cost[i]):\n                    # If we can, update max_path_avg and max_path variables\n                    max_path_avg = max(max_path_avg, max_path_avg + sum(cost[i][j]) + sum(cost[i][j+1]))\n                    max_path = [(i, j), (i, j+1)]\n                if i+1 < len(cost):\n                    # If we can, update max_path_avg and max_path variables\n                    max_path_avg = max(max_path_avg, max_path_avg + sum(cost[i][j]) + sum(cost[i+1][j]))\n                    max_path = [(i, j), (i+1, j)]\n    \n    # Return maximum average path\n    return max_path_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(i, j, visited, path, current_sum):\n        if i == n-1 and j == n-1:\n            total_cost = current_sum\n            for cell in path:\n                total_cost += cost[cell[0]][cell[1]]\n            if total_cost > max_cost:\n                max_cost = total_cost\n                max_path = path.copy()\n            return\n        \n        visited.add((i, j))\n        \n        # Move right\n        if j+1 < n and (i, j+1) not in visited:\n            dfs(i, j+1, visited, path+[(i, j+1)], current_sum+cost[i][j+1])\n        \n        # Move down\n        if i+1 < n and (i+1, j) not in visited:\n            dfs(i+1, j, visited, path+[(i+1, j)], current_sum+cost[i+1][j])\n        \n        visited.remove((i, j))\n        \n    n = len(cost)\n    max_cost = 0\n    max_path = []\n    \n    for i in range(n):\n        for j in range(n):\n            visited = {(i, j)}\n            dfs(i, j, visited, [(i, j)], 0)\n    \n    total_cost = 0\n    for cell in max_path:\n        total_cost += cost[cell[0]][cell[1]]\n    max_average = total_cost/len(max_path)\n    \n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize the variables\n    max_path_avg = 0\n    max_path = []\n    \n    # Iterate through the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Check if the current cell is the bottom right corner\n            if i == len(cost)-1 and j == len(cost[i])-1:\n                # If it is, add the cost to the total cost and increment the number of cells visited\n                total_cost += cost[i][j]\n                num_cells += 1\n            else:\n                # Otherwise, move to the next cell in the appropriate direction\n                if i < len(cost)-1:\n                    if cost[i][j] <= cost[i+1][j]:\n                        i += 1\n                    else:\n                        i -= 1\n                if j < len(cost[i])-1:\n                    if cost[i][j] <= cost[i][j+1]:\n                        j += 1\n                    else:\n                        j -= 1\n                \n    return max_path_avg / num_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0.0\n    \n    # initialize variables\n    visited = [[False] * N for i in range(N)]\n    max_avg = float('-inf')\n    \n    # function to calculate the average of the path\n    def calculate_average(path):\n        total_cost = 0\n        num_cells = 0\n        for i in range(N):\n            for j in range(N):\n                if visited[i][j]:\n                    total_cost += cost[i][j]\n                    num_cells += 1\n        if num_cells == 0:\n            return 0.0\n        return total_cost / num_cells\n    \n    # function to check if a path is valid\n    def is_valid_path(path):\n        # check if the path goes from the top-left cell to the bottom right cell\n        if path[0][0]!= N-1 or path[N-1][N-1]!= 0:\n            return False\n        # check if the path visits all cells\n        for i in range(N):\n            for j in range(N):\n                if not visited[i][j]:\n                    return False\n        return True\n    \n    # function to backtrack to find the longest valid path\n    def backtrack(i, j, path, current_avg):\n        # base case: if the current cell is the bottom right cell, check if it has a valid path\n        if i == N-1 and j == N-1 and path and is_valid_path(path):\n            current_avg = max(current_avg, calculate_average(path))\n        # recursive case: move to the next cell, add it to the path, and backtrack\n        else:\n            if i < N-1:\n                visited[i][j] = True\n                backtrack(i+1, j, path + [(i, j)], current_avg)\n                visited[i][j] = False\n            if j < N-1:\n                visited[i][j] = True\n                backtrack(i, j+1, path + [(i, j)], current_avg)\n                visited[i][j] = False\n    \n    # backtrack to find the longest valid path\n    backtrack(0, 0, [], max_avg)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, N):\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1]) + cost[i][0]\n        dp[0][i] = max(dp[0][i-1], dp[1][i-1]) + cost[0][i]\n        \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n            \n    max_avg = dp[N-1][N-1]\n    for i in range(N-2, -1, -1):\n        for j in range(N-2, -1, -1):\n            max_avg = max(max_avg, dp[i][j] + cost[i][j])\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize an empty list to store the paths and their respective averages\n    paths = []\n    # Initialize an empty list to store the current path\n    current_path = [0] * N\n    # Initialize the total cost of the current path\n    current_cost = 0\n    # Loop through each cell of the matrix\n    for i in range(N):\n        for j in range(N):\n            # Check if the current cell is the bottom right cell\n            if i == N-1 and j == N-1:\n                # If it is, add the current cost to the total cost of the path and append the path to the list of paths\n                current_cost += cost[i][j]\n                paths.append(current_path[:])\n            else:\n                # If it's not, append the current cell's cost to the current path and update the total cost of the path\n                current_path.append(cost[i][j])\n                current_cost += cost[i][j]\n    # Initialize the maximum average to be less than any possible value\n    max_average = float('-inf')\n    # Loop through each path and compute its average\n    for path in paths:\n        total_cost = sum(cost[x] for x in path)\n        # Check if the average is greater than the current maximum average\n        if total_cost / len(path) > max_average:\n            max_average = total_cost / len(path)\n    # Return the maximum average of the paths\n    return max_average"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Creating a new dictionary to store the filtered students\n    filtered_students = {}\n    \n    # Iterating through the dictionary\n    for name, (height, weight) in students.items():\n        # Checking if the height and weight are above the minimum\n        if height > h and weight > w:\n            # Adding the name of the student to the filtered dictionary\n            filtered_students[name] = students[name]\n    \n    # Returning the filtered dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[name] = student_info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # filter out the students that do not have height and weight above the minimum\n    filtered_students = {k:v for k, v in students.items() if v[0] > h and v[1] > w}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create a new dictionary to store the filtered data\n    filtered_students = {}\n    \n    # Iterate through the students dictionary\n    for name, data in students.items():\n        # Extract height and weight from data tuple\n        height, weight = data\n        \n        # Check if height and weight are above the minimum\n        if height > h and weight > w:\n            # If yes, add the student to the filtered dictionary\n            filtered_students[name] = data\n    \n    # Return the filtered dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    \n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    \n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_same_pair(nums1, nums2):\n    \"\"\"\n    Count indices where the lists have the same values.\n\n    Args:\n        nums1 (list): The first list.\n        nums2 (list): The second list.\n\n    Returns:\n        int: The number of indices where the lists have the same values.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(i+1, len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize count and index\n    count = 0\n    index = -1\n\n    # loop through the lists\n    for i in range(len(nums1)):\n        # check if the lists have the same value\n        if eq(nums1[i], nums2[i]):\n            # increment count and update index\n            count += 1\n            index = i\n\n    # return the count and index\n    return count, index"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Loop through each pair of elements in both lists\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base to a string so we can work with it\n    base_str = str(base)\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through the digits of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        total_sum += int(digit) ** power\n\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum_of_digits = 0\n    \n    # Loop through each digit of the base\n    while base > 0:\n        # Get the last digit of the base\n        digit = base % 10\n        \n        # Add the last digit to the sum\n        sum_of_digits += digit\n        \n        # Remove the last digit from the base\n        base //= 10\n    \n    # Calculate the sum of the digits raised to the power\n    result = sum_of_digits ** power\n    \n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        power, digit = divmod(power, 10)\n        sum_digits += digit\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    total_sum = 0\n    for digit in base_str:\n        total_sum += int(digit) ** power\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each digit of the base and add it to the sum\n    while base > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n    \n    # Calculate the sum of digits raised to the power of the specified power\n    result = 0\n    for i in range(1, power+1):\n        result += sum ** i\n    \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # calculate the sum of digits of base to the power\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        base //= 10\n        power -= 1\n\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string and split into individual digits\n    digits = list(str(base))\n    # Initialize the sum variable to 0\n    total = 0\n    # Loop through each digit of the base and add it to the total if it's greater than or equal to the power\n    for digit in digits:\n        if int(digit) >= power:\n            total += int(digit)\n    # Return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for i in range(1, 10):\n        temp = int(base ** i)\n        sum_of_digits += temp\n    return sum_of_digits ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n    # Initialize the sum to zero\n    sum_digits = 0\n    # Iterate over each digit in the base string\n    for digit in base_str:\n        # Convert each digit to an integer and add it to the sum\n        sum_digits += int(digit) ** power\n    # Return the sum of digits raised to the power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"' # regular expression pattern to match quotation marks and values\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"(?!\\\\)' # Regex pattern to match quotation marks\n    match = re.search(pattern, text) # Search for the pattern in the text\n    if match: # If the pattern is found\n        return match.group(1) # Extract the matched text and return it\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:\\\\.|[^\"])*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the result tuple with the first element of the input tuple\n    result = (test_tup[0],)\n    # loop through the rest of the input tuple\n    for i in range(1, len(test_tup)):\n        # multiply the current element with the next element and append the result to the result tuple\n        result += (test_tup[i] * test_tup[i+1],)\n    # return the result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) // 2  # number of elements to multiply\n    result = tuple(test_tup[i] * test_tup[i+n] for i in range(n))\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    result += (test_tup[-1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    return tuple([test_tup[i] * test_tup[i+1] for i in range(N)])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0] * test_tup[1],)\n    for i in range(2, N+1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [i + j for i, j in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the two input lists and add the corresponding elements\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Given a list of integers, return a list of consecutive duplicates.\n    \"\"\"\n    return list(accumulate(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Loop through the list and group by consecutive duplicates\n    for key, group in groupby(nums):\n        if key == consecutive_duplicates.prev:\n            # Remove the duplicate group\n            next(group)\n        else:\n            # Update the previous consecutive duplicate\n            consecutive_duplicates.prev = key\n\n    # Return the list with no consecutive duplicates\n    return list(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    nums = sorted(nums)\n    result = []\n    for group in groupby(nums):\n        if len(list(group)) == 1:\n            continue\n        result.extend(list(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use groupby() to group the list based on consecutive duplicates\n    grouped = groupby(nums)\n    # Filter out the non-consecutive duplicates\n    return [next(g[1]) for _, g in grouped]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    nums = set(nums)\n    # Use a generator expression to iterate through the groups of consecutive duplicates\n    result = [num for _, group in groupby(nums) if len(list(group)) > 1]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return list(groupby(nums, key=lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(set(nums)), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i, item in enumerate(nums):\n        if i == 0 or item!= nums[i-1]:\n            yield item"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculating the lateral surface area of the cone using the formula:\n    # lateral surface area = pi * r^2 * h / 3\n    lateral_surface_area = math.pi * r ** 2 * h / 3\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return (1/3) * r * h + 2 * pi * r**2"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Using the formula for the lateral surface area of a cone\n    surface_area = math.pi*r**2*h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * (r**2) + (h/2) * (math.tan(math.pi/4))\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = (math.pi * r**2 * h) / 3\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * (r**2) + (2*h*r)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = 2*(r**2 + h*math.tan(math.pi/6))\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * r\n    lateral_area = math.pi * r * h / 2\n    return area - lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function calculates the lateral surface area of a cone with radius r and height h.\n    The formula for the lateral surface area of a cone is:\n    lateral surface area = (1/3) * \u03c0 * r * h * (cos(\u03b8) - cos(\u03b8/2))\n    where \u03b8 is the angle between the base and the center of the cone.\n    '''\n    theta = math.acos((r**2 + h**2 - r**2*math.cos(math.pi/3)) / (2*r*h))\n    surface_area = 0.3 * math.pi * r * h * (math.cos(theta) - math.cos(theta/2))\n    return surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # define regular expression pattern for replacing special characters\n    pattern = re.compile(r'\\s|,|\\.')\n    # replace all occurrences of special characters with colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'[\\s,\\.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]|_+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[., ]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^\\w\\s]'\n    return re.sub(pattern, \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"([,\\.])\", r\":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]+', ':', text)  # replace spaces with colons\n    text = re.sub(r'[,.]', '', text)  # remove commas and dots\n    return text.strip()  # remove leading/trailing whitespace"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Create a regular expression pattern to match any character that is a space, comma, or dot\n    pattern = re.compile(r'\\s+|,|\\.')\n    # Use the `sub()` method to replace all occurrences of the pattern with a colon\n    result = pattern.sub(':', text)\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Using regular expressions to replace the special characters\n    text = re.sub(r'\\s+|,+|\\.\\s+|\\s+|\\.\\s+|\\s+|\\.\\s+|\\s+|\\.\\s+', ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1  # if x not found in A"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    # Initialize the left and right pointers to the beginning and end of the array, respectively\n    left = 0\n    right = len(A) - 1\n\n    # While the left pointer is less than or equal to the right pointer, perform binary search\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If the middle element is equal to x, return the index\n        if A[mid] == x:\n            return mid\n\n        # If x is smaller than the middle element, search the right half of the array\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If x is larger than the middle element, search the left half of the array\n        else:\n            right = mid - 1\n\n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize left and right pointers\n    left = 0\n    right = len(A) - 1\n\n    # Perform binary search to find the first occurrence of x\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            # If x is found, update right pointer to mid+1\n            right = mid + 1\n        elif A[mid] < x:\n            # If x is smaller than A[mid], update left pointer to mid+1\n            left = mid + 1\n        else:\n            # If x is larger than A[mid], update right pointer to mid-1\n            right = mid - 1\n\n    # If x is not found, return -1\n    return -1 if x not in A else left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize variables\n    left = 0\n    right = len(A) - 1\n    result = -1\n    found = False\n\n    # binary search for the first occurrence of x in A\n    while left <= right and not found:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            found = True\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # return the index of the first occurrence of x in A\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    :param A: A sorted array.\n    :param x: A number to search for.\n    :return: The index of the first occurrence of x in A, or -1 if x is not found in A.\n    \"\"\"\n    for i, num in enumerate(A):\n        if num == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first element greater than or equal to x in the array A\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # Check if x is in the first half of the array\n    if left == len(A) or A[left]!= x:\n        return -1\n    # Check if x is in the second half of the array\n    if right == -1 or A[right]!= x:\n        return -1\n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    # Initialize a counter variable to keep track of the number of occurrences\n    count = 0\n\n    # Iterate through the array using a for loop\n    for i in range(len(A)):\n        # Check if the current element is equal to the target element\n        if A[i] == x:\n            # Increment the count if the current element is equal to the target element\n            count += 1\n            # If the count is equal to 1, return the index of the current element\n            if count == 1:\n                return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    # find the index of the first element in the array that is greater than or equal to x\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n        \n    if i == len(A):\n        return -1\n    \n    # find the index of the first occurrence of x in the rest of the array\n    j = i + 1\n    while j < len(A) and A[j] == x:\n        j += 1\n        \n    return j"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    if A[0] == x:\n        return 0\n    for i in range(1, len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    max_sum = float('-inf')\n    curr_sum = 1\n    for i in range(n):\n        curr_sum *= arr[i]\n        max_sum = max(max_sum, curr_sum)\n        total_sum += curr_sum\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if j == i:\n                result += (arr[j] - arr[0]) * (arr[j] - arr[0])\n            else:\n                result += (arr[j] - arr[i-1]) * (arr[j] - arr[i-1])\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize the product array\n    prod = [1] * (n + 1)\n\n    # Calculate the prefix product array\n    for i in range(1, n + 1):\n        prod[i] = prod[i - 1] * arr[i - 1]\n\n    # Initialize the result array\n    res = [0] * (n + 1)\n    res[0] = 0\n\n    # Calculate the sum of products of all possible sublists\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            res[j] += prod[j] * (prod[i - 1] * prod[j] // arr[i - 1])\n\n    # Return the sum of products of all possible sublists\n    return sum(res)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize two pointers to start of each subarray\n    left = 0\n    right = 0\n    # Initialize product of subarray as 1\n    prod = 1\n    # Initialize sum of products as 0\n    sum_prod = 0\n    \n    # Iterate through each subarray\n    while right < n:\n        # Calculate product of subarray\n        prod *= arr[right]\n        # Check if subarray product exceeds 1\n        if prod > 1:\n            # Calculate sum of products of subarrays from left to right\n            sum_prod += prod\n            # Move right pointer to start of next subarray\n            right += 1\n            # Reset product of subarray as 1\n            prod = 1\n        else:\n            # Move left pointer to end of current subarray\n            left += 1\n            # Reset product of subarray as 1\n            prod = 1\n    \n    # Return sum of products of all subarrays\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        for j in range(i, n):\n            total += arr[i] * arr[j]\n    return total"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = arr[0]\n\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + arr[i-1] * dp[i-2]\n\n    return dp[-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize a list to store the products of subarrays\n    products = []\n    \n    # Initialize a variable to keep track of the current subarray product\n    curr_prod = 1\n    \n    # Traverse through the list and calculate the products of all possible subarrays\n    for i in range(n):\n        for j in range(i, n):\n            curr_prod *= arr[j] - arr[i]\n            products.append(curr_prod)\n            \n    # Return the sum of products of all subarrays\n    return sum(products)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum and product of subarrays\n    sum_subarray = 0\n    prod_subarray = 1\n\n    # Calculate the product of the first element of the subarray\n    prod_subarray = arr[0]\n\n    # Iterate through the rest of the array\n    for i in range(1, n):\n        # Calculate the new product of the subarray by taking the current element and the old product\n        new_prod_subarray = prod_subarray * arr[i]\n        # Update the sum and product of subarrays\n        sum_subarray += new_prod_subarray\n        prod_subarray = new_prod_subarray\n\n    return sum_subarray"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # generate all sublists\n    sublists = [arr[i:j+1] for i in range(n) for j in range(i,n)]\n    # calculate the product of each sublist\n    sublist_prod = [1]*n\n    for i in range(n):\n        for j in range(i,n):\n            sublist_prod[i] *= arr[i]*arr[j]\n    # calculate the sum of products of each sublist\n    sublist_sum = [0]*n\n    for i in range(n):\n        sublist_sum[i] = sum(sublist_prod[i:j+1])\n    return sum(sublist_sum)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_sum = 0\n    for i in range(n):\n        temp_sum = 1\n        for j in range(i, n):\n            temp_sum *= arr[j]\n        max_sum = max(max_sum, temp_sum)\n    return max_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # initialize the bits to flip\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # flip the middle bits\n    middle_bits = ((n >> 1) & 0x55555555) | ((n & 0x55555555) << 1)\n    \n    # flip the first and last bits\n    first_last_bits = first_bit ^ middle_bits ^ last_bit\n    \n    # return the result\n    return middle_bits ^ first_last_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the given number into binary format\n    binary_str = bin(n)[2:]\n    # Find the length of the binary string\n    length = len(binary_str)\n    # Find the position of the first and last bits\n    first_bit_position = 0\n    last_bit_position = length - 1\n    # Reverse the binary string and toggle the middle bits\n    for i in range(length // 2):\n        if binary_str[i] == '1':\n            binary_str[i] = '0'\n        else:\n            binary_str[i] = '1'\n    # Reverse the binary string back\n    binary_str = binary_str[::-1]\n    # Convert the binary string back into an integer\n    n = int(binary_str, 2)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n\n    n = (n ^ first_bit) & ~(last_bit ^ (1 << 31))\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # Initialize variables for first and last bits\n    first_bit = n & 1\n    last_bit = n & (2**32 - 1)\n\n    # Toggle first and last bits\n    n = n ^ (first_bit ^ last_bit)\n\n    # Set first and last bits\n    n = n ^ (1 << 31)\n    n = n ^ (1 << 30)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:].zfill(32)[::-1]\n    n = ''.join(map(lambda x: '0' if x == '1' else '1', n))\n    return int(n, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize two variables to store the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n\n    # Toggle the middle bits\n    middle_bits = (n & ~((1 << n.bit_length() - 2) | 1)) ^ first_bit ^ last_bit\n\n    # Combine the first and last bits with the middle bits\n    return (middle_bits << 1) | first_bit | last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 0\n    \n    left_bit = n & 1\n    right_bit = (n >> 1) & 1\n    toggle_bit = (left_bit ^ right_bit) + left_bit\n    \n    return toggle_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Get the length of the binary representation of n\n    len_n = len(bin(n)[2:])\n    \n    # Toggle the middle bits of n\n    for i in range(1, len_n-1):\n        if n & (1 << i):\n            n |= (1 << (i+1)) ^ (1 << (i-1))\n            \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # Clear the first and last bits\n    n &= ~(first_bit | last_bit)\n    \n    # Get the middle bits of the number\n    middle_bits = n & 0b111111111111111111111111111111111\n    middle_bits = middle_bits >> 1\n    \n    # Toggle the middle bits\n    middle_bits = middle_bits ^ 0b111111111111111111111111111111111\n    \n    # Set the middle bits\n    n = n & ~(0b11111111111111111111111111111111)\n    n = n | middle_bits\n    \n    # Set the first and last bits\n    n |= first_bit\n    n |= last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # XORing the first and last bit with all other bits\n    n ^= ((n & 1) << 63)\n\n    # XORing the first and last bit with all other bits except the first and last bit\n    n ^= ((n ^ ((n & 1) << 63)) & 1)\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function finds the left insertion point for a given value in a sorted list.\n    It uses the binary search algorithm to find the position where the value should be inserted in ascending order.\n    \"\"\"\n    left, right = 0, len(a) - 1\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return index\n    if x < a[index - 1]:\n        return index\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x == a[mid]:\n            return mid\n        if x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # initialize left and right pointers\n    left, right = 0, len(a) - 1\n\n    # loop until left pointer is less than or equal to right pointer\n    while left <= right:\n        # find the middle index\n        mid = (left + right) // 2\n\n        # if the value is equal to the middle element, return the middle index\n        if a[mid] == x:\n            return mid\n\n        # if the value is less than the middle element, search to the left\n        elif a[mid] < x:\n            left = mid + 1\n\n        # if the value is greater than the middle element, search to the right\n        else:\n            right = mid - 1\n\n    # if the value is not present in the list, return -1\n    return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    This function takes in a sorted list 'a' and a value 'x' and returns the left insertion point for the given value.\n\n    Args:\n        a (list): A sorted list.\n        x (int): A value to search for in the sorted list.\n\n    Returns:\n        int: The left insertion point for the given value in the sorted list.\n    \"\"\"\n    # First, use binary search to find the leftmost index at which x should be inserted.\n    # This uses the bisect_left() method from the bisect module to perform the search.\n    left_index = bisect.bisect_left(a, x)\n\n    # If x is already in the list, return its index.\n    if left_index < len(a) and a[left_index] == x:\n        return left_index\n\n    # Otherwise, search the right half of the list to find the index where x belongs.\n    right_index = left_index\n    while right_index < len(a) and a[right_index] < x:\n        right_index += 1\n\n    return right_index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use bisect to find the insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is already present, return the index\n    if index!= len(a) and a[index] == x:\n        return index\n    # Otherwise, return the index of the previous element\n    return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = bisect.bisect_left(a, x)\n    if left == len(a) or a[left]!= x:\n        return -1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # create a list of tuples containing the value and its index\n    value_index_list = [(value, index) for index, value in enumerate(a)]\n\n    # use the bisect function to find the left insertion point\n    left_index = bisect.bisect_left(value_index_list, x)\n\n    # return the left insertion point\n    return left_index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"The string is starting with a vowel.\")\n    else:\n        print(\"The string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) is not None"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # recursive case\n        return (1/n) * geometric_sum(n-1) + geometric_sum(n-2)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    # Base case:\n    if n == 1:\n        return 1\n    # Recursive case:\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 1 + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (1 + geometric_sum(n-1)) / n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # To find the index of smallest triangular number with n digits, we can use the following formula:\n    # (n(n+1)/2) - (n-1)\n    # Let's find the value of n for which this formula gives the required index\n    index = int((n*(n+1))/2) - (n-1)\n    # Now we need to find the value of n that satisfies the above formula\n    n = int((index*index + 1)/2)\n    return n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function returns the index of the smallest triangular number with n digits.\n    '''\n\n    def is_prime(num): \n        if num < 2: \n            return False\n        for i in range(2, int(math.sqrt(num))+1): \n            if num % i == 0: \n                return False\n        return True\n\n    def get_next_prime(num): \n        if is_prime(num + 1): \n            return num + 1\n        else: \n            return get_next_prime(num + 1)\n\n    def get_next_smallest_triangular(index): \n        num = (index + 1) * (index + 2) // 2\n        if is_prime(num): \n            return get_next_smallest_triangular(index + 1)\n        else: \n            return num\n\n    index = 1\n    while True:\n        num = get_next_smallest_triangular(index)\n        if len(str(num)) == n: \n            return index\n        index += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        triangular = i * (i + 1) // 2\n        triangular_digits = len(str(triangular))\n        if triangular_digits == n:\n            return triangular\n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n and returns the index of the smallest triangular number with n digits. \n    \"\"\"\n    # Initialize two variables, i and j, to 1\n    i = 1\n    j = 1\n\n    # Initialize a variable to store the sum of the two numbers\n    sum_of_numbers = i + j\n\n    # While the sum of the two numbers is less than or equal to n\n    while sum_of_numbers <= n:\n        # If the sum is less than n, increment the i number\n        if sum_of_numbers < n:\n            i += 1\n            j = i\n        # If the sum is greater than n, increment the j number\n        else:\n            j += 1\n            i = j\n\n        # Calculate the sum of the two numbers\n        sum_of_numbers = i + j\n\n    # Return the index of the smallest triangular number with n digits\n    return i - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def next_prime(num):\n        if is_prime(num):\n            return num\n        else:\n            i = num + 1\n            while not is_prime(i):\n                i += 1\n            return i\n\n    def find_smallest_triangular_num(n):\n        smallest_triangular = 0\n        while len(str(smallest_triangular)) < n:\n            smallest_triangular += next_prime(smallest_triangular)\n        return smallest_triangular\n\n    return find_smallest_triangular_num(n) - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Calculate the required number of digits in the triangular number \n    digits = int(math.log10(n*math.sqrt(8*n + 1)) + 1)\n\n    # Calculate the largest triangular number with n digits \n    largest = 10**digits\n    index = math.ceil(math.log10(largest))\n\n    # Calculate the smallest triangular number with n digits \n    smallest = largest/10**index\n\n    # Find the index of the smallest triangular number with n digits \n    for i in range(digits-1): \n        smallest = int(smallest/10)\n        index = index + 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # calculate the range of digits to find the smallest triangular number with n digits\n    min_triangular_num = math.ceil(n * (n+1) / 2)\n    # loop through the range and find the index of the smallest triangular number\n    for i in range(1, min_triangular_num):\n        triangular_num = i*(i+1)//2\n        if triangular_num >= 10**n:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number and its index\n    smallest_triangular = 10**(n-1)\n    index = n - 1\n    \n    # Loop till smallest triangular number becomes greater than 10^n\n    while smallest_triangular > 10**n:\n        # Calculate the next smallest triangular number\n        next_smallest_triangular = (smallest_triangular**2 + 1) // 2\n        \n        # If next smallest triangular number is smaller than smallest triangular, update smallest and index\n        if next_smallest_triangular < smallest_triangular:\n            smallest_triangular = next_smallest_triangular\n            index += 1\n    \n    # Return the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # To calculate the n-th triangular number\n    def nth_triangular(n):\n        return (n * (n + 1)) // 2\n    \n    # To find the index of smallest triangular number with n digits\n    def smallest_triangular_n_digits(n):\n        smallest_triangular_number = nth_triangular(n)\n        index = 1\n        while (smallest_triangular_number // (10**index)) >= 10:\n            index += 1\n        return index\n    \n    # To find the smallest triangular number with n digits\n    def smallest_triangular(n):\n        return nth_triangular(smallest_triangular_n_digits(n))\n    \n    # Main function to find the index of smallest triangular number with n digits\n    return smallest_triangular_n_digits(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n):\n    # Returns the index of smallest triangular number with n digits\n    for i in range(n):\n        triangular = int(math.sqrt(5*i*i + 4*n - 1) + 0.5)\n        if triangular**2 == 4*n - 1:\n            return i+1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_tup = {}\n    for i in range(0, len(test_tup), 2):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initializing an empty dictionary\n    my_dict = {}\n    # iterating through the tuple and adding each adjacent element as a key-value pair to the dictionary\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # returning the dictionary\n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Using a dictionary comprehension to create the dictionary\n    return {i: j for i, j in zip(test_tup[::2], test_tup[1::2])}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function converts the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through the tuple elements\n    for i in range(len(test_tup)-1):\n        # Add the current key-value pair to the dictionary\n        result_dict[i] = test_tup[i]\n    # Return the resulting dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result = {}\n    # loop through the tuple and add the adjacent elements to the dictionary as key-value pairs\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    # return the completed dictionary\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 1:\n        print(\"The length of the tuple must be even.\")\n        return None\n    else:\n        key_list = []\n        value_list = []\n        for i in range(0, len(test_tup), 2):\n            key = test_tup[i]\n            value = test_tup[i+1]\n            key_list.append(key)\n            value_list.append(value)\n        return dict(zip(key_list, value_list))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # loop through each character in the string\n    for i in range(len(s)):\n        # if any two characters are not the same, return false\n        if s[i]!= s[0]:\n            return False\n    # if all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    all_chars = set(s)\n    if len(all_chars) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 1:\n        return s[0] == s[-1]\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    \n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n        \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_list = list(s)\n    if len(char_list) == 0:\n        return True\n    elif len(char_list) == 1:\n        return True\n    else:\n        if char_list[0] == char_list[-1]:\n            return all_Characters_Same(char_list[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to lowercase\n    s = s.lower()\n    # Check if all the characters are the same\n    if s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a set to remove duplicates\n    set_s = set(s)\n    \n    # Check if the length of the set is equal to 1, which means all the characters are same\n    if len(set_s) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    a = side\n    b = side\n    c = side\n    d = side\n\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (a + b + c + d) / 2\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6 * side ** 2 / (4 * math.tan(math.pi / 3))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    area = (1/6) * s ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6 * (side ** 2) / (4 * math.tan(math.pi / 10))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n\n    # Calculating the semi-perimeter of the tetrahedron\n    s = (side + math.sqrt(3)*side**2) / 2\n    \n    # Calculating the area of the tetrahedron\n    area = math.sqrt(s * (s - side) * (s - 2*side) * (s - 3*side))\n    \n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list by n items to the right direction.\n\n    Args:\n        lst (list): A list to be rotated.\n        n (int): The number of items to be rotated.\n\n    Returns:\n        list: The rotated list.\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # check if the rotation count exceeds the list length\n    if m >= n:\n        m = m % n\n    # rotate the list using the modulo operator\n    for i in range(m):\n        list.append(list.pop(0))"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # Calculate the new index to rotate to\n    new_index = (n + m) % n\n    # Create a new list to store the rotated elements\n    rotated_list = list[new_index:] + list[:new_index]\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # Check if the list is empty or not\n    if not list:\n        return list\n    # Check if the list has only one item\n    elif len(list) == 1:\n        return list\n    # Check if the number of items to be rotated is equal to the length of the list\n    elif m == len(list):\n        return list\n    # Check if the number of items to be rotated is less than the length of the list\n    elif m < len(list):\n        # Create a new list to store the rotated items\n        new_list = []\n        # Loop through the original list from start to end and append each item to the new list\n        for i in range(len(list)):\n            new_list.append(list[i])\n        # Loop through the new list from the end to start and append each item to the original list\n        for i in range(len(list)-1, -1, -1):\n            list[i] = new_list[i]\n        # Return the original list\n        return list\n    # If the number of items to be rotated is greater than the length of the list\n    else:\n        # Create a new list to store the rotated items\n        new_list = []\n        # Loop through the original list from start to end and append each item to the new list\n        for i in range(len(list)-1, -1, -1):\n            new_list.append(list[i])\n        # Loop through the new list from the end to start and append each item to the original list\n        for i in range(len(list)-1, -1, -1):\n            list[i] = new_list[i]\n        # Return the original list\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    if m > n:\n        raise ValueError(\"m is greater than the length of the list\")\n    elif m == 0:\n        return list\n    else:\n        # Create a new list with all the elements of the original list except the first m items\n        new_list = list[m:]\n        # Reverse the new list\n        new_list.reverse()\n        # Append the first m items of the original list to the new list\n        new_list.extend(list[:m])\n        return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    for i in range(n-m):\n        list.insert(0, list.pop())"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list `lst` and an integer `m` as input and returns the rotated list.\n    The rotated list is the list obtained by rotating `lst` by `m` items to the right direction.\n    \"\"\"\n    return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    # If m is greater than n, then the list is already rotated by m\n    if m > n:\n        return list\n    \n    # Reverse the first m elements of the list\n    list[:m] = list[:m][::-1]\n    \n    # Reverse the remaining elements of the list\n    list[m:] = list[m:][::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    \"\"\"\n    if m == 0:\n        return list\n    \n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[m:] = list[:n-m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(value is None for value in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(digit) % num == 0 for digit in str(num))\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda x: all(d in str(x) for d in str(x))\n    \n    # Use a list comprehension to generate a list of numbers within the given range\n    nums = [num for num in range(startnum, endnum+1)]\n    \n    # Filter out numbers that are not divisible by every digit they contain\n    divisible_nums = filter(is_divisible, nums)\n    \n    # Return the list of divisible numbers\n    return list(divisible_nums)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all(int(digit) % (num // 10 ** i) == 0 for i, digit in enumerate(str(num))), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(str(x)[i]) == 0 for i, d in enumerate(str(x))), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % int(d) == 0 for digit in str(x)), range(startnum, endnum + 1))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digit_lists = [int(d) for d in str(startnum)]\n    result = []\n    for i in range(startnum, endnum+1):\n        digit_list = [int(d) for d in str(i)]\n        is_divisible = all(d in digit_lists for d in digit_list)\n        if is_divisible:\n            result.append(i)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r*r*math.sin(math.radians(a/360))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    theta = math.radians(a)\n    \n    # Calculate area using formula\n    area = (r**2)*theta\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    # Convert angle from degrees to radians\n    a = math.radians(a)\n    \n    # Calculate area of sector using formula A = pi*r^2 * sin(a)\n    area = math.pi * r**2 * math.sin(a)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sector_area(r,a):\n    if a > 360:\n        return None\n    else:\n        A = math.pi * r**2\n        return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m + 1) for i in range(n + 1)] \n\n    # Step 1 \n    # Build LCS table in bottom up manner \n    for i in range(n + 1): \n        for j in range(m + 1): \n            if i == 0 or j == 0: \n                p[i][j] = 0\n            elif X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1\n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n\n    # Step 2 \n    # Starting from the bottom-right corner of the LCS table \n    # and working towards the top-left corner, \n    # construct the LCS string \n    i = n \n    j = m \n    lcs = \"\" \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return lcs "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 2D table to store lengths of LCS of substrings\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    # reconstruct the LCS string\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i - 1][j][k - 1]:\n            i -= 1\n        elif dp[i - 1][j][k] == dp[i][j - 1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # create a table to store the length of longest common subsequences for X[0:i], Y[0:j], and Z[0:k]\n    L = [[0]*(len(Z)+1) for _ in range(len(X)+1)]\n\n    # fill the table\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # return the length of the longest common subsequence\n    return L[len(X)][len(Y)][len(Z)]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    def lcs(X, Y): \n        # table to store lengths of LCS of substrings ending at i and j\n        L = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n\n        # fill the table in bottom up manner\n        for i in range(len(X) + 1): \n            for j in range(len(Y) + 1): \n                if i == 0 or j == 0: \n                    L[i][j] = 0 \n                elif X[i - 1] == Y[j - 1]: \n                    L[i][j] = L[i - 1][j - 1] + 1 \n                else: \n                    L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n        return L\n\n    # find LCS of substrings of X and Y\n    L_X = lcs(X, Y)\n\n    # find LCS of X and Z\n    L_XZ = lcs(X + Z, Y)\n\n    # find LCS of X, Y and Z\n    L_XYZ = lcs(X + Y + Z, Y + Z)\n\n    # find maximum of three LCS values\n    return max(L_X[len(X)][len(Y)], L_XZ[len(X) + len(Z)][len(Y)], L_XYZ[len(X) + len(Y) + len(Z)])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Find the length of each string\n    len_X = len(X)\n    len_Y = len(Y)\n    len_Z = len(Z)\n\n    # Initialize the table to store LCS lengths\n    table = [[0] * (len_Z + 1) for i in range(len_Y + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, len_Y + 1):\n        for j in range(1, len_Z + 1):\n            if X[i-1] == Y[i-1] and X[i-1] == Z[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Initialize the variables for LCS\n    i = len_Y\n    j = len_Z\n    lcs = ''\n\n    # Print the LCS in reverse order\n    while i > 0 and j > 0:\n        if X[i-1] == Y[i-1] and X[i-1] == Z[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Return the LCS\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Find the longest common subsequence (LCS) of three strings.\n    \"\"\"\n    # Create a 2D table to store LCS values\n    table = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the LCS as a list of characters\n    lcs = []\n    i, j = len(X), len(Y)\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS to get the original order of characters\n    return lcs[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    # Create a 3D array to store the lengths of the longest common subsequences for all prefixes of X, Y and Z\n    LCS = [[[0 for j in range(len(Z) + 1)] for i in range(len(Y) + 1)] for k in range(len(X) + 1)]\n\n    # Fill the 3D array using dynamic programming\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i - 1][j - 1][k])\n\n    # Initialize the result string\n    result = \"\"\n\n    # Backtrack to construct the result string\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            result = X[i - 1] + result\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i - 1][j][k] == LCS[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n    return result[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function takes in three strings X, Y and Z and returns the longest common subsequence (LCS) of those three strings.\n    The LCS is the longest subsequence that is common to all three strings.\n    '''\n    \n    # initialize an empty list to store the LCS for each string\n    LCS = [[0 for i in range(len(Z) + 1)] for j in range(len(Y) + 1)]\n    \n    # fill in the LCS matrix using dynamic programming\n    for i in range(1, len(Y) + 1):\n        for j in range(1, len(Z) + 1):\n            if Y[i-1] == Z[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    \n    # create a list to store the characters of the LCS\n    lcs = []\n    \n    # backtrack through the LCS matrix to find the characters of the LCS\n    i, j = len(Y), len(Z)\n    while i > 0 and j > 0:\n        if Y[i-1] == Z[j-1]:\n            lcs.append(Y[i-1])\n            i -= 1\n            j -= 1\n        elif LCS[i-1][j] > LCS[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # reverse the list to get the characters in the correct order\n    lcs.reverse()\n    \n    # return the LCS as a string\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n, m, p = len(X), len(Y), len(Z)\n    \n    # table to store lengths of LCS for all prefixes of X, Y and Z\n    table = [[[0]*(p+1) for j in range(m+1)] for i in range(n+1)]\n    \n    # fill the table in bottom up manner\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    table[i][j][k] = table[i-1][j-1][k]\n                elif X[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j][k-1]\n                elif Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i][j-1][k-1]\n                \n    # return the length of LCS\n    return table[n][m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n\n    dp = [[0] * (p+1) for i in range(m+1)] \n\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    dp[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1 \n                else: \n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]) \n\n    max_length = dp[m][n][p] \n    lcs = [] \n    i = m \n    j = n \n    k = p \n\n    while max_length > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n            max_length -= 1 \n        elif dp[i-1][j][k] == dp[i-1][j][k]: \n            i -= 1 \n        elif dp[i][j-1][k] == dp[i][j-1][k]: \n            j -= 1 \n        else: \n            k -= 1 \n\n    lcs.reverse() \n    return ''.join(lcs) "
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Find all the capital words in the given string\n    matches = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Iterate over the matches and replace them with spaces\n    for match in matches:\n        str1 = str1.replace(match,'' + match +'')\n\n    # Remove the leading and trailing spaces from the string\n    str1 = str1.strip()\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b\\w{1,}\\b'\n    words = re.findall(pattern, str1)\n    spaces_between_words = ''\n    for word in words:\n        if word[0].isupper():\n            spaces_between_words +=''\n        spaces_between_words += word\n    return spaces_between_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    \n    # Create a list to store the capitalized words\n    capitalized_words = []\n    \n    # Loop through the words and capitalize each starting with a capital letter\n    for word in words:\n        if word[0].isupper():\n            capitalized_word = re.sub('(.)([A-Z][a-z]+)', r'\\1 \\2', word)\n            capitalized_words.append(capitalized_word)\n        else:\n            capitalized_words.append(word)\n    \n    # Join the capitalized words into a string and return it\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # convert the string to lowercase and split it into words\n    words = string.lower().split()\n    # iterate over each word and capitalize the first letter if it is capitalized\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n        # replace spaces with underscores\n        words[i] = re.sub(r'[^\\w\\s]', '', words[i])\n    # join the words with underscores and return the result\n    return '_'.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all non-alphanumeric characters from the string\n    str1 = re.sub('[^a-zA-Z0-9]+','', str1)\n    \n    # split the string into words\n    words = str1.split()\n    \n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    \n    # join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern for matching capital words\n    pattern = r'\\b[A-Z][a-z]+\\b'\n\n    # Use the re.sub() function to replace all occurrences of the pattern with a space\n    result = re.sub(pattern, r'\\1 ', str1)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove non-alphanumeric characters and convert to lowercase\n    str1 = re.sub('[^a-zA-Z0-9]+', '', str1).lower()\n    # Split the string into words\n    words = str1.split()\n    # Loop through each word and add a space before the first letter if it is a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i][:1] +'' + words[i][1:]\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^\\w\\s]','', str1)\n    # split the string into words\n    words = str1.split()\n    # capitalize the first letter of each word and join them back into a string\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'(?<![a-z])[A-Z](?![a-z])', r' \\1', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Iterate through the words list and replace the capitalized words with spaces\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n\n    # Join the list of words back into a string and return the result\n    return ''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert the list to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # Use the built-in `sorted()` function to sort the list in ascending order\n    sorted_nums = sorted(nums_int)\n    # Convert the sorted list back to a list of strings\n    sorted_nums_str = [str(num) for num in sorted_nums]\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert all strings to numbers\n    nums = [float(num) for num in nums_str]\n    \n    # Sort the numbers in ascending order\n    nums.sort()\n    \n    # Convert the sorted numbers back to strings and return the list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    # create a list of all numeric strings in the list\n    numeric_strings = [str(num) for num in nums_str if num.isdigit()]\n    \n    # convert the list of numeric strings to a list of integers\n    numeric_integers = [int(num) for num in numeric_strings]\n    \n    # sort the list of integers using the built-in sorted() function\n    sorted_integers = sorted(numeric_integers)\n    \n    # convert the list of sorted integers back to a list of strings\n    sorted_strings = [str(num) for num in sorted_integers]\n    \n    # combine the sorted list of strings with the original list of strings\n    sorted_nums_str = sorted_strings + nums_str\n    \n    # return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings as input and returns the sorted list of strings of numbers in ascending order.\n    '''\n    nums_list = []\n    for num_str in nums_str:\n        try:\n            num_list = [int(x) for x in num_str.split('.')]\n            nums_list.append(num_list)\n        except ValueError:\n            nums_list.append([float(num_str)])\n    return sorted(nums_list)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: tuple(int(y) for y in x.split('.')))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # remove non-numeric characters from the strings\n    nums_str = [num for num in nums_str if num.isdigit()]\n    \n    # convert the strings to numbers\n    nums = [int(num) for num in nums_str]\n    \n    # sort the numbers in ascending order\n    nums.sort()\n    \n    # convert the sorted numbers back to strings\n    sorted_nums = [str(num) for num in nums]\n    \n    # return the sorted and formatted list of numbers\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float\n    nums_float = [float(num_str) for num_str in nums_str]\n    # Sort the list in ascending order\n    nums_float.sort()\n    # Convert the sorted list to string and return\n    return [str(num_float) for num_float in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(s) if s.isdigit() else float('inf') for s in x.split('.')])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"Tuple added to list: \", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Check if the list is a list\n    if not isinstance(test_list, list):\n        print(\"Error: The first argument must be a list.\")\n        return\n    \n    # Check if the tuple is a tuple\n    if not isinstance(test_tup, tuple):\n        print(\"Error: The second argument must be a tuple.\")\n        return\n    \n    # Add the tuple to the list\n    test_list.extend(test_tup)\n    \n    # Print the result\n    print(\"The updated list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if type(item) == tuple:\n            if all(elem in test_tup for elem in item):\n                return True\n        elif item == test_tup:\n            return True\n    return False"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If current index is 0, then array is already a min heap\n    if i == 0:\n        return True\n    \n    # If current index is greater than 0, check if parent is smaller than child\n    parent = (i-1) // 2\n    if arr[i] < arr[parent]:\n        return False\n    \n    # Recursively check if parent is smaller than grandparent\n    return check_min_heap_helper(arr, parent)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the array is a min heap or not by calling the helper function\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If i is greater than 0, then there is a parent node in the array.\n    if i > 0:\n        # Get the index of the parent node.\n        parent_index = (i - 1) // 2\n        \n        # Check if the parent node is greater than or equal to the current node.\n        if arr[i] < arr[parent_index]:\n            # If the parent node is smaller than the current node, then the array is not a min heap.\n            return False\n    \n    # If the current node has no parent, then it is a min heap.\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the array has at least one element.\n    if len(arr) <= 1:\n        # If the array has less than two elements, then it is a min heap.\n        return True\n    \n    # Iterate through the array and check if each node is a min heap.\n    for i in range(len(arr)):\n        # Call the helper function to check if the current node is a min heap.\n        if not check_min_heap_helper(arr, i):\n            # If the current node is not a min heap, then the array is not a min heap.\n            return False\n    \n    # If the loop completes without returning False, then the array is a min heap.\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # base case\n    if i == 0:\n        return True\n    \n    # left child index\n    left_child = 2*i\n    \n    # right child index\n    right_child = 2*i + 1\n    \n    # check if both children are smaller than parent\n    if arr[left_child] > arr[i] or arr[right_child] > arr[i]:\n        return False\n    \n    # check if left child is smaller than parent\n    if arr[left_child] < arr[i] and check_min_heap_helper(arr, left_child):\n        return False\n    \n    # check if right child is smaller than parent\n    if arr[right_child] < arr[i] and check_min_heap_helper(arr, right_child):\n        return False\n    \n    # if both children are smaller than parent, it means the array is not a min heap, so return False\n    return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the current node is the root node, it is always a min heap\n    if i == 0:\n        return True\n    \n    # If the parent node is greater than the current node, it is not a min heap\n    if arr[i] < arr[int((i-1)/2)]:\n        return False\n    \n    # Recursively check if the parent node is a min heap or not\n    return check_min_heap_helper(arr, int((i-1)/2))"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i >= len(arr) // 2:\n        return True\n    if i < len(arr) // 2 and arr[i] < arr[2*i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2*i + 1)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents a min heap or not.\n    \"\"\"\n    if i == 0:\n        return True\n    if arr[i] < arr[parent(i)]:\n        return False\n    return check_min_heap_helper(arr, parent(i))\n\ndef is_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, len(arr) // 2)\n\ndef parent(i):\n    \"\"\"\n    Return the parent node of the given index.\n    \"\"\"\n    return (i - 1) // 2\n\ndef left_child(i):\n    \"\"\"\n    Return the left child of the given index.\n    \"\"\"\n    return 2 * i + 1\n\ndef right_child(i):\n    \"\"\"\n    Return the right child of the given index.\n    \"\"\"\n    return 2 * i + 2\n\ndef max_heapify(arr, i):\n    \"\"\"\n    Perform the max heapify operation on the given index.\n    \"\"\"\n    largest = i\n    left = left_child(i)\n    right = right_child(i)\n\n    if left < len(arr) and arr[left] > arr[largest]:\n        largest = left\n\n    if right < len(arr) and arr[right] > arr[largest]:\n        largest = right\n\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        max_heapify(arr, largest)\n\ndef build_max_heap(arr):\n    \"\"\"\n    Build a max heap from the given array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        max_heapify(arr, i)\n\ndef heap_sort(arr):\n    \"\"\"\n    Sort the given array using heap sort.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        max_heapify(arr, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        max_heapify(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        if arr[i] < arr[int((i - 1) / 2)]:\n            return False\n        else:\n            return check_min_heap_helper(arr, int((i - 1) / 2))\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[int((i - 1) / 2)]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If the current node is not the last node, then it must be greater than both its children\n    if i < len(arr) - 1:\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n\n    # If the current node is not the root node, then it must be greater than its parent\n    if i > 0:\n        if arr[i] > arr[i // 2]:\n            return False\n\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Call the helper function to check if the array is min heap or not\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth Jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * jacobsthal_num(n-1) - jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_num = [0, 1, 1]\n    for i in range(3, n+1):\n        jacobsthal_num.append(jacobsthal_num[i-1]+jacobsthal_num[i-2])\n    return jacobsthal_num[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Returns the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal = 0\n        jacobsthal_prev = 1\n        for i in range(n - 1):\n            jacobsthal_prev, jacobsthal = jacobsthal_prev + jacobsthal, jacobsthal_prev\n        return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    c = 1\n    for i in range(n):\n        a, b, c = b, c, a + b + c\n    return c\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize variables\n    j = 0\n    k = 1\n    # check if n is 0, return 0\n    if n == 0:\n        return 0\n    # check if n is 1, return 1\n    elif n == 1:\n        return 1\n    else:\n        # loop till n-1 and calculate jacobsthal number\n        for i in range(2, n+1):\n            j = (3*j*j + k) % i\n            k = j\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    jacobsthal_num = 0\n    jacobsthal_lucas_num = 0\n\n    # First two jacobsthal numbers are 0 and 1\n    jacobsthal_num = 0\n    jacobsthal_lucas_num = 1\n\n    # Iterate for the remaining n-2 jacobsthal numbers\n    for i in range(2, n-2):\n        # Calculate jacobsthal number\n        jacobsthal_num = jacobsthal_num + (2*i - 1)\n\n        # Calculate jacobsthal lucas number\n        jacobsthal_lucas_num = jacobsthal_lucas_num + (4*i**2 - 3*i + 1)\n\n    # Return the nth jacobsthal number\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 4*jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n        test_list (list of tuples): list of tuples containing a unique ID and value.\n        K (int): number of records to find.\n\n    Returns:\n        list: list of tuples containing ID and value of the minimum k records.\n\n    \"\"\"\n    # Sort the list of tuples by value in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum k records\n    min_k_list = []\n\n    # Iterate over the sorted list and find the minimum k records\n    for i in range(K):\n        min_k_list.append(sorted_list[i])\n\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    \n    # create a list to store the sorted tuples in ascending order\n    sorted_tuples = sorted(freq_dict.items(), key=lambda x: x[1])\n    \n    # create a list to store the minimum k tuples\n    min_k_tuples = []\n    \n    # iterate over the sorted list and add k tuples to the min_k_tuples list\n    for i in range(K):\n        min_k_tuples.append(sorted_tuples[i][0])\n    \n    return min_k_tuples"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return None\n\n    # sorting the list based on the first element of tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # creating a list to store the minimum k records\n    min_list = []\n\n    # iterating through the list and adding minimum k records to the list\n    for i in range(K):\n        min_list.append(test_list[i])\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Convert list to set to remove duplicates\n    test_set = set(test_list)\n\n    # Sort the set in ascending order of first element of tuples\n    sorted_set = sorted(test_set, key=lambda x: x[0])\n\n    # Find the minimum K records\n    min_records = sorted_set[:K]\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list by the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize the minimum value and minimum index to infinity\n    min_value = float('inf')\n    min_index = -1\n\n    # Iterate through the list and update the minimum value and index\n    for i in range(K):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n\n    # Return the minimum index and value\n    return min_index, min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples (x, y) where x and y are integers and returns the minimum k records \n    from the list.\n    \"\"\"\n\n    # Sort the list of tuples in increasing order of x\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize minimum count to infinity\n    min_count = float('inf')\n\n    # Initialize minimum k count to infinity\n    min_k_count = float('inf')\n\n    # Initialize count of k records found\n    count = 0\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list)):\n        # If the current count is less than k, add one to count\n        if count < K:\n            count += 1\n\n            # If the current count is equal to k, update the minimum count and count of k records found\n            if count == K:\n                min_count = test_list[i - K + 1][0]\n                min_k_count = count\n\n        # If the current count is equal to k and the minimum count is less than the current record, update the minimum count and count of k records found\n        elif count == K and test_list[i][0] < min_count:\n            min_count = test_list[i][0]\n            min_k_count = count\n\n        # If the current count is greater than k, remove the first record and decrement the count\n        else:\n            count -= 1\n\n    # Return the minimum count of k records found\n    return min_k_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    test_list = sorted(test_list, key=lambda x: (-x[1], x[0]))\n    min_k_records = []\n    i = 0\n    while i < len(test_list) and len(min_k_records) < K:\n        min_k_records.append(test_list[i])\n        i += 1\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list based on first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize two variables to keep track of minimum k records\n    min_k_records = []\n    current_k = 0\n\n    # Iterate over the sorted list\n    for i in range(len(test_list)):\n\n        # If we have found the minimum k records, we stop\n        if current_k == K:\n            break\n\n        # If we have found the minimum k record, we add it to our list and increment k\n        elif i == len(test_list) - 1:\n            min_k_records.append(test_list[i])\n            current_k += 1\n\n        # If the current element is less than the minimum k record, we add it to our list and increment k\n        elif test_list[i][0] < test_list[min_k_records[current_k - 1][0]][0]:\n            min_k_records.append(test_list[i])\n            current_k += 1\n\n    # Return the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples (i, j, value) and returns the minimum K elements from the list.\n    :param test_list: list of tuples (i, j, value)\n    :param K: the number of elements to be returned\n    :return: a list of tuples (i, j, value) of length K containing the minimum K elements from the list\n    \"\"\"\n    # Use heapq to find the minimum K elements from the list\n    min_heap = []\n    heapq.heapify(min_heap)\n    for i, j, value in test_list:\n        heapq.heappushpop(min_heap, (value, i, j))\n    # Extract and return the minimum K elements from the list\n    min_k_elements = []\n    for _ in range(K):\n        min_k_elements.append(heapq.heappop(min_heap))\n    return min_k_elements"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list\n    '''\n    # Sort the tuple list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize variables to keep track of minimum records and count\n    min_records = []\n    count = 0\n\n    # Iterate through the sorted list and add records to min_records if count < K\n    for i in range(len(test_list)):\n        if count < K:\n            count += 1\n            min_records.append(test_list[i])\n        else:\n            break\n\n    # Return the minimum K records\n    return min_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common = []\n    # Iterate through each element in the first list\n    for i in range(len(l1)):\n        # Check if the element is in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # If the element is common, add it to the list of common elements\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the frequency of each element in each list\n    freq_dict = {}\n    for i in range(len(l1)):\n        freq_dict[l1[i]] = freq_dict.get(l1[i], 0) + 1\n    for i in range(len(l2)):\n        freq_dict[l2[i]] = freq_dict.get(l2[i], 0) + 1\n    for i in range(len(l3)):\n        freq_dict[l3[i]] = freq_dict.get(l3[i], 0) + 1\n\n    # Create a list to store the common elements\n    common_list = []\n\n    # Iterate over the frequency dictionary to find the common elements\n    for i, freq in freq_dict.items():\n        if freq == 3:\n            common_list.append(i)\n\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_list:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each index of the three lists\n    for i in range(len(l1)):\n        # Check if the element at the current index is present in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # Add the element to the common_elements list\n            common_elements.append(l1[i])\n            \n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # initialize the smallest and second smallest variables\n    smallest = second_smallest = float('inf')\n    # loop through the list and update the smallest and second smallest variables\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    # return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in descending order\n    numbers.sort(reverse=True)\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    This function finds the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    :param numbers: A list of numbers.\n    :return: The second smallest number in the list, or None if the list has fewer than two numbers.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers) if numbers[1] < min(numbers) else None"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    return bool(pattern.match(text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+a?'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]*'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b+)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - i - 1):\n            sub_list = test_list[j:j+i+1]\n            if sub_list[0] == sub_list[-1][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n\n    Args:\n    test_list (list): A list of strings.\n\n    Returns:\n    int: The count of pairs of reverse strings in the given string list.\n\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    # Initialize a dictionary to store the count of reverse pairs\n    reverse_pair_count = {}\n\n    # Loop through each string in the list\n    for string in test_list:\n        # Reverse the string\n        reversed_string = string[::-1]\n\n        # Check if the reversed string is already in the dictionary\n        if reversed_string in reverse_pair_count:\n            # Increment the count of the reverse pair\n            reverse_pair_count[reversed_string] += 1\n        else:\n            # Add the reversed string to the dictionary with a count of 1\n            reverse_pair_count[reversed_string] = 1\n\n    # Return the count of reverse pairs\n    return sum(reverse_pair_count.values())"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i+1, len(string)+1):\n                if string[i:j] == string[j:i][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert all lists to tuples\n    list1_tuples = [(tuple(i), len(list(set(i)))) for i in list1]\n    \n    # count occurrences of each tuple\n    count = {}\n    for i in list1_tuples:\n        if i[0] not in count:\n            count[i[0]] = i[1]\n        else:\n            count[i[0]] += i[1]\n    \n    # return the dictionary\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of unique lists\n    count_dict = {}\n\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n\n        # If the tuple is already in the dictionary, increment its count\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[sublist_tuple] = 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist_tuple = tuple(list1[i:j])\n            if sublist_tuple in sublist_count:\n                sublist_count[sublist_tuple] += 1\n            else:\n                sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        count = 0\n        for item in sublist:\n            if item in sublist[:count]:\n                count += 1\n        count_dict[tuple(sublist)] = count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Creating a dictionary to store the count of unique sublists\n    sublist_count = {}\n    \n    # Iterating through each element of the list\n    for i in list1:\n        # Converting the current element to a tuple and checking if it is already in the dictionary\n        if tuple(i) in sublist_count:\n            # If it is, incrementing its count by 1\n            sublist_count[tuple(i)] += 1\n        else:\n            # If it is not, adding it to the dictionary with a count of 1\n            sublist_count[tuple(i)] = 1\n    \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for sublist in list1:\n        if sublist not in unique_dict:\n            unique_dict[sublist] = 1\n        else:\n            unique_dict[sublist] += 1\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to remove duplicates and then back to a list to iterate over it\n    sublists = list(set(list1))\n\n    # Create a dictionary to store the counts of each sublist\n    count_dict = {}\n\n    # Iterate over each sublist and count its occurrences in the original list\n    for sublist in sublists:\n        count = 0\n        for item in list1:\n            if sublist in item:\n                count += 1\n        # Add the count of this sublist to the dictionary\n        count_dict[sublist] = count\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of unique sublists\n    count_dict = {}\n    # loop through each element in the list\n    for elem in list1:\n        # convert the element to a tuple\n        tuple_elem = tuple(elem)\n        # check if the tuple exists in the dictionary\n        if tuple_elem in count_dict:\n            # increment the count by 1\n            count_dict[tuple_elem] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[tuple_elem] = 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # loop through each list in the original list\n    for item in list1:\n        # convert the list to a tuple using the tuple() function\n        tuple_item = tuple(item)\n\n        # check if the tuple is already in the count dictionary\n        if tuple_item in count_dict:\n            # increment the count by 1\n            count_dict[tuple_item] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[tuple_item] = 1\n\n    # return the count dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        for sublist in item:\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in count_dict:\n                count_dict[sublist_tuple] += 1\n            else:\n                count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num:\n        point_index = num.index('.')\n        if point_index == 0 or (point_index + 2) < len(num):\n            return False\n        for i in range(point_index+1, len(num)):\n            if not num[i].isdigit():\n                return False\n    else:\n        if len(num) > 15 or len(num) == 0 or not num[0].isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num and len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if round(num, 2) == num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    # Check if the number is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the string contains any non-numeric characters\n    if any(char not in '0123456789.' for char in num):\n        return False\n    \n    # Remove any leading zeros and decimal point from the string\n    num = num.lstrip('0').rstrip('.')\n    \n    # Check if the string is a valid decimal number with a precision of 2\n    try:\n        num_int = int(num)\n        num_frac = num.split('.')[1]\n        if len(num_frac)!= 2:\n            return False\n        num_frac_int = int(num_frac)\n        if num_frac_int > 99:\n            return False\n    except ValueError:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.replace('.', '', 1).isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        # Check that the string contains at most one decimal point and no more than 2 decimal places\n        if '.' in num and len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if str(float_num) == num and str(float_num).count('.') == 1:\n            # check if the number has a precision of 2\n            decimal_part = str(float_num).split('.')[1]\n            if len(decimal_part) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if '.' in num:\n            decimal_part = num.split('.')[-1]\n            if len(decimal_part) > 2:\n                return False\n            else:\n                for digit in decimal_part:\n                    if not digit.isdigit():\n                        return False\n                return True\n        else:\n            return True\n    except Exception as e:\n        print('Error:', e)\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        decimal_point = num.index('.')\n        if len(num) - 1 - decimal_point > 2:\n            return False\n        if num[decimal_point - 1] == '0':\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Split the string into its components (integer part and fractional part)\n    int_part, frac_part = num.split('.')\n    \n    # Check if the integer part is a valid integer\n    try:\n        int(int_part)\n    except ValueError:\n        return False\n    \n    # Check if the fractional part is a valid decimal number with a precision of 2\n    if len(frac_part) > 2 or not frac_part.lstrip('0').isdigit():\n        return False\n    \n    # Check if the integer part is smaller than 1 billion\n    if len(int_part) > 9 or int(int_part) >= 10**9:\n        return False\n    \n    # The number is a valid decimal number\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Sorting the list of numbers in ascending order\n    arr.sort()\n    # Checking if the length of the sorted list is equal to 1\n    if len(arr) == 1:\n        return True\n    # Checking if the length of the sorted list is greater than 1\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n\n    count = {}\n\n    for num in arr:\n        if num in count:\n            return False\n        else:\n            count[num] = True\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if it contains only one distinct element,\n    otherwise it returns False.\n    '''\n    unique = set(arr)\n    if len(unique) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_num = []\n    for num in arr:\n        if num not in unique_num:\n            unique_num.append(num)\n        elif num in unique_num:\n            return False\n    return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 2:\n        return (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0))\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid Month Number\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2: # February\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11: # April, June, September, November\n        return True\n    else: # all other months\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the month number is between 1 and 12\n    if monthnum < 1 or monthnum > 12:\n        print(\"Invalid month number. Months are given as number from 1 to 12.\")\n        return None\n\n    # Convert the month number to string\n    monthnum_str = str(monthnum)\n\n    # Check if the length of the string is equal to 2\n    if len(monthnum_str)!= 2:\n        print(\"Invalid month number. Months are given as number from 1 to 12.\")\n        return None\n\n    # Convert the month number to integer\n    monthnum_int = int(monthnum_str)\n\n    # Check if the month number is a leap year\n    if monthnum_int % 4 == 0 and (monthnum_int % 100!= 0 or monthnum_int % 400 == 0):\n        print(\"30 days for leap years\")\n    else:\n        print(\"30 days for common years\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13):\n        if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            if monthnum3 % 2 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return months[monthnum3-1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"30 days\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"31 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum in days_in_month:\n        if days_in_month[monthnum] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n    The function uses a modified version of the merge sort algorithm to sort the array.\n    '''\n\n    # Sort the array using merge sort\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n\n            # Recursively sort left and right halves\n            merge_sort(left_half)\n            merge_sort(right_half)\n\n            # Merge sorted halves back into original array\n            i = j = k = 0\n\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] < right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                k += 1\n\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n\n    merge_sort(arr)\n\n    # Find the minimum difference\n    min_diff = abs(arr[n-1] - arr[0])\n\n    # Check if there are any differences between adjacent elements\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Find the minimum element in the array\n    min_num = arr[0]\n\n    # Iterate over the array\n    for i in range(1, n):\n        if arr[i] < min_num:\n            min_num = arr[i]\n\n    # Initialize the minimum difference to the difference between the first two elements\n    min_diff = abs(arr[1] - arr[0])\n\n    # Iterate over the remaining array elements\n    for i in range(2, n):\n        # Calculate the difference between the current element and the minimum element\n        diff = abs(arr[i] - min_num)\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    # Find the minimum value in the array\n    min_val = arr[0]\n\n    # Initialize the minimum difference to be a large value\n    min_diff = float('inf')\n\n    # Traverse through the array\n    for i in range(1, n):\n        # Find the difference between the current value and the minimum value\n        diff = arr[i] - min_val\n\n        # Update the minimum difference if the current difference is less than the minimum\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    # initialize min_diff as infinity\n    min_diff = float('inf')\n\n    # loop through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the difference between the current pair of elements\n            diff = abs(arr[i] - arr[j])\n            # if the difference is less than the current minimum difference, update min_diff\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize minimum difference as positive infinity\n    min_diff = float('inf')\n\n    # Loop through the sorted array from the first element to the last element\n    for i in range(n - 1):\n        # Calculate the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i + 1])\n\n        # Update minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n\n    # Traverse through the array and find the minimum difference between any two elements\n    for i in range(n-1):\n        # Calculate the difference between current and next element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return \"Array must have at least 2 elements\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Traverse through the array to find the minimum and maximum difference\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n        max_diff = max(max_diff, diff)\n\n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf') #initializing minimum difference as infinity\n    for i in range(n-1):\n        for j in range(i+1,n):\n            diff = abs(arr[i]-arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    # initialize the count variable to zero\n    count = 0\n    \n    # loop through each character in the string\n    for char in str:\n        \n        # check if the character is a digit\n        if char.isdigit():\n            count += 1\n    \n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Convert n to a float and round it to the nearest integer\n    n = round(float(n))\n\n    # Initialize the sum of polite numbers as 1\n    polite_sum = 1\n\n    # Check if n is less than 1 or greater than 100\n    if n < 1 or n > 100:\n        return \"Invalid input. Please enter a number between 1 and 100.\"\n\n    # Loop through each integer from 1 to n-1\n    for i in range(1, n):\n        # Check if the integer is polite\n        if math.gcd(i, n) == 1:\n            # If it is, add it to the sum\n            polite_sum += i\n\n    # Return the sum of polite numbers\n    return polite_sum"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 1\n    b = 1\n    i = 0\n    while i < n:\n        a += 1\n        b = (a * a) + (b * b)\n        i += 1\n    return b"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    def nth_polite_number(start, end):\n        polite_numbers = []\n        while len(polite_numbers) < n:\n            current = start + (end - start) // 2\n            if is_prime(current) and is_happy(current):\n                polite_numbers.append(current)\n            elif current % 2 == 0:\n                start = current + 1\n            else:\n                end = current - 1\n        return polite_numbers\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_happy(num):\n        seen = set()\n        while num not in seen:\n            seen.add(num)\n            num = sum([int(digit) ** 2 for digit in str(num)])\n        return num == 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def nth_polite(a, b, c, d):\n        x = b / a\n        y = d / c\n        if x > y:\n            return a * x - b + d\n        elif x < y:\n            return b * y - a + c\n        else:\n            return a * (x + y) - b + c - d\n\n    a, b, c, d = 1, 1, 2, 2\n    polite_number = nth_polite(a, b, c, d)\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            polite_number = nth_polite(a, b, c, d)\n        else:\n            polite_number = nth_polite(a, b, c, d) - 1\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # Check if n is odd\n    if n % 2 == 1:\n        return False\n\n    # Initialize result to 1\n    result = 1\n\n    # Loop till n\n    for i in range(1, n+1, 2):\n        result += i\n\n    # Return result\n    return result"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        k = 1\n        num = 3\n        while k < n:\n            num += 2 * k\n            k += 1\n        return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the polite number counter to 1\n    count = 1\n    \n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n    \n    # Loop through the number of terms\n    while count <= n:\n        # Calculate the square of the polite number\n        square = count ** 2\n        \n        # Add the square to the sum of squares\n        sum_of_squares += square\n        \n        # Check if the square is prime\n        if is_prime(square):\n            # If it's prime, increment the polite number counter\n            count += 1\n        else:\n            # If it's not prime, loop back to the beginning of the loop\n            count = 1\n    \n    # Calculate the nth polite number\n    nth_polite_number = math.sqrt(sum_of_squares)\n    \n    # Return the nth polite number\n    return int(nth_polite_number)\n\ndef is_prime(num):\n    '''\n    A simple function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_polite(n): \n    if n % 7 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_polite_helper(n, i):\n        if n == 1:\n            return True\n        elif n % i == 0:\n            return is_polite_helper(n // i, i)\n        else:\n            return False\n\n    def count_polite(start, end):\n        count = 0\n        for i in range(start, end + 1):\n            if is_polite_helper(i, 7):\n                count += 1\n        return count\n\n    def nth_polite_number(n):\n        if n < 1:\n            return -1\n        elif n == 1:\n            return 2\n        else:\n            end = int(math.sqrt(n))\n            start = 2\n            count = 0\n            while count < n:\n                count = count_polite(start, end)\n                start = end + 1\n                end *= 2\n            return start - 1\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    if n == 1: \n        return \"1\"\n    elif n % 2 == 0: \n        return str(2*math.sqrt(n))\n    else: \n        return str(2*math.sqrt(n) + 1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The {}th polite number is {}\".format(n, is_polite(n)))"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Initialize an empty list to store the pairs\n    pairs = []\n    # Loop through the list, starting from the second item\n    for i in range(1, len(l1)):\n        # Add the current item and the next item to the pairs list\n        pairs.append((l1[i-1], l1[i]))\n    # Return the pairs list\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return l1\n    else:\n        result = []\n        for i in range(len(l1)-1):\n            result.append((l1[i], l1[i+1]))\n        return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n):\n        if i + 1 < n:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not l1:\n        return []\n    result = []\n    i = 0\n    while i < len(l1) - 1:\n        result.append((l1[i], l1[i+1]))\n        i += 1\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        pairs = []\n        for i in range(len(l1) - 1):\n            pairs.append((l1[i], l1[i+1]))\n        return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes in a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the given sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing\n    the elements present in the first list but not in the second list.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Create an empty list to store the difference\n    diff = []\n    # Loop through the first list\n    for item in li1:\n        # If the item is not in the second list, add it to the difference list\n        if item not in li2:\n            diff.append(item)\n    # Return the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # create an empty set to store the difference between the lists\n    diff_set = set()\n    \n    # iterate through the first list\n    for item in li1:\n        # check if the item is not in the second list\n        if item not in li2:\n            # if it is, add it to the set of differences\n            diff_set.add(item)\n    \n    # convert the set to a list and return it\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Calculate the difference between the two lists\n    diff_list = list(set(li1) - set(li2))\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Initializing the empty list to store the difference\n    diff_list = []\n    # Looping through the list 1 and checking if the element is present in list 2\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    # Returning the difference list\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        num = 3 * i + 1\n        sum += num * num * num * num\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_fourth_pow = 0\n    for i in range(1, n+1, 2):\n        fourth_pow = i ** 4\n        sum_fourth_pow += fourth_pow\n    return sum_fourth_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**4)\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i**4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_powers += i**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first {} odd natural numbers is: {}\".format(n, odd_num_sum(n)))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(n):\n        sum_of_fourth_powers += i*i*i*i\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # initializing the sum variable to 0\n    sum = 0\n\n    # iterating through the first n odd natural numbers\n    for i in range(1, n+1, 2) : \n        \n        # calculating the fourth power of the current odd number\n        fourth_power = i*i*i*i\n\n        # adding the fourth power to the sum\n        sum += fourth_power\n\n    # returning the sum\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening = \"({[\"\n    closing = \")}]\"\n    pairs = {\")\": \"(\", \"]\": \"[\", \"}\": \"}\"}\n    for i in exp:\n        if i in opening:\n            stack.append(i)\n        elif i in closing:\n            if not stack:\n                return \"not balanced\"\n            if pairs[i]!= stack.pop():\n                return \"not balanced\"\n    if stack:\n        return \"not balanced\"\n    else:\n        return \"balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, c in enumerate(exp):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if open_brackets[top_char]!= char:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', ')']:\n            stack.append(i)\n        elif i.isspace():\n            continue\n        elif i == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if not (i in ['(', '[') and top == ')' or i in ['[', '{'] and top == ']' or i in ['{', '('] and top == '}'):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words with length K or less\n    result = []\n    # Loop through the words in the string\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) >= K:\n            # Append the word to the result list\n            result.append(word)\n    # Return the result string\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the given string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words that meet the criteria\n    new_words = []\n\n    # Iterate through each word in the original list\n    for word in words:\n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            # If it is, append it to the new list of words\n            new_words.append(word)\n\n    # Join the new list of words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Loop through each word in the words list\n    for i in range(len(words)):\n        \n        # If the length of the word is greater than K, remove it from the list\n        if len(words[i]) > K:\n            words.pop(i)\n            i -= 1 # Decrement the index to keep the loop running\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into words\n    new_words = [] # empty list to store new words\n    for word in words: # loop through each word\n        if len(word)!= K: # if the length of the word is not equal to K\n            new_words.append(word) # append the word to the new_words list\n    return''.join(new_words) # join the new words back into a string with spaces between them"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    # Compile the pattern\n    pattern = re.compile(pattern)\n    # Search for the pattern in the text\n    match = pattern.search(text)\n    if match:\n        # Return the match object\n        return match\n    else:\n        # Return None if there is no match\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            print(f\"The substring '{match}' occurs {matches.count(match)} times at position {text.find(match)}\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            match_index = text.find(match)\n            print(f\"Match found: {match} at index {match_index}.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regex to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Check if there are any matches\n    if matches:\n        # Iterate through each match and print its position and occurrence\n        for match in matches:\n            print(f\"Match found at position {match.start()} and occurrence {match.group()}\")\n        return None\n    else:\n        print(\"No match found\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return f\"The pattern {pattern} appears {match.group()}'s in the string '{text}'. It occurs {match.start()} times at position {match.start()}.\"\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    # find all the occurrences of pattern in text\n    occurrences = re.findall(pattern, text)\n    \n    # check if any occurrence is found\n    if not occurrences:\n        return None\n    \n    # get the position of each occurrence and return them in a list\n    position_list = []\n    for index, occurrence in enumerate(occurrences):\n        position_list.append(text.index(occurrence))\n    \n    return position_list"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(int(digit) for digit in str(nums[i])) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(0, len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            odd_count += 1\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:  # check if i is even\n            continue\n        else:  # check if nums[i] is odd\n            if nums[i] % 2 == 1:\n                return False\n            else:\n                continue\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # create a list of odd numbers\n    odd_nums = [num for num in nums if num % 2!= 0]\n    \n    # check if every odd index has at least one odd number in the list\n    for i in range(0, len(nums), 2):\n        if nums[i] not in odd_nums:\n            return False\n    \n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n        else:\n            if nums[i] % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    # Initialize a boolean variable to track if all odd positions are filled\n    is_all_odd = True\n\n    # Loop through the list and check if each odd index is filled with odd numbers\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and nums[i] % 2!= 0:\n            # If the current number is odd and not an even multiple of 2, increment the count of odd positions\n            is_all_odd = False\n            break\n\n    return is_all_odd"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0 and (nums[i] % 2!= 0 or nums[i] == 0):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u']) # Set of vowels\n    \n    count = 0\n    \n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u']) #creating a set of vowels\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels and test_str[i+1] in vowels):\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i!= 0 and i!= len(test_str)-1:\n            if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    This function takes in a list of integers and returns the sum of all non-repeated elements.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(arr)\n    # Calculate the sum of the unique elements\n    sum_unique_elements = sum(unique_elements)\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a set to keep track of the elements we have seen\n    seen = set()\n    # Initialize a variable to store the sum of the non-repeated elements\n    total = 0\n    # Iterate over the list\n    for num in arr:\n        # If the element is not already in the set, add it and add its value to the total\n        if num not in seen:\n            seen.add(num)\n            total += num\n    # Return the total sum of the non-repeated elements\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_elements = set(arr)\n    \n    # sum of unique elements\n    sum_unique = sum(unique_elements)\n    \n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize an empty dictionary to store the count of each element in the list\n    count = {}\n    \n    # Iterate through each element in the list\n    for element in arr:\n        # If the element is already in the dictionary, increment its count\n        if element in count:\n            count[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count[element] = 1\n    \n    # Initialize an empty list to store the non-repeated elements\n    non_repeated = []\n    \n    # Iterate through each element in the dictionary and add it to the non_repeated list if its count is 1\n    for element, count in count.items():\n        if count == 1:\n            non_repeated.append(element)\n    \n    # Return the sum of the non-repeated elements\n    return sum(non_repeated)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # convert the set to list and sort it\n    sorted_list = sorted(list(unique_set))\n    # initialize the sum to zero\n    sum = 0\n    # iterate through the sorted list and add the elements to the sum\n    for i in sorted_list:\n        sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # Loop through the list and count the occurrence of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Calculate the sum of the non-repeated elements\n    total_sum = 0\n    for num in count_dict:\n        if count_dict[num] == 1:\n            total_sum += num\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Removing duplicates from the given list\n    unique_list = list(set(arr))\n    # Finding the sum of non-repeated elements\n    sum_unique = sum(unique_list)\n    # Returning the sum\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # Create a dictionary to store the elements and their counts\n    element_count = {}\n\n    # Loop through the list and update the dictionary\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n\n    # Initialize the sum variable\n    total_sum = 0\n\n    # Loop through the dictionary to calculate the sum of non-repeated elements\n    for element in element_count:\n        if element_count[element] == 1:\n            total_sum += element\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element\n    count_dict = {}\n    for elem in arr:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    # create a list to store the non-repeated elements\n    non_repeated_list = []\n    for elem in arr:\n        if count_dict[elem] == 1:\n            non_repeated_list.append(elem)\n    \n    # find the sum of the non-repeated elements\n    non_repeated_sum = sum(non_repeated_list)\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # use the length of the unique set as the sum of non-repeated elements\n    return len(unique_set)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(lst) if not k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k, list(g)] for k, g in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list of elements and groups them into sublists,\n    where consecutive duplicates of an element are packed into sublists.\n\n    Example:\n    Input: [1, 2, 3, 2, 3, 4, 2, 3, 5]\n    Output: [[1, 2, 2], [3, 3, 4], [5]]\n\n    Args:\n        lst (list): A list of elements.\n\n    Returns:\n        list: A list of sublists, where consecutive duplicates of the same element are combined into sublists.\n    \"\"\"\n\n    # Group the list by consecutive duplicates of the same element\n    grouped_lst = groupby(lst, lambda x: x)\n\n    # Extract the sublists from the grouped list\n    packed_lst = [list(group) for _, group in grouped_lst]\n\n    return packed_lst"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list and returns a list of lists, where each sublist contains \n    consecutive duplicates of the input list. For example, if the input list is [1, 2, 3, 4, 5, 4], \n    the function will return [[1, 2, 3], [4, 5]].\n    \"\"\"\n    # use groupby() function to group consecutive duplicates of the list elements\n    grouped = groupby(lst)\n    # convert grouped object into a list of lists\n    result = [list(group) for key, group in grouped]\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(enumerate(list1), lambda x: x[1] == x[0])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby to group the list elements\n    grouped_list = groupby(list1)\n    # Initialize an empty list to store the packed sublists\n    packed_list = []\n    # Iterate over the grouped list\n    for key, group in grouped_list:\n        # Check if the group has only one element\n        if len(list(group)) == 1:\n            # If yes, add the group to the packed list as a single element list\n            packed_list.append(list(group))\n        else:\n            # If not, pack the consecutive duplicates into sublists and add them to the packed list\n            for sublist in group:\n                if sublist not in packed_list[-1]:\n                    # If the sublist is not already in the last sublist, add it to the list\n                    packed_list[-1].append(sublist)\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if type(i) is tuple:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n\n    # Iterate over all the lists in the list1\n    for lst in list1:\n\n        # Convert the list to a tuple and check if it is already a key in the count_dict\n        if tuple(lst) in count_dict:\n            # Increment the count of the corresponding tuple\n            count_dict[tuple(lst)] += 1\n        else:\n            # Add the tuple to the count_dict with a count of 1\n            count_dict[tuple(lst)] = 1\n\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_count:\n            sublist_count[sublist_tuple] = 1\n        else:\n            sublist_count[sublist_tuple] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[k] for k in range(i, j))\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    counts = {}\n\n    # Loop through each list in the main list\n    for sublist in list1:\n        # Create a tuple from the sublist\n        tup = tuple(sublist)\n        # Check if the tuple is in the dictionary\n        if tup in counts:\n            # Increment the count of the tuple in the dictionary\n            counts[tup] += 1\n        else:\n            # If the tuple is not in the dictionary, add it and set its count to 1\n            counts[tup] = 1\n\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = list(set(map(tuple, list1)))\n    sublist_count = {}\n    for i in range(len(list1)):\n        if list1[i] not in sublist_count:\n            sublist_count[list1[i]] = 1\n        else:\n            sublist_count[list1[i]] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    counts = {}\n    for sublist in list1:\n        if sublist not in counts:\n            counts[sublist] = 1\n        else:\n            counts[sublist] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    Count the number of unique sublists in a list.\n    \n    Args:\n    lst (list): A list of lists.\n    \n    Returns:\n    dict: A dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in lst:\n        sublist_tuple = tuple(i)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        count_dict[tuple(sublist)] = count_dict.get(tuple(sublist), 0) + 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in sublist_dict:\n            sublist_dict[tuple_sublist] += 1\n        else:\n            sublist_dict[tuple_sublist] = 1\n    return sublist_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # define a function to find the sum of tuples\n    def find_sum(t):\n        return sum(t)\n    \n    # find all possible combinations of tuples with duplicates\n    for i in combinations(test_list, len(test_list)):\n        # calculate the sum of each combination and store it in a set to remove duplicates\n        combo_sum = set(find_sum(t) for t in i)\n        # check if the sum is equal to the sum of the whole list\n        if combo_sum == set(find_sum(test_list)):\n            # if the sum is equal to the sum of the whole list, print the combination\n            print(i)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize the empty list to store the combinations\n    combinations_list = []\n\n    # Loop through each tuple in the given tuple list\n    for i in range(len(test_list)):\n        # Loop through each tuple in the given tuple list\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the two tuples is equal to the next index in the list\n            if sum(test_list[i]) == test_list[j]:\n                # If yes, add the combination to the list\n                combinations_list.append((test_list[i], test_list[j]))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of tuples to store the unique combinations\n    combinations_set = set()\n\n    # iterate over all possible subsets of the given tuple list\n    for i in range(1, len(test_list) + 1):\n        for subset in combinations(test_list, i):\n            # convert the subset to a tuple and calculate its sum\n            combination_sum = sum(subset)\n            # check if the combination sum is already in the set\n            if combination_sum in combinations_set:\n                # if it is, add the subset to the set of combinations\n                combinations_set.add(subset)\n\n    # convert the set of combinations back to a list and return it\n    return list(combinations_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            print(tuple(test_list[i])+tuple(test_list[j]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the given tuple list\n    sorted_list = sorted(test_list)\n\n    # Loop through each combination of three elements\n    for i in range(len(sorted_list) - 2):\n        for j in range(i + 1, len(sorted_list) - 1):\n            for k in range(j + 1, len(sorted_list)):\n                # Find the sum of the three elements in the combination\n                total_sum = sorted_list[i][0] + sorted_list[j][0] + sorted_list[k][0]\n\n                # Check if the total sum is equal to the sum of the remaining two elements\n                if total_sum == sorted_list[i][1] + sorted_list[j][1]:\n                    # Print the combination of elements\n                    print(sorted_list[i], sorted_list[j], sorted_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function will find all the combinations of sums with tuples in the given tuple list. \n    '''\n    combinations_set = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if (test_list[i][0]+test_list[j][0]+test_list[k][0]) == test_list[i][1]:\n                    combinations_set.add((test_list[i],test_list[j],test_list[k]))\n    return combinations_set"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    combinations_list = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combination = tuple(sorted([test_list[k] for k in range(i, j)]))\n            combinations_list.append(combination)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) == sum(test_list[k]):\n                    print(\" \".join(map(str, test_list[i])), \":\", \" \".join(map(str, test_list[j])), \":\", \" \".join(map(str, test_list[k])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set to store unique tuples \n    unique_tuples = set(test_list)\n    # Create a dictionary to store the combination and its sum\n    comb_dict = {}\n    for i in range(len(unique_tuples)):\n        for j in range(i+1, len(unique_tuples)):\n            # Calculate the sum of two tuples \n            sum_tuple = tuple(map(sum, zip(unique_tuples[i], unique_tuples[j])))\n            # Check if the sum is already present in the dictionary\n            if sum_tuple in comb_dict:\n                # If yes, add the combination to the list of existing combinations\n                comb_dict[sum_tuple].append((unique_tuples[i], unique_tuples[j]))\n            else:\n                # If not, create a new list for the combination and add both tuples to it\n                comb_dict[sum_tuple] = [(unique_tuples[i], unique_tuples[j])]\n    # Print the combination and its sum for each unique tuple in the list\n    for key, val in comb_dict.items():\n        print(key, val)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns a list of all the combinations of sums with tuples in the given tuple list. \n    \"\"\"\n    def helper(lst, target, temp, res):\n        \"\"\"\n        This is a recursive helper function that helps to find all combinations of sums with tuples in the given tuple list. \n        \"\"\"\n        if not lst:\n            # If the list is empty, return the result\n            if sum(temp) == target:\n                res.append(tuple(temp))\n            return\n\n        # Add the first element of the list to the temp list\n        temp.append(lst[0])\n\n        # Recursively call the helper function for the rest of the list and remove the first element\n        helper(lst[1:], target, temp, res)\n\n        # Remove the first element from the temp list\n        temp.pop()\n\n    # Initialize the result list and the temp list with an empty list\n    res = []\n    temp = []\n\n    # Call the helper function with the given list and target sum\n    helper(test_list, sum(test_list), temp, res)\n\n    return res"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # count the number of divisors \n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n            if n // i!= i: \n                count += 1\n    \n    # check if the count of divisors is even or odd \n    if count % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    divisor = 1\n    \n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            divisors_count += 2\n        divisor += 1\n    \n    if n % divisor == 0:\n        divisors_count += 1\n    \n    if divisors_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n        if n // i == i:\n            divisor_count += 1\n    if divisor_count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a Python function to count the number of divisors of a given integer n.\n    The function should return True if the count of divisors is even, else False.\n    \"\"\"\n    def count_divisor(num):\n        \"\"\"\n        Helper function to count the number of divisors of a given number.\n        \"\"\"\n        count = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                count += 1\n                if i!= num // i:\n                    count += 1\n        return count\n\n    divisors_count = count_divisor(n)\n    if divisors_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    # Calculate the count of divisors\n    divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors += 1\n            if n // i!= i:\n                divisors += 1\n\n    # Check if the count of divisors is even\n    if divisors % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function calculates the number of divisors of a number n.\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_count += 1\n            if n // i!= i:\n                divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes an integer as input and returns the count of its divisors. \n    It calculates the number of divisors of the number using the math.factorial() function.\n    The function then checks whether the count of divisors is even or odd.\n    '''\n    num_divisors = math.factorial(n)\n    count = 0\n    for i in range(1, int(num_divisors) + 1):\n        if num_divisors % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(f'{n} has an even count of divisors')\n    else:\n        print(f'{n} has an odd count of divisors')"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return True\n    else:\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n%i == 0:\n                count += 1\n        if count % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    if n > 2 and n % 2 == 0:\n        count += 1\n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Initialize the current sum variable to 0\n        current_sum = 0\n        \n        # Loop through the current subarray from index i to the end of the array\n        for j in range(i, len(arr)):\n            # Add the current element to the current sum\n            current_sum += arr[j]\n            \n            # Check if the current subarray is of odd length\n            if j - i + 1 % 2 == 1:\n                # Add the current sum to the overall sum\n                sum += current_sum\n                \n    # Return the overall sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            total_sum += arr[j-1]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j - i == 1:\n                sum += arr[i] + arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of all odd length subarrays\n    total_sum = 0\n    \n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Calculate the sum of all odd length subarrays from index i to the end of the array\n        subarray_sum = sum([arr[j] for j in range(i, len(arr)) if j % 2 == 1])\n        # Add the sum of all odd length subarrays from index i to the end of the array to the total sum\n        total_sum += subarray_sum\n        \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd = 0\n    # Initialize two pointers, one for odd length subarray and another for even length subarray\n    i = 0\n    j = 0\n    # Traverse through the array\n    while i < n and j < n:\n        # If the current element is odd\n        if arr[i] % 2!= 0:\n            # Check if the sum of odd length subarray is less than or equal to the current element\n            if sum_odd <= arr[i]:\n                sum_odd += arr[i]\n            # If the sum of odd length subarray is greater than the current element, then subtract the sum of the previous odd length subarray from the sum of the current odd length subarray\n            else:\n                sum_odd = sum_odd - (j - i + 1) * arr[j]\n        # If the current element is even\n        else:\n            # If the sum of even length subarray is less than or equal to the current element\n            if sum_odd <= arr[i]:\n                sum_odd += arr[i]\n            # If the sum of even length subarray is greater than the current element, then add the difference between the current element and the sum of the previous even length subarray to the sum of the current even length subarray\n            else:\n                sum_odd = sum_odd + (j - i) * arr[j - 1]\n        # Move the pointers\n        i += 1\n        j += 1\n    # Return the sum of odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum += arr[j-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        n = len(arr)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                dp[i] = dp[i - 1]\n            else:\n                dp[i] = arr[i - 1] + dp[i - 1]\n        return dp[n]"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, min(i+5, len(arr))+1):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum_odd_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_odd_length += arr[j-1]\n    return sum_odd_length"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n    Parameters:\n    r - int, red value between 0 and 255\n    g - int, green value between 0 and 255\n    b - int, blue value between 0 and 255\n\n    Returns:\n    h - int, hue value between 0 and 360\n    s - int, saturation value between 0 and 100\n    v - int, value value between 0 and 100\n    '''\n\n    # Find minimum and maximum values of RGB\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate difference between max and min values\n    diff = max_val - min_val\n\n    # Calculate hue value\n    if max_val == r:\n        h = (g - b) / diff\n    elif max_val == g:\n        h = 2 + (b - r) / diff\n    else:\n        h = 4 + (r - g) / diff\n\n    # Convert hue value to 360 degrees if it is less than 0\n    if h < 0:\n        h += 6\n\n    # Calculate saturation value\n    if diff == 0:\n        s = 0\n    else:\n        s = diff / max_val * 100\n\n    # Calculate value value\n    v = max_val\n\n    return int(h * 360), int(s), int(v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if max_value == min_value:\n        hue = 0\n    elif max_value == r:\n        hue = ((g - b) / delta) % 6\n    elif max_value == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = hue * 60\n    if hue < 0:\n        hue += 360\n    return (hue, delta * 100, max_value * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes in three values representing the red, green, and blue components of an RGB color and returns a tuple of the hue, saturation, and value components of the HSV color equivalent.\n    '''\n\n    # Convert the RGB values to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Get the maximum and minimum values of the RGB components\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values of RGB components\n    diff = max_val - min_val\n\n    # Calculate the saturation and value components of the HSV color\n    if diff == 0:\n        hue = 0\n        saturation = 0\n    else:\n        if max_val == r:\n            hue = (g - b) / diff\n        elif max_val == g:\n            hue = 2 + (b - r) / diff\n        else:\n            hue = 4 + (r - g) / diff\n\n        saturation = diff / max_val\n\n        if saturation == 0:\n            value = max_val\n        else:\n            if max_val == 1:\n                value = max_val\n            else:\n                value = min_val\n\n    # Convert the HSV values to a tuple and return them\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Get the maximum and minimum values of the RGB color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r and g >= b:\n        hue = 60 * ((g - b) / (max_val - min_val))\n    elif max_val == r and g < b:\n        hue = 60 * ((g - b) / (max_val - min_val)) + 360\n    elif max_val == g:\n        hue = 60 * ((b - r) / (max_val - min_val)) + 120\n    elif max_val == b:\n        hue = 60 * ((r - g) / (max_val - min_val))\n    \n    # Calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n    \n    # Calculate the value\n    value = max_val\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    saturation = 0\n    hue = 0\n\n    if delta == 0:\n        hue = 0\n    elif max_color == r:\n        hue = 60 * ((g - b) / delta)\n    elif max_color == g:\n        hue = 60 * (2 + (b - r) / delta)\n    else:\n        hue = 60 * (4 + (r - g) / delta)\n\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_color\n\n    hsv_color = (hue, saturation, max_color)\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n\n    delta = max_color - min_color\n\n    if delta == 0:\n        h = 0\n    elif max_color == r:\n        h = (g - b) / delta\n    elif max_color == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h / 6.0\n\n    if h < 0:\n        h += 1\n\n    v = max_color\n\n    s = delta / (1 - abs(2 * h - 1))\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB values to the range of 0-255\n    r, g, b = r / 255, g / 255, b / 255\n    \n    # Find the maximum and minimum values in the RGB color\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    # Find the range of the color values\n    range_value = max_value - min_value\n    \n    # Find the saturation value\n    if max_value == 0:\n        h = 0\n    else:\n        h = (max_value - min_value) / max_value\n    \n    # Find the hue value\n    if max_value == r:\n        h = (g - b) / range_value + (h * 6)\n    elif max_value == g:\n        h = (b - r) / range_value + 2\n    elif max_value == b:\n        h = (r - g) / range_value + 4\n    \n    # Find the value of the color\n    v = max_value\n    \n    # Convert HSV values to the range of 0-1\n    h, s, v = h / 6, s / range_value, v\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    h, s, v = 0, 0, 0\n    \n    # calculate maximum and minimum values of rgb color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # calculate value of chroma\n    chroma = max_val - min_val\n    \n    # calculate value of hue\n    if max_val == r:\n        h = (g - b) / chroma\n    elif max_val == g:\n        h = 2 + (b - r) / chroma\n    else:\n        h = 4 + (r - g) / chroma\n    \n    # calculate value of saturation\n    if chroma == 0:\n        s = 0\n    else:\n        s = chroma / max_val\n    \n    # calculate value of value\n    v = max_val\n    \n    # calculate value of hue in degrees\n    h = h * 60\n    if h < 0:\n        h += 360\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert R, G, and B values to float values\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Convert R, G, and B values to their respective Hue, Saturation, and Value components\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0.0\n    s = 0.0\n    v = max_val\n\n    if delta == 0.0:\n        h = 0.0\n    elif max_val == r:\n        h = 60.0 * (((g - b) / delta) % 6.0)\n    elif max_val == g:\n        h = 60.0 * (((b - r) / delta) + 2.0)\n    else:\n        h = 60.0 * (((r - g) / delta) + 4.0)\n\n    h = h / 360.0\n\n    if delta == 0.0:\n        s = 0.0\n    else:\n        s = delta / (1.0 - abs(2.0 * max_val - 1.0))\n\n    return (int(h * 255.0), int(s * 255.0), int(v * 255.0))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, and b to float values\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find the minimum and maximum values in the RGB color space\n    minimum = min(r, g, b)\n    maximum = max(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = maximum - minimum\n\n    # Calculate the hue by finding the angle between the RGB color and the X axis\n    if maximum == r:\n        hue = 60 * ((g - b) / diff)\n    elif maximum == g:\n        hue = 60 * ((b - r) / diff + 2)\n    else:\n        hue = 60 * ((r - g) / diff + 4)\n\n    # Ensure that the hue value is between 0 and 360 degrees\n    if hue < 0:\n        hue += 360\n\n    # Calculate the saturation by finding the difference between the maximum and minimum values and the difference between maximum and the lighter color\n    if maximum == 0:\n        saturation = 0\n    else:\n        saturation = diff / maximum\n\n    # Calculate the value by finding the difference between the maximum and minimum values\n    value = maximum\n\n    # Return a tuple of the hue, saturation, and value\n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            product *= i\n            count += 1\n            if count == 2:\n                break\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n\n    if even_count == 0 or odd_count == 0:\n        return 0\n    else:\n        return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even_num = None\n    odd_num = None\n    # Loop through each number in the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If the number is even, set the even_num variable to the current number\n            even_num = num\n        else:\n            # If the number is odd, set the odd_num variable to the current number\n            odd_num = num\n        # If both even and odd numbers are set, break out of the loop\n        if even_num is not None and odd_num is not None:\n            break\n    # If both even and odd numbers are set, return their product\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        # If not, return None\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return 'No even or odd number found in the list.'"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return even_product * odd_product\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return even_product * odd_product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list of integers as input and returns the product of the first even and odd numbers of the list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert each string in the list to an integer\n    int_list = [int(x) for x in str_list]\n    \n    # Convert the integer list to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    Parameters:\n    test_str (str): A string containing tuple values separated by commas.\n\n    Returns:\n    tuple: A tuple containing integers extracted from the input string.\n    \"\"\"\n    # Split the input string into a list of substrings separated by commas\n    substrings = [s.strip() for s in test_str.split(\",\")]\n\n    # Create a tuple of integers by converting each substring to an integer\n    int_tuple = tuple(int(s) for s in substrings)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove any spaces from the string\n    test_str = test_str.replace(\" \", \"\")\n    # Split the string into a list of integers and a string\n    int_list = list(map(int, test_str.split(\",\")))\n    # Convert the string to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for item in test_str:\n        try:\n            result.append(int(item))\n        except ValueError:\n            pass\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        int_list = [int(i) for i in test_str.replace('(', '').replace(')', '').replace(',','').split()]\n        return tuple(int_list)\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of strings based on the comma delimiter\n    tup_str = test_str.split(',')\n    \n    # Initialize an empty list to store the converted integers\n    int_list = []\n    \n    # Loop through each element in the list\n    for element in tup_str:\n        # Convert the element to an integer\n        int_elem = int(element)\n        # Append the integer to the list\n        int_list.append(int_elem)\n    \n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n    \n    # Return the tuple of integers\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n\n    # Convert the tuple string to a list of integers\n    int_list = [int(i) for i in test_str]\n\n    # Convert the list of integers to a tuple\n    result_tuple = tuple(int_list)\n\n    return result_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to list\n    test_list = list(test_str)\n    # create empty integer list\n    int_list = []\n    # iterate through each character in the list\n    for char in test_list:\n        # check if the character is a digit\n        if char.isdigit():\n            # if it is, convert it to an integer and append it to the integer list\n            int_list.append(int(char))\n        else:\n            # if it's not a digit, skip it\n            continue\n    # convert the integer list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\"))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for i in range(len(test_str)):\n        if test_str[i] == ',':\n            result.append(int(result[-1]))\n        elif test_str[i] == ':':\n            result.append(tuple(result[-1]))\n        else:\n            result.append(int(test_str[i]))\n    return tuple(result)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Define a function to compare the elements of two lists\n    def compare(a, b):\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n    \n    # Use the bisect.bisect_right() function to locate the insertion point\n    index = bisect.bisect_right(a, x, lo=0, hi=len(a))\n    \n    # Return the index of the right insertion point\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    This function takes in a sorted list of numbers and a value x. It returns the right insertion point for x in the sorted list.\n    If x is not present in the list, it returns the index at which it should be inserted.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a):\n        return index + 1\n    else:\n        return len(a)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Find the index where to insert x\n    index = bisect.bisect_right(a, x)\n\n    # If the value is already present, return the index\n    if a[index] == x:\n        return index\n\n    # If the value is greater than the element at index, increment the index\n    if index == len(a):\n        return index\n\n    if a[index] > x:\n        return index - 1\n\n    # If the value is less than the element at index, decrement the index\n    if a[index] < x:\n        return index\n\n    # If the value is equal to the element at index, increment the index and repeat the process\n    while a[index] == x:\n        index += 1\n\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b.*'\n    return bool(re.match(pattern, text))\n\ntext = \"aababab\"\nprint(text_match_three(text))  # Output: True\n\ntext = \"aaaaabbb\"\nprint(text_match_three(text))  # Output: False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[a]b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a(b{3})')\n    result = pattern.search(text)\n    if result:\n        print(f\"The matched string is: {result.group()}\")\n    else:\n        print(\"No match found.\")\n\ntext = \"a1b2b3b4c5\"\ntext_match_three(text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w{2}b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=b{3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # split the string into a list\n    str_list = test_str.split()\n    # create a new tuple with the list and string as elements\n    new_tuple = (test_list, str_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple and concatenate it with the given string\n    new_tuple = (test_str, tuple(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of integers.\n        test_str (str): A string of characters.\n\n    Returns:\n        tuple: A new tuple created from the given string and list.\n\n    Examples:\n        >>> new_tuple([1, 2, 3], \"Hello\")\n        (1, 2, 3, 'H', 'e', 'l', 'l', 'o')\n    \"\"\"\n    return tuple(test_str + str(elem) for elem in test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list + test_str, )"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to tuple\n    new_list = tuple(test_list)\n    # concatenate the two tuples\n    new_tuple = (new_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert the list to a tuple\n    new_tuple = tuple(test_list)\n    # concatenate the string with the tuple\n    new_tuple = new_tuple + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(test_str)\n\n    # Reverse the order of the characters in the list\n    reversed_chars = chars[::-1]\n\n    # Combine the characters in the list and the string\n    combined_chars = reversed_chars + test_str\n\n    # Convert the combined string to a tuple\n    new_tuple = tuple(combined_chars)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for j in nums[i:]:\n            if j % 2 == 0:\n                even_count += 1\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += nums[i]\n            if even_count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len(set([nums[i+j] for j in range(2)]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    even_found = True\n    for i in range(len(nums)):\n        if i % 2 == 1:  # if i is odd, it's not even, so move on to the next index\n            continue\n        even_count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                even_count += 1\n                if even_count > 1:\n                    even_found = False\n                    break\n        if not even_found:\n            break\n    return even_found"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if the index is even\n            if nums[i] % 2 == 0: # check if the number at the even index is even\n                continue # skip to the next index if the number is even\n            else:\n                return False # if the number is odd, return False\n    return True # if we made it through the loop without returning False, return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a variable to store the count of even numbers in each index\n    even_counts = [0] * (len(nums) // 2 + 1)\n    # Loop through each number in the list\n    for num in nums:\n        # Check if the current number is even\n        if num % 2 == 0:\n            # Increment the count of even numbers in the current index\n            even_counts[num // 2] += 1\n    # Loop through each index in the even_counts list and check if there are any odd numbers left\n    for count in even_counts:\n        if count % 2!= 0:\n            return False\n    # If we make it through the loop without returning False, then the list contains every even index with an even number of even numbers\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return list(map(remove_nested, test_tup))\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_tuples(lst):\n        return [item for sublist in lst for item in sublist if isinstance(item, tuple) is False]\n    return tuple(remove_tuples(test_tup))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    while True:\n        try:\n            test_tup = next(test_tup)\n        except StopIteration:\n            break\n        if isinstance(test_tup, tuple):\n            test_tup = remove_nested(test_tup)\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = [x for tup in test_tup for x in tup]\n    return [x for x in flat_list if type(x)!= tuple]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            test_tup = test_tup[:i] + test_tup[i+1:]\n            i = 0\n    return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    count = 0 \n    for i in input_list: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_lists(input_list): \n    count = 0 \n    for i in input_list: \n        if isinstance(i, list): \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Count the number of sublists in a given list.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n            break\n    return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    n = len(arr)\n    while i < n and arr[i] < x:\n        i += 1\n    if i == n:\n        return -1\n    while i < n and arr[i] == x:\n        i += 1\n    return i - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments, arr which is the sorted array and x which is the element to be searched for in the array.\n    The function returns the index of the last occurrence of the element in the array or -1 if the element is not found in the array.\n    '''\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            while mid + 1 < len(arr) and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    mid = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            # If we found the element, return its index\n            return mid\n        elif arr[mid] < x:\n            # If we're looking for an element that's greater than x, narrow down the search\n            low = mid + 1\n        else:\n            # If we're looking for an element that's less than x, narrow down the search\n            high = mid - 1\n\n    # If we didn't find the element, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and an element x as input.\n    It returns the last position of the element x in the array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return None\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        if arr[i] == x:\n            return i\n        i += 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    n = len(arr)\n    while i < n and arr[i]!= x:\n        i += 1\n    return i if i < n else -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    result = re.search(pattern, text)\n    if result:\n        print(\"Match found\")\n        print(\"Start of match:\", result.start())\n        print(\"End of match:\", result.end())\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=^| )a.*b(?=$| )'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found.\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=[^a])[ab](?=[^b])'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<![a-z])a(?!\\w)' + r'\\w+b(?!\\w)'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w+b$'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dict.values():\n        sum_of_items += item\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Take input from the user for the range of natural numbers\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    \n    # Initialize a variable to store the sum of odd natural numbers\n    total_sum = 0\n    \n    # Loop through the range of natural numbers and add the odd numbers to the total_sum\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total_sum += i\n    \n    # Print the total sum of odd natural numbers\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is\", total_sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take input for range l and r\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    # initialize the sum to 0\n    total_sum = 0\n\n    # loop through the range of numbers\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the number to the sum\n            total_sum += i\n\n    # print the sum\n    print(\"The sum of all odd numbers in the range\", l, \"to\", r, \"is:\", total_sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the range of numbers: \").split())\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n\nprint(\"The sum of all odd natural numbers within the range is:\", sum_odd(10))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # iterate through range of numbers from 1 to n\n    for i in range(1, n+1):\n        # check if number is odd and within range\n        if i % 2!= 0 and i <= n:\n            # add number to sum\n            sum += i\n            \n    # return sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable\n    sum = 0\n    \n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add i to sum variable\n        sum += i\n    \n    # return sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take input for range of natural numbers\n    l, r = map(int, input(\"Enter range of natural numbers (l,r): \").split())\n\n    # initialize sum variable to zero\n    sum_odd = 0\n\n    # iterate over the range of natural numbers from l to r\n    for i in range(l, r+1):\n        # check if i is odd\n        if i % 2!= 0:\n            # add i to the sum\n            sum_odd += i\n\n    # return the sum\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n, 0, -1):\n        if i % 2!= 0:\n            s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Get input range\n    l, r = map(int, input(\"Enter lower and upper range: \").split())\n\n    # Initialize sum to 0\n    total = 0\n\n    # Loop through range of natural numbers within input range\n    for i in range(l, r+1):\n        # Check if number is odd\n        if i % 2 == 1:\n            # Add number to total\n            total += i\n\n    # Print total sum\n    print(\"The sum of all odd natural numbers within the range is:\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2): \n        # add each odd number to sum variable\n        sum += i\n\n    # return sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate over the array and add each element to the sum\n    for num in arr:\n        sum += num\n    \n    # Return the final sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0  \n    for num in arr:  \n        sum += num  \n    return sum  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_array(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0  \n    for num in arr:  \n        total += num  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\ndef find_sum(arr):\n    '''\n    Find the sum of an array using a helper function _sum.\n    '''\n    if len(arr) < 1:\n        return 0\n    else:\n        return _sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_array(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the given number to binary\n    binary = bin(n)[2:]\n    # Pad with zeros to make the binary string of length 32\n    while len(binary) < 32:\n        binary = '0' + binary\n    # Split the binary string into a list of binary digits\n    digits = [int(digit) for digit in binary]\n    # Rotate the digits by d bits\n    for i in range(d):\n        digits.insert(0, digits.pop())\n    # Convert the rotated digits back to binary\n    rotated = ''.join(str(digit) for digit in digits)\n    # Convert the binary string of rotated digits to its decimal form\n    result = int(rotated, 2)\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to be rotated\n    bits_to_rotate = d % 32\n    \n    # Calculate the number of bits to be shifted\n    bits_to_shift = 32 - bits_to_rotate\n    \n    # Mask the first bits\n    mask = ((1 << bits_to_shift) - 1) << (32 - bits_to_shift)\n    \n    # Shift the bits to the left\n    n = n << bits_to_rotate | (n & mask) >> bits_to_shift\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d %= 32\n    return ((n << d) | (n >> (32 - d)))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n    :param n: An integer representing the number to be rotated.\n    :param d: An integer representing the number of bits to rotate left.\n    :return: An integer representing the rotated number.\n    \"\"\"\n\n    # Convert d to binary string\n    binary_d = bin(d)[2:].zfill(32)\n\n    # Find the length of the binary representation of n\n    n_len = len(bin(n)[2:])\n\n    # Pad the binary representation of n with 0's to the length of the padded binary representation of d\n    n_padded = '{0:0{1}b}'.format(n, n_len).zfill(32)\n\n    # Convert the padded binary representation of n to an integer\n    n_padded = int(n_padded, 2)\n\n    # Multiply n_padded by 2^d\n    n_rotated = n_padded << d\n\n    # Return the rotated number\n    return n_rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff  # (n << d) shifts n to the left by d bits. (n >> (32 - d)) shifts n to the right by (32 - d) bits. The result is then ANDed with 0xffffffff to make sure that the result is a 32-bit unsigned integer."
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the given number to binary and find the number of bits\n    num_bits = 0\n    while n:\n        n = n >> 1\n        num_bits += 1\n\n    # Calculate the number of shifts required to rotate left by d bits\n    num_shifts = num_bits - d\n\n    # Perform the shifting operation\n    result = 0\n    for i in range(num_shifts):\n        result = (result << 1) | (n & 1)\n        n = n >> 1\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF  # mask to keep the lower 32 bits of the result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number.\n    '''\n    # Convert the number to a 32 bit binary string\n    bin_str = bin(n)[2:]\n    # Compute the number of bits to rotate\n    num_bits = len(bin_str)\n    rotation_bits = d % num_bits\n    # Compute the mask to rotate with\n    mask = (1 << rotation_bits) - 1\n    # Rotate the bits\n    rotated_bin_str = (bin_str[rotation_bits:] + bin_str[:rotation_bits]) & mask\n    # Convert the rotated binary string back to an integer\n    rotated_n = int(rotated_bin_str, 2)\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = (1 << d) - 1\n    return ((n << d) | (n >> (32 - d))) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Get the bits of the number in binary\n    n_bits = bin(n)[2:].zfill(32)\n    \n    # Get the number of bits to rotate\n    num_bits_to_rotate = len(n_bits) - d\n    \n    # Calculate the rotated bits\n    rotated_bits = n_bits[-num_bits_to_rotate:] + n_bits[:-num_bits_to_rotate]\n    \n    # Convert the rotated bits back to an integer\n    rotated_int = int(rotated_bits, 2)\n    \n    # Return the rotated number\n    return rotated_int"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all spaces using regular expression\n    text = re.sub(r'\\s+','', text)\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n\n    # Check if all three numbers are equal\n    if x == y and y == z:\n        count += 1\n\n    if x == z and z == y:\n        count += 1\n\n    if y == z and z == x:\n        count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, x + 1):\n        for j in range(1, y + 1):\n            if i + j == z and i + z == y and j + z == x:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x:\n            continue\n        for j in range(i+1, y+1):\n            if j == i:\n                continue\n            for k in range(j+1, y+1):\n                if k == j:\n                    continue\n                if i == k:\n                    continue\n                if j == k:\n                    continue\n                if i == z or j == z or k == z:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i in [x, y, z]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        left = 0\n        right = n - 1\n\n        while left < right:\n            mid = (left + right) // 2\n\n            if arr[mid] > arr[i]:\n                right = mid\n            else:\n                left = mid + 1\n\n        count += right - left - 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Calculate the minimum value in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        min_val = min(min_val, arr[i])\n\n    # Calculate the maximum value in the array\n    max_val = arr[n-1]\n    for i in range(n-2, -1, -1):\n        max_val = max(max_val, arr[i])\n\n    # Find the number of rotations required to make the array sorted\n    rotations = 0\n    for i in range(n):\n        if arr[i] > max_val:\n            rotations += 1\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            rotations += 1\n            min_val = arr[i]\n        else:\n            continue\n\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    # find the maximum element in the array\n    max_elem = max(arr)\n    # count the number of rotations required to sort the array\n    count = 0\n    for i in range(1, max_elem+1):\n        if sorted(arr, reverse=True) == [i]*len(arr):\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted, there is no rotation required\n    if arr == sorted(arr):\n        return 0\n    # Count the number of swaps required to sort the array\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        # Swap adjacent elements if they are not in the right order\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n            count += 1\n        i += 1\n        j -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    # Calculate the difference between the minimum and maximum values in the array\n    diff = max(arr) - min(arr)\n\n    # Initialize a counter variable for the number of rotations required\n    count = 0\n\n    # Loop through the range of values between -diff and diff\n    for i in range(-diff, diff + 1):\n\n        # Calculate the index of the first element in the current sub-array\n        first_index = i % len(arr)\n\n        # Calculate the indices of the second and third elements in the current sub-array\n        second_index = (first_index + diff) % len(arr)\n        third_index = (first_index + diff + 1) % len(arr)\n\n        # Check if the second and third elements in the sub-array are in the correct order\n        if arr[second_index] > arr[first_index] and arr[third_index] > arr[second_index]:\n\n            # If they are in the correct order, increment the counter variable\n            count += 1\n\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i + 1]:\n            count += n - i\n            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if arr[i] < arr[j]:\n            i += 1\n        elif arr[i] > arr[j]:\n            j -= 1\n        else:  # arr[i] == arr[j]\n            if i == j:  # i is equal to j\n                return count\n            else:  # i is greater than j, so arr[i] is moved to the end of the array\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n                i += 1\n                j -= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n\n    # If the array is already sorted, return 0 rotations\n    if arr == sorted(arr):\n        return 0\n\n    # If the array is not already sorted, then check if it can be sorted by swapping elements\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            # If it can be sorted by swapping elements, then do it\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            count += 1\n            # If the array is already sorted, return the count of rotations required\n            if arr == sorted(arr):\n                return count\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Initialize variables\n    num = n\n    square = 0\n    \n    # Calculate the square of the number\n    while num > 0:\n        square += num\n        num //= 2\n        \n    # Check if the square is equal to the number\n    if square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # First, we check if the given number is less than 2\n    if n < 2:\n        return False\n\n    # Next, we use the formula for the square root, which is x^2 = n\n    # We then iterate from 1 to the square root of n and check if any of them is equal to n\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n\n    # If we reach here, then n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n < 0:\n        return False\n    left = 0\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid*mid == n:\n            return True\n        elif mid*mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # check if the number is less than 0\n    if n < 0:\n        return False\n    # check if the number is equal to 0\n    if n == 0:\n        return True\n    # check if the number is 1 or 2\n    if n == 1 or n == 2:\n        return True\n    # calculate the square root of the number\n    root = int(n ** 0.5) + 1\n    # check if the square root is equal to the number\n    if root * root == n:\n        return True\n    # if the square root is less than the number, the number must be a perfect square\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    x = n\n    y = 0\n    while x >= y:\n        y = y + x\n        x = x - y\n    return y == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if n is a perfect square\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        # check if the square root of n is an integer\n        sqrt_n = int(n**0.5)\n        if sqrt_n*sqrt_n == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = math.sqrt(n)\n    for i in range(1, int(root) + 1):\n        if i * i == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Using the Babylonian method to find the square root\n    x = n\n    y = x\n    i = 0\n    while x!= y:\n        x = (x + y) // 2\n        i += 1\n        if i >= 1000:\n            return False\n        y = x * x\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether a given number is a perfect square or not.\n    It uses the Pythagorean theorem to check whether the number is a perfect square or not.\n    '''\n    # Calculate the square root of the number using the formula sqrt(n)\n    sqrt_n = round(n ** 0.5)\n    \n    # Check if the square root is an integer or not\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes an integer n and returns True if it is a perfect square, and False otherwise.\n    The function uses the Babylonian method to check if a number is a perfect square.\n    '''\n    \n    # check if n is already a perfect square\n    if n > 0 and n == int(n**0.5)**2:\n        return True\n    \n    # if n is less than or equal to 0, then it is not a perfect square\n    if n <= 0:\n        return False\n    \n    # calculate the square root of n\n    root = int(n**0.5)\n    \n    # check if the square of the root is equal to n\n    if root**2 == n:\n        return True\n    \n    # check if the square of the root is less than n\n    if root**2 < n:\n        # calculate the square of the root + 1\n        upper_bound = int(root**2 + 1)\n        \n        # check if the upper bound is a perfect square\n        for i in range(2, upper_bound):\n            if upper_bound - i == i**2:\n                return True\n        \n        # check if the square of the root - 1 is a perfect square\n        for i in range(2, root):\n            if root - i == i**2:\n                return True\n    \n    # if the function has not returned True by now, then n is not a perfect square\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if not isinstance(arr, list):\n        raise TypeError(\"Input should be a list\")\n    product = 1\n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"Numbers should be integers\")\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize the product variable\n    product = 1\n    \n    # Iterate over the elements of the list\n    for num in arr:\n        \n        # Calculate the product of the current number and the product variable\n        product *= num\n        \n        # Check if the product is even or odd and return the result\n        if product % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                if lists[i][j][k] > max_sum:\n                    max_sum = lists[i][j][k]\n                    max_list = [lists[i][j][k]]\n                elif lists[i][j][k] == max_sum:\n                    max_list.append(lists[i][j][k])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = None\n\n    # Loop through the list of lists\n    for list in lists:\n        # Initialize a variable to store the current sum\n        current_sum = 0\n\n        # Loop through the list\n        for num in list:\n            # Add the current number to the current sum\n            current_sum += num\n\n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum and the list with the maximum sum\n            max_sum = current_sum\n            max_list = list\n\n    # Return the list with the maximum sum\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the list of the maximum sum\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Iterate over each list in the input list of lists\n    for lst in lists:\n        # Initialize a variable to store the current sum of the list\n        curr_sum = 0\n        \n        # Iterate over each element in the list and add it to the current sum\n        for num in lst:\n            curr_sum += num\n            \n        # If the current sum is greater than the maximum sum, update the maximum sum and the list of the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = lst\n    \n    # Return the list of the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for sublist in lists:\n        sublist.sort(reverse=True)\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist.copy()\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize the maximum sum and its corresponding list\n    max_sum = float('-inf')\n    max_list = []\n\n    # Iterate through all possible sublists\n    for i in range(len(lists)):\n        for j in range(i + 1, len(lists)):\n            # Calculate the sum of the sublist and check if it is greater than the current maximum sum\n            sublist_sum = sum(lists[i]) + sum(lists[j])\n            if sublist_sum > max_sum:\n                # Update the maximum sum and the corresponding list\n                max_sum = sublist_sum\n                max_list = [lists[i], lists[j]]\n\n    # Return the maximum sum and list\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    result = None\n\n    # Loop through each list of lists\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # Check if the current sublist sum is greater than the maximum sum\n        if sublist_sum > max_sum:\n            # Update the maximum sum and the corresponding list\n            max_sum = sublist_sum\n            result = sublist\n\n    # Return the maximum sum and the corresponding list\n    return max_sum, result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    if not lists:\n        return []\n\n    max_sum = max_sum_list(lists[1:])\n    max_list = max_sum_list(lists[1:])\n\n    if sum(max_list) > sum(max_sum):\n        return max_list\n    else:\n        return max_sum"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n    # Initialize variables to keep track of the current run of uppercase characters and the maximum run seen so far\n    current_run = 0\n    max_run = 0\n    # Loop through the string and check if each character is uppercase\n    for i in range(len(test_str)):\n        if test_str[i] =='':\n            # If a space is encountered, reset the current run to 0\n            current_run = 0\n        elif test_str[i] == test_str[i].upper():\n            # If a lowercase character is encountered, increment the current run\n            current_run += 1\n        else:\n            # If an uppercase character is encountered, reset the maximum run if the current run is longer\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run to 0\n            current_run = 0\n    # If the current run is longer than the maximum run seen so far, update the maximum run\n    if current_run > max_run:\n        max_run = current_run\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = None\n    \n    # loop through each character in the string\n    for char in test_str:\n        # if the character is uppercase, increase the current run length\n        if char.isupper():\n            current_run += 1\n        # if the character is not uppercase, reset the current run length and start a new run\n        else:\n            current_run = 1\n        \n        # if this is the first character or the current run is longer, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n        \n        # update the current character and current run\n        current_char = char\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 1\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    current_run_length = 0\n    max_run_length = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run_length += 1\n        else:\n            if current_run_length > max_run_length:\n                max_run_length = current_run_length\n            if current_run_length > uppercase_count:\n                uppercase_count = current_run_length\n            current_run_length = 0\n    if current_run_length > max_run_length:\n        max_run_length = current_run_length\n    if current_run_length > uppercase_count:\n        uppercase_count = current_run_length\n    return max_run_length, uppercase_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    # create an empty list to store run lengths\n    run_lengths = []\n    # iterate over each character in the string\n    for char in test_str:\n        # if the character is uppercase and not already in the list, add the length to the list\n        if char.isupper() and char not in run_lengths:\n            run_lengths.append(len(char))\n        # if the character is not uppercase and is already in the list, remove the last length from the list\n        elif not char.isupper() and char in run_lengths:\n            run_lengths.pop()\n    # find the maximum run length in the list and return it\n    return max(run_lengths)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize variables\n    current_run = 1\n    max_run = 0\n    \n    # iterate through string and count uppercase characters\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 1\n        \n        # update max_run if current run is longer\n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    current_run = 0\n    start_index = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            current_run += 1\n        else:\n            if count > max_count:\n                max_count = count\n                start_index = i - current_run + 1\n            count = 0\n            current_run = 0\n\n    return test_str[start_index:start_index + max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    current_count = 0\n    max_run = []\n    current_run = []\n\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n        else:\n            current_count = 0\n\n        if current_count > max_count:\n            max_count = current_count\n            max_run = current_run\n\n        if current_count == max_count:\n            current_run.append(char)\n\n        if current_count == 0:\n            max_run = []\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    curr_run = 0\n    curr_char = None\n\n    for char in test_str:\n        if char.isupper():\n            if curr_char is None or not curr_char.isupper():\n                curr_run += 1\n                curr_char = char\n            else:\n                max_run = max(max_run, curr_run)\n                curr_run = 1\n                curr_char = char\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n\n    if curr_run > 0:\n        max_run = max(max_run, curr_run)\n\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_exists = False\n    for tup in test_tup:\n        if tup == K:\n            k_exists = True\n            break\n    return k_exists"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_count = 0\n    for tup in test_tup:\n        if tup[1] == K:\n            k_count += 1\n    if k_count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if tup in K:\n            count += 1\n    if count == len(K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Count the number of occurrences of K in test_tup\n    count = 0\n    for tup in test_tup:\n        if tup == K:\n            count += 1\n    # If count is greater than or equal to K, then K is present in test_tup\n    if count >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return False\n    \n    # Check if each element of the second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    # If all elements in the second tuple are smaller than their corresponding elements in the first tuple, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    }
]