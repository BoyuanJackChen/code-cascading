[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Create sets of unique elements from each list\n    unique_elem1 = set(test_tup1)\n    unique_elem2 = set(test_tup2)\n\n    # Find the shared elements using set intersection\n    shared_elems = unique_elem1.intersection(unique_elem2)\n\n    # Convert the shared elements back to a list and return it\n    return list(shared_elems)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a set of shared elements.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty list to store the shared elements\n    shared_elements = []\n    # Iterate through the two tuples\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        # Check if the elements are equal\n        if elem1 == elem2:\n            # If yes, append the element to the shared elements list\n            shared_elements.append(elem1)\n    # Return the shared elements list\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n\n    # Iterate over both lists and add the common elements to the set\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_set.add(element)\n\n    # Return the shared set as a tuple\n    return tuple(shared_set)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer input n and returns True if it is a non-prime number, False otherwise.\n    '''\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number as input and returns True if the number is not prime, False otherwise.\n    '''\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Check if the number is equal to 2 or 3\n    if n == 2 or n == 3:\n        return True\n    \n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # The number is not a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is not a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n\n    # convert the list to a max-heap\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n\n    # extract the n largest numbers from the max-heap\n    result = []\n    for _ in range(n):\n        result.append(hq.heappop(max_heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for _ in range(n-len(nums)):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a min heap\n    min_heap = hq.nsmallest(n, nums)\n    # get the largest integers from the heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)  # push negative number to heap\n        if len(heap) > n:  # if heap size exceeds n, pop smallest element\n            hq.heappop(heap)\n    return [-num for num in heap]  # return negative numbers in descending order"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and returns the n largest integers in descending order.\n    '''\n    # Create a max heap of size n\n    max_heap = hq.nsmallest(n, nums)\n    # Find the n largest integers and store them in a list\n    largest = []\n    for num in nums:\n        if num > max_heap[0]:\n            hq.heappushpop(max_heap, num)\n        else:\n            hq.heappush(max_heap, num)\n        if len(max_heap) == n:\n            largest.append(max_heap[0])\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return [-num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a min heap of size n\n    hq.heapify(nums[:n])\n    # Pop the smallest element from the heap, and append it to the result list\n    result = [nums[0]]\n    for i in range(n, len(nums)):\n        # If the current element is larger than the smallest element in the heap, heapify it and pop the smallest element\n        if nums[i] > hq.heappop(nums[:n]):\n            hq.heappush(nums[:n], nums[i])\n        # If the current element is not larger than the smallest element in the heap, add it to the result list\n        else:\n            result.append(nums[i])\n    # Return the result list in descending order\n    return result[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function takes a list of numbers `nums` and the number `n` of largest integers to be returned, and\n    returns a list of the n largest integers from the list in descending order.\n\n    The function uses the `heapq` module to create a max-heap of the first n numbers in the list, and then extracts the\n    n largest numbers from the heap in descending order.\n    \"\"\"\n    # Convert the list of numbers to a min-heap\n    hq.heapify(nums)\n\n    # Extract the first n largest numbers from the heap in descending order\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0:\n        x &= (x-1)\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (-x) == x"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n\n    Parameters:\n    x (int): The first number to be checked.\n\n    Returns:\n    bool: True if the two numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    return bin(x).count('1') == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Checking if the number is a power of 2 or not\n    if (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1:\n        x = x >> 1\n        if x == 0:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes a single integer as input and returns a boolean value indicating whether the integer is a power of two or not.\n    \n    A power of two is a positive integer that is a power of 2: 2, 4, 8, 16, 32, 64, 128,...\n    \n    In other words, if the binary representation of a number is equal to 1 followed by n times 0s, then it is a power of two. \n    For example: 2^2 = 4, 4^2 = 16, 8^2 = 32, 16^2 = 64, 32^2 = 128, etc.\n    \n    Time Complexity: O(1) as we are only checking one bit of the number.\n    \n    Space Complexity: O(1) as we are only using a constant amount of extra space.\n    '''\n    \n    # Check if x is 0 or 1\n    if x == 0 or x == 1:\n        return True\n    \n    # Check if x is a power of 2\n    while x % 2 == 0:\n        x //= 2\n    \n    # Check if x is a power of 2\n    if x == 1:\n        return True\n    \n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if it is a power of 2 or False otherwise.\n    \"\"\"\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if (x & (x - 1))!= 0:\n        return False\n    if x == 2:\n        return True\n    if (x & (x - 2)) == 0:\n        return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x & (x-1) == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the number to binary representation \n    x_binary = bin(x)[2:]\n    \n    # Find the number of bits in binary representation \n    num_bits = len(x_binary)\n    \n    # Count the number of ones in the binary representation \n    count = 0\n    for i in range(num_bits):\n        if x_binary[i] == '1':\n            count += 1\n    \n    # If the count is greater than one, the two numbers differ at one bit position \n    if count > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b' # matches words which are at least 4 characters long\n    matches = re.findall(pattern, text) # finds all matches in the text using the regex pattern\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Use regular expressions to split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n\n    Args:\n        text (str): The string to search in.\n\n    Returns:\n        list: A list of all words in the string that are at least 4 characters long.\n    \"\"\"\n    # Define a regular expression pattern to match words with at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Convert the matches list to a set to remove duplicates\n    unique_matches = set(matches)\n\n    # Convert the set back to a list and return it\n    return list(unique_matches)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b' # regex pattern to match words\n    words = re.findall(pattern, text) # find all matches using regex pattern\n    result = [word for word in words if len(word) >= 4] # filter words with length >= 4\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long in the string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= 2\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    # Create a dictionary to store the count of each character in the string \n    char_count = {} \n    for char in str: \n        if char in char_count: \n            char_count[char] += 1 \n        else: \n            char_count[char] = 1 \n\n    # Find the maximum count of any character in the string \n    max_count = max(char_count.values()) \n\n    # Initialize the minimum number of rotations required to get the same string \n    min_rotations = max_count \n\n    # Loop through all possible rotations of the string \n    for i in range(max_count): \n        # Create a new string by rotating the original string by i positions \n        new_str = str[-i:] + str[:-i] \n\n        # Calculate the count of each character in the new string \n        new_char_count = {} \n        for char in new_str: \n            if char in new_char_count: \n                new_char_count[char] += 1 \n            else: \n                new_char_count[char] = 1 \n\n        # If the count of each character in the new string is equal to the count of each character in the original string, \n        # then the new string is the same as the original string and there is no need to rotate it \n        if new_char_count == char_count: \n            min_rotations = i \n            break \n\n    return min_rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string after rotating it.\n    '''\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[(n-i-1)%n]:\n            return i+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    # Initialize variables\n    n = len(str)\n    rotations = 0\n    max_rotations = 0\n    \n    # Iterate through each character in the string\n    for i in range(n):\n        # Check if the character is already at its end\n        if str[i] == str[n-1]:\n            continue\n        # Check if the character is already at its beginning\n        if str[0] == str[i]:\n            continue\n        \n        # Swap the character at the current index with the character at the end of the string\n        str[i], str[n-1] = str[n-1], str[i]\n        rotations += 1\n        \n        # Check if the swapped character is the same as the character at the beginning of the string\n        if str[0] == str[i]:\n            rotations += 1\n        else:\n            # Reset the swapped character to its original position\n            str[i], str[n-1] = str[n-1], str[i]\n            rotations -= 1\n        \n        # Update the max_rotations variable if the number of rotations is greater than max_rotations\n        if rotations > max_rotations:\n            max_rotations = rotations\n            \n    return max_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Convert the string to a list of characters\n    str_list = list(str)\n\n    # Find the length of the list\n    length = len(str_list)\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    for char in str_list:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the characters in the string and rotate them by 1 position at a time\n    for i in range(length):\n        if str_list[i] in freq:\n            freq[str_list[i]] -= 1\n        else:\n            freq[str_list[i]] = 0\n\n        if str_list[(i+1) % length] in freq:\n            freq[str_list[(i+1) % length]] += 1\n        else:\n            freq[str_list[(i+1) % length]] = 1\n\n    # Create a list of the keys in the dictionary in ascending order\n    sorted_keys = sorted(freq.keys())\n\n    # Count the number of rotations required\n    count = 0\n    for i in range(length):\n        if sorted_keys[i]!= str_list[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Sort the characters based on their frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Initialize the minimum number of rotations required as infinity\n    min_rotations = float('inf')\n\n    # Iterate through the sorted characters and find the minimum number of rotations required\n    for char, count in sorted_freq:\n        # Calculate the number of rotations required for this character\n        rotations = count // 2\n\n        # Check if the rotated string has the same frequency as the original string\n        rotated_str = ''.join([char] * rotations)\n        if rotated_str == str:\n            # If it does, update the minimum number of rotations required\n            min_rotations = min(min_rotations, rotations)\n\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n\n    # Creating a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Finding the maximum frequency of any character in the string\n    max_freq = max(freq.values())\n\n    # If the maximum frequency is greater than 1, then there are no rotations required\n    if max_freq > 1:\n        return 0\n\n    # Finding the minimum number of rotations required to rotate the string\n    min_rotations = 0\n    for i in range(1, max_freq + 1):\n        # Finding the length of the rotated string\n        rotated_len = len(str) * i\n\n        # Checking if the rotated string has the same frequency of characters as the original string\n        if rotated_len == len(str):\n            # Updating the minimum number of rotations if the current rotation satisfies the condition\n            if rotated_len == len(str) and freq == {k: v for k, v in sorted(freq.items(), key=lambda item: (-item[1], item[0]))}:\n                min_rotations = i\n\n    # Returning the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    n = len(str)\n\n    # To store the count of inversions in each sub-string of the string\n    count = [0] * n\n\n    # To store the position of each character in the original string\n    index = [-1] * n\n\n    # To store the maximum number of inversions required\n    max_inversion_count = 0\n\n    # Traverse the string to build the count and index arrays\n    for i in range(n):\n        count[i] = index[str[i]] + 1\n        index[str[i]] = i\n\n    # Traverse the string again and calculate the maximum inversion count\n    for i in range(n):\n        for j in range(0, i):\n            # Check if the sub-strings are in reverse order\n            if count[i] > count[j]:\n                if i > j and index[str[i]] > index[str[j]]:\n                    max_inversion_count = max(max_inversion_count, count[i] + count[j] - 1)\n\n    return max_inversion_count\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # Create a list of tuples containing the character and its count\n    char_count_list = sorted(char_count.items(), key=lambda x: x[1])\n    \n    # Find the first character that has a count greater than 1\n    for i, (char, count) in enumerate(char_count_list):\n        if count > 1:\n            first_char_index = i\n            break\n    \n    # Find the last character that has a count greater than 1\n    last_char_index = first_char_index\n    for i, (char, count) in enumerate(char_count_list[::-1]):\n        if count > 1:\n            last_char_index = len(str) - i - 1\n            break\n    \n    # Create a new string by swapping the first and last characters\n    new_str = \"\"\n    for i in range(first_char_index, last_char_index + 1):\n        if i == first_char_index:\n            new_str += str[last_char_index]\n        elif i == last_char_index:\n            new_str += str[first_char_index]\n        else:\n            new_str += str[i]\n    \n    # Return the minimum number of rotations required\n    return min(len(str), len(new_str))"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    count = 0\n    for i in range(n):\n        if str[i] == str[(i+n) % n]:\n            count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Get the length of the string\n    n = len(str)\n\n    # Initialize the minimum number of rotations\n    min_rotations = 0\n\n    # Loop through all possible rotations\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the two substrings are equal\n            if str[i:j+1] == str[j:i+1][::-1]:\n                # Increment the number of rotations\n                min_rotations += 1\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find the first and last occurrence of the character in the string\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] == ch:\n            i += 1\n        else:\n            break\n    while i <= j:\n        if s[j] == ch:\n            j -= 1\n        else:\n            break\n    # Remove the first and last occurrence of the character from the string\n    s = s[:i] + s[j+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch): \n    '''\n    This function takes in a string and a character as input and returns the modified string with the first and last occurrence of the given character removed.\n    '''\n    s = list(s)\n    # Find the index of the first occurrence of the character\n    i = s.index(ch)\n    # Find the index of the last occurrence of the character\n    j = s.rindex(ch)\n    # Remove the first and last occurrence of the character\n    del s[i]\n    del s[j]\n    # Convert the list back to a string and return the modified string\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch): \n    '''\n    This function takes two parameters - string \"s\" and character \"ch\" \n    and returns the string with first and last occurrence of \"ch\" removed.\n    '''\n    # find the index of first occurrence of ch in the string\n    index = s.find(ch) \n    if index == -1: \n        # if ch is not present in the string, return the original string\n        return s\n    # if ch is present in the string, find the index of last occurrence of ch in the string\n    else: \n        index1 = s.rfind(ch) \n        # if first occurrence of ch is last occurrence of ch in the string, return empty string\n        if index1 == index: \n            return \"\"\n        # if first and last occurrence of ch are not the same, remove both occurrences\n        else: \n            return s[:index] + s[index1+len(ch):]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # convert the string to list\n    s_list = list(s)\n    # find the index of the first occurrence of the character\n    index = s_list.index(ch)\n    # remove the first occurrence\n    s_list.pop(index)\n    # find the index of the last occurrence of the character\n    index = s_list.index(ch,index+1)\n    # remove the last occurrence\n    s_list.pop(index)\n    # convert the list back to string\n    s = ''.join(s_list)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is present in the string\n    if ch in s:\n        # split the string into two parts\n        s1, s2 = s.split(ch)\n        # check if the second part is empty\n        if not s2:\n            # if it is empty, then return the first part\n            return s1\n        else:\n            # if the second part is not empty, then concatenate it with the first part and the third part\n            return s1 + ch + s2\n    else:\n        # if the character is not present, then return the original string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.startswith(ch):\n        s = s[len(ch):]\n    if s.endswith(ch):\n        s = s[:-len(ch)]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Convert the string to a list of characters\n    s_list = list(s)\n    # Find the first occurrence of the character\n    i = s_list.index(ch)\n    # Remove the first occurrence\n    del s_list[i]\n    # Find the last occurrence of the character\n    j = s_list.rindex(ch)\n    # Remove the last occurrence\n    del s_list[j]\n    # Convert the list of characters back to a string\n    return ''.join(s_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == 0:\n        s = s[1:]\n    elif s.find(ch) == len(s) - 1:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s[0] + remove_Occ(s[1:], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence\n    if s.startswith(ch):\n        s = s[1:]\n    # Removing last occurrence\n    if s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize two variables to store the minimum value in each row\n    min_val = [[float('inf')] * len(M[0]) for _ in range(len(M))]\n    min_index = [[-1] * len(M[0]) for _ in range(len(M))]\n\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Loop through each column of the matrix\n        for j in range(len(M[0])):\n            # Update the minimum value in each row\n            if M[i][j] < min_val[i][j]:\n                min_val[i][j] = M[i][j]\n                min_index[i][j] = j\n\n    # Sort the matrix by the sum of each row\n    for i in range(len(M)):\n        M[i] = [M[i][j] for j in range(len(M[0])) if j == min_index[i][j]]\n        M[i].sort()\n\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a copy of the matrix\n    copy_M = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append(M[i][j])\n        copy_M.append(row)\n\n    # Calculate the sum of each row\n    row_sums = []\n    for i in range(rows):\n        row_sum = sum(copy_M[i])\n        row_sums.append(row_sum)\n\n    # Sort the rows in ascending order based on the sum of their rows\n    for i in range(rows):\n        for j in range(rows - i - 1):\n            if row_sums[j] > row_sums[j + 1]:\n                row_sums[j], row_sums[j + 1] = row_sums[j + 1], row_sums[j]\n                for k in range(cols):\n                    copy_M[j][k], copy_M[j + 1][k] = copy_M[j + 1][k], copy_M[j][k]\n\n    # Return the sorted matrix\n    return copy_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        for j in range(len(M[i])):\n            if M[i][j]!= row_sum:\n                M[i][j], M[i][M[i].index(row_sum)] = M[i][M[i].index(row_sum)], M[i][j]\n                break"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    # create a list to store the sums of each row\n    row_sums = [sum(row) for row in M]\n\n    # sort the list in ascending order\n    row_sums.sort()\n\n    # create a new matrix to store the sorted matrix\n    sorted_matrix = []\n\n    # iterate through the rows of the matrix\n    for i in range(len(M)):\n        # create a new row in the sorted matrix\n        sorted_row = []\n\n        # iterate through the columns of the current row\n        for j in range(len(M[i])):\n            # find the index of the row with the smallest sum\n            index = row_sums.index(min(row_sums))\n\n            # add the value of the current element to the corresponding element of the new row\n            sorted_row.append(M[i][j])\n\n            # remove the sum from the row_sums list\n            row_sums.remove(min(row_sums))\n\n        # add the sorted row to the sorted_matrix\n        sorted_matrix.append(sorted_row)\n\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop over each row of the matrix and compute the sum of its elements\n    row_sums = [sum(row) for row in M]\n    # loop over each row of the matrix and sort its elements in ascending order\n    for i in range(len(M)):\n        M[i].sort()\n    # loop over each row of the matrix and compute the sum of the sorted elements\n    sorted_row_sums = [sum(row) for row in M]\n    # loop over each row of the matrix and compare the sums to determine which row is the smallest\n    for i in range(len(M)):\n        if sorted_row_sums[i] < row_sums[i]:\n            M[i], M[row_sums.index(sorted_row_sums[i])] = M[row_sums.index(sorted_row_sums[i])], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n\n    # Create a list of tuples containing the row and column indices and their corresponding values\n    row_col_values = [(i, j, M[i][j]) for i in range(n) for j in range(m)]\n\n    # Sort the list of tuples based on the sum of their rows\n    row_col_values.sort(key=lambda x: sum(x[2] for x in row_col_values[:i] + row_col_values[i+1:]))\n\n    # Create a new matrix with the sorted values\n    sorted_matrix = [[x[2] for x in row_col_values if x[0] == i and x[1] == j][0] for i in range(n) for j in range(m)]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the two variables to store the maximum sum and the index of the row with the maximum sum\n    max_sum = float('-inf')\n    max_index = 0\n\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Calculate the sum of the current row\n        row_sum = sum(M[i])\n\n        # If the current row sum is greater than the maximum sum found so far, update the maximum sum and index\n        if row_sum > max_sum:\n            max_sum = row_sum\n            max_index = i\n\n    # Create a new matrix with the sorted rows\n    sorted_matrix = [[0 for _ in range(len(M))] for _ in range(len(M[0]))]\n    sorted_index = 0\n    for i in range(len(M)):\n        if i == max_index:\n            continue\n        sorted_matrix[sorted_index] = M[i]\n        sorted_index += 1\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the rows based on the sum of each row\n    sorted_rows = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    # Create a new matrix with the sorted rows\n    sorted_matrix = [[row[i] for row in sorted_rows] for i in range(n)]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    # Sort the matrix by row sums\n    sorted_matrix = []\n    for i in range(len(M)):\n        min_index = i\n        for j in range(len(M[i])):\n            if row_sums[i] > row_sums[j] and i!= j:\n                min_index = j\n        sorted_matrix.append(M[i])\n        M[i].pop(min_index)\n        row_sums[i] = sum(M[i])\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize variables to store the sorted matrix and the sum of its rows\n    sorted_matrix = []\n    sum_of_rows = []\n    \n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Initialize variables to store the current row and its sum\n        current_row = []\n        row_sum = 0\n        \n        # Loop through each element in the current row\n        for j in range(len(M[0])):\n            # Append the current element to the current row\n            current_row.append(M[i][j])\n            # Calculate the sum of the current row\n            row_sum += M[i][j]\n            \n        # Append the current row and its sum to the sum_of_rows list\n        sum_of_rows.append((current_row, row_sum))\n    \n    # Sort the sum_of_rows list based on the sum of the rows\n    sum_of_rows.sort(key=lambda x: x[1])\n    \n    # Loop through the sum_of_rows list and append the sorted rows to the sorted_matrix list\n    for row in sum_of_rows:\n        sorted_matrix.append(row[0])\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function calculates the volume of a triangular prism with sides of length l, b, and h.\n    '''\n    return (l * b * h) / 3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism\n    V = l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, width and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    volume = l * b * h / 6 # calculate volume using formula for area of a triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l*b*h / 6 # formula to calculate the volume of a triangular prism\n    print(\"The volume of the triangular prism is:\", Volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h #calculating the volume\n    print(\"The volume of the triangular prism is:\",V) #printing the volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate volume of the triangular prism\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes length, width, and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    V = (l * b * h) / 6\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h   # Formula to find the volume of a triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)([A-Z][a-z]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]{2,}[_])'\n    result = re.findall(pattern, text)\n    if len(result) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Regular expression pattern to match sequences of lowercase letters\n    pattern = r'[a-z]+'\n\n    # Use the re.findall() method to find all the substrings that match the pattern\n    matches = re.findall(pattern, text)\n\n    # Check if the length of the matches list is greater than 0\n    if len(matches) > 0:\n        # Join the matches list with underscores and check if the resulting string is equal to the original text\n        return ''.join(matches).replace('_', '').lower() == text.lower()\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def text_lowercase_underscore(text):\n    lowercase_underscore_pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(lowercase_underscore_pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define the regular expression pattern for checking lowercase letters followed by underscore\n    pattern = r'[a-z][A-Z]+_[a-z]'\n    \n    # Check if the input string matches the pattern\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+(_[a-z]+)*')\n    return pattern.match(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])(?=[a-z])[a-z]+(?:_?[a-z]+)*'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = re.compile(r'(?<=[a-z])(?=[a-z])|(?<=[a-z])_|(?<=_)(?=[a-z])')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    char_count = {}\n    for char in char_list:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    \n    for char in char_count:\n        if char in string:\n            char_list.remove(char)\n    \n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the output\n    output = []\n\n    # Loop through each character in the input string\n    for char in string:\n        # Check if the character is not in the list of forbidden characters\n        if char not in forbidden_chars:\n            # Add the character to the output list\n            output.append(char)\n\n    # Return the output list as a string\n    return ''.join(output)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = \"\"\n    for char in string:\n        if char not in string[1:]:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # creating a dictionary to store the frequency of each character in the second string\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # creating a list to store the characters present in the second string\n    present_chars = []\n    for char in string:\n        if char in freq_dict and freq_dict[char] > 0:\n            present_chars.append(char)\n            freq_dict[char] -= 1\n\n    # removing characters from the first string which are present in the second string\n    for char in present_chars:\n        string = string.replace(char, '')\n\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string1)\n    list2 = list(string2)\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return ''.join(list1)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    # Remove characters present in the second string from the first string\n    for char in string:\n        if char not in second_string:\n            string = string.replace(char, \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert string to list of characters\n    char_list = list(string)\n    # Initialize a boolean list to keep track of which characters are present in the second string\n    is_present = [False] * NO_OF_CHARS\n    # Iterate over the characters in the second string\n    for char in string:\n        # Check if the character is present in the boolean list\n        if char in is_present:\n            # If it is, remove it from the first string and mark it as present in the second string\n            char_list.remove(char)\n            is_present[ord(char)] = True\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string1, string2):\n    # create an empty list to store the new string\n    new_string = []\n\n    # iterate over each character in the first string\n    for char in string1:\n        # if the character is not present in the second string, add it to the new list\n        if char not in string2:\n            new_string.append(char)\n\n    # return the new list of characters\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        char_list.append(chr(i))\n    string_list = list(string)\n    for char in string_list:\n        if char in char_list:\n            char_list.remove(char)\n    new_string = ''.join(char_list)\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for char in string:\n        if char not in char_list:\n            char_list.append(char)\n    return char_list"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Loop through the array and add each element to the set\n    for num in arraynums:\n        unique_nums.add(num)\n\n    # Check if the set is empty or not, indicating whether the array has any duplicate elements\n    if len(unique_nums) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the number of occurrences of each element in the array\n    count_dict = {}\n    # Loop through the array and increment the count in the count_dict for each element\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # Loop through the count_dict and check if any element has a count greater than 1\n    for num, count in count_dict.items():\n        if count > 1:\n            return True\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements of the array\n    element_dict = {}\n\n    # Iterate through the array and add each element to the dictionary\n    for num in arraynums:\n        if num not in element_dict:\n            element_dict[num] = True\n        else:\n            return True\n\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the values and their indices\n    index_dict = {}\n\n    # loop through the array and add each value to the dictionary with its index as the key\n    for index, num in enumerate(arraynums):\n        if num in index_dict:\n            return True\n        index_dict[num] = index\n\n    # if no duplicate was found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate over the array and add elements to the set\n    for num in arraynums:\n        unique_set.add(num)\n\n    # Check if the set is not empty, indicating that there are duplicate elements\n    if len(unique_set)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the array\n    counts = {}\n    for num in arraynums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Iterate through the dictionary and check if any duplicate elements are found\n    for key in counts:\n        if counts[key] > 1:\n            return True\n    \n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        else:\n            hashmap[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the number is a multiple of 12\n    if x % 12 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # define the list of digits in x\n    digits = [int(digit) for digit in str(x)]\n\n    # loop through the digits and check if the sum of the digits is divisible by 9\n    for i in range(len(digits)):\n        digit_sum = sum(digits[i:])\n        if digit_sum % 9 == 0:\n            return True\n\n    # if the function doesn't return True, then it's not a woodball\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x >= 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 or x % 7 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the list of prime numbers \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Loop through the list of prime numbers \n    for prime in primes: \n        # Check if the number is divisible by the prime number \n        if x % prime == 0: \n            # If it is divisible by a prime number, return True \n            return True \n\n    # If no prime number divides the number, return False \n    return False \n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 12 or x == 24 or x == 48 or x == 96:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    if x % 2 == 0 and x % 3 == 0:\n        return \"Woodall number\"\n    else:\n        return \"Not a Woodall number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n\n    :param x: an integer\n    :return: True if the given number is woodball, False otherwise\n    \"\"\"\n    if x == 1:\n        return True\n    if x % 2 == 0:\n        return is_woodall(x // 2)\n    else:\n        return is_woodall((3*x) + 1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    # convert the input number to a string\n    str_num = str(num)\n    # reverse the string\n    reversed_str = str_num[::-1]\n    # convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # check if the original number is one less than twice its reverse\n    if num < 2 * reversed_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while(temp > 0):\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    if num == reverse + 1:\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    if reverse_num == 2 * num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num == reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # Subtract 1 from the reversed integer to get the difference\n    difference = reversed_num - 1\n    # Check if the difference is less than or equal to the original number\n    if difference <= num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    # Check if the reversed number is one less than twice the original number\n    if reversed_num < 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n    return (rev_num + 1) == (rev_num + 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Calculate the reverse of the reverse\n    rev_rev_str = rev_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_rev_int = int(rev_rev_str)\n    # Calculate the difference between the original number and the reverse of the reverse\n    diff = num - rev_rev_int\n    # Check if the difference is one less than twice the original number\n    if diff < num-2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(num)\n\n    # Reverse the string and convert it to an integer\n    reverse_num = int(num_str[::-1])\n\n    # Check if the reverse of the number is one less than twice the original number\n    if reverse_num - num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n    if rev_num == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    # Initialize variables for maximum number and current number being checked\n    max_num = 0\n    curr_num = 0\n\n    # Loop through the digits in the array\n    for digit in arr:\n        # Convert the digit to an integer\n        digit = int(digit)\n\n        # Check if the current number is less than the digit\n        if curr_num < digit:\n            # If so, update the maximum number and the current number\n            max_num = max(max_num, curr_num)\n            curr_num = digit\n\n    # Check if the current number is greater than the maximum number\n    if curr_num > max_num:\n        # If so, update the maximum number\n        max_num = curr_num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list in ascending order\n    arr.sort()\n    # Initialize the largest number as the first digit of the list\n    max_num = arr[0]\n    # Loop through the remaining digits of the list\n    for i in range(1, len(arr)):\n        # Check if the current digit can be formed with the current largest number\n        for j in range(1, max_num+1):\n            # If the current digit can be formed with the current largest number, update the largest number\n            if (j*10+arr[i]) >= max_num and (j*10+arr[i]) <= (max_num*10):\n                max_num = j*10+arr[i]\n    # Return the largest number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = arr[0]\n    for i in range(1, n):\n        temp = 0\n        for j in range(n):\n            if j == i:\n                temp += arr[j]\n            else:\n                temp += arr[j] * 10**(j-i)\n        if temp > max_num:\n            max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    # Initialize max_num with the first element of the array\n    max_num = arr[0]\n    # Iterate over the remaining elements of the array\n    for i in range(1, n):\n        # Add the current element to the max_num\n        max_num = max_num * 10 + arr[i]\n        # If the max_num is already greater than the current element, update it\n        if max_num > arr[i]:\n            max_num = arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = arr[0]\n    for i in range(1, n):\n        max_num = max(max_num * 10 + arr[i], arr[i])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    \n    for i in range(2, 10):\n        current_num = 0\n        for j in range(n):\n            if arr[j] == i:\n                current_num += 1\n        if current_num == n:\n            max_num = max(max_num, i)\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Define the maximum possible value for the first digit\n    max_num = 10**(len(arr)-1) - 1\n\n    # Loop through each number in the array\n    for num in arr:\n        # Define the current value of the number\n        curr_num = int(num)\n\n        # Check if the current number is less than or equal to the maximum possible value\n        if curr_num <= max_num:\n            # If the current number is greater than the maximum possible value, update the maximum possible value\n            max_num = curr_num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            for k in range(len(arr)):\n                for l in range(len(arr)):\n                    for m in range(len(arr)):\n                        max_num = max(max_num, int(arr[i]) * int(arr[j]) * int(arr[k]) * int(arr[l]) * int(arr[m]))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    # initialize variables\n    max_num = 0\n    max_len = 0\n    # loop through each digit in the array\n    for digit in arr:\n        # check if the current digit can form a new number\n        if digit <= max_num // 10:\n            max_num = max_num * 10 + digit\n            max_len += 1\n        else:\n            max_num = digit\n            max_len = 1\n    # return the maximum number formed\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # if x and y are same sign, return False\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return False\n    # if x and y are opposite signs, return True\n    elif (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    # if x and y are zero, return True\n    elif x == 0 and y == 0:\n        return True\n    # if x or y are zero, return False\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs,\n    False otherwise.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y >= 0 and x * y < 0"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # find the square root of the input number\n    square_root = round(n ** 0.5)\n\n    # check if the square root is an integer\n    if square_root.is_integer():\n        return False\n\n    # find the number of integers between 1 and the square root\n    num_integers = 0\n    for i in range(1, square_root + 1):\n        if i ** 2 == n:\n            num_integers += 1\n\n    # check if the number of integers between 1 and the square root is odd\n    if num_integers % 2 == 0:\n        return False\n\n    # if all conditions are true, return true\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"The number must be greater than or equal to 1.\"\n    elif n % 2 == 0:\n        return \"The number must be odd.\"\n    elif n < 1:\n        return \"The number must be greater than or equal to 1.\"\n    elif n % 10 == 8:\n        return n\n    else:\n        return is_octagonal(n-1) + 10*is_octagonal(n-1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal_number = 1\n    while i <= n:\n        octagonal_number += i*i\n        i += 1\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0: \n        return None\n    elif n == 0: \n        return 0\n    else: \n        return (8 * n ** 2 - 1) // 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b, c, d, e, f = 1, 8, 16, 25, 36, 49\n    return a + (n - 1) * (b - 2 * a) + (n - 2) * (c - 3 * a) + (n - 3) * (d - 4 * a) + (n - 4) * (e - 5 * a) + (n - 5) * (f - 6 * a)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    while a * a + b * b <= n * n:\n        a += 1\n        b += 6\n    return a * b"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * n * n - 1) // 2\n    else:\n        return (2 * n * n - 1) // 2 + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 17\n    elif n == 4:\n        return 41\n    elif n == 5:\n        return 93\n    elif n == 6:\n        return 257\n    elif n == 7:\n        return 641\n    elif n == 8:\n        return 1217\n    elif n == 9:\n        return 2151\n    else:\n        for i in range(10, n):\n            if i*i == 8*n + 1:\n                return i*i - 8*n\n        return None\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_num = 0\n    while octagonal_num < n:\n        octagonal_num = (n - octagonal_num) * (n - octagonal_num + 1) // 2 + octagonal_num\n    return octagonal_num\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return \"Invalid input. Please enter an odd integer.\"\n    else:\n        i = 1\n        while i <= n/2:\n            j = 1\n            while j <= i:\n                total = i**2 + j**2 + (2*i - 1)**2 + (2*j - 1)**2\n                if total == n:\n                    return i**2 + j**2\n                elif total > n:\n                    break\n                j += 1\n            i += 1\n        return \"Invalid input. Please enter an odd integer.\""
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[i] = sum(int(c) for c in s[i:])\n\n    count_dict = dict(count)\n    count_dict[len(s)] = count_dict[len(s)] + 1\n    count_dict[0] = 0\n\n    count = 0\n    for i in range(len(s)+1):\n        count += count_dict[i]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings with the given sum of digits\n    count = defaultdict(int)\n    # Iterate through the string s\n    for i in range(len(s)):\n        # Check if the sum of digits of the substring starting from i is equal to its length\n        if sum(int(j) for j in s[i:]) == len(s[i:]):\n            # Increment the count of substrings with the given sum of digits\n            count[len(s[i:])] += 1\n    # Return the total count of substrings with the given sum of digits\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    count = 0\n\n    for i in range(n):\n        dp[i] = sum(map(int, list(s[i:i+2])))\n\n    for i in range(n-2):\n        count += dp[i] - dp[i+1]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for c in s:\n        digit_count[int(c)] += 1\n    \n    substrings = set()\n    for length in range(1, len(s)+1):\n        for i in range(len(s) - length + 1):\n            substring = s[i:i+length]\n            if sum(int(c) for c in substring) == length:\n                substrings.add(substring)\n    \n    return len(substrings)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # If the current character is a digit, compute its sum and check if it is equal to its length\n        if s[i].isdigit():\n            substring_sum = sum(int(digit) for digit in s[i:])\n            if substring_sum == len(s[i:]):\n                count[substring_sum] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    def is_sum_equal_to_length(substring):\n        return sum(int(d) for d in substring) == len(substring)\n\n    count = 0\n    n = len(s)\n    dp = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if is_sum_equal_to_length(substring):\n                count += 1\n                dp[substring] = dp[substring] + 1\n                print(substring, dp[substring])\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Count the frequency of digits\n    freq = defaultdict(int)\n    for c in s:\n        freq[c] += 1\n\n    # Create a list of all possible substrings\n    substrings = [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)]\n\n    # Count the number of substrings with sum of digits equal to their length\n    count = 0\n    for substring in substrings:\n        if sum(int(c) for c in substring) == len(substring):\n            count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            temp = int(''.join(sorted(s[i:j])))\n            count += temp\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Convert the string to a list of integers\n    s = list(map(int, list(s)))\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    substrings = defaultdict(int)\n    # Iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits of the substring equals to the length of the substring\n            if sum(map(int, str(s[i:j]))) == j-i:\n                # Add the count of the substring to the dictionary\n                substrings[j-i] += 1\n    # Return the count of substrings with the sum of digits equal to their length\n    return substrings[sum(map(int, str(i))) for i in range(10)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # creating a dictionary to store the count of substrings\n    count = defaultdict(int)\n\n    # iterating over each character in the string\n    for i in range(len(s)):\n        # iterating over each substring starting from the current index\n        for j in range(i, len(s)):\n            # if the sum of digits of the substring is equal to its length, incrementing the count\n            if sum(int(digit) for digit in s[j]) == len(s[j]):\n                count[s[j]] += 1\n\n    # returning the count of substrings\n    return sum(count.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n    # Initialize the maximum difference to be the difference between the first and second elements\n    max_diff = abs(test_list[1] - test_list[0])\n    # Iterate over the remaining elements in the list\n    for i in range(2, len(test_list)):\n        # Calculate the difference between the current element and the previous element\n        diff = abs(test_list[i] - test_list[i - 1])\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    pairs.sort(key=lambda x: x[1]-x[0])\n    return pairs[-1][1]-pairs[0][0]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference = max(test_list[i+1][1] - test_list[i][0] for i in range(len(test_list)-1))\n    return difference"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][0]-test_list[j][1], test_list[j][0]-test_list[i][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize two variables to store the maximum difference and the current difference\n    max_diff = float('-inf')\n    current_diff = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        # Check if the next tuple exists\n        if i+1 < len(test_list):\n            # Calculate the difference between the current tuple and the next tuple\n            diff = abs(test_list[i][1] - test_list[i+1][1])\n\n            # Update the current difference and the maximum difference if the current difference is greater\n            if diff > current_diff:\n                current_diff = diff\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples and returns the maximum difference between the available pairs in the list.\n    '''\n    diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                diff = max(diff, test_list[i][1] - test_list[j][1])\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list based on the second element of the tuples\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list in ascending order of the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        if not data_list:\n            return []\n        elif isinstance(data_list, list):\n            return flatten(data_list[0]) + flatten(data_list[1:])\n        else:\n            return [data_list]\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_and_sum(data_list):\n        if len(data_list) == 0:\n            return 0\n        elif isinstance(data_list[0], list):\n            return flatten_and_sum(data_list[0]) + flatten_and_sum(data_list[1:])\n        else:\n            return data_list[0] + flatten_and_sum(data_list[1:])\n    return flatten_and_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten_list(data_list)\n    return sum(flat_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    \n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    if not isinstance(data_list, list):\n        raise TypeError(\"Expected a list as input, got a {}\".format(type(data_list).__name__))\n    elif not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        \"\"\"\n        Flatten a list recursively.\n        \"\"\"\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list):\n        '''\n        Recursive function to flatten a list.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list += flatten_list(item)\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    \n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Define a helper function to flatten a list and sum its elements recursively.\n    def flatten_and_sum(lst):\n        # Check if the input list is empty.\n        if not lst:\n            return 0\n        # If the input list has only one element, return its value.\n        elif len(lst) == 1:\n            return lst[0]\n        # If the input list has more than one element, flatten it and sum its elements recursively.\n        else:\n            flattened_lst = []\n            for element in lst:\n                if isinstance(element, list):\n                    flattened_lst.extend(flatten_and_sum(element))\n                else:\n                    flattened_lst.append(element)\n            return flatten_and_sum(flattened_lst)\n\n    # Call the helper function to flatten the input list and sum its elements recursively.\n    return flatten_and_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive integers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    Count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes in a list as an argument and returns the number of positive numbers present in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    # Initialize the result to 1\n    result = 1\n    \n    # Calculate the number of partitions with the given number of Bell numbers\n    for i in range(n+1):\n        result *= i\n    \n    # Return the result\n    return result"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n\n    def count_ways(n, ways=None):\n        \"\"\"\n        Recursive function to count the number of ways to partition a set of Bell numbers.\n        \"\"\"\n        if n == 0:\n            return 1\n        if ways is None:\n            ways = [0] * (n + 1)\n        ways[n] = count_ways(n - 1, ways)\n        for i in range(2, n + 1):\n            ways[n] += ways[i - 1] * ways[i]\n        return ways[n]\n\n    return count_ways(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Check if n is a positive integer\n    if n <= 0:\n        return 0\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through all possible values of k from 0 to n\n    for k in range(n+1):\n        \n        # Calculate the number of ways to partition the set of Bell numbers using k items\n        ways = (n-k)*(k-1)\n        \n        # Add the count of ways to the count variable\n        count += ways\n        \n    # Return the final count value\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    def partition(n):\n        \"\"\"\n        Helper function to count the number of ways to partition n Bell numbers.\n        \"\"\"\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            return 2 * (n - 1) + partition(n - 1)\n\n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n):\n        '''\n        Helper function to count the number of ways to partition a set of Bell numbers.\n        '''\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return partition(n-1) + partition(n-2) + partition(n-3)\n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition_helper(start, end):\n        if start > end:\n            return 1\n        if start == end:\n            return 1\n        return partition_helper(start + 1, end) * (2 * start + 1 - end) / (2 * (end - start))\n\n    count = 0\n    for i in range(n - 1, 1, -1):\n        count += partition_helper(0, i)\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            count += 1\n    return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n\n    if A[0] >= A[1]:\n        for i in range(1, n-1):\n            if A[i] < A[i-1]:\n                return False\n        if A[n-1] <= A[n-2]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(1, n-1):\n            if A[i] > A[i-1]:\n                return False\n        if A[n-1] >= A[n-2]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n    A monotonic array is an array where each element is either increasing or decreasing.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    elif A[1] - A[0] == 0:\n        return is_Monotonic(A[1:])\n    elif A[0] > A[1]:\n        return is_Monotonic(A[1:])\n    elif A[0] < A[1]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # If the array is empty or has only one element, it is always monotonic\n    if len(A) <= 1:\n        return True\n\n    # Check if the array is monotonic in terms of increasing or decreasing values\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    # check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # get the first element\n    first = A[0]\n\n    # loop through the rest of the elements\n    for i in range(1, len(A)):\n        # check if the current element is less than or greater than the previous element\n        if (A[i] < first and first < A[i-1]) or (A[i] > first and first > A[i-1]):\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            if i == 0 or A[i] < A[i-1]:\n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n <= 1:\n        return True\n    \n    # check if the array is monotonic in increasing order\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    # check if the array is monotonic in decreasing order\n    for i in range(n-2, -1, -1):\n        if A[i] < A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two lists, l and s, and returns True if s is a sublist of l, and False otherwise.\n    \"\"\"\n    # check if l is a sublist of s\n    for item in s:\n        if item not in l:\n            return False\n    # if we get here, s is a sublist of l\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not isinstance(s, list):\n        return False\n\n    sublist = sorted(s)\n    for elem in l:\n        if not isinstance(elem, list) or not all(isinstance(i, int) for i in elem):\n            return False\n\n        if sorted(elem)!= sublist:\n            return False\n\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    for item in s:\n        if item not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if the list contains any element of the sublist\n    for element in s:\n        if element not in l:\n            return False\n    \n    # If all elements are present, then the sublist must be present in the list\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n\n    :param l: List to search in.\n    :param s: Sublist to search for.\n    :return: True if the list contains the sublist, False otherwise.\n    \"\"\"\n    if s in l:\n        return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] in l:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    if len(s) == 0:\n        return True\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(i) for i in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    equal_tuples = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                equal_tuples.append((Input[i], Input[j]))\n    return equal_tuples"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for tup in Input:\n        if len(tup) == 0:\n            continue\n        else:\n            count += 1\n            if count == len(Input):\n                return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    for i in Input:\n        if len(set(i)) == len(i):\n            return True\n    return False\n\nInput = [(1,2,3), (4,5), (6,7,8), (9,10,11,12)]\nprint(find_equal_tuple(Input)) # Output: True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = gap // 1.3\n        if gap == 0:\n            gap = 1\n    \n    while True:\n        sorted = True\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                sorted = False\n        if sorted:\n            break\n        gap = int(gap * 1.3)\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    :param nums: list of elements to sort\n    :return: sorted list\n    \"\"\"\n    n = len(nums)\n    # Set the initial gap size\n    gap = n // 2\n    # Set the maximum number of iterations\n    max_iter = n * 10\n    # Initialize the swaps counter\n    swaps = 0\n\n    while gap > 1 or swaps == 0:\n        # Increment the gap size\n        gap = int(gap / 1.3)\n        # Reset the swaps counter\n        swaps = 0\n        # Iterate over the list\n        for i in range(gap, n):\n            # Check if the current element is smaller than the next element\n            if nums[i] < nums[i + gap]:\n                # Swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # Increment the swaps counter\n                swaps += 1\n\n        # Check if the gap size is too small or the swaps have not changed\n        if gap == 1 or swaps == 0:\n            break\n\n        # Reset the gap size to its initial value\n        gap = int(gap * 1.3)\n        # Reset the maximum number of iterations to its initial value\n        max_iter = n * 10\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    This algorithm is a modified version of the Bubble Sort algorithm. It iterates through the list multiple times \n    until the list is sorted. The algorithm works by repeatedly swapping adjacent elements if they are in the wrong \n    order.\n\n    The algorithm stops when the list is sorted or it becomes unsortable.\n\n    The time complexity of this algorithm is O(n^2), and the space complexity is O(1).\n\n    Args:\n    nums (list): A list of elements to be sorted.\n\n    Returns:\n    A sorted list of elements.\n\n    '''\n    n = len(nums)\n    gap = n // 2\n    \n    while gap > 0:\n        sorted = True\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                sorted = False\n        gap = // 2\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This function implements the Comb Sort algorithm.\n    \n    Args:\n    nums (list): A list of numbers to be sorted.\n    \n    Returns:\n    The sorted list.\n    \"\"\"\n    \n    # initialize the minimum and maximum indices\n    min_idx = 0\n    max_idx = len(nums) - 1\n    \n    # initialize the number of swaps and number of iterations\n    swaps = 0\n    iterations = 0\n    \n    # loop until the minimum and maximum indices do not change\n    while min_idx < max_idx:\n        \n        # calculate the median index\n        median_idx = (min_idx + max_idx) // 2\n        \n        # calculate the number of inversions and swaps\n        inversions = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[median_idx]:\n                inversions += 1\n            if nums[i] > nums[max_idx]:\n                swaps += 1\n        \n        # check if the swaps have converged\n        if abs(swaps - inversions) < 1:\n            break\n        \n        # update the minimum and maximum indices based on the number of inversions\n        if swaps < inversions:\n            min_idx = median_idx + 1\n        else:\n            max_idx = median_idx - 1\n        \n        # update the number of iterations\n        iterations += 1\n    \n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm works by repeatedly swapping adjacent elements if they are in the wrong order.\n    This process is repeated until no more swaps are needed.\n\n    The time complexity of the algorithm is O(n^2) and the space complexity is O(1).\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        gap = min(gap, n // 2)\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        n -= gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    # define variables\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap * 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    while gap > 1:\n        gap = (gap * 10) // 13\n        for i in range(gap, len(nums)):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        gap = (gap * 10) // 13\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n\n    # Set a flag for swapping\n    swapped = True\n\n    # While swapping is true\n    while swapped:\n        # Set swapped to false\n        swapped = False\n\n        # Iterate through the list\n        for i in range(n-1):\n            # If the elements are in the wrong order\n            if nums[i] > nums[i+1]:\n                # Swap them\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                # Set swapped to true\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap/1.3)\n\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] < nums[j-gap]:\n                nums[j], nums[j-gap] = nums[j-gap], nums[j]\n                j -= gap\n\n            if nums[j] >= nums[j-gap]:\n                break\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is negative\n    if n < 0:\n        return False\n\n    # Loop until the square of the number is less than or equal to n\n    i = 1\n    while i*i <= n:\n        # Check if the square of the number is equal to n\n        if i*i == n:\n            return True\n\n        # Check if the square of the number is greater than n\n        if i*i > n:\n            return False\n\n        # Increment i\n        i += 1\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"The given number cannot be represented as the difference of two squares.\"\n    elif n == 0:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n == i*i or n == (n-i*i):\n                return \"The given number can be represented as the difference of two squares.\"\n        return \"The given number cannot be represented as the difference of two squares.\"\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number is a square\n    if n*n == n:\n        return True\n    else:\n        # check if the difference of the given number and its square is a square\n        return dif_Square(n-1)*(n-1) == n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    while i*i <= n:\n        if i*i + n == i*i + i:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"Not Possible\"\n    if n == 0:\n        return \"Yes\"\n    a = int(n ** 0.5)\n    b = int(n - a ** 2)\n    if b < 0:\n        return \"Not Possible\"\n    if b == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the input is a positive integer\n    if n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n\n    # Initialize the left and right squares\n    left_square = n\n    right_square = n\n\n    # Calculate the difference of the left and right squares\n    diff_square = (right_square * right_square) - (left_square * left_square)\n\n    # If the difference is a square number, print the result\n    if diff_square ** 0.5 == int(diff_square ** 0.5):\n        print(\"The difference is a square number.\")\n    else:\n        print(\"The difference is not a square number.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    # initialize the square root of n\n    sqrt_n = int(n ** 0.5)\n    # check if sqrt_n * sqrt_n is equal to n\n    if (sqrt_n ** 2) == n:\n        return True\n    # check if sqrt_n + sqrt_n is equal to n\n    elif (sqrt_n + sqrt_n) == n:\n        return True\n    # check if sqrt_n - sqrt_n is equal to n\n    elif (sqrt_n - sqrt_n) == n:\n        return True\n    # if none of the above conditions are satisfied, the number is not representable as the difference of two squares\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_square(num):\n    \"\"\"\n    Check if a given number is a square or not.\n    \"\"\"\n    return num == int(num ** 0.5) ** 2\n\ndef diff_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_square(n):\n        return True\n    elif is_square(2 * n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Calculating the square of the given number\n    square = n ** 2\n\n    # Checking whether the square of the given number can be represented as the difference of two squares or not\n    if square == (square + n):\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # To check whether the number is positive or not, we need to check if its absolute value is odd or not.\n    if n < 0:\n        n = -n\n    if n % 2 == 0:\n        return False\n    # Now, we need to find the square of the number and check if it is a square or not.\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n!= n:\n        return False\n    # Finally, we can check if the square of the number and the difference of the square of the number and the number itself are equal or not.\n    return (sqrt_n * sqrt_n == n) + (sqrt_n * sqrt_n == (sqrt_n ** 2 - n))"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the number of patterns matches the number of colors\n    if len(patterns)!= len(colors):\n        return False\n    # Check if the first pattern is a sequence of only one color\n    if len(patterns[0])!= 1:\n        return False\n    # Check if the last color is the same as the first color in the first pattern\n    if colors[0]!= patterns[0][0]:\n        return False\n    # Check if the remaining colors form a sequence that matches the remaining patterns\n    for i in range(1, len(patterns)):\n        color_sequence = colors[i:]\n        pattern_sequence = patterns[i]\n        # Check if the color sequence matches the pattern sequence\n        if color_sequence[:len(pattern_sequence)]!= pattern_sequence:\n            return False\n        # Remove the matched colors from the color sequence\n        colors = [color for color in colors if color not in color_sequence[:len(pattern_sequence)]]\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Define the patterns\n    patterns = [\n        {'color':'red', 'pattern': 'xxxxx'},\n        {'color': 'blue', 'pattern': 'xx'},\n        {'color': 'green', 'pattern': 'x'},\n        {'color': 'yellow', 'pattern': 'xxx'}\n    ]\n\n    # Check if the colors follow the sequence in the patterns array\n    if len(colors)!= len(patterns):\n        return False\n\n    # Iterate through the colors and compare them to the patterns\n    for i in range(len(colors)):\n        if colors[i]['color']!= patterns[i]['color']:\n            return False\n        if colors[i]['pattern']!= patterns[i]['pattern']:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n\n    def find_pattern(colors, pattern):\n        \"\"\"\n        Helper function to find the first occurrence of a pattern in the colors list.\n        \"\"\"\n        for i, color in enumerate(colors):\n            if color == pattern[0]:\n                if pattern == pattern[1:]:\n                    return i\n        return -1\n\n    def is_same_pattern(pattern1, pattern2):\n        \"\"\"\n        Helper function to check if two patterns are the same.\n        \"\"\"\n        return pattern1 == pattern2\n\n    # Check if the patterns are the same\n    if len(patterns)!= len(set(patterns)):\n        return False\n\n    # Find the first occurrence of each pattern in the colors list\n    first_patterns = [find_pattern(colors, pattern) for pattern in patterns]\n\n    # Check if the first occurrences are the same for each pattern\n    if not all(first_patterns[i] == first_patterns[i + 1] for i in range(len(first_patterns) - 1)):\n        return False\n\n    # Check if the remaining colors form a pattern that is the same as the last pattern\n    remaining_colors = colors[first_patterns[-1] + 1:]\n    for pattern in patterns:\n        if len(pattern) > 1 and remaining_colors and is_same_pattern(pattern[0], remaining_colors[0]):\n            remaining_colors = remaining_colors[1:]\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    n = len(colors)\n    \n    for i in range(n-1):\n        if colors[i] == patterns[i]:\n            continue\n        \n        is_found = False\n        for j in range(i+1, n):\n            if colors[j] == patterns[i]:\n                is_found = True\n                break\n        \n        if not is_found:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the number of colors is equal to the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a set of patterns to check if they are all equal\n    pattern_set = set(patterns)\n\n    # Iterate over the colors and check if they match any of the patterns in the set\n    for color in colors:\n        if color not in pattern_set:\n            return False\n\n    # If we made it here, all colors matched a pattern\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[j][0] % K == 0 and test_list[j][1] % K == 0:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # initialize an empty list to store the found tuples\n    found_tuples = []\n    # iterate over the given list of tuples\n    for t in test_list:\n        # if all elements of the tuple are divisible by k, add the tuple to the found_tuples list\n        if all(e % K == 0 for e in t):\n            found_tuples.append(t)\n    return found_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            res.append(t)\n    return res"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_ in test_list:\n        divisible_count = 0\n        for element in tuple_:\n            if element % K == 0:\n                divisible_count += 1\n        if divisible_count == len(tuple_):\n            result.append(tuple_)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes in a list of tuples and a number K as input and returns a list of tuples which have all elements divisible by K from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n                break\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    divisible_tuples = []\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            divisible_set = set(test_list[i]) & set(test_list[j])\n            if len(divisible_set) == K:\n                divisible_tuples.append((test_list[i], test_list[j]))\n\n    return divisible_tuples"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if the number is divisible by 11 and False otherwise.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the input string into words using whitespace as the delimiter\n    words = s.split()\n    # Iterate over each word and check its length\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    # If no odd length was found, return True\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word)%2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() #split the string by spaces\n    \n    for word in words: #iterate over each word\n        if len(word) % 2 == 0: #if the length of the word is even\n            print(f\"{word} is even\")\n        else: #if the length of the word is odd\n            print(f\"{word} is odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(f\"The word '{word}' has odd length.\")\n        else:\n            print(f\"The word '{word}' has even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is even length.\")\n        else:\n            print(word, \"is odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word)"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word)%2 == 0:\n            print(\"The length of the word is even.\")\n        else:\n            print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # split the string into words\n    words = s.split()\n\n    # iterate over each word\n    for word in words:\n        # check the length of the word\n        if len(word) % 2 == 1:\n            print(f\"{word} is odd\")\n        else:\n            print(f\"{word} is even\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    t = 4 * n * n + 3 * n - 1\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # The first tetrahedral number is 1.\n    if n == 1:\n        return 1\n\n    # The second tetrahedral number is 10.\n    elif n == 2:\n        return 10\n\n    # The third tetrahedral number is 40.\n    elif n == 3:\n        return 40\n\n    # The fourth tetrahedral number is 120.\n    elif n == 4:\n        return 120\n\n    # If n is greater than 4, the tetrahedral number is n(n+1)(2n-1).\n    else:\n        return n*(n+1)*(2*n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * tetrahedral_number(n - 1) - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the first tetrahedral number\n    first_tetrahedral = 0\n    # Initialize the number of tetrahedral numbers found so far\n    count = 0\n    # Loop until we have found n tetrahedral numbers\n    while count < n:\n        # Find the next tetrahedral number\n        next_tetrahedral = 1 + 3 * first_tetrahedral\n        # Check if the next tetrahedral number is greater than n\n        if next_tetrahedral > n:\n            break\n        # Increment the count and the first tetrahedral number\n        count += 1\n        first_tetrahedral = next_tetrahedral\n    # Return the nth tetrahedral number\n    return first_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n-1) * (n-2) * (n-3) * (n-4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the variables to keep track of the current number and the sum of squares of the current number\n    current_num = 1\n    sum_squares = 0\n\n    # Loop n times to calculate the nth tetrahedral number\n    for i in range(n):\n        # Find the sum of the squares of the current number\n        sum_squares += current_num ** 2\n\n        # Calculate the new current number by adding the sum of squares to the previous current number\n        current_num = sum_squares - current_num\n\n    # Return the nth tetrahedral number\n    return current_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 3\n    c = 5\n    d = 7\n    while a < b:\n        mid = (a + b) // 2\n        if (mid * (mid + 1) * (mid + 2)) % 6 == 0:\n            n -= 1\n            if n == 0:\n                return mid * (mid + 1) * (mid + 2)\n            elif n < 0:\n                return \"The number of tetrahedral numbers is less than the required value.\"\n            else:\n                return \"The number of tetrahedral numbers is greater than the required value.\"\n        elif (mid * (mid + 1) * (mid + 2) * (mid + 3)) % 6 == 0:\n            a = mid + 4\n        else:\n            b = mid - 1\n    return \"The number of tetrahedral numbers is greater than the required value.\""
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            for k in range(1, j+1):\n                for l in range(1, k+1):\n                    count += 1\n                    if count == n:\n                        return count\n    return \"The nth tetrahedral number does not exist.\"\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n*(n+1)*(n+2)*(n+3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 1 or n > 100:\n        raise ValueError(\"n must be an integer between 1 and 100\")\n\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n\n    for i in range(1, n + 1):\n        a, b, c, d = d, a + b + c + d\n        if a + b + c + d == n:\n            return a + b + c + d\n\n    raise ValueError(\"n is not a tetrahedral number\")"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r ** 3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius of the sphere as input and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes a radius (r) of the sphere as input and returns the volume of the sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # Initialize the result string with an empty string\n    result = ''\n    # Loop through each character in the input string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        # Add the ASCII value to the result string modulo 26\n        ascii_value = (ascii_value + 26) % 26\n        # Convert the ASCII value back to a character and append it to the result string\n        result += chr(ascii_value)\n    # Return the result string\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for i in range(len(strr)):\n        char_sum += ord(strr[i])\n\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = sum([ord(char) for char in strr])\n    char = chr(((ascii_sum % 26) + 65))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    for i in strr:\n        count += ord(i)\n    return chr((count % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_value = 0\n    for char in strr:\n        ASCII_value += ord(char)\n    return ASCII_value % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    return chr(char_val % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert string to list of characters\n    str_list = list(strr)\n\n    # Initialize the character with 0\n    char = 0\n\n    # Loop through each character in the list\n    for i in str_list:\n        # Add the ASCII value of the current character to the character\n        char += ord(i)\n\n    # Find the character by taking the remainder of the character divided by 26\n    char = char % 26\n\n    # Convert the remainder back to a character and return it\n    return chr(65 + char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    for i in strr:\n        char += chr(ord(i) + 1)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return char % 26"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers of the sequence\n    sequence = [0, 1]\n    \n    # Loop through the remaining numbers in the sequence\n    for i in range(2, n+1):\n        # Determine the value of the next number in the sequence\n        next_number = (sequence[i-1] + sequence[i-2]) % 2\n        \n        # Add the next number to the sequence\n        sequence.append(next_number)\n    \n    # Return the nth number in the sequence\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    sequence = [2, 1]\n\n    for i in range(1, n):\n        new_sequence = []\n        for j in range(len(sequence)):\n            if sequence[j] == 1:\n                new_sequence.append(1)\n                if j == 0 or sequence[j-1] == 0:\n                    new_sequence.append(1)\n            else:\n                new_sequence.append(0)\n        sequence = new_sequence\n\n    return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    if n == 4:\n        return 1\n    if n > 4:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(2 * sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 1 + sequence(n-1)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i//2] * 2)\n        else:\n            sequence.append(sequence[i//2] + 1)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    # Initialize variables\n    sequence = [1]\n\n    # Loop until the nth number is found\n    for i in range(2, n+1):\n        # Find the sum of the previous two numbers in the sequence\n        sequence.append(sequence[i-2] + sequence[i-1])\n\n    # Return the nth number in the sequence\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        raise ValueError(\"The input value must be greater than 0.\")\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nsurface_area = surfacearea_sphere(radius)\nprint(\"The surface area of the sphere is\", surface_area)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*r**2)\n\nprint(surfacearea_sphere(1))"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * (r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    \n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((6 * n) ** 2 - 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    # First centered hexagonal number\n    k = 1\n    \n    # Calculate number of rows in centered hexagon\n    rows = n // 2\n    \n    # Calculate number of columns in centered hexagon\n    cols = n % 2\n    \n    # Initialize empty matrix to store centered hexagon\n    matrix = [[0 for j in range(cols)] for i in range(rows)]\n    \n    # Fill matrix with centered hexagon\n    for i in range(rows):\n        for j in range(cols):\n            if (i == 0 and j == 0) or (i == 0 and j == cols - 1) or (i == rows - 1 and j == 0) or (i == rows - 1 and j == cols - 1):\n                matrix[i][j] = k\n                k += 1\n            else:\n                matrix[i][j] = 0\n    \n    # Calculate the nth centered hexagonal number\n    if n % 2 == 0:\n        return matrix[rows-1][cols-1]\n    else:\n        return matrix[rows-1][cols//2]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Finding the centered hexagonal number\n    centered_hex_num = 2 * (n - 1) + 1\n\n    # Returning the centered hexagonal number\n    return centered_hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the sum of centered hexagonal numbers to 0\n    centered_hexagonal_sum = 0\n\n    # Initialize the previous centered hexagonal number to 0\n    prev_centered_hexagonal = 0\n\n    # Loop n times\n    for i in range(1, n+1):\n        # Calculate the centered hexagonal number for the current iteration\n        centered_hexagonal = prev_centered_hexagonal + 2*i - 1\n\n        # Check if the centered hexagonal number is prime\n        if centered_hexagonal in is_prime_numbers:\n            # Add the centered hexagonal number to the sum\n            centered_hexagonal_sum += centered_hexagonal\n\n        # Update the previous centered hexagonal number\n        prev_centered_hexagonal = centered_hexagonal\n\n    # Return the sum of centered hexagonal numbers\n    return centered_hexagonal_sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize variables\n    p1 = 0\n    p2 = 1\n    p3 = 0\n    c = 0\n    \n    # Loop through n iterations\n    for i in range(n):\n        # Calculate the next centered hexagonal number\n        c = 3*p2 - p3\n        p1 = p2\n        p2 = p3\n        p3 = c\n    \n    # Return the centered hexagonal number\n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the first centered hexagonal number to 1\n    c_h_n = 1\n    \n    # Check if n is even or odd\n    if n % 2 == 0:\n        # If n is even, initialize the second centered hexagonal number to 2\n        c_h_n = 2\n    else:\n        # If n is odd, initialize the second centered hexagonal number to 1\n        c_h_n = 1\n    \n    # Loop through the centered hexagonal numbers until n is reached\n    while c_h_n <= n:\n        # Calculate the next centered hexagonal number\n        next_c_h_n = c_h_n + 1\n        # Check if the next centered hexagonal number is even or odd\n        if next_c_h_n % 2 == 0:\n            # If the next centered hexagonal number is even, add it to the sum\n            c_h_sum += next_c_h_n\n        else:\n            # If the next centered hexagonal number is odd, add the next even centered hexagonal number\n            next_even_c_h_n = next_c_h_n + 2\n            while next_even_c_h_n % 2!= 0:\n                next_even_c_h_n += 1\n            c_h_sum += next_even_c_h_n\n        \n        # Add the current centered hexagonal number to the sum\n        c_h_sum += c_h_n\n        \n        # Move to the next centered hexagonal number\n        c_h_n += 1\n    \n    # Return the sum of the centered hexagonal numbers\n    return c_h_sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 21\n    elif n == 3:\n        return 75\n    elif n == 4:\n        return 220\n    elif n == 5:\n        return 676\n    elif n == 6:\n        return 1970"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    \n    # Calculate centered hexagonal number\n    for i in range(1, n + 1):\n        a = a * i\n        b = b * (2 * i - 1)\n        c = b * (2 * i - 1)\n        d = c * (2 * i - 1)\n        \n    return a + b + c + d"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize the first centered hexagonal number\n    centered_hex = 1\n    \n    # Loop through the number of times to find the nth centered hexagonal number\n    for i in range(1, n+1):\n        # Calculate the current centered hexagonal number\n        current_hex = centered_hex * (3*i - 1) / 2\n        \n        # Print the centered hexagonal number\n        print(current_hex)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key in dict2.keys():\n        if key not in merged_dict.keys():\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict.keys():\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as inputs, merges them into a single dictionary,\n    and returns the merged dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the merged dictionaries.\n    merged_dict = {}\n    # Iterate through the three input dictionaries.\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.defaultdict(int) # creating a dictionary with default value 0\n    \n    for element in list1:\n        freq_dict[element] += 1\n    \n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)  # use defaultdict to initialize a dictionary with 0 as value\n\n    for item in list1:\n        freq_dict[item] += 1  # increment the count for each element in the dictionary\n\n    return dict(freq_dict)  # return the final dictionary with the frequency of each element"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency\n    freq = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # if the element is in the dictionary, increment its count\n        if element in freq:\n            freq[element] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            freq[element] = 1\n    \n    # return the dictionary of frequency counts\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N < 0:\n        N = -N\n\n    # Check if the number is already the smallest number\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n\n    # Initialize variables to store the smallest and largest numbers\n    min_num = 1\n    max_num = N\n\n    # Check if the smallest number is closer than the largest number\n    while abs(min_num - max_num) > 1:\n        # Find the middle number\n        mid_num = (min_num + max_num) // 2\n\n        # Check if the closest smaller number is closer to the middle number\n        if abs(mid_num - N) <= abs(min_num - N):\n            min_num = mid_num\n        else:\n            max_num = mid_num\n\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = float('inf')\n    for i in range(1, N+1):\n        if abs(i-N) < closest:\n            closest = abs(i-N)\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n    for num in range(1, N):\n        if num < smallest:\n            closest = smallest\n            smallest = num\n        elif num < closest:\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = []\n    for i in range(1, N+1):\n        nums.append(i)\n    \n    nums.sort()\n    \n    smaller_num = nums[0]\n    closest_smaller_num = nums[1]\n    \n    if abs(N-smaller_num) < abs(N-closest_smaller_num):\n        return closest_smaller_num\n    else:\n        return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    smallest_diff = abs(smallest - N)\n\n    for i in range(N, 0, -1):\n        diff = abs(i - N)\n        if diff < smallest_diff:\n            smallest = i\n            smallest_diff = diff\n\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    smallest = N\n    for i in range(1, 100000):\n        if (i % 5 == 0) or (i % 2 == 0):\n            continue\n        if abs(i - N) < abs(smallest - N):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Initialize variables\n    min_num = N\n    diff = abs(N)\n\n    # Loop through the range of numbers from 1 to N-1\n    for i in range(1, N):\n        # Calculate the difference between the current number and N\n        curr_diff = abs(N - i)\n\n        # If the current number is smaller than the minimum number, update the minimum number and the difference\n        if curr_diff < diff:\n            min_num = i\n            diff = curr_diff\n\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [int(x) for x in input(\"Enter numbers separated by space: \").split()]\n    nums.sort()\n    return nums[1] - N"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    min_diff = float('inf')\n    min_num = None\n    for num in range(1, N+1):\n        diff = abs(num - N)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = float('inf')\n    closest = None\n    for num in range(N, 0, -1):\n        if abs(num - N) < diff:\n            diff = abs(num - N)\n            closest = num\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # initializing variables\n    max_len = 0\n    curr_len = 0\n\n    # iterating through the list\n    for word in list1:\n\n        # getting length of the word\n        curr_len = len(word)\n\n        # checking if the length of the word is greater than the current max length\n        if curr_len > max_len:\n\n            # updating the max length\n            max_len = curr_len\n\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of words.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    max_len = 0\n    for word in list1:\n        word_len = len(word)\n        if word_len > max_len:\n            max_len = word_len\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function checks if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for s in str1:\n            if sub_str in s:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, lst):\n    for sub in lst:\n        if sub.find(str1)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for str_value in str_list:\n        if sub_str in str_value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found in the given string.\")\n    else:\n        print(\"Substring not found in the given string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if string.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    elif n > 2 and n % 3 == 0:\n        return True\n    elif n > 5 and n % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if the number is positive\n    if n <= 0:\n        return \"Invalid input\"\n    \n    # calculate the square root of the number\n    square_root = round(n ** (1/2), 2)\n    \n    # check if the square root is an integer\n    if square_root.is_integer():\n        return \"The number is undulating\"\n    else:\n        return \"The number is not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        for i in range(1, n//2 + 1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    This function takes a number as input and returns True if the number is undulating, False otherwise.\n    A number is considered undulating if it is a palindrome, that is, the digits of the number read from right to left are the same as the digits read from left to right.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    left = 0\n    right = len(digits) - 1\n    \n    while left < right:\n        if digits[left]!= digits[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is an undulating number.\")\n    else:\n        print(n, \"is an odd number.\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is equal to 1\n    if n == 1:\n        return True\n    # Check if the number is divisible by 2 or not\n    elif n % 2 == 0:\n        return False\n    else:\n        # Check if the number is divisible by 3 or not\n        if n % 3 == 0:\n            return True\n        else:\n            # Check if the number is divisible by 4 or not\n            if n % 4 == 0:\n                return False\n            else:\n                # Check if the number is divisible by 5 or not\n                if n % 5 == 0:\n                    return True\n                else:\n                    # Check if the number is divisible by 6 or not\n                    if n % 6 == 0:\n                        return True\n                    else:\n                        # Check if the number is divisible by 7 or not\n                        if n % 7 == 0:\n                            return True\n                        else:\n                            # Check if the number is divisible by 8 or not\n                            if n % 8 == 0:\n                                return True\n                            else:\n                                # Check if the number is divisible by 9 or not\n                                if n % 9 == 0:\n                                    return True\n                                else:\n                                    # Check if the number is divisible by 10 or not\n                                    if n % 10 == 0:\n                                        return True\n                                    else:\n                                        # If none of the above conditions are satisfied, the number is not undulating\n                                        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0: #even\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments 'a' and 'b' and calculates the value of 'a' raised to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = test_list[0]\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value[1]:\n            min_value = test_list[i]\n            min_index = i\n    return min_value[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples in ascending order based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # sorting the list based on the second value of each tuple using the itemgetter function\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # printing the result\n    print(sorted_list[0][0])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple in the list with the smallest second value.\n    '''\n\n    # Use the itemgetter function from the operator module to get the second value of each tuple\n    second_values = [item[1] for item in test_list]\n\n    # Find the index of the minimum value\n    minimum_index = second_values.index(min(second_values))\n\n    # Return the index of the minimum value\n    return minimum_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n\n    Example:\n    test_list = [(\"apple\", 2), (\"banana\", 1), (\"cherry\", 4)]\n    index_minimum(test_list) # returns 2 (index of (\"banana\", 1))\n    '''\n\n    # Use the itemgetter function to extract the second value of each tuple\n    second_values = [item[1] for item in test_list]\n\n    # Find the index of the minimum value\n    index = second_values.index(min(second_values))\n\n    # Return the index of the tuple with the smallest second value\n    return index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second element of each tuple (i.e. their second value) in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list (i.e. the minimum value)\n    return sorted_list.index(min(sorted_list))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])  \n    for sub_list in lst:  \n        if len(sub_list) < min_length:  \n            min_length = len(sub_list)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = float('inf')\n    for item in lst:\n        if len(item) < length:\n            length = len(item)\n    return length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = float('inf')  \n    for i in lst:  \n        if len(i) < length:  \n            length = len(i)  \n    return length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_len = 99999999999999\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = float('inf')\n    for lst in lst:\n        if len(lst) < min_len:\n            min_len = len(lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    # initialize a counter variable to 0\n    count = 0\n    # loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # if n is divisible by i, increment the count\n        if n % i == 0:\n            count += 1\n    # return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    # initialize variables\n    count = 0\n    divisor = 2\n    \n    # loop through the range of numbers from 2 to the square root of n\n    while divisor <= n:\n        # if n is divisible by divisor, increment count and continue to next divisor\n        if n % divisor == 0:\n            count += 1\n            divisor += 1\n        # if n is not divisible by divisor, move to next number\n        else:\n            divisor += 1\n    \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem not in freq_dict:\n                    freq_dict[subitem] = 1\n                else:\n                    freq_dict[subitem] += 1\n        else:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list\n    flat_list = []\n    for sublist in list1:\n        flat_list.extend(sublist)\n\n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # iterate over the flattened list and update the frequency of each element\n    for element in flat_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency of each element\n    frequency = {}\n\n    # Iterate through the flattened list\n    for item in flat_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    # loop through each element in the list\n    for item in list1:\n        # if the element is not in the dictionary, add it with a frequency of 1\n        if item not in freq:\n            freq[item] = 1\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[item] += 1\n    # return the dictionary with the frequency of each element in the list\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # count frequency of each element in the flattened list\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    # Initialize an empty dictionary\n    freq = {}\n    # Loop over each element in the list\n    for item in list1:\n        # If the item is a list, recursively call the function\n        if type(item) == list:\n            # Recursively call the function with the sublist as argument\n            subfreq = frequency_lists(item)\n            # Merge the sublist's frequency dictionary into the main dictionary\n            freq = merge_freq(freq, subfreq)\n        # If the item is not a list, update its frequency in the dictionary\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    # Return the final dictionary of frequencies\n    return freq\n\ndef merge_freq(freq1, freq2):\n    # Initialize a new dictionary to store the merged frequency\n    merged_freq = {}\n    # Loop over each key-value pair in the frequency dictionaries\n    for key, value in freq1.items():\n        merged_freq[key] = value\n    for key, value in freq2.items():\n        if key in merged_freq:\n            merged_freq[key] += value\n        else:\n            merged_freq[key] = value\n    # Return the merged frequency dictionary\n    return merged_freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    \n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [num * len(numbers) for num in numbers]"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_product / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    # Convert decimal to binary using recursion\n    def decimal_to_binary_helper(n, binary_str=\"\"):\n        if n == 0:\n            return binary_str\n        else:\n            remainder = n % 2\n            binary_str = str(remainder) + binary_str\n            n = n // 2\n            return decimal_to_binary_helper(n, binary_str)\n\n    # Convert decimal to binary string and return\n    binary_str = decimal_to_binary_helper(n)\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    This function takes an integer as input and returns a string that represents the binary equivalent of the number.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # base case\n    if n == 0:\n        return '0'\n    \n    # recursive case\n    else:\n        # get the last digit of the number\n        last_digit = n % 2\n        \n        # convert the remaining decimal number to binary and add the last digit\n        binary = decimal_to_binary(n // 2) + str(last_digit)\n        \n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    :param n: the decimal number to convert\n    :return: the binary equivalent of the decimal number, as a string\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to store the binary number \n    binary_num = \"\" \n    # Loop until the decimal number becomes 0 \n    while n > 0: \n        # Get the last digit of the decimal number \n        last_digit = n % 2 \n        # Convert the last digit to its corresponding binary equivalent \n        binary_digit = str(last_digit) \n        # Append the binary digit to the binary number \n        binary_num = binary_digit + binary_num \n        # Remove the last digit of the decimal number \n        n //= 2 \n    # Return the binary number as a string with no leading zeros \n    return binary_num "
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    n = len(num_str)\n    for i in range(n-1, -1, -1):\n        if num_str[i] == num_str[n-i-1]:\n            num_str = num_str[:i] + num_str[i+1:]\n            n = i\n            break\n    next_num = int(num_str)\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    \n    # Initialize the next smallest palindrome to start with the first number in the range\n    next_palindrome = num\n    \n    # Iterate through the range of numbers from num to 999999999 (which is the largest palindrome that can be formed by multiplying two 9's)\n    for i in range(num, 1000000000):\n        # Check if the current number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # If it is, check if it is smaller than the current next smallest palindrome\n            if i < next_palindrome:\n                # If it is, update the next smallest palindrome\n                next_palindrome = i\n                \n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    largest_palindrome = 0\n    i = 1000000\n    while i > num:\n        i += 1\n        if is_palindrome(i):\n            largest_palindrome = i\n    \n    return largest_palindrome\n\nnum = int(input(\"Enter a number: \"))\nprint(\"Next smallest palindrome of\", num, \"is:\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 10:\n        return num + 1\n\n    digits = []\n    while num > 9:\n        digits.append(num % 10)\n        num //= 10\n\n    digits[-1] += 1\n\n    result = 0\n    for digit in digits:\n        result = 10 * result + digit\n\n    return result"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if num < 10:\n        return num + 100\n    elif is_palindrome(num):\n        return 100\n    else:\n        return next_smallest_palindrome(num - 1)\n\nnum = int(sys.argv[1])\nprint(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input integer to a string\n    str_num = str(num)\n\n    # Initialize a flag to check if the next smallest palindrome has been found\n    found = False\n\n    # Loop through all the digits in the string\n    for i in range(len(str_num)-1, -1, -1):\n\n        # Add the current digit to the end of the string and convert it to an integer\n        new_num = int(str_num[:i] + str_num[i] + str_num[i+1:])\n\n        # Check if the new number is a palindrome\n        if str(new_num) == str(new_num)[::-1]:\n\n            # If it is, check if it's the next smallest palindrome\n            if not found:\n                if new_num > num:\n                    found = True\n                    print(new_num)\n\n            # If the new number is not the next smallest palindrome, return it\n            else:\n                print(new_num)\n                return new_num\n\n    # If no palindrome has been found, return the original input number\n    print(num)\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the integer to a string and reverse it\n    s = str(num)[::-1]\n    # convert the reversed string to an integer and add 1\n    next_num = int(s) + 1\n    # check if the next number is within the range of the original number\n    if next_num >= num:\n        return next_num\n    # if the next number is outside the range, check if the reversed string is within the range\n    else:\n        # convert the reversed string to an integer\n        reversed_int = int(s)\n        # loop through all the integers in the range (excluding the original number) and check if any of them is a palindrome\n        for i in range(next_num, num):\n            if str(i)[::-1] == str(i):\n                return i\n        # if no palindrome is found, return the next smallest palindrome\n        return next_smallest_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Reverse the string\n    num_str = num_str[::-1]\n    # Remove leading zeros\n    while num_str[0] == '0':\n        num_str = num_str[1:]\n    # Convert the string back to an integer\n    next_smallest = int(num_str)\n    # Check if the next smallest palindrome is smaller than the original number\n    if next_smallest < num:\n        return next_smallest\n    else:\n        # If the next smallest palindrome is larger, try to find a smaller palindrome\n        start = next_smallest\n        while True:\n            if start < 1000000000 or is_palindrome(start):\n                return start\n            start += 1\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print(\"Please provide an integer argument.\")\n        sys.exit(1)\n    try:\n        num = int(sys.argv[1])\n        print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))\n    except ValueError:\n        print(\"Invalid integer argument.\")\n        sys.exit(1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # reverse the number to get the palindrome\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n\n    # find the next smallest palindrome\n    next_smallest = int(reversed_num_str) + 1\n\n    # check if the next smallest palindrome is smaller than the original number\n    if next_smallest < num:\n        return next_smallest\n    else:\n        # if not, return the original number\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n\n    # convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    # convert the reversed string back to an integer and add 1\n    next_num = int(num_str) + 1\n    # check if the next number is a palindrome\n    if str(next_num) == str(next_num)[::-1]:\n        return next_num\n    else:\n        return next_smallest_palindrome(next_num)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    else:\n        left = 1\n        right = n\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == k:\n                return arr[k - 1]\n            elif mid < k:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if len(arr) < k:\n        raise ValueError(\"Array length must be greater than or equal to k\")\n    elif k < 1:\n        raise ValueError(\"k must be a positive integer\")\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    # Calculate the index of the kth element\n    index = k - 1\n    \n    # Initialize a variable to store the current element\n    current = arr[0]\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # If the current element is less than the kth element, move to the next element\n        if current < arr[i]:\n            current = arr[i]\n        # If the current element is equal to the kth element, increment the index\n        elif current == arr[i]:\n            index += 1\n    \n    # Return the kth element\n    return arr[index]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        pivot_index = left + (right - left) // 2\n        pivot = arr[pivot_index]\n\n        if k == pivot_index + 1:\n            return pivot\n        elif k < pivot_index + 1:\n            right = pivot_index - 1\n        else:\n            left = pivot_index + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert 1-based indexing to 0-based indexing\n    k -= 1\n    # Initialize the count of elements in the array and the kth element to None\n    count = 0\n    kth = None\n    # Loop through the array\n    for i in range(len(arr)):\n        # Increment the count of elements\n        count += 1\n        # If we've found the kth element, return it\n        if count == k:\n            return arr[i]\n        # If we've found the kth element but not yet returned it, update the kth element\n        elif count > k:\n            kth = arr[i]\n    # If we haven't found the kth element yet, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid-1] == k:\n            return mid\n        elif arr[mid-1] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    \n    left = 1\n    right = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid - 1] == k:\n            return mid\n        elif arr[mid - 1] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    # Calculate the length of the array\n    length = len(arr)\n    \n    # Check if k is within the range of 1 to length of the array\n    if k < 1 or k > length:\n        return None\n    \n    # Initialize the left and right pointers\n    left = 1\n    right = length\n    \n    # Iterate until the left pointer is greater than or equal to k\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the middle element is the kth element, return it\n        if arr[mid] == k:\n            return arr[mid]\n        \n        # If the middle element is greater than the kth element, update the right pointer\n        elif arr[mid] < k:\n            left = mid + 1\n        \n        # If the middle element is less than the kth element, update the left pointer\n        else:\n            right = mid - 1\n    \n    # If the left pointer is greater than the right pointer, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n\n    left = 1\n    right = n\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if mid == k:\n            return arr[mid-1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif word[i].isupper():\n            camel_word += word[i]\n        else:\n            camel_word += '_' + word[i].lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i].isupper():\n            camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = \"\"\n    for i, letter in enumerate(word):\n        if i > 0 and letter.islower():\n            camel_case_word += \"_\"\n        camel_case_word += letter.upper()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    i = 0\n    while i < len(word):\n        if word[i]!= \"_\":\n            camel_case += word[i].upper()\n        i += 1\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert all words to lowercase\n    word = word.lower()\n    # Split the word by underscores\n    words = word.split('_')\n    # Convert the first word to uppercase and the rest to lowercase\n    camel_word = words[0] + ''.join([word.capitalize() for word in words[1:]])\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i, c in enumerate(word):\n        if i == 0 or c.isupper():\n            camel_word += c.lower()\n        else:\n            camel_word += c\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    if len(word) == 0:\n        return word\n    else:\n        return word[0].lower() + word[1:] + snake_to_camel(word[2:])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row\n    first_row = [1] * (2 * n + 1)\n    \n    # Initialize the second row\n    second_row = [0] * (2 * n + 1)\n    \n    # Fill the first row\n    for i in range(2, 2 * n + 1):\n        second_row[i] = first_row[i - 2]\n    \n    # Fill the second row\n    for i in range(2, 2 * n + 1):\n        first_row[i] = first_row[i - 1] + second_row[i - 1]\n    \n    # Return the final value of the first row\n    return first_row[-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Create a list of all the possible arrangements of m balls\n    arrangements = [[0 for j in range(n)] for i in range(m+1)]\n    for i in range(m):\n        arrangements[i+1][0] = 1\n        for j in range(1, n):\n            arrangements[i+1][j] = arrangements[i][j-1] + arrangements[i+1][j-1]\n    # Calculate the Eulerian number using the formula a(n, m) = a(m, n) * (m/n)^(n-1)\n    eulerian_num = arrangements[m][n-1] * (m/n)**(n-1)\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    \n    # Loop until all combinations have been found\n    while True:\n        # Find the number of possible combinations of length i and m-i\n        num_combinations = 0\n        for i in range(1, n+1):\n            num_combinations += n - i + 1\n        \n        # Check if all combinations have been found\n        if num_combinations == (n * (n - 1) * (n - 2) *... * 2 * 1):\n            break\n        \n        # Increment a and b until a is less than or equal to b\n        while a <= b:\n            a += 1\n        \n        # Update a and b\n        a -= 1\n        b += 1\n    \n    # Return a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    else:\n        return (n-1)*eulerian_num(n-1, m) + m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    elif n == 1:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize the first term of the series as 1\n    a = 1\n    \n    # Calculate the first term of the series\n    for i in range(1, n+1):\n        a *= i\n        \n    # Initialize the second term of the series as 1\n    b = 1\n    \n    # Calculate the second term of the series\n    for j in range(1, m+1):\n        b *= j\n        \n    # Return the sum of the two terms\n    return a + b - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row of the array with 1\n    a = [[1]*(m+1)]\n    # Traverse the remaining rows\n    for i in range(1, n):\n        # Initialize a new row and copy the previous row\n        b = [[0]*(m+1) for j in range(1, i+1)]\n        for j in range(1, m+1):\n            b[i][j] = a[i-1][j] + a[i-1][j-1]\n        # Update the array with the new row\n        a.append(b)\n    # Calculate the Eulerian number\n    return a[n-1][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # calculate the total number of nodes\n    total_nodes = n * m\n    \n    # initialize the number of edges to 0\n    edges = 0\n    \n    # loop through all possible edges\n    for i in range(1, n):\n        for j in range(1, m):\n            # add the edge if the nodes are connected\n            if (i + j) % 2 == 0:\n                edges += 1\n    \n    # return the Eulerian number\n    return total_nodes - edges"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    count = 0\n    num = 1\n\n    # Iterate over all possible values of n and m\n    while True:\n        if num >= n:\n            num = num - m\n        else:\n            count += 1\n            num += 1\n\n        # If the count is greater than or equal to n, break out of the loop\n        if count >= n:\n            break\n\n    # Return the final value of num\n    return num"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()\n    # Return the sorted input list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):   \n    count = 0  \n    for i in lst:  \n        if i == True:  \n            count += 1  \n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # create a new list by concatenating the two lists\n    new_list = test_list + test_tup\n    # return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new tuple with the given list appended to the given tuple\n    new_tup = test_tup + (test_list,)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup.append(item)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_tup = tuple(test_tup)  # Convert the tuple to a list to be able to modify it\n    test_tup.append(test_list)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three input lists\n    merged_list = merge_lists(num1, num2, num3)\n\n    # Convert the merged list into a heap\n    heapq.heapify(merged_list)\n\n    # Return the merged list as a list\n    return list(merged_list)\n\ndef merge_lists(num1, num2, num3):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    \"\"\"\n    # Initialize the merged list\n    merged_list = []\n\n    # Iterate through the three input lists\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        # Compare the first elements of the three lists\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    # Add the remaining elements of the input lists\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Use the heapq module to sort the merged list\n    sorted_list = heapq.nsmallest(len(merged_list), merged_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    for num in num1:\n        heapq.heappush(heap1, num)\n    for num in num2:\n        heapq.heappush(heap2, num)\n    for num in num3:\n        heapq.heappush(heap3, num)\n    \n    result = []\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) <= heapq.heappop(heap2) <= heapq.heappop(heap3):\n            result.append(heapq.heappop(heap1))\n            result.append(heapq.heappop(heap2))\n            result.append(heapq.heappop(heap3))\n        elif heapq.heappop(heap1) <= heapq.heappop(heap3):\n            result.append(heapq.heappop(heap1))\n            result.append(heapq.heappop(heap3))\n            result.append(heapq.heappop(heap2))\n        else:\n            result.append(heapq.heappop(heap2))\n            result.append(heapq.heappop(heap1))\n            result.append(heapq.heappop(heap3))\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    \n    # Merge the three lists into one sorted list\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    \n    # Add the remaining elements from the lists\n    while i < len(num1):\n        result.append(num1[i])\n        i += 1\n    while j < len(num2):\n        result.append(num2[j])\n        j += 1\n    while k < len(num3):\n        result.append(num3[k])\n        k += 1\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # initialize empty heap\n    heap = []\n    # insert each list into heap\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    # merge the lists into a single sorted list\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.merge(num1, num2, num3, merged_list)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the two smallest lists\n    merged_list = []\n    i, j = 0, 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] <= num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    # Add the remaining elements of the two smallest lists\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    # Merge the remaining elements of the third list with the merged list\n    i, j = 0, 0\n    while i < len(num3) and j < len(merged_list):\n        if num3[i] <= merged_list[j]:\n            merged_list[j] = num3[i]\n            i += 1\n        else:\n            i += 1\n    # Add the remaining elements of the third list\n    merged_list += num3[i:]\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge first two lists into a single sorted list\n    merged = []\n    i, j = 0, 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] <= num2[j]:\n            merged.append(num1[i])\n            i += 1\n        else:\n            merged.append(num2[j])\n            j += 1\n    merged += num1[i:]\n    merged += num2[j:]\n    \n    # Merge the last two lists into a single sorted list\n    merged2 = []\n    i, j = 0, 0\n    while i < len(num3) and j < len(merged):\n        if num3[i] <= merged[j]:\n            merged2.append(num3[i])\n            i += 1\n        else:\n            merged2.append(merged[j])\n            j += 1\n    merged2 += num3[i:]\n    merged2 += merged[j:]\n    \n    # Return the merged sorted list\n    return merged2"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge two sorted lists into a single sorted list\n    merged_list = []\n    i, j = 0, 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    \n    # Merge the sorted lists with the third list\n    merged_list.extend(num3)\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # initialize the count variable\n    count = 0\n\n    # loop n times\n    for i in range(n):\n        # convert the binary string to a list of digits\n        digits = [int(d) for d in s]\n\n        # reverse the list\n        digits.reverse()\n\n        # convert the reversed list back to a binary string\n        s = ''.join(map(str, digits))\n\n        # count the number of odd digits\n        count += sum(int(d) % 2 for d in s)\n\n    # return the count of odd digits\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary = ''\n    for i in s:\n        binary += str(int(i))\n    \n    count = 0\n    for i in range(n):\n        binary = binary[1:] + binary[0]\n        if binary.count('1') % 2 == 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert binary string to list of characters\n    s = list(s)\n    # initialize odd count to 0\n    count = 0\n    # iterate n times\n    for i in range(n):\n        # reverse the list\n        s.reverse()\n        # check if any number in the reversed list has an odd value\n        for j in range(len(s)):\n            if int(s[j]) % 2!= 0:\n                count += 1\n    # return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if s.count('1') % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Function to rotate a binary string n times\n    def rotate(s,n):\n        return s[-n:] + s[:-n]\n    \n    # Count the number of odd numbers in the rotated binary string\n    def count_odd(s):\n        count = 0\n        for i in s:\n            if int(i) % 2 == 1:\n                count += 1\n        return count\n    \n    # Find the number of odd numbers with an odd value when rotating the binary string n times\n    def odd_rotate(s,n):\n        count = 0\n        for i in range(n):\n            s = rotate(s,1)\n            count += count_odd(s)\n        return count\n    \n    # Apply the function to the input binary string and number of rotations\n    result = odd_rotate(s,n)\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        count += sum([int(bit) for bit in s[::-1]])\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # check if the input string is a valid binary string\n    if not s.replace(\"0\", \"\").replace(\"1\", \"\").isalnum():\n        print(\"Input string is not a valid binary string.\")\n        return None\n    \n    # initialize the count variable\n    count = 0\n    \n    # initialize the current position in the string\n    pos = 0\n    \n    # loop n times\n    for i in range(n):\n        \n        # loop through the binary string and rotate it\n        for j in range(len(s)-1, -1, -1):\n            if s[j] == '1':\n                s = s[:j] + '0' + s[j+1:]\n            else:\n                s = s[:j] + '1' + s[j+1:]\n        \n        # check if the rotated string has an odd value\n        if s[0] == '0' or s[1] == '0':\n            count += 1\n    \n    # return the count of odd values in the string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to integer\n    binary_int = int(s, 2)\n\n    # Initialize counter variable\n    count = 0\n\n    # Loop n times to rotate the binary string\n    for i in range(n):\n        # Left rotate the binary string by 1 bit\n        binary_int = binary_int << 1\n\n        # Check if the bit shifted to the left is odd\n        if binary_int & 1 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    count = 0\n    for i in range(n):\n        s = s[::-1] + s[:1]\n\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of digits\n    s = [int(digit) for digit in s]\n\n    # Initialize variables to keep track of the number of odd digits and the index of the first odd digit\n    odd_count = 0\n    first_odd_index = -1\n\n    # Loop over the input number of rotations\n    for _ in range(n):\n        # Create a new list by rotating the original list by one position to the right\n        rotated_list = [s[(i + 1) % len(s)] for i in range(len(s) - 1)]\n        rotated_list.append(s[0])\n\n        # Loop over the rotated list and count the number of odd digits\n        for digit in rotated_list:\n            if digit % 2 == 1:\n                odd_count += 1\n                if first_odd_index == -1:\n                    first_odd_index = rotated_list.index(digit)\n\n    # Return the total number of odd digits found after rotating the string the given number of times\n    return odd_count, first_odd_index"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j > 0:\n                for k in range(len(nestedlist[i][j])):\n                    if k > 0:\n                        common_elements.append(nestedlist[i][j][k])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create a set of all the elements in the first list\n    set1 = set(nestedlist[0])\n    # Initialize an empty set for common elements\n    common_set = set()\n    # Iterate through the remaining lists\n    for i in range(1, len(nestedlist)):\n        # Create a set of all the elements in the current list\n        set2 = set(nestedlist[i])\n        # Find the common elements between the current two sets\n        common_set = set1.intersection(set2)\n        # Update the set of all elements in the first list\n        set1 = set1.union(set2)\n    # Convert the common set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common.append(nestedlist[i][j])\n            else:\n                for k in range(len(nestedlist[i])):\n                    if j == k and nestedlist[i][j] not in common:\n                        common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        for element in sublist:\n            if element not in common_elements:\n                common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                continue\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        if i not in common:\n            common.append(i)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            common_elements += common_in_nested_lists(i)\n        else:\n            for j in nestedlist:\n                if i == j and i not in common_elements:\n                    common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if not re.match('^\\d+$', text): # check if text contains only digits\n        return False\n    if '.' in text: # check if text contains a decimal point\n        return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(bool(d) for d in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if not dictionary:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if not i:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums = list(nums)\n    # Initialize the result variable\n    result = 0\n    # Iterate over the list and add each number to the result\n    for num in nums:\n        result += num\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the sum to 0\n    total = 0\n    # Loop through each number in the list\n    for num in nums_list:\n        # Add the number to the total\n        total += num\n    # Return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Initialize an empty list to store the converted elements\n    converted_list = []\n    # Loop over each element in the original list of lists\n    for sublist in test_list:\n        # Loop over each element in the sublist\n        for element in sublist:\n            # Attempt to convert the element to a float\n            try:\n                converted_element = float(element)\n                # If the conversion was successful, add the converted element to the converted list\n                converted_list.append(converted_element)\n            except ValueError:\n                pass\n    # Return the converted list of floats\n    return converted_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                return None\n            else:\n                sublist[test_list.index(sublist)] = float(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                print(\"Cannot convert {} to float\".format(element))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                print(f'{element} is not convertible to float.')\n            else:\n                sublist[sublist.index(element)] = float(element)\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                return False\n    return True"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Initialize an empty list to store the converted values\n    float_list = []\n\n    # Loop through each element in the list\n    for element in test_list:\n        # Convert the element to a float if possible\n        try:\n            float_value = float(element)\n            float_list.append(float_value)\n        except ValueError:\n            continue\n\n    # Return the list of converted values\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # create an empty list to store the converted elements\n    result = []\n    # loop through each element in the input list\n    for element in test_list:\n        # try to convert the element to a float\n        try:\n            result.append(float(element))\n        # if the element cannot be converted to a float, add it to the result list as is\n        except ValueError:\n            result.append(element)\n    # return the converted list\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop through each sublist in the list\n    for sublist in test_list:\n        # loop through each element in the sublist\n        for element in sublist:\n            # if the element can be converted to a float, convert it and replace it in the sublist\n            try:\n                float(element)\n                sublist[sublist.index(element)] = float(element)\n            except:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character and convert each element to a string\n    list_of_strings = [str(elem) for elem in string.split()]\n    return list_of_strings"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    for i in count:\n        if count[i] == 1:\n            return i\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n\n    # If no such element is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    # create a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # iterate through the array and update the frequency dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    # iterate through the dictionary and find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    result = None\n\n    # Iterate through the array and check if the current element is unique\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i - 1]:\n            count += 1\n            if count == 1:\n                result = arr[i]\n\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return None\n    elif n == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n    else:\n        i = 0\n        j = n - 1\n        while i < j:\n            mid = (i + j) // 2\n            if arr[i] == arr[mid]:\n                j = mid\n            elif arr[mid] == arr[j]:\n                i = mid\n            else:\n                if arr[i] == arr[0]:\n                    return arr[0]\n                elif arr[j] == arr[n-1]:\n                    return arr[n-1]\n                elif arr[i] < arr[0] and arr[j] > arr[n-1]:\n                    return arr[0]\n                else:\n                    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    current_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == current_element:\n            count += 1\n        else:\n            count = 1\n            current_element = arr[i]\n    return current_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    else:\n        for i in range(len(arr)):\n            if i!= arr.index(arr[i]):\n                return arr[i]\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif arr[0]!= arr[1]:\n        for i in range(2, n):\n            if arr[i] == arr[0]:\n                return arr[0]\n            elif arr[i]!= arr[0]:\n                return arr[i]\n    else:\n        return None\n\narr = [1, 2, 2, 3, 4, 4, 5, 6, 7, 7]\nprint(search(arr))"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Iterate through the array and increment the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    # Initialize a variable to store the unique element that appears only once in the array\n    unique_element = None\n    \n    # Iterate through the dictionary and check if the frequency of each element is 1\n    for key, value in freq.items():\n        if value == 1:\n            unique_element = key\n    \n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    max_product_index = 0\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_product_index = (i, j)\n\n    return max_product, max_product_index"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between the numbers in pairs of tuples within the list.\n\n    Args:\n    list1 (list): A list of tuples containing numbers.\n\n    Returns:\n    int: The maximum absolute product between the numbers in pairs of tuples within the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n\n    Example:\n    max_product_tuple([[1, 2], [3, 4], [5, 6]]) # returns 12 (1*4 + 2*3)\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Input must be a list.')\n\n    max_product = -float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            absolute_product = abs(list1[i][0]*list1[j][1] - list1[j][0]*list1[i][1])\n            if absolute_product > max_product:\n                max_product = absolute_product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0] * list1[j][1]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    :param list1: List of tuples\n    :return: Maximum absolute product between numbers in pairs of tuples\n    \"\"\"\n\n    max_product = float('-inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if temp_product > max_product:\n                max_product = temp_product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function finds the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Parameters:\n        lst (list): The list containing tuples of numbers.\n\n    Returns:\n        (int): The maximum absolute product between numbers in pairs of tuples within the given list.\n    \"\"\"\n\n    max_product = float('-inf')\n    max_product_pair = float('-inf')\n\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = lst[i][0] * lst[j][0]\n            diff = abs(product - lst[i][1] * lst[j][1])\n\n            if diff > max_product_pair:\n                max_product_pair = diff\n\n    return max_product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[j][0]*list1[i][1]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            max_product = max(max_product, abs(list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0]))\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum and count variables\n    sum_amicable = 0\n    count = 0\n\n    # loop through all numbers from 1 to limit (inclusive)\n    for i in range(1, limit+1):\n        # check if i is amicable to a number from 1 to i-1\n        if i == amicable_number(i):\n            sum_amicable += i\n            count += 1\n\n    # return the sum of amicable numbers\n    return sum_amicable\n\ndef amicable_number(num):\n    '''\n    Write a function to find the amicable number for a specified number.\n    '''\n    # initialize sum and count variables\n    sum_amicable = 0\n    count = 0\n\n    # loop through all numbers from 1 to num-1\n    for i in range(1, num):\n        # check if i is divisible by num\n        if i % num == 0:\n            # check if i-num is amicable to a number from 1 to num-1\n            if (i-num) == amicable_number(num):\n                sum_amicable += i\n                count += 1\n\n    # return the amicable number\n    if count > 0:\n        return sum_amicable\n    else:\n        return None"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize variables\n    a = 1\n    b = 2\n    total_sum = 0\n    \n    # Loop until b exceeds limit\n    while b <= limit:\n        # Check if b is a amicable number\n        if is_amicable(a, b):\n            # Add b to total sum\n            total_sum += b\n        \n        # Find next number in the sequence\n        a, b = b, a + b\n    \n    # Return the total sum of amicable numbers\n    return total_sum\n\ndef is_amicable(a, b):\n    \"\"\"\n    Check if a and b are amicable numbers.\n    \"\"\"\n    # Check if a is divisible by b\n    if a % b == 0:\n        # Check if b is divisible by a\n        if b % a == 0:\n            # If both conditions are true, then a and b are amicable\n            return True\n    \n    # If none of the above conditions are true, then a and b are not amicable\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum_of_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef sum_of_divisors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for i in range(1, limit + 1):\n        if i!= 1 and i!= limit:\n            j = i\n            while j!= 1:\n                if j == i:\n                    j = i + i\n                else:\n                    j -= i\n                if j == 1:\n                    break\n            else:\n                total += i\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_amicable_numbers(n):\n    \"\"\"\n    Returns the sum of all Amicable numbers up to n.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, n):\n        if i == sum_of_divisors(i):\n            amicable_numbers.append(i)\n        if i == sum_of_divisors(sum_of_divisors(i)):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Returns the sum of all divisors of n.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n // i)\n    return sum(divisors)\n\n\ndef main():\n    limit = 20000\n    print(f\"Sum of Amicable numbers up to {limit}: {sum_amicable_numbers(limit)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = [1]\n    for i in range(2, limit):\n        if i not in amicable:\n            for j in range(2, limit):\n                if i+j in amicable:\n                    amicable.append(i+j)\n    return sum(amicable)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize a list to store amicable numbers\n    amicable_numbers = []\n    \n    # loop through all numbers from 1 to limit\n    for num in range(1, limit + 1):\n        # check if the number is amicable\n        if num in amicable_numbers:\n            continue\n        # check if the number is a divisor of both the sum of itself and its amicable factor\n        for factor in amicable_numbers:\n            if num % factor == 0 and factor % num == 0:\n                amicable_numbers.append(num + factor)\n                break\n    \n    # return the sum of all amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a list to store all the amicable numbers\n    amicable_list = []\n\n    # Iterate through all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the current number is amicable\n        if i in amicable_list:\n            continue\n        # Check if the current number is divisible by any number between 1 and i-1\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            # If no number between 1 and i-1 divides i, then i is amicable\n            amicable_list.append(i)\n\n    # Sum all the amicable numbers in the list\n    return sum(amicable_list)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to any number from 1 to the square root of the number.\n    '''\n    sqrt_num = int(num ** 0.5)\n    for i in range(2, sqrt_num):\n        if (num % i == 0) and (i!= num // i):\n            return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Use a list to store the pair of numbers that sum up to the limit\n    pairs = []\n    # Iterate from 2 to the limit\n    for num1 in range(2, limit+1):\n        # Check if the number is amicable to any other number from 2 to the limit\n        for num2 in range(2, limit+1):\n            if num1 + num2 == limit and num1!= num2:\n                pairs.append((num1, num2))\n\n    # Sum all the pair values\n    amicable_sum = sum([pair[0] + pair[1] for pair in pairs])\n\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the magnitude of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n    \n    # calculate the phase angle of the complex number\n    phase = cmath.phase(a + b*1j)\n    \n    # convert the phase angle from radians to degrees\n    phase = phase * 180 / cmath.pi\n    \n    # return the angle as a string\n    return str(phase)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j) # computing the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the angle using cmath.phase()\n    angle = cmath.phase(a + b * 1j)\n\n    # Return the angle in degrees\n    return round(angle * 180 / cmath.pi, 1)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+1j*b)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the angle of the complex number\n    angle = cmath.phase(complex(a,b))\n    # format the angle to two decimal places\n    angle = round(angle,2)\n    # return the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes in two complex numbers as input and returns the angle of the complex number.\n    '''\n    angle = cmath.phase(a + b)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    # initialize variables for counting 0s and 1s\n    count_0 = 0\n    count_1 = 0\n    \n    # loop through each character in the string\n    for char in string:\n        # if the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # if the character is a 1, increment the count of 1s\n        elif char == '1':\n            count_1 += 1\n            \n    # initialize the maximum difference to be found\n    max_diff = 0\n    \n    # loop through each possible sub-string of the string\n    for i in range(len(string)):\n        # loop through each possible sub-string of the string\n        for j in range(len(string)):\n            # if the sub-string has 1s and 0s, calculate the difference in length\n            if count_1 - count_0 > 0 and count_0 - count_1 > 0:\n                diff = abs(j - i)\n                # if the current difference is greater than the maximum difference found so far, update the maximum difference\n                if diff > max_diff:\n                    max_diff = diff\n                    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    length = len(string)\n    max_diff = 0\n    \n    # Iterate over all possible sub-strings\n    for i in range(length):\n        for j in range(i+1, length+1):\n            \n            # Calculate the difference between the number of 0s and 1s in the sub-string\n            diff = sum([int(x) for x in string[i:j]]) - sum([int(x) for x in string[:i]]) - sum([int(x) for x in string[j:]])\n            \n            # Update the maximum difference found so far\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n\n    for i in range(n):\n        zeros = 0\n        ones = 0\n\n        for j in range(i, n):\n            if string[j] == '0':\n                zeros += 1\n            else:\n                ones += 1\n\n            diff = abs(zeros - ones)\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n\n            diff = abs(count_0 - count_1)\n\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n        diff = abs(count_0 - count_1)\n        if diff > length:\n            length = diff\n            \n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in string]\n    \n    # Initialize the maximum difference to zero\n    max_diff = 0\n    \n    # Loop through each sub-string of the list\n    for i in range(len(binary_list)):\n        # Loop through each possible position for the sub-string\n        for j in range(i, len(binary_list)):\n            # Calculate the difference between the number of 0s and number of 1s in the sub-string\n            diff = sum(binary_list[i:j+1]) - (len(binary_list[i:j+1]) * (2 ** len(binary_list[i:j+1]) - 1))\n            \n            # Update the maximum difference if necessary\n            max_diff = max(diff, max_diff)\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    length = len(string)\n\n    # Traverse through all possible substrings of the given binary string\n    for i in range(length):\n        for j in range(i+1, length+1):\n            count_0 = 0\n            count_1 = 0\n\n            # Calculate the number of 0s and 1s in each substring\n            for k in range(i, j):\n                if string[k] == '0':\n                    count_0 += 1\n                elif string[k] == '1':\n                    count_1 += 1\n\n            # Calculate the maximum difference between the number of 0s and number of 1s\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        if count_0 > count_1:\n            count_0 = 0\n        else:\n            count_1 = 0\n\n        max_diff = max(max_diff, count_0 - count_1)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    # Initialize variables for length of 0s and 1s in the string\n    count0 = 0\n    count1 = 0\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count0 += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1':\n            count1 += 1\n        # If the character is neither 0 nor 1, reset the count of 0s and 1s\n        else:\n            count0 = 0\n            count1 = 0\n\n    # Initialize variables for the maximum length of the sub-string with 0s and 1s\n    max_length = 0\n\n    # Iterate through each possible sub-string of the string\n    for i in range(len(string) - 1):\n        # If the sub-string has 0s and 1s with the maximum difference, update the maximum length\n        if count0 - count1 > 0:\n            sub_string = string[i:i+2]\n            current_length = len(sub_string)\n            if current_length > max_length:\n                max_length = current_length\n\n    return max_length"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of common divisors\n    sum_cd = 0\n    \n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a,b)+1):\n        # Check if i is a common divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum of common divisors\n            sum_cd += i\n    \n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Check if both numbers are positive\n    if a <= 0 or b <= 0:\n        print(\"Error: Both numbers should be positive\")\n        return\n    \n    # Calculate the sum of common divisors of the two numbers\n    sum_cd = 1\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            sum_cd *= i\n    \n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Function to check if a number is a common divisor of b\n    def is_common_divisor(a, b):\n        if a == 0:\n            return True\n        for i in range(1, int(b**0.5) + 1):\n            if b % i == 0 and a % i == 0:\n                return True\n        return False\n\n    # Calculate the sum of common divisors of a and b\n    sum_cd = 0\n    for num in range(1, a + 1):\n        if is_common_divisor(a, num):\n            sum_cd += num\n\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns their sum of their common divisors.\n    If no common divisor is found, it returns -1.\n    '''\n    def gcd(a, b):\n        '''\n        This helper function takes two numbers as input and returns their greatest common divisor.\n        '''\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        '''\n        This helper function takes two numbers as input and returns their least common multiple.\n        '''\n        return a * b // gcd(a, b)\n\n    def sum_of_factors(n):\n        '''\n        This helper function takes a number as input and returns their sum of their factors.\n        '''\n        factors = []\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                if i!= n // i:\n                    factors.append(n // i)\n        return factors\n\n    def sum_of_common_divisors(a, b):\n        '''\n        This is the main function that calculates the sum of common divisors of two given numbers.\n        It first finds their greatest common divisor using the helper function gcd.\n        Then it finds their least common multiple using the helper function lcm.\n        Finally, it calculates the sum of their factors using the helper function sum_of_factors.\n        '''\n        common_divisor = gcd(a, b)\n        lcm_of_divisors = lcm(a, b)\n        factors_of_divisors = sum_of_factors(common_divisor)\n        factors_of_lcm = sum_of_factors(lcm_of_divisors)\n        sum_of_common_divisors = sum(factors_of_divisors) + sum(factors_of_lcm)\n        return sum_of_common_divisors\n\n    if common_divisor == -1:\n        return -1\n    else:\n        return sum_of_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # find the common divisors of a and b\n    common_divisors = []\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n        i += 1\n    \n    # find the sum of common divisors\n    total_sum = 0\n    for i in common_divisors:\n        total_sum += i\n    \n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, b+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    This function takes two integers as input and returns the sum of their common divisors.\n    '''\n\n    def gcd(a, b):\n        '''\n        This function takes two integers as input and returns their greatest common divisor.\n        '''\n\n        while b:\n            a, b = b, a % b\n\n        return a\n\n    # Find the GCD of the two numbers\n    gcd_ab = gcd(a, b)\n    gcd_ba = gcd(b, a)\n\n    # Calculate the sum of the GCDs\n    sum_ab = 0\n    sum_ba = 0\n\n    for i in range(gcd_ab, gcd_ba + 1):\n        if gcd_ab % i == 0 and gcd_ba % i == 0:\n            sum_ab += i\n            sum_ba += i\n\n    return sum_ab + sum_ba"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize a set to store common divisors\n    common = set()\n\n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a common divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # Add i to the set of common divisors\n            common.add(i)\n\n    # Return the sum of the common divisors\n    return sum(common)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize a list to store the common divisors of a and b\n    divisors = []\n\n    # Calculate the common divisors of a and b using a loop\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Calculate the sum of common divisors\n    sum_divisors = sum(divisors)\n\n    return sum_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        result = result ^ carry\n        x = x << 1\n        y = y >> 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(result)"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    This function takes a list of words and returns a list of words that are longer than n characters.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n    \n    # Initialize an empty list to store long words\n    long_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        \n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            \n            # If the word is longer than n, add it to the list\n            long_words.append(word)\n    \n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    words = str.split() # split the string into words\n    long_words = []\n    for word in words:\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # add the word to the list of long words\n    return long_words # return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): the maximum number of characters a word can have.\n        words (list of str): a list of words.\n\n    Returns:\n        list of str: a list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(set(my_matrix)):\n        return False\n    # Check if the matrix is a magic square\n    if n % 2 == 0:\n        for i in range(n):\n            # Check if the sum of the first row is equal to the sum of the last column\n            if my_matrix[i][0] + my_matrix[n-1][i]!= sum(my_matrix[j][n-1] for j in range(n)):\n                return False\n            # Check if the sum of the first column is equal to the sum of the last row\n            if my_matrix[i][0] + my_matrix[i][n-1]!= sum(my_matrix[j][i] for j in range(n)):\n                return False\n    else:\n        for i in range(n):\n            # Check if the sum of the first row is equal to the sum of the last column\n            if my_matrix[i][0] + my_matrix[n-1][i]!= sum(my_matrix[j][n-1] for j in range(n)):\n                return False\n            # Check if the sum of the first column is equal to the sum of the last row\n            if my_matrix[i][0] + my_matrix[i][n-1]!= sum(my_matrix[j][i] for j in range(n)):\n                return False\n        # Check if the sum of the first row is equal to the sum of the first column\n        if my_matrix[0][0] + my_matrix[n-1][0]!= sum(my_matrix[i][j] for i in range(n) for j in range(n)):\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix has 10 elements\n    if n*n!= len(my_matrix) + len(my_matrix[0]) - 1:\n        return False\n\n    # Check if the sum of each row and column is equal to 15\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= 15 or col_sum!= 15:\n            return False\n\n    # Check if the sum of the diagonals is equal to 15\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += my_matrix[i][i]\n        diag_sum2 += my_matrix[i][n-i-1]\n    if diag_sum1!= 15 or diag_sum2!= 15:\n        return False\n\n    # Check if the sum of the 3x3 submatrices is equal to 15\n    for i in range(n-2):\n        for j in range(n-2):\n            submatrix_sum = 0\n            for k in range(3):\n                for l in range(3):\n                    submatrix_sum += my_matrix[i+k][j+l]\n            if submatrix_sum!= 15:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the input is a list of lists\n    if not isinstance(my_matrix, list) or not all(isinstance(row, list) for row in my_matrix):\n        return \"Input must be a list of lists.\"\n    \n    # Check if the matrix is a magic square\n    if not all(len(my_matrix[0]) == len(set(row)) for row in my_matrix):\n        return \"Matrix is not a magic square.\"\n    \n    return \"Matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n    square_sum = 0\n    for i in range(num_rows):\n        for j in range(num_cols):\n            square_sum += my_matrix[i][j]\n    square_sum = square_sum - num_rows * num_cols\n    square_sum_pow = square_sum ** 2\n    if square_sum_pow == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    \n    # Check if the sum of the diagonal elements is equal to the total number of elements in the matrix\n    if diagonal_sum!= len(my_matrix) ** 2:\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            # Check if the element at position (i,j) is equal to the sum of the elements in the sub-matrix\n            # with the same row and column indices\n            sub_matrix = [my_matrix[k][l] for k in range(len(my_matrix)) if k!= i and l!= j]\n            sub_sum = sum(sub_matrix)\n            if my_matrix[i][j]!= sub_sum:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            magic_sum += my_matrix[i][j]\n    # Check if the magic sum is equal to the sum of the diagonals\n    if magic_sum == n*n*(2*n + 1) / 6:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has the same dimensions as the magic square\n    n = len(my_matrix)\n    if n**2!= sum(map(sum, my_matrix)):\n        return False\n\n    # Check if each row and column contains only unique values\n    for i in range(n):\n        if len(set(my_matrix[i]))!= n:\n            return False\n        if len(set(my_matrix[j] for j in range(n) if j!= i))!= n:\n            return False\n\n    # Check if each sub-square contains only unique values\n    for i in range(n-3):\n        for j in range(n-3):\n            sub_square = [my_matrix[i+k][j+k] for k in range(3)]\n            if len(set(sub_square))!= 9:\n                return False\n\n    # If none of the above conditions are true, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(n)]\n    diag_sum1 = sum(row[i] for i in range(n))\n    diag_sum2 = sum(row[-(i+1)] for i in range(n))\n    return all(sum(row) == row_sums[i] for i in range(n)) and \\\n           all(sum(row[i] for row in my_matrix) == col_sums[i] for i in range(n)) and \\\n           diag_sum1 == diag_sum2"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if all elements are the same\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= my_matrix[0][0]:\n                return False\n\n    # Check if there are any duplicate elements\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] in my_matrix[0][j:cols] or my_matrix[0][i:rows] == [my_matrix[i][j]]:\n                return False\n\n    # Check if the sum of all elements is 0\n    for i in range(rows):\n        for j in range(cols):\n            sum = 0\n            for k in range(rows):\n                sum += my_matrix[i][k]\n            if sum!= 0:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum == n*n or col_sum == n*n:\n            return True\n    return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    return max(freq, key=freq.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_num = None\n    \n    # Counting the frequency of each number in the list\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Finding the maximum frequency\n    for key, value in freq_dict.items():\n        if value > max_freq:\n            max_freq = value\n            max_num = key\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_item = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    \n    for key, value in freq.items():\n        if value > max_freq:\n            max_freq = value\n            max_num = key\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    # Iterate through the list and update the frequency dictionary\n    for num in nums:\n        freq_dict[num] += 1\n    # Find the item with the maximum frequency\n    max_num = max(freq_dict, key=freq_dict.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a dictionary to count the occurrences of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # find the item with the maximum frequency\n    max_num = None\n    max_freq = 0\n    for num in freq:\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_key = [key for key in freq_dict if freq_dict[key] == max_freq][0]\n    return max_key"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str2 = str1[i] + str2\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels_set:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1[i] in vowels and i not in vowel_index:\n            vowel_index.append(i)\n    vowel_index.reverse()\n    result = []\n    for i in vowel_index:\n        result.append(str1[i])\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char in vowels and char.lower()!= 'y':\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowel_index = []\n    \n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_index.append(i)\n            \n    if not vowel_index:\n        return str1\n    \n    start = 0\n    end = len(str1) - 1\n    \n    for i in vowel_index:\n        if i < start:\n            start = i\n        if i > end:\n            end = i\n    \n    if start > end:\n        return str1\n    \n    return str1[start:end+1][::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_vowels = []\n    for char in string:\n        if char not in vowels:\n            reversed_vowels.append(char)\n    reversed_string = ''.join(reversed_vowels)\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            index = vowels.index(char)\n            reversed_str = char + reversed_str\n        else:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # join() method to concatenate the elements of the tuple with a comma\n    string = \",\".join(str(x) for x in tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string1 = \"\"\n    for item in tup1:\n        string1 += str(item) + \" \"\n    return string1.strip()"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count * -1"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * ((3 * n) - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) + (n // 2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 0:\n        print(\"Invalid input! Please enter a positive integer.\")\n        return\n    elif n == 0:\n        return 1\n    else:\n        return 2 * (n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex = 1\n    for i in range(1, n + 1):\n        hex += i*i\n    return hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    # loop through rows and columns\n    for i in range(1, n+1):\n        # loop through columns in each row\n        for j in range(i):\n            # increment the hexagonal number\n            hex_num += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    This function calculates the nth hexagonal number.\n    \"\"\"\n    return (n * (n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5*n*n - 3*n) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex = 1\n    for i in range(1, n+1): \n        hex = 2*hex - 1\n    return hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) // 3"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zero_count = array('i', [0] * n)\n    non_zero_count = array('i', [0] * n)\n\n    for num in nums:\n        if num == 0:\n            zero_count[non_zero_count.index(max(non_zero_count))] += 1\n        else:\n            non_zero_count[non_zero_count.index(min(non_zero_count))] += 1\n\n    for i in range(n):\n        zero_count[i] /= non_zero_count[i]\n\n    return [round(num, 4) for num in zero_count]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n            \n    ratio = zeros / non_zeros if non_zeros!= 0 else None\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    \n    zero_ratio = zero_count / non_zero_count\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Create an array of zeros to store the count of non-zeroes\n    zeros = array('i', [0] * len(nums))\n\n    # Loop through the input array and increment the count for non-zeroes\n    for num in nums:\n        if num!= 0:\n            zeros[nums.index(num)] += 1\n\n    # Compute the ratio of zeroes to non-zeroes\n    if len(nums) == 0:\n        return 0\n    return zeros[0] / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums) # convert the array of integers to an array object\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    ratio = non_zero_count / zero_count\n    print(\"The ratio of zeroes to non-zeroes in the array is:\", ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array to store the counts of non-zero and zero values\n    arr = array('i', [0]*len(nums))\n\n    # Iterate over the array and update the counts\n    for num in nums:\n        if num == 0:\n            arr[0] += 1\n        else:\n            arr[1] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count = arr[0] / (arr[0] + arr[1])\n\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create an array of integers\n    arr = array('i', nums)\n\n    # Count the number of zeroes and non-zeroes\n    count_zeroes = 0\n    count_ones = 0\n\n    for num in arr:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_ones += 1\n\n    # Calculate the ratio\n    ratio = count_zeroes / count_ones\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return (zero_count / non_zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Define a helper function to check whether a number can be represented as sum of powers of 2 or not\n    def helper(num, power):\n        if power == 0:\n            return 0\n        elif num % (2**power) == 0:\n            return 1 + helper(num // (2**power), power-1)\n        else:\n            return helper(num, power-1)\n\n    # Check whether the given number can be represented as sum of non-zero powers of 2 or not\n    if helper(n, 31) == n:\n        return True\n    elif helper(n, 30) == n:\n        return True\n    elif helper(n, 29) == n:\n        return True\n    elif helper(n, 28) == n:\n        return True\n    elif helper(n, 27) == n:\n        return True\n    elif helper(n, 26) == n:\n        return True\n    elif helper(n, 25) == n:\n        return True\n    elif helper(n, 24) == n:\n        return True\n    elif helper(n, 23) == n:\n        return True\n    elif helper(n, 22) == n:\n        return True\n    elif helper(n, 21) == n:\n        return True\n    elif helper(n, 20) == n:\n        return True\n    elif helper(n, 19) == n:\n        return True\n    elif helper(n, 18) == n:\n        return True\n    elif helper(n, 17) == n:\n        return True\n    elif helper(n, 16) == n:\n        return True\n    elif helper(n, 15) == n:\n        return True\n    elif helper(n, 14) == n:\n        return True\n    elif helper(n, 13) == n:\n        return True\n    elif helper(n, 12) == n:\n        return True\n    elif helper(n, 11) == n:\n        return True\n    elif helper(n, 10) == n:\n        return True\n    elif helper(n, 9) == n:\n        return True\n    elif helper(n, 8) == n:\n        return True\n    elif helper(n, 7) == n:\n        return True\n    elif helper(n, 6) == n:\n        return True\n    elif helper(n, 5) == n:\n        return True\n    elif helper(n, 4) == n:\n        return True\n    elif helper(n, 3) == n:\n        return True\n    elif helper(n, 2) == n:\n        return True\n    elif helper(n, 1) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # converting the given number to binary and storing it in a string\n    binary = bin(n)[2:]\n\n    # checking if the binary string has any 0's at the beginning\n    if binary.startswith('0'):\n        # if the binary string starts with 0, the number cannot be represented as sum of non-zero powers of 2\n        return False\n\n    # checking if the binary string has any 1's at the beginning\n    if binary.startswith('1'):\n        # if the binary string starts with 1, the number cannot be represented as sum of non-zero powers of 2\n        return False\n\n    # checking if the binary string has any 0's at the end\n    if binary.endswith('0'):\n        # if the binary string ends with 0, the number cannot be represented as sum of non-zero powers of 2\n        return False\n\n    # checking if the binary string has any 1's at the end\n    if binary.endswith('1'):\n        # if the binary string ends with 1, the number cannot be represented as sum of non-zero powers of 2\n        return False\n\n    # checking if the binary string has any 0's in the middle\n    for i in range(len(binary)-1):\n        if binary[i] == '0' and binary[i+1] == '0':\n            # if the binary string has 0's in the middle, the number cannot be represented as sum of non-zero powers of 2\n            return False\n\n    # if none of the above conditions are true, the number can be represented as sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function takes an integer as input and returns True if it can be represented as sum of non-zero powers of 2,\n    otherwise returns False.\n    \n    A number can be represented as sum of non-zero powers of 2 if the number can be written as sum of powers of 2 \n    (i.e., 2^n * 3^n * 5^n *... * 2^1 * 3^1 * 5^1 *...) and if the sum of these powers is a power of 2.\n    \n    For example, 15 can be written as 2^4 + 3^4 + 5^4 + 2^2 + 3^2 + 5^2 + 2^1 + 3^1 + 5^1 = 160. \n    2^4 + 3^4 + 5^4 = 160 * 4 = 640, so 15 can be represented as sum of powers of 2.\n    \"\"\"\n    \n    # Initialize a list to store the powers of 2\n    powers_of_2 = []\n    \n    # Loop through all the numbers from 1 to n-1\n    for i in range(1, n+1):\n        # If the number can be written as 2^i * 3^i * 5^i *... * 2^(i-1) * 3^(i-1) * 5^(i-1), append i to the list of powers of 2\n        if i % 2 == 0:\n            powers_of_2.append(i)\n    \n    # Calculate the sum of the powers of 2 and check if it is a power of 2\n    sum_of_powers_of_2 = sum(powers_of_2)\n    return sum_of_powers_of_2 == 2**n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def is_sum_of_powers_of_two(n): \n        '''\n        Function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n        '''\n        if n == 0:\n            return False\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if is_sum_of_powers_of_two(n // i):\n                    return True\n        return False\n\n    if is_sum_of_powers_of_two(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, int(n**0.5)+1): \n        if n%i == 0: \n            if i**2 == n: \n                return True\n            elif i**2 < n: \n                return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize the count of non-zero bits in the binary representation of n\n    count = 0\n    \n    # Loop through all bits of the binary representation of n and increment the count of non-zero bits\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    \n    # Check if the count of non-zero bits is greater than or equal to the number of bits of the binary representation of n\n    if count >= len(bin(n)[2:].lstrip('0')):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n\n    # Loop through the digits of the number\n    for digit in str(n):\n        # If the digit is not 0, add 2^i to the power_sum variable\n        if digit!= '0':\n            power_sum += 2 ** int(digit)\n\n    # If the power_sum is a power of 2, the given number can be represented as sum of non-zero powers of 2\n    if power_sum == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Function to check if a number is divisible by 2 raised to a certain power\n    def is_pow_of_2(num, power):\n        if num & (1 << power)!= 0:\n            return True\n        else:\n            return False\n\n    # Check if the given number is divisible by 2 raised to a power of 2\n    for i in range(1, 32):\n        if is_pow_of_2(n, i):\n            return False\n\n    # Check if the given number can be written as sum of powers of 2\n    for i in range(1, 32):\n        if is_pow_of_2(n, i) and is_pow_of_2(n - 1, 31 - i):\n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # convert the number to binary\n    binary = bin(n)[2:]\n    \n    # check if the number is already in binary\n    if n == int(binary, 2):\n        return True\n    \n    # check if the binary representation is a sum of powers of 2\n    for i in range(1, len(binary)):\n        if binary[i] == '1':\n            # check if there is a power of 2 in the binary representation\n            power = 0\n            while binary[i+power] == '1':\n                power += 1\n            if power > 0:\n                # check if the next power of 2 is greater than the current power\n                if (2 ** power) > i+power:\n                    return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the number to binary and count the number of '1'\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n\n    # Check if the count of '1' is equal to the number of bits in the binary representation of n\n    return count == len(bin(n)[2:])"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle with radius r.\n    \"\"\"\n    pi = 3.14159  # Value of pi\n    circumference = 2 * pi * r  # calculate circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2*pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # approximate value of circumference\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n\n    Args:\n        test_list (list[list]): List of lists to flatten.\n\n    Returns:\n        set: A set of all the numbers in the flattened list.\n    \"\"\"\n\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # flatten the list of lists into a single list\n    flat_list = []\n    for sublist in test_list:\n        flat_list += sublist\n    # remove duplicates using set\n    unique_list = list(set(flat_list))\n    return unique_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list, current_list=None):\n    if current_list is None:\n        current_list = []\n\n    if not test_list:\n        return current_list\n\n    if isinstance(test_list[0], (list, tuple)):\n        return extract_singly(test_list[0], current_list) + extract_singly(test_list[1:], current_list)\n    else:\n        return [test_list[0]] + extract_singly(test_list[1:], current_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result.extend(sublist)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result += sublist\n    return result"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the element at the current index\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # Reverse the pancake starting from the current index\n        start = i\n        while start > 0:\n            end = start + 1\n            while end < n:\n                nums[start], nums[end] = nums[end], nums[start]\n                start += 1\n                end += 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sorting algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def pancake_sort_helper(arr, n):\n        for i in range(n - 1, 0, -1):\n            heapify(arr, n, i)\n\n    pancake_sort_helper(nums, len(nums))\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Store the indices of the pancakes in the original list\n    indices = [i for i in range(n)]\n    # Sort the pancakes in reverse order\n    indices.sort(reverse=True)\n    # Reverse the sorted pancakes and place them in the original list\n    for i in range(n):\n        nums[i], nums[indices[i]] = nums[indices[i]], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Sort the list in decreasing order\n    for i in range(len(nums)):\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # Traverse the sorted list from right to left and exchange elements\n    for i in range(len(nums)-1, 0, -1):\n        j = 1\n        while j <= i:\n            nums[j-1], nums[i] = nums[i], nums[j-1]\n            j += 1\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a list of tuples containing the indices of each element and its value\n    indices_and_values = [(i, nums[i]) for i in range(len(nums))]\n    # sort the list by value in descending order\n    indices_and_values.sort(key=lambda x: x[1], reverse=True)\n    # create a list of indices in the sorted order\n    sorted_indices = [i[0] for i in indices_and_values]\n    # use the sorted indices to sort the original list in place\n    for i in range(len(nums)):\n        nums[i] = indices_and_values[sorted_indices.index(i)][1]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # create a copy of the input list to avoid modifying the original one\n    nums_copy = nums[:]\n    \n    # initialize a variable to keep track of the maximum element index\n    max_index = 0\n    \n    # loop through the input list\n    for i in range(len(nums)):\n        # initialize a variable to keep track of the current element index\n        current_index = i\n        \n        # loop through the list from the current index to the end\n        for j in range(i, len(nums)):\n            # if the element at the current index is greater than the element at the j index, swap them\n            if nums_copy[j] > nums_copy[current_index]:\n                nums_copy[j], nums_copy[current_index] = nums_copy[current_index], nums_copy[j]\n                current_index = j\n                \n        # if the current index has not been updated, update max_index\n        if current_index == i:\n            max_index = i\n        \n        # if the current index is greater than the max_index, update max_index\n        if current_index > max_index:\n            max_index = current_index\n    \n    # reverse the sorted list\n    nums_copy = nums_copy[:max_index+1][::-1]\n    \n    # return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # create a list to store the indices of sorted numbers\n    sorted_indices = [0] * n\n\n    # find the largest number\n    max_num = max(nums)\n\n    # create a list to store the pancake lengths\n    pancake_lengths = []\n\n    # iterate through the numbers\n    for i in range(n):\n        # if the number is smaller than the maximum number, swap them\n        if nums[i] < max_num:\n            for j in range(i+1, n):\n                if nums[j] >= max_num:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    break\n\n        # add the length of the pancake to the list\n        pancake_lengths.append(i+1)\n\n        # check if the largest number has been sorted\n        if nums[i] == max_num:\n            sorted_indices[i] = n-1\n            max_num = max(nums[:i]+nums[i+1:])\n            pancake_lengths = pancake_lengths[:i]\n\n    # sort the sorted indices in decreasing order\n    sorted_indices.sort(reverse=True)\n\n    # apply the sorted indices to the sorted numbers\n    for i in range(n):\n        nums[i] = nums[sorted_indices[i]]\n\n    # print the sorted numbers\n    print(nums)\n    print(\"Pancake lengths:\", pancake_lengths)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list.\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the element at index i.\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the pancake sequence from index i to the end.\n        for k in range(i, n, -1):\n            nums[k], nums[n-k-1] = nums[n-k-1], nums[k]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # function to swap elements in the list\n    def swap(a, b):\n        a, b = nums[a], nums[b]\n        nums[a], nums[b] = b, a\n\n    # function to reverse the order of elements in the list\n    def reverse(start, end):\n        while start < end:\n            swap(start, end)\n            start += 1\n            end -= 1\n\n    # function to perform the pancake sort\n    def pancake_sort_helper(start, end):\n        if start >= end:\n            return\n\n        # find the largest element in the unsorted part of the list\n        largest = start\n        for i in range(start + 1, end + 1):\n            if nums[i] > nums[largest]:\n                largest = i\n\n        # swap the largest element with the first element\n        swap(start, largest)\n\n        # reverse the unsorted part of the list\n        reverse(start + 1, end)\n\n        # recursively sort the remaining part of the list\n        pancake_sort_helper(start + 1, end - 1)\n\n    # sort the list using the pancake sort algorithm\n    pancake_sort_helper(0, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        if list1[i] == list3[i]:\n            count += 1\n        if list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the number of items that are identical in the same position of the lists.\n\n    Args:\n    - list1 (list): A list of integers.\n    - list2 (list): A list of integers.\n    - list3 (list): A list of integers.\n\n    Returns:\n    - int: The number of items that are identical in the same position of the three given lists.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i]!= list3[i] and list1[i]!= list3[j]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0  # initialize max_diff to 0\n\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[j] - arr[i])  # calculate absolute difference between two elements\n\n            if diff > max_diff:  # if current difference is greater than max_diff\n                max_diff = diff  # update max_diff to current difference\n\n    return max_diff  # return max_diff as output"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n\n    max_diff = 0  # initialize max_diff to 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])  # calculate the absolute difference between the two elements\n            if diff > max_diff:  # update max_diff if the current difference is greater than the previous maximum\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i]-arr[j]) for i in range(len(arr)) for j in range(i+1, len(arr)))"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            if n == 0:\n                return (0, 0)\n            else:\n                return None\n        else:\n            return None\n    else:\n        x = (-n) // b\n        y = a * x + n // b\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is negative, which means there is no solution\n    if discriminant < 0:\n        return None\n    \n    # Calculate the solutions\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Return the solutions as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = -b / (a + b)\n    y = n / (a + b)\n    if x.is_integer() and y.is_integer():\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    if b == 0:\n        return None\n    \n    x0 = -n / b\n    y0 = a * x0\n    \n    y1 = n / a\n    x1 = b * y1\n    \n    if a * x1 + b * y1 == n:\n        return (x0, y0), (x1, y1)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation is valid\n    if a == 0:\n        # If a is zero, check if b is zero\n        if b == 0:\n            # If b is also zero, there is no solution\n            return None\n        else:\n            # If b is not zero, there is no solution for any y\n            return None\n    else:\n        # If a is not zero, check if b is zero\n        if b == 0:\n            # If b is zero, there is only one solution for x\n            x = -n / a\n            return (x, x)\n        else:\n            # If b is not zero, there can be two solutions\n            x1 = (-b + (n / a)) / a\n            x2 = (-b - (n / a)) / a\n            return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if there is no solution\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two solutions\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Return the first solution as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if the given equation is valid\n    if a == 0 or b == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # If discriminant is less than zero, no real roots exist\n    if discriminant < 0:\n        return None\n    \n    # Calculate the roots of the quadratic equation\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Check if the roots are integers\n    if not all(int(x) == x for x in [root1, root2]):\n        return None\n    \n    # Check if the roots are within the given range\n    if not (root1 >= 0 and root1 <= n) or not (root2 >= 0 and root2 <= n):\n        return None\n    \n    # Return the roots as a tuple\n    return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0: # special case for ax + by = n = 0\n        return None\n    \n    # perform binary search to find a solution\n    low, high = -1000000000, 1000000000\n    while low <= high:\n        x = low + (high - low) // 2 # find midpoint of range\n        y = n // x # find integer y such that ax + by = n\n        if x * a + y * b == n: # check if x * a + y * b == n\n            return (x, y) # return (x, y) as a tuple\n        elif x * a + y * b < n: # check if x * a + y * b < n (i.e. x * a + y * b is still in the range)\n            low = x + 1 # move range lower\n        else: # x * a + y * b > n (i.e. x * a + y * b is outside the range)\n            high = x - 1 # move range upper\n            \n    return None # no solution found"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the equation has no solution\n    if a == 0 or b == 0:\n        return None\n\n    # initialize the variables x and y\n    x = 0\n    y = 0\n\n    # iterate over the integers from 1 to n\n    for i in range(1, n+1):\n        # calculate the value of x and y\n        x_value = -b // a\n        y_value = n - a*x_value - b*i\n\n        # check if the equation has a solution\n        if x_value**2 + y_value**2 == n:\n            return (x_value, y_value)\n\n    # if the function has not returned yet, it means that there is no solution for the given equation\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Calculate the discriminant\n    d = b ** 2 - 4 * a * n\n\n    # Check if the discriminant is negative, indicating that the equation has no real roots\n    if d < 0:\n        return None\n\n    # Calculate the two solutions\n    x1 = (-b + d ** 0.5) / (2 * a)\n    x2 = (-b - d ** 0.5) / (2 * a)\n\n    # Sort the two solutions in ascending order\n    if x1 > x2:\n        x1, x2 = x2, x1\n\n    return (int(x1), int(x2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # convert the given lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # create an empty set to store the final result\n    result = set()\n    # iterate through the first set and remove all the elements present in the second set\n    for element in set1:\n        if element not in set2:\n            result.add(element)\n    # convert the result set to a list and return it\n    return list(result)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # iterate through the list1\n    for i in range(len(list1)):\n        # check if the element is present in list2\n        if list1[i] in list2:\n            # remove the element from list1\n            del list1[i]\n            # decrement the index to account for the removal\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the second list and check if each element is present in the first list\n    for item in list2:\n        if item in list1:\n            # If the element is present, remove it from the list\n            list1.remove(item)\n    # Return the modified list\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through each element in list1\n    for i in range(len(list1)):\n        # if the element is present in list2, remove it from the list1\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Using set() to remove duplicates from list2\n    list2 = list(set(list2))\n    # Using list comprehension to remove elements from list1\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function removes all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2):\n        s += (n - 2*i)\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n // 2) + n * (n // 2)\n    else:\n        return sum_series(n // 2) + (n - 2 * n // 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = []\n    for i in range(n//2):\n        series.append(n - 2*i)\n    return sum(series)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2):\n        s += n - 2*i\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        total = (n + (n-2)) // 2\n    else:\n        total = (n + (n-1)) // 2\n\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # Initialize sum variable and loop variable\n    sum = 0\n    i = 0\n    # Calculate the sum of the first half\n    while i <= n // 2:\n        sum += n - 2*i\n        i += 1\n    # Calculate the sum of the second half\n    while i <= n // 2:\n        sum -= n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize a variable to store the sum\n    total = 0\n    # Loop through the series and add the sum to the total\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    p = (s * (l - 2)) / (2 * l)\n\n    # Calculate the area of the polygon using Heron's formula\n    area = math.sqrt(p * (s - p) * (s + p))\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculating the side length\n    side_length = s / l\n    \n    # Calculating the area of the polygon\n    area = 0\n    for i in range(l):\n        area += tan(i*2*pi/l) * side_length\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    # calculate the area of each side of the polygon\n    for i in range(l):\n        area += s * tan(2 * pi / l)\n    # multiply all the areas to get the final area\n    return area * s ** 2 / 6"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/(l+1)*i\n        area += s*tan(angle/2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using the formula:\n    # area = (s * (sin(n*pi/l))^2) / 2\n    # n is the number of sides of the polygon\n    # s is the length of each side of the polygon\n    # pi is the mathematical constant pi\n\n    area = (s * (tan(pi*l/2)**2)) / 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((2*pi*i)/l)\n    area = area / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * (s - l + 1)) / (4 * pi * s)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of a side of the polygon\n    side = s / l\n\n    # Calculate the area of the polygon using Heron's formula\n    area = (s * (s - side) * (s + side)) / 4\n\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    sum_div = sum(div_list)\n    return sum_div == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer\"\n    \n    div1 = math.floor(math.sqrt(n))\n    div2 = n // div1\n    \n    if div1 == div2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Finding the sum of divisors of n \n    sum_divisors = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            sum_divisors += i \n            if i!= n/i: \n                sum_divisors += n/i \n    if sum_divisors == n: \n        return True \n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            divisor_sum += n // i\n    return divisor_sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2: \n        return False\n    \n    # Calculate the sum of all divisors of n\n    sum_of_divisors = sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n    \n    # Check if the sum of divisors is the same as n\n    return sum_of_divisors == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # calculate the sum of the divisors of n\n    sum_divs = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    # calculate the sum of the divisors of n+1\n    sum_divs_plus_one = sum([i for i in range(1, n+1) if n % i == 0])\n\n    # compare the two sums\n    if sum_divs == sum_divs_plus_one:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    # calculate the sum of the divisors of n+1\n    div_sum_plus_one = sum([i for i in range(1, int(math.sqrt(n+1))+1) if n+1 % i == 0])\n    # compare the two sums and return True if they are the same, False otherwise\n    return div_sum == div_sum_plus_one"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the divisors of n using a loop \n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if n // i!= i:\n                divs.append(n // i)\n    # Calculate the sum of the divisors \n    div_sum = sum(divs)\n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the divisors of n\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n\n    # Calculate the sum of the divisors\n    divisor_sum = sum(divisors)\n\n    # Check if the divisor sum is equal to n\n    if divisor_sum == n:\n        print(\"The sum of the divisors is equal to\", n)\n    else:\n        print(\"The sum of the divisors is not equal to\", n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # find the sum of the divisors of n \n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]) \n\n    # check if the sum of the divisors of n and n are the same \n    if div_sum == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    # Initialize the count to zero\n    count = 0\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Check if the position of the character is the same as its ASCII value\n            if ord(char) == ord(str1[str1.index(char)]) - 1:\n                # Increment the count if the condition is true\n                count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    count = 0\n    for char in str1:\n        if char.lower() in alpha_dict:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    # convert the input string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    \n    # initialize a dictionary to store the count of characters at each position in the string\n    count_dict = {}\n    \n    # loop through each character in the string\n    for i, char in enumerate(str1): \n        # if the character is an English alphabet character, increment its count in the dictionary\n        if 'a' <= char <= 'z': \n            if char in count_dict: \n                count_dict[char] += 1\n            else: \n                count_dict[char] = 1\n                \n    # count the total number of characters in the string that occur at each position in the English alphabet\n    count = sum(count_dict.values())\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase and remove any non-letter characters\n    str1 = re.sub('[^a-zA-Z]', '', str1).lower()\n\n    # Create a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {chr(i): 0 for i in range(97, 123)}\n\n    # Loop through the string and increment the count for each character that occurs at the same position in the English alphabet\n    for char in str1:\n        char_count[char] += 1\n\n    # Return the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # initialize a dictionary to store the counts\n    char_count = {}\n    # iterate over the string and count the characters at the same position as in the English alphabet\n    for i, char in enumerate(str1):\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # return the count dictionary\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    This function takes a string as input and returns a dictionary of characters and their positions in the string.\n    Characters are counted only if they occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # Convert the input string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary to store the character and its position\n    char_positions = {}\n\n    # Loop through each character in the string\n    for i in range(len(str1)):\n\n        # If the character is a letter, check if it has an uppercase version\n        if str1[i].isalpha():\n\n            # Get the uppercase version of the character\n            char_upper = chr(ord(str1[i]) - ord('a') + ord('A'))\n\n            # If the uppercase version is already in the dictionary, increment its count\n            if char_upper in char_positions:\n                char_positions[char_upper] += 1\n            # If the uppercase version is not in the dictionary, add it with a count of 1\n            else:\n                char_positions[char_upper] = 1\n\n    return char_positions"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() == alphabet[alphabet.index(char.lower())].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # convert both strings to lowercase\n    str1 = str1.lower()\n    str2 = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # count the number of times each character occurs in both strings\n    count = [0] * 26\n    \n    # iterate through each character in the first string\n    for char in str1:\n        # check if the character is in the second string and increment the count if it is\n        if char in str2:\n            count[ord(char) - ord('a')] += 1\n    \n    # return the count of characters that occur at the same position in the string as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to ignore case differences\n    str1 = str1.lower()\n    # Initialize a counter to keep track of the number of occurrences\n    count = 0\n    # Iterate over each character in the string\n    for char in str1:\n        # Check if the character is a letter (ignoring case)\n        if char.isalpha():\n            # If it is, check if it is also in the English alphabet\n            if 'a' <= char <= 'z':\n                # If it is, increment the counter\n                count += 1\n    # Return the count of occurrences\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(26):\n        char_count[chr(i+ord('a'))] = 0\n\n    for char in str1:\n        char = char.lower()\n        char_count[char] += 1\n\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_xor_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_xor_count += 1\n    return even_xor_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input should be a positive integer.\")\n\n    # Initialize the result to the input\n    result = n\n\n    # Find the largest power of 2 less than or equal to the input\n    while result & (result - 1):\n        result = result >> 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the largest power of 2 smaller than n\n    power = 2\n    while power < n:\n        power <<= 1\n    \n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    This function finds the smallest power of 2 greater than or equal to n.\n    '''\n\n    # check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # calculate the next power of 2\n    next_pow2 = 1\n    while next_pow2 < n:\n        next_pow2 <<= 1\n\n    return next_pow2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 to be checked\n    power = 2\n    \n    # While the power is less than or equal to n, check the next power of 2\n    while power <= n:\n        # If the power is greater than or equal to n, return the power\n        if power >= n:\n            return power\n        \n        # Increment the power by 2\n        power *= 2\n    \n    # If the loop completes without finding a power of 2 greater than or equal to n, return 2^64 - 1\n    return 2**64 - 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n & (n - 1)!= 0:\n        n = n | (n - 1)\n    return n << 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # We can use the fact that 2^x = 2^(x-1) + 1 for x >= 0\n    x = 0\n    while 2**x <= n:\n        x += 1\n    return 2**x"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (int(log2(n)) + 1)\n\ndef log2(n):\n    return int(log(n, 2))\n\ndef log(x, base):\n    return math.log(x) / math.log(base)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1)!= 0: # while n is not a power of 2\n        n = n | (n-1) # set the least significant bit of n to 1\n    return n # return the result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('n must be a positive integer')\n    \n    # loop until n is a power of 2\n    while n & (n-1)!= 0:\n        n = n | (n-1)\n    \n    # return the next power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n < 1:\n        return 1\n    else:\n        return 2**int(np.ceil(np.log2(n)))"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x): \n    '''\n    This function takes in a list and a number as input and returns the number of occurrences of the number 'x' in the list 'a'.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n\n    # Initialize variables\n    range_sum = 0\n    count = 0\n\n    # Iterate through the list and add up the numbers in the range\n    for num in list1:\n        if count >= m and count <= n:\n            range_sum += num\n        count += 1\n\n    # Return the sum of the numbers in the range\n    return range_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n < 0:\n        return \"Error: m and n should be non-negative integers.\"\n\n    if m > n:\n        return \"Error: m should be less than or equal to n.\"\n\n    if n >= len(list1):\n        return \"Error: n should be less than the length of the list.\"\n\n    sum_range = sum(list1[m:n+1])\n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # check if indices are valid\n    if m >= len(list1) or m < 0 or n >= len(list1) or n < 0:\n        return \"Invalid indices\"\n    # initialize sum variable\n    sum_val = 0\n    # loop through range of indices\n    for i in range(m, n+1):\n        # add the value at the current index to the sum\n        sum_val += list1[i]\n    # return the sum of the values in the specified range\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if indices are valid\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        return 'Invalid indices'\n    \n    # Check if indices are in order\n    if m > n:\n        return 'Invalid indices'\n    \n    # Compute the sum\n    sum_range = sum(list1[m:n+1])\n    \n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    if m > n:\n        m, n = n, m\n\n    sum_list = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list += i\n\n    return sum_list"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the sine and cosine of pi/5\n    sine = math.sin(math.pi/5)\n    cosine = math.cos(math.pi/5)\n    # calculate the perimeter of the pentagon\n    perimeter = a * 5 * math.sin(math.pi/5) + a * 5 * math.cos(math.pi/5)\n    # print the perimeter\n    print(\"The perimeter of the pentagon is:\", perimeter)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5\n    return math.pi * (3 * a + 1) / 2 * n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula to calculate the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the semi-perimeter\n    s = (2*a**2 + 5*a + 5) / 10\n\n    # Calculate the area\n    area = (5 * math.sqrt(3) * a**2) / 2\n\n    # Calculate the perimeter\n    perimeter = 5 * a + 5\n\n    # Return the results\n    return \"The perimeter of a regular pentagon is:\", perimeter, \"and its area is:\", area"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter using the formula 2 * sqrt(3)\n    s = 2 * math.sqrt(3) * a\n    \n    # Use the formula 5 * s^2 to calculate the perimeter\n    perimeter = 5 * s ** 2\n    \n    # Return the calculated perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the hypotenuse of the right triangle\n    hypotenuse = math.sqrt(3) * a\n    \n    # Calculate the perimeter of the pentagon using the formula for the distance between two points\n    perimeter = 5 * hypotenuse\n    \n    # Return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n\na = 10\nprint(perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    \n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    i = 0\n    while i < n-3:\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in s:\n        if i =='s' or i == 'd' or i == 't':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(i, type(test_tuple[0])) for i in test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # create a set to store data types of all the elements in tuple\n    data_types = set()\n\n    # loop through each element in tuple\n    for element in test_tuple:\n        # add data type of each element to set\n        data_types.add(type(element).__name__)\n\n    # check if all the elements in the set have same data type\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = set()\n    for item in test_tuple:\n        data_types.add(type(item))\n\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = None\n    for element in test_tuple:\n        if data_type is None:\n            data_type = type(element)\n        elif type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Initialize a variable to store the data type of the first element\n    data_type = type(test_tuple[0])\n    \n    # Iterate over the tuple and check if all elements have the same data type\n    for element in test_tuple:\n        if type(element)!= data_type:\n            # If any element has a different data type, return False\n            return False\n    \n    # If all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for elem in test_tuple:\n        if type(elem) not in data_types:\n            data_types.append(type(elem))\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize the count of occurrences of x to 0\n    count = 0\n    # Initialize the candidate to be the first element of the array\n    candidate = arr[0]\n    # Iterate over the remaining elements of the array\n    for i in range(1, n):\n        # If the current element is equal to the candidate, increment the count\n        if arr[i] == candidate:\n            count += 1\n        # If the count reaches the half of the length of the array, return True\n        if count >= n/2:\n            return True\n        # If the count is less than half of the length of the array, check if the candidate should be updated\n        elif count < n/2:\n            if arr[i] < candidate:\n                candidate = arr[i]\n            elif arr[i] > candidate:\n                candidate = arr[i]\n    # If the count is still less than half of the length of the array, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the count of each element in the array\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Calculate the threshold count\n    threshold = n // 2\n    \n    # Iterate through the counts dictionary and check if the threshold has been reached for each element\n    for num in counts:\n        if counts[num] > threshold:\n            return True\n    \n    # If no majority element is found, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Count the number of occurrences of x in arr\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    # Return True if the count is more than n/2, False otherwise\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Check whether the element x is in the arr[0:n] array,\n    where the element x is the majority element if any.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n / 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n: # loop till n becomes 0 \n        count += n & 1 # add the last digit of the number to the count\n        n >>= 1 # divide the number by 2 to remove the last digit and continue the loop\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        if n & 1: \n            count += 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n > 0: \n        count += n & 1\n        n >>= 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer input n and returns the count of the number of set bits in n.\n    A set bit is a binary digit with a value of 1.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(s):\n    # create a new string to store the result\n    result = \"\"\n    # iterate over the characters in the input string\n    for char in s:\n        # if the index of the current character is odd, add it to the result string\n        if ord(char) % 2 == 1:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the odd characters\n    odd_chars = ''\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if char.isalnum() and int(str(char).lower()) % 2!= 0:\n            # If it is, add it to the `odd_chars` string\n            odd_chars += char\n    # Return the `odd_chars` string\n    return odd_chars"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters from a string which have odd index values.\n\n    :param str: the string from which to remove odd values\n    :type str: str\n    :return: the modified string with odd values removed\n    :rtype: str\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    :param str: The input string.\n    :return: The modified string without odd characters.\n    \"\"\"\n    result = \"\"\n    for i, c in enumerate(str):\n        if i % 2 == 0:\n            result += c\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their minimum.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # To check whether all bits are set or not in a given range, we need to check whether the difference between r and l is divisible by 2.\n    # If it is divisible by 2, then all bits are unset in that range.\n    # If it is not divisible by 2, then there are some unset bits somewhere in the range.\n    return n & (1 << (r - l + 1)) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three integer arguments: n, l, and r.\n    n is the number whose set of bits we want to check.\n    l is the lower bound of the range for which we want to check.\n    r is the upper bound of the range for which we want to check.\n\n    This function returns True if all the bits are unset in the given range, else False.\n\n    \"\"\"\n\n    # To check if all the bits are unset in the given range or not,\n    # we can use the bitwise AND operator with 1.\n    # If the result is 0, it means that all the bits are unset.\n    # Otherwise, there is at least one bit set.\n    return n & (1 << r) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i).count('1') < 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Calculate the number of bits between l and r\n    num_bits = r-l+1\n\n    # Iterate over all possible binary numbers with num_bits bits\n    for i in range(2**num_bits):\n\n        # Check if all the bits are set in the current binary number\n        if (i & ((1<<num_bits)-1)) == (1<<num_bits)-1:\n\n            # Convert the binary number to an integer and check if it's between l and r\n            if int(bin(i)[2:]) >= l and int(bin(i)[2:]) <= r:\n                return False\n\n    # If no bits are set in the given range, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if i & n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the variable to store the result\n    result = True\n\n    # Loop through the bits from right to left\n    for i in range(r, l-1, -1):\n        # Check if the ith bit is set to 1\n        if n & (1 << i):\n            # If the ith bit is set to 1, then all the remaining bits must also be unset\n            result = False\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function will check whether all the bits are unset in the given range or not.\n    '''\n\n    # Function to check if all bits are set or not\n    def all_bits_set(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count == 32\n\n    # Check if the range is valid\n    if l > r:\n        return False\n\n    # Check if all bits are set in the range\n    for i in range(l, r+1):\n        if not all_bits_set(n & (1 << i)):\n            return False\n\n    # All bits are set in the range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all the bits in the binary representation of n\n    for i in range(l, r+1):\n        # If the i-th bit is set (i.e., 1), increment the count variable\n        if (n & (1 << i))!= 0:\n            count += 1\n\n    # If all bits are unset, return True\n    if count == 0:\n        return True\n    # If there are any set bits, return False\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the result\n    is_all_bits_unset = True\n    \n    # Loop through each bit of the number n\n    for i in range(l, r+1):\n        # Check if the i-th bit of n is set or not\n        if (n & (1<<i))!= 0:\n            # If it is set, the function returns False\n            is_all_bits_unset = False\n            break\n    \n    # If all the bits are unset, the function returns True\n    return is_all_bits_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += bin(n).count('1')\n    return count == 0"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            positives.insert(0, arr[i])\n        else:\n            negatives.insert(0, arr[i])\n    return negatives + positives"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # first, we sort the array in ascending order\n    arr.sort()\n    \n    # next, we loop through the array and assign negative and positive elements to separate lists\n    neg_arr = []\n    pos_arr = []\n    for i in arr:\n        if i < 0:\n            neg_arr.append(i)\n        else:\n            pos_arr.append(i)\n    \n    # we loop through the negative and positive lists and move the negative elements to the beginning of the array\n    for i in range(n):\n        arr[i] = neg_arr.pop(0)\n    \n    # we then loop through the negative and positive lists and move the positive elements to the end of the array\n    for i in range(n, len(arr)):\n        arr[i] = pos_arr.pop(0)\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # First, initialize two pointers, one for negative and one for positive elements\n    negative_pointer = 0\n    positive_pointer = n\n\n    # Traverse the array and swap the negative and positive elements\n    while negative_pointer < positive_pointer:\n        if arr[negative_pointer] < 0:\n            # Swap the negative element with the current element at positive_pointer\n            arr[negative_pointer], arr[positive_pointer] = arr[positive_pointer], arr[negative_pointer]\n            # Move the positive pointer to the next element\n            positive_pointer += 1\n        else:\n            # Move the negative pointer to the next element\n            negative_pointer += 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables\n    neg = 0\n    pos = 0\n    i = 0\n\n    # loop through the array\n    while i < n:\n        # if the current element is negative\n        if arr[i] < 0:\n            # add it to the negative list\n            neg += 1\n            # move the element to the next position\n            arr[i], arr[neg] = arr[neg], arr[i]\n        else:\n            # if the current element is positive\n            # add it to the positive list\n            pos += 1\n            # move the element to the next position\n            arr[i], arr[pos] = arr[pos], arr[i]\n        # move to the next position\n        i += 1\n\n    # loop through the array again and add all the negative elements to the beginning of the array\n    while neg > 0:\n        arr[neg], arr[0] = arr[0], arr[neg]\n        neg -= 1\n\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive_elements = [x for x in arr[:n] if x >= 0]\n    negative_elements = [x for x in arr[:n] if x < 0]\n    mixed_elements = [x for x in arr[n:] if x!= 0]\n\n    return positive_elements + negative_elements + mixed_elements"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # create a new array to store the negative and positive elements\n    neg = []\n    pos = []\n    \n    # loop through the array and add negative and positive elements to their respective lists\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n            \n    # append the negative and positive elements to the original array in the desired order\n    for i in range(len(neg)):\n        arr[i] = neg[i]\n    for i in range(len(pos)):\n        arr[i + len(neg)] = pos[i]\n        \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two variables to keep track of the position of the negative and positive elements\n    negative_position = 0\n    positive_position = 0\n    \n    # Loop through the array and swap the elements if necessary\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[negative_position] = arr[negative_position], arr[i]\n            negative_position += 1\n        else:\n            arr[i], arr[positive_position] = arr[positive_position], arr[i]\n            positive_position += 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Find the index of the first negative element\n    neg_index = None\n    for i in range(n):\n        if arr[i] < 0:\n            neg_index = i\n            break\n\n    # If no negative element exists, return the array as it is\n    if neg_index is None:\n        return arr\n\n    # Re-arrange the array\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[neg_index] = arr[neg_index], arr[i]\n            neg_index += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables to store negative and positive elements\n    neg = []\n    pos = []\n\n    # loop through the array and add elements to appropriate lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n\n    # reverse the lists of negative and positive elements\n    neg.reverse()\n    pos.reverse()\n\n    # concatenate the two lists\n    result = neg + pos\n\n    # return the concatenated list\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers to the beginning and end of the array\n    left = 0\n    right = n - 1\n    \n    # Check if all the elements in the array are negative or positive\n    if all(arr[i] >= 0 for i in range(n)):\n        # If all the elements are negative, swap the first n elements with the end of the array\n        arr[:n], arr[n:] = arr[n:], arr[:n]\n    else:\n        # If not, swap the first n elements with the left pointer\n        arr[:n], arr[left:] = arr[left:], arr[:n]\n        \n        # Move the left pointer to the right until all the negative elements have been swapped with the left pointer\n        while arr[left] >= 0:\n            left += 1\n        \n        # Move the right pointer to the right until all the positive elements have been swapped with the left pointer and the right pointer\n        while arr[right] >= 0 and right > left:\n            right -= 1\n        \n        # Swap the first n elements with the right pointer\n        arr[:n], arr[right:] = arr[right:], arr[:n]\n        \n        # If the left pointer is still greater than or equal to the right pointer, the array is already in the desired order\n        if left >= right:\n            return arr\n        \n        # Swap the first n elements with the left pointer\n        arr[:n], arr[left:] = arr[left:], arr[:n]\n        \n        # Move the left pointer to the right until all the negative elements have been swapped with the left pointer\n        while arr[left] >= 0:\n            left += 1\n        \n        # Swap the first n elements with the left pointer\n        arr[:n], arr[left:] = arr[left:], arr[:n]\n        \n        # Move the right pointer to the right until all the positive elements have been swapped with the left pointer and the right pointer\n        while arr[right] >= 0 and right > left:\n            right -= 1\n        \n        # Swap the first n elements with the right pointer\n        arr[:n], arr[right:] = arr[right:], arr[:n]\n        \n        # Move the left pointer to the right until all the negative elements have been swapped with the left pointer\n        while arr[left] >= 0:\n            left += 1\n        \n        # Swap the first n elements with the left pointer\n        arr[:n], arr[left:] = arr[left:], arr[:n]\n        \n        # Move the right pointer to the right until all the positive elements have been swapped with the left pointer and the right pointer\n        while arr[right] >= 0 and right > left:\n            right -= 1\n        \n        # Swap the first n elements with the right pointer\n        arr[:n], arr[right:] = arr[right:], arr[:n]\n        \n        # Move the left pointer to the right until all the negative elements have been swapped with the left pointer\n        while arr[left] >= 0:\n            left += 1\n        \n        # Swap the first n elements with the left pointer\n        arr[:n], arr[left:] = arr[left:], arr[:n]\n        \n        # Move the right pointer to the right until all the positive elements have been swapped with the left pointer and the right pointer\n        while arr[right] >= 0 and right > left:\n            right -= 1\n        \n        # Swap the first n elements with the right pointer\n        arr[:n], arr[right:] = arr[right:], arr[:n]"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replace all consecutive blank spaces with the character\n    return str1.replace('  ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    # Remove blank spaces from the string\n    str1 = str1.replace(\" \", \"\")\n    # Replace the blank spaces with the character\n    str1 = str1.replace(\"\", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap with the first n elements of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # add the remaining elements to the heap\n    for i in range(n,len(list1)):\n        heapq.heappush(heap, list1[i])\n    # extract the n largest elements from the heap\n    res = []\n    while heap:\n        res.append(heapq.heappop(heap))\n    return res"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list into a min-heap\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        \n    # extract the n largest items and return them as a list\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return []\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a min heap to keep track of the n largest numbers in the list\n    min_heap = []\n    for num in list1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the surface area of the base and top\n    base_area = 2 * r * r #base is the solid part of the cylinder\n    top_area = r * r * 2 #top is the hollow part of the cylinder\n    \n    #add the surface areas of the cylinder\n    cylinder_area = base_area + top_area\n    \n    #calculate the lateral surface area\n    lateral_area = cylinder_area * h\n    \n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    A = 2 * r * h\n    B = r * r\n    return A + B"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Calculate the area of the base\n    area_base = math.pi * r ** 2\n    \n    # Calculate the lateral surface area of the top and bottom\n    area_top = math.pi * r * h\n    area_bottom = math.pi * r * h\n    \n    # Combine the two areas to get the total lateral surface area\n    area_lateral = area_base + area_top + area_bottom\n    \n    return area_lateral"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h # Formula for lateral surface area of a cylinder"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = math.pi*(r**2 + h**2)\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h + 2*3.14159*(r*h)**2"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l ** 3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty string to hold the even bits\n    even_bits = \"\"\n\n    # Iterate over each bit of the input number\n    for i in range(32):\n        # Check if the i-th bit is even\n        if (n & (1 << i))!= 0:\n            # Set the i-th bit of the even_bits string to 1\n            even_bits += \"1\"\n        else:\n            # Set the i-th bit of the even_bits string to 0\n            even_bits += \"0\"\n\n    # Convert the even_bits string to an integer and return it\n    return int(even_bits, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each bit of the input number\n    for i in range(32):\n        # Get the value of the ith bit\n        bit = (n >> i) & 1\n        \n        # Check if the bit is even\n        if bit == 0:\n            # If it's odd, set the ith bit to 1 and append it to the result list\n            n = n | (1 << i)\n            result.append(1)\n        else:\n            # If it's even, append 0 to the result list\n            result.append(0)\n    \n    # Return the final result\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # Initialize the result as 0\n    result = 0\n    # Loop through each bit in the binary string\n    for bit in binary_str:\n        # If the bit is an even number, set it to 1\n        if int(bit) % 2 == 0:\n            result += 2**(int(bit) - 1)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    # loop through all bits of n\n    for i in range(len(bin(n)[2:])):\n        # check if current bit is even\n        if (bin(n)[2:].count('1') % 2) == 0:\n            # set current bit to 1\n            even_bits |= 1 << i\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the even bits of the input number\n    even_bits = 0\n    \n    # loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # if the bit is even, set its position in the even_bits variable to 1\n        if int(bit) == 0:\n            even_bits = even_bits << 1\n        else:\n            even_bits = even_bits | (1 << int(bit))\n    \n    # return the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # convert the given number to a string\n    num = str(n)\n    # split the string into its individual bits\n    bits = [int(bit) for bit in num]\n    # iterate over the bits and set the even bits to 1\n    for i in range(len(bits)):\n        if bits[i] == 0:\n            bits[i] = 1\n        elif bits[i] % 2 == 0:\n            bits[i] = 1\n        else:\n            bits[i] = 0\n    # convert the list of bits back to a string\n    result = ''.join(str(bit) for bit in bits)\n    # convert the result back to an integer and return it\n    return int(result)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    for i in range(len(bin(n)) - 3):\n        if n & (1 << i):\n            even_bits.append(1)\n        else:\n            even_bits.append(0)\n    even_bit_sum = sum(even_bits)\n    return even_bit_sum"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0b0  # initialize even bits to 0\n    for i in range(len(bin(n)[2:])):  # iterate through each bit of the number\n        if bin(n)[2+i] == '0' and bin(n)[2+i+1] == '0':  # check if current bit is even and not already set\n            even_bits |= 1 << i  # set the even bit to 1 at the current position\n\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = n ^ (n & (n - 1))\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 # counting number of set bits \n        n >>= 1 # right shifting n by 1 \n    return count "
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the number of occurrences of each tuple\n    count_dict = {}\n    # Iterate over the tuples in the list and update the count dictionary\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each tuple\n    count_dict = {}\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # Increment the count by 1\n            count_dict[tup] += 1\n        else:\n            # Add the tuple to the dictionary and set the count to 1\n            count_dict[tup] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each tuple\n    count_dict = {}\n    # use the Counter class from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    # return the dictionary containing the counts of each tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for tup in test_list:\n        counter.update(tup)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list of tuples to a set to remove duplicates\n    test_set = set(test_list)\n    # convert the set back to a list to preserve order\n    unique_tuples = sorted(list(test_set))\n    # use the Counter class from the collections module to count the occurrences of each tuple\n    counter = Counter(test_list)\n    # create a dictionary to store the counts\n    count_dict = {}\n    # iterate over the unique tuples and add their counts to the dictionary\n    for i in unique_tuples:\n        count_dict[i] = counter[i]\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # Loop through the list of tuples\n    for item in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if item in count_dict:\n            count_dict[item] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[item] = 1\n    \n    # Return the dictionary with the counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    \n    # loop through the list of tuples and update the count in the dictionary\n    for item in test_list:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the test_list to a set to remove duplicates\n    test_set = set(test_list)\n\n    # Create a dictionary to store the counts of each unique tuple\n    count_dict = {}\n\n    # Iterate through the set of tuples\n    for tup in test_set:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it and set its count to 1\n        else:\n            count_dict[tup] = 1\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary of count of each unique tuple\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if j == i:\n                continue\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.append(str[i:j])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences = []\n    for i in range(m, m+n):\n        if i % 2 == 0:\n            if i >= 2*sequences[-1]:\n                sequences.append(i)\n    return len(sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n): \n    # Initialize the count to 0\n    count = 0\n    \n    # Check if n is less than or equal to zero\n    if n <= 0: \n        return 0\n    \n    # Check if m is less than or equal to zero\n    if m <= 0: \n        return 0\n    \n    # Initialize the previous element as 0\n    prev_element = 0\n    \n    # Loop through all the elements from 0 to m\n    for i in range(0, m + 1): \n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n        if i >= 2 * prev_element and i <= m: \n            # If it is, add 1 to the count\n            count += 1\n        \n        # Update the previous element\n        prev_element = i\n    \n    # Return the count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Calculate the number of sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m\n    # Initialize the total number of sequences to zero\n    total_sequences = 0\n    # Initialize a list to store the previous element of the sequence\n    previous_element = []\n    # Iterate over the range of possible sequences of length n\n    for i in range(m, n+1):\n        # Calculate the length of the sequence\n        sequence_length = i\n        # Initialize a list to store the current elements of the sequence\n        current_element = []\n        # Iterate over the range of possible elements of the sequence\n        for j in range(sequence_length):\n            # Check if the current element is less than or equal to twice the previous element but greater than or equal to m\n            if j == 0 or current_element[-1] + 2 <= previous_element[-1] <= m:\n                # If the current element is valid, add it to the sequence\n                current_element.append(j+m)\n            # If the current element is not valid, break out of the inner loop\n            else:\n                break\n        # If the current sequence is valid, increment the total number of sequences\n        if current_element == [i+m] * sequence_length:\n            total_sequences += 1\n        # Update the previous element for the next iteration\n        previous_element = current_element\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    total_sequences = 0\n    previous_element = 1\n    for i in range(n):\n        current_element = 2*previous_element\n        while current_element <= m:\n            total_sequences += 1\n            previous_element = current_element\n            current_element += 2*previous_element\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(2, m + 1):\n        for j in range(i, min(i + n, m) + 1, i):\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    # Helper function to check if a number is divisible by 3\n    def is_divisible_by_3(num):\n        return num % 3 == 0\n    \n    # Helper function to check if a number is divisible by 2\n    def is_divisible_by_2(num):\n        return num % 2 == 0\n    \n    # Helper function to check if a number is divisible by 5\n    def is_divisible_by_5(num):\n        return num % 5 == 0\n    \n    # Helper function to check if a number is a square\n    def is_square(num):\n        return num ** 0.5 == int(num ** 0.5)\n    \n    # Helper function to check if a number is a prime number\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Helper function to generate a list of prime numbers between 2 and m\n    def generate_primes(m):\n        primes = []\n        for num in range(2, m + 1):\n            if is_prime(num):\n                primes.append(num)\n        return primes\n    \n    # Helper function to generate a list of integers between 2 and m\n    def generate_integers(m):\n        integers = []\n        for num in range(2, m + 1):\n            integers.append(num)\n        return integers\n    \n    # Helper function to check if a sequence is possible\n    def is_sequence_possible(sequence, length, m, n, prime_list, is_divisible_by_3, is_divisible_by_2, is_divisible_by_5):\n        current_num = sequence[-1]\n        for i in range(length - 2, -1, -1):\n            if sequence[i] + current_num > m or (is_divisible_by_3(sequence[i]) and sequence[i] + current_num > 2 * current_num) or (is_divisible_by_2(sequence[i]) and sequence[i] + current_num > 2 * current_num) or (is_divisible_by_5(sequence[i]) and sequence[i] + current_num > 2 * current_num) or (prime_list and current_num not in prime_list):\n                return False\n            current_num = sequence[i]\n        return True\n    \n    # Helper function to generate all possible sequences\n    def generate_sequences(m, n, prime_list, is_divisible_by_3, is_divisible_by_2, is_divisible_by_5):\n        sequences = []\n        for i in range(2, m + 1):\n            sequence = [i]\n            length = 1\n            current_num = i\n            while True:\n                if is_sequence_possible(sequence, length, m, n, prime_list, is_divisible_by_3, is_divisible_by_2, is_divisible_by_5):\n                    sequences.append(sequence)\n                current_num += 1\n                if current_num > m:\n                    break\n                length += 1\n        return sequences\n    \n    # Calculate the total number of possible sequences\n    total_sequences = len(generate_sequences(m, n, generate_primes(m), is_divisible_by_3, is_divisible_by_2, is_divisible_by_5))\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    prev_element = 0\n    count_of_sequences = 0\n\n    for i in range(1, m+1):\n        if i >= 2 * prev_element and i <= m:\n            count_of_sequences += 1\n        if count_of_sequences == n:\n            total_sequences += 1\n            count_of_sequences = 0\n        prev_element = i\n\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    sequence = [2]\n    for i in range(n - 1):\n        next_element = min(sequence[-1] + 2, m)\n        sequence.append(next_element)\n        total_sequences += len(sequence) - 1\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    def backtrack(start, prev):\n        if start == n:\n            return 1\n        total = 0\n        for i in range(start, m):\n            if i < 2 * prev or i > m - 1:\n                continue\n            total += backtrack(start + 1, i)\n        return total\n\n    return backtrack(0, 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(2, m + 1):\n        if i >= 2 * n:\n            total_sequences += 1\n    return total_sequences\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        list1[-1] = list2\n    else:\n        print(\"The two lists must be of equal length.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[::-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of the second list is less than or equal to 0\n    if len(list2) <= 0:\n        return \"The second list is empty.\"\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # check if the length of the two lists are equal\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must be of equal length.\")\n    # create a new list that contains the first list but with the last element replaced by the elements of the second list\n    new_list = list1[:-1] + list2\n    # return the new list\n    return new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # If the second list is empty, do nothing\n    if not list2:\n        return list1\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2[-1]\n\n    # Remove the last element of the second list\n    del list2[-1]\n\n    return list1 + list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Check if the length of the second list is equal to the length of the first list\n    if len(list2) == length:\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1] = list2[-1]\n    else:\n        print('Error: The length of the second list must be equal to the length of the first list.')"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) > len(list1):\n        for i in range(len(list1)):\n            list1[i] = list2[len(list1)-i-1]\n    else:\n        for i in range(len(list1)):\n            list1[i] = list2[i]\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        sqrtN = int(math.sqrt(N))\n        if sqrtN*sqrtN == N:\n            return sqrtN+1\n        else:\n            N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math  \n  \ndef next_Perfect_Square(N): \n  \n    # Initialize variables \n    num = N\n    sqrt_num = math.sqrt(num)\n    next_num = int(math.ceil(sqrt_num))\n  \n    # Check if the next number is a perfect square \n    while next_num**2!= num: \n        next_num += 1\n  \n    return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n\n    The next perfect square greater than a number N is the smallest number that is a perfect square \n    and greater than N. The function returns the next perfect square for the given number N.\n    \"\"\"\n    # Convert N to a string\n    N_str = str(N)\n\n    # Initialize the next perfect square greater than N\n    next_perfect_square = int(N_str)\n\n    # Calculate the square root of the next perfect square\n    sqrt_next_perfect_square = math.sqrt(next_perfect_square)\n\n    # Calculate the power of 2 for the square root of the next perfect square\n    pow_2_next_perfect_square = 1\n\n    while pow_2_next_perfect_square <= sqrt_next_perfect_square:\n        pow_2_next_perfect_square *= 2\n\n    # Calculate the next perfect square\n    next_perfect_square = pow_2_next_perfect_square * sqrt_next_perfect_square\n\n    # Return the next perfect square greater than N\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of the given number\n    sqrt_N = math.sqrt(N)\n    # add 1 to the square root and then square it to get the next perfect square\n    next_sqrt_N = int(sqrt_N + 1) ** 2\n    # return the next perfect square\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Finds the next perfect square greater than a given number N.\n    \"\"\"\n    sqrtN = int(math.sqrt(N))\n    p = sqrtN*sqrtN\n    while True:\n        if N <= p:\n            p = p + 2*sqrtN\n        else:\n            p = p + sqrtN\n        sqrtN = int(math.sqrt(p))\n        if sqrtN*sqrtN == p:\n            return p"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N))\n    while True:\n        square = 4*sqrtN**2 + 1\n        if square > N:\n            return square\n        sqrtN += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # convert the given number to a float and round it down to the nearest integer\n    N = math.floor(float(N))\n    # iterate through the odd numbers between 1 and the square root of N\n    for i in range(int(N**0.5)+1, 1, -2):\n        # check if N is a perfect square\n        square = i**2\n        if square == N:\n            # if it is, calculate the next greater perfect square\n            next_square = i + 2\n            return next_square\n        elif square > N:\n            # if it's not, check if the next odd number between i and i+2 is a perfect square\n            next_odd = i + 2\n            if next_odd**2 == square:\n                # if it is, return the next perfect square between i and i+2\n                return next_odd\n            else:\n                # if it's not, continue iterating\n                continue\n    # if none of the above conditions are met, return the largest odd number less than N\n    return N - 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    next_psq = (sqrt_N + 1) ** 2\n    while next_psq <= N:\n        sqrt_next_psq = int(math.sqrt(next_psq))\n        next_psq = (sqrt_next_psq + 1) ** 2\n    return next_psq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # check if given number is already a perfect square\n    if N**2 == N:\n        return N+1\n\n    # initialize variables\n    num = N\n    square = 1\n\n    # keep iterating until a perfect square is found\n    while square**2 <= num:\n        square += 1\n\n    # check if the square is odd\n    if square % 2!= 0:\n        square += 1\n\n    # return the next perfect square greater than the given number\n    return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    This function takes a positive integer N as input and returns the next perfect square greater than N. \n    A perfect square is a positive integer that is equal to the square of its positive integer factorization. \n    For example, 6 is a perfect square because 6 = 1 \u00d7 1 \u00d7 2, which is the cube of a perfect square.\n    The next perfect square greater than a given number N is the number that is the square of the factorization of N+1. \n    For example, the next perfect square greater than 6 is 8, which is the square of the factorization of 7. \n    If there is no next perfect square greater than N, then the function should return -1.\n    '''\n    \n    # if N is already a perfect square, return N\n    if math.isqrt(N) ** 2 == N:\n        return N\n    \n    # otherwise, calculate the next perfect square greater than N using a brute force approach\n    sqrt_N = int(math.sqrt(N))\n    for i in range(sqrt_N, -1, -1):\n        square = i ** 2\n        if math.isqrt(square + 1) ** 2 == square + 1:\n            return square + 1\n    \n    # if the function has reached this point, then no next perfect square greater than N exists\n    return -1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Check if the array is bitonic\n    is_bitonic = True\n    for i in range(1, n):\n        if arr[i] > arr[i-1] and arr[i-1] > arr[i-2]:\n            is_bitonic = False\n            break\n    # If the array is not bitonic, return 0\n    if not is_bitonic:\n        return 0\n    # Initialize the maximum sum and current sum\n    max_sum = float('-inf')\n    cur_sum = 0\n    # Iterate over the array and update the maximum sum and current sum\n    for num in arr:\n        cur_sum += num\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n        elif cur_sum < 0:\n            cur_sum = 0\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables to keep track of the maximum sum and its subsequence\n    max_sum = float('-inf')\n    curr_sum = 0\n    prev_sum = 0\n    subseq = []\n\n    # Iterate through the array and calculate the sum of the subsequence\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum = arr[i]\n        if arr[i] < arr[i-1]:\n            prev_sum += curr_sum\n            curr_sum = 0\n        subseq.append(arr[i])\n\n        # Update the maximum sum and its subsequence\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            subseq = [arr[i]]\n        elif curr_sum == max_sum:\n            subseq.append(arr[i])\n\n    # Convert the subsequence to a list\n    subseq = list(set(subseq))\n\n    # Calculate the sum of the subsequence\n    sum_subseq = sum(subseq)\n\n    # Calculate the difference between the sum of the subsequence and the maximum sum\n    diff = abs(sum_subseq - max_sum)\n\n    return max_sum, diff, subseq"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    \n    # Initialize the first two elements of the dp array\n    dp[0] = arr[0]\n    dp[1] = arr[1]\n    \n    # Fill the rest of the array using the dp array\n    for i in range(2, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = dp[i-1] - arr[i-1]\n    \n    # Find the maximum sum of a bitonic subsequence\n    max_sum = max(dp[0], dp[1])\n    for i in range(2, n):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if the array is empty or only has one element\n    if len(arr) <= 1:\n        return arr[0]\n\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Traverse through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            if current_sum > max_sum:\n                max_sum = current_sum\n            current_sum = 0\n\n    # Add the last remaining subsequence to the current sum\n    current_sum += arr[-1]\n\n    # Check if the current sum is greater than the maximum sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array and calculate the sum of a bitonic subsequence\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            curr_sum += arr[i]\n        else:\n            curr_sum -= arr[i]\n\n        # Update the maximum sum if the current sum is greater than the previous maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # check if the array is empty or contains only one element\n    if n == 0 or n == 1:\n        return 0\n\n    # initialize max_ending_here and max_so_far\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    # consider all possible starting points for the subsequence\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            # update max_ending_here if the current element is increasing\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n        else:\n            # update max_ending_here if the current element is decreasing\n            max_ending_here = max(max_ending_here - arr[i], 0)\n\n        # update max_so_far if the current subsequence is greater\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    increasing = 0\n    decreasing = 0\n\n    # Traverse through the array\n    for num in arr:\n        if num > arr[increasing]:\n            increasing = arr.index(num)\n            decreasing = arr.index(num)\n            max_sum = num\n        elif num > arr[decreasing]:\n            decreasing = arr.index(num)\n            if num - arr[decreasing] > arr[increasing] - num:\n                max_sum = num - arr[increasing]\n            else:\n                max_sum = num - arr[decreasing]\n        else:\n            max_sum = max(max_sum, num)\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif arr[0] < arr[1]:\n        return max(arr[0], arr[1])\n    else:\n        return max(arr[0], arr[1]) + max_sum(arr[2:])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    # initialize variables to keep track of the previous and current max sum\n    prev_max = float('-inf')\n    curr_max = float('-inf')\n\n    # iterate through the array and calculate the maximum sum for each subsequence\n    for num in arr:\n        # if the current number is increasing, update the previous maximum\n        if num > prev_max:\n            curr_max = max(curr_max, num)\n        # if the current number is decreasing, update the current maximum\n        else:\n            curr_max = max(curr_max, prev_max - num)\n        # update the previous maximum for the next iteration\n        prev_max = curr_max\n\n    return curr_max"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # initialize variables\n    curr_sum = arr[0]\n    prev_sum = 0\n    max_sum = 0\n    \n    # iterate through the array\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum = arr[i]\n        \n        if curr_sum > prev_sum:\n            prev_sum = curr_sum\n        elif curr_sum < prev_sum:\n            curr_sum = prev_sum\n        \n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"Error: Cannot find square root of a negative number.\"\n    elif number == 0:\n        return 0\n    else:\n        x = number / 2\n        y = x\n        while True:\n            y = (x + number / x) / 2\n            if abs(y - x) < 0.0000000001:\n                return y\n            x = y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Define the error tolerance\n    epsilon = 0.00001\n    \n    # Use the babylonian method to find the square root\n    x = number / 2\n    y = x + (number / x) / 2\n    \n    # Check if the difference between x and y is less than epsilon\n    while abs(x - y) > epsilon:\n        x = y\n        y = x + (number / x) / 2\n    \n    # Return the approximate square root\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = 1\n    while abs(x-y) > 0.0001:\n        y = 0.5 * (x + y)\n        x = y\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        if guess**2 == number:\n            return guess\n        elif guess**2 < number:\n            guess = (guess + number / guess) / 2\n        else:\n            guess = (guess + number / guess) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    :param number: The number to compute the square root of.\n    :type number: int, float\n    :return: The square root of the number.\n    :rtype: float\n    \"\"\"\n    # Use Newton's method to compute the square root\n    x = number / 2.0  # Start with half the number\n    while True:\n        y = x - (number / x)  # Compute the next approximation\n        if abs(y - x) < 0.000001:  # If the difference between the approximations is less than 0.000001, stop\n            return y\n        x = y  # Update the starting point for the next iteration"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = 1\n    prev_guess = 1\n    epsilon = 0.00001\n\n    # main loop\n    while abs(guess*guess - number) > epsilon:\n        prev_guess = guess\n        guess = (guess + number/guess) / 2\n        \n    # return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize the guess and precision\n    guess = number / 2\n    precision = 0.00001\n\n    # Iterate until the precision is smaller than the desired tolerance\n    while abs(guess * guess - number) >= precision:\n        # Update the guess\n        guess = (guess + number / guess) / 2\n\n    # Return the computed square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize a counter and an approximation\n    counter = 0\n    guess = number / 2\n\n    while True:\n        # compute the next guess using the babylonian method\n        next_guess = guess - (guess*guess - number) / (2*guess)\n\n        # check if the difference between the guess and the actual root is less than a tolerance\n        if abs(next_guess - guess) < 1e-6:\n            break\n\n        # update the counter and the guess\n        counter += 1\n        guess = next_guess\n\n    return counter, guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize two variables, start and end, to approximate the square root\n    start = 0\n    end = number\n\n    # initialize a variable, iterations, to keep track of how many iterations we've done\n    iterations = 0\n\n    # while the difference between start and end is greater than 0.001, perform a babylonian update\n    while abs(start - end) > 0.001:\n        # if the difference between start and end is greater than 2, adjust the start value\n        if abs(start - end) > 2:\n            start = (start + end) / 2\n\n        # if the difference between start and end is less than or equal to 2, adjust the end value\n        else:\n            end = start\n\n        # increment iterations counter\n        iterations += 1\n\n    # return the approximate square root using the last babylonian update\n    return start"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number//x) / 2\n    while abs(x - y) > 1e-12:\n        x = y\n        y = (x + number//x) / 2\n    return y"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store lengths of longest palindromic subsequence ending at i, j\n    table = [[0] * n for _ in range(n)]\n    \n    # Initialize the base cases\n    for i in range(n):\n        table[i][i] = 1\n    \n    # Fill in the table using dynamic programming\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n    \n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindromic_subsequence(s):\n    if len(s) < 2:\n        return 0\n\n    longest_length = 1\n    start = 0\n    max_start = 0\n\n    for i in range(1, len(s)):\n        if is_palindrome(s[i-1:i+1]):\n            length = 2\n            while i-length >= 0 and i+length < len(s) and s[i-length] == s[i+length]:\n                length += 2\n\n            if length > longest_length:\n                longest_length = length\n                start = i-length\n                max_start = i-length + 1\n\n    return longest_length, max_start\n\ndef lps(s):\n    return longest_palindromic_subsequence(s)[0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize a 2D list to store the length of longest palindromic subsequence for all possible substrings of the given string.\n    dp = [[0] * len(str) for _ in range(len(str))]\n\n    # Fill the first row and first column of the dp table with 1, as there is only one possible substring of length 1.\n    for i in range(len(str)):\n        dp[i][i] = 1\n\n    # Find the length of longest palindromic subsequence for all possible substrings of the given string.\n    for i in range(1, len(str)):\n        for j in range(i):\n            # If the characters at the current position and the previous position are same, then extend the palindromic subsequence of length 2 by the current character.\n            if str[i] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n\n            # If the characters at the current position and the previous position are different, then either extend the palindromic subsequence of length 1 by the current character or extend the palindromic subsequence of length 2 by the two characters.\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence.\n    return dp[len(str)-1][len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D array to store the length of longest palindromic subsequence for all prefixes of the string\n    lps_array = [[0] * n for i in range(n)]\n\n    # Calculate the length of longest palindromic subsequence for all prefixes of the string\n    for i in range(n):\n        lps_array[i][i] = 1\n\n    # Check for substrings of length 2 or more and update the LPS array\n    for length in range(3, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            # If characters at the start and end of the substring are same, then check for a longer palindrome\n            if str[start] == str[end]:\n                if length == 2 or lps_array[start + 1][end - 1] + 2 > lps_array[start][end]:\n                    lps_array[start][end] = lps_array[start + 1][end - 1] + 2\n\n    # Find the length of the longest palindromic subsequence in the string\n    max_length = 0\n    for i in range(n):\n        if max_length < lps_array[0][i]:\n            max_length = lps_array[0][i]\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    n = len(s)\n    table = [[0] * (n+1) for _ in range(n+1)]\n\n    # build the table\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # find the length of the longest palindromic subsequence\n    start = 0\n    max_length = table[0][0]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1] and table[i-1][j-1] + 1 > max_length:\n                start = i-1\n                max_length = table[i-1][j-1] + 1\n\n    # print the result\n    print(\"Length of the longest palindromic subsequence is:\", max_length)\n    print(\"Longest palindromic subsequence is:\", s[start:start+max_length])"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize variables\n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(2)]\n    longest_palindrome = 1\n\n    # Fill the dp table using dynamic programming\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i % 2][j] = 1\n            elif i > j:\n                dp[i % 2][j] = 0\n            else:\n                if str[i] == str[j]:\n                    dp[i % 2][j] = dp[(i-1) % 2][j-1] + 2\n                else:\n                    dp[i % 2][j] = max(dp[(i-1) % 2][j], dp[i % 2][j-1])\n        longest_palindrome = max(longest_palindrome, dp[i % 2][j] // 2)\n\n    return longest_palindrome"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Initialize variables for storing the length of the longest palindrome subsequence and its starting index\n    max_len = 0\n    start = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Check if the current character is the start of a palindrome subsequence\n        if i >= len(str) // 2: \n            # Check if the current character is a palindrome\n            if str[i] == str[i-len(str) // 2]: \n                # Update max_len and start index if the current character is a palindrome\n                max_len = max(max_len, i-len(str) // 2+1)\n                start = i-len(str) // 2+1\n\n        # Check if the current character is the end of a palindrome subsequence\n        elif i+len(str) // 2 < len(str) and str[i] == str[i+len(str) // 2]: \n            # Update max_len and start index if the current character is a palindrome\n            max_len = max(max_len, i+len(str) // 2)\n            start = i+len(str) // 2\n\n        # Check if the current character is a part of a palindrome subsequence\n        else: \n            # Check if the left half of the current character is a palindrome\n            if str[i] == str[i+len(str) // 2]: \n                # Update max_len and start index if the current character is a palindrome\n                max_len = max(max_len, i+len(str) // 2+1)\n                start = i+len(str) // 2+1\n            \n            # Check if the right half of the current character is a palindrome\n            elif str[i+len(str) // 2] == str[i]: \n                # Update max_len and start index if the current character is a palindrome\n                max_len = max(max_len, i-len(str) // 2+1)\n                start = i-len(str) // 2+1\n    \n    return max_len, start"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    # base case\n    if len(str) <= 1:\n        return 0\n\n    # create a table to store the length of the longest palindromic subsequence ending at each index\n    table = [0] * len(str)\n\n    # initialize the length of the longest palindromic subsequence ending at the first index\n    table[0] = 1\n\n    # loop through the rest of the indices\n    for i in range(1, len(str)):\n        # check if the current character is odd or even\n        if str[i] % 2 == 0:\n            # even character\n            # check if there is a previous even character\n            if i > 1 and str[i-1] % 2 == 0:\n                # there is a previous even character\n                # check if the current character can be added to the previous even character\n                if str[i-2] == str[i]:\n                    # the current character can be added to the previous even character\n                    table[i] = table[i-2] + 2\n            # check if there is a previous odd character\n            elif i > 0 and str[i-1] % 2 == 1:\n                # there is a previous odd character\n                # check if the current character can be added to the previous odd character\n                if str[i-1] == str[i]:\n                    # the current character can be added to the previous odd character\n                    table[i] = table[i-1] + 2\n        else:\n            # odd character\n            # check if there is a previous even character\n            if i > 1 and str[i-1] % 2 == 0:\n                # there is a previous even character\n                # check if the current character can be added to the previous even character\n                if str[i-2] == str[i]:\n                    # the current character can be added to the previous even character\n                    table[i] = table[i-2] + 2\n            # check if there is a previous odd character\n            elif i > 0 and str[i-1] % 2 == 1:\n                # there is a previous odd character\n                # check if the current character can be added to the previous odd character\n                if str[i-1] == str[i]:\n                    # the current character can be added to the previous odd character\n                    table[i] = table[i-1] + 2\n                elif str[i-1] == str[i-2]:\n                    # the current character can be added to the previous even character\n                    table[i] = table[i-2] + 2\n\n    # find the length of the longest palindromic subsequence\n    max_len = 0\n    for i in range(len(str)):\n        if table[i] > max_len:\n            max_len = table[i]\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(string):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    :param string: The given string.\n    :type string: str\n    :return: The length of the longest palindromic subsequence.\n    :rtype: int\n    \"\"\"\n    n = len(string)\n    # Initialize two pointers: left and right\n    left = 0\n    right = 0\n    # Initialize a variable to store the length of the longest palindromic subsequence\n    length = 0\n\n    while right < n:\n        # Check if the characters at the left and right pointers are the same\n        if string[left] == string[right]:\n            # If they are, move both pointers to the right\n            left += 1\n            right += 1\n            # Update the length of the longest palindromic subsequence if necessary\n            length = max(length, right - left)\n        # If they are not, move the right pointer to the right\n        else:\n            # If the difference in length between the left and right pointers is greater than 1,\n            # it means that the current subsequence is a palindrome and the length of the longest subsequence is increased\n            if right - left > 1:\n                length = max(length, right - left)\n            # Move the left pointer to the right\n            left = right = right + 1\n\n    # If the difference in length between the left and right pointers is greater than 1,\n    # it means that the current subsequence is a palindrome and the length of the longest subsequence is increased\n    if right - left > 1:\n        length = max(length, right - left)\n\n    return length\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s): \n    n = len(s) \n    # create a 2D array to store the length of longest \n    # palindromic subsequence ending at each index \n    L = [[0] * n for _ in range(n)] \n  \n    # initialize L[i][j] to 0 if s[i]!= s[j] \n    for i in range(n): \n        for j in range(i, n): \n            if s[i] == s[j]: \n                L[i][j] = 2 + L[i+1][j-1] \n  \n    # return the maximum value in L[0..n-1][0..n-1] \n    return max(L[0][n-1], L[n-1][0]) "
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + 1/n**2 + 1/n**3 +... + 1/n**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 / n) * (1 / (n - 1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize variables\n    sum_of_ones = 0\n    sum_of_twos = 0\n    i = 0\n    # Calculate the harmonic sum of n-1\n    while i < n-1:\n        if i % 2 == 0:\n            sum_of_twos += 1/i\n            i += 2\n        else:\n            sum_of_ones += 1/i\n            i += 1\n    # Return the harmonic sum of n-1\n    return sum_of_ones + sum_of_twos"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/(2*n-1) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Calculate the sum of 1/i for i = 1 to n-1\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n\n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0.0\n    for i in range(1, n+1):\n        harmonic_sum += 1.0/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (1 / (1/2 + 1/3 +... + 1/(n-1)))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)/(2*n)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes in two arrays of integers and returns the intersection of the two arrays.\n    '''\n    # create a set to store the unique values in array_nums1 and array_nums2\n    unique_values = set(array_nums1 + array_nums2)\n\n    # create an empty set to store the intersection\n    intersection = set()\n\n    # iterate through unique_values and check if each value is in array_nums1 or array_nums2\n    for value in unique_values:\n        if value in array_nums1 and value in array_nums2:\n            intersection.add(value)\n\n    # return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_set = set(array_nums1) & set(array_nums2)\n    return sorted(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of unique numbers from both arrays\n    unique_nums = set(array_nums1 + array_nums2)\n    \n    # create a new set to store the intersection\n    intersection_set = set()\n    \n    # iterate through the unique numbers and check if they are present in both arrays\n    for num in unique_nums:\n        if num in array_nums1 and num in array_nums2:\n            intersection_set.add(num)\n    \n    # convert the intersection set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary to store the count of each element in array_nums1\n    count_dict = {}\n    for num in array_nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n            \n    # create an empty list to store the intersection elements\n    intersection_list = []\n    \n    # iterate over array_nums2 and add elements that appear in array_nums1 and have a count greater than 0\n    for num in array_nums2:\n        if num in count_dict and count_dict[num] > 0:\n            intersection_list.append(num)\n            count_dict[num] -= 1\n            \n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Find the intersection of two arrays using a set\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    \n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty set to store the intersection\n    intersection = set()\n    # Loop through each element in the first array\n    for num in array_nums1:\n        # Check if the element is present in the second array\n        if num in array_nums2:\n            # Add the element to the intersection set\n            intersection.add(num)\n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return set_nums1.intersection(set_nums2)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    i = j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # loop through the list and insert the element before each element\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.extend(list[i:])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # iterate over the list and insert the element before each element\n    for i in range(len(list)):\n        # insert the element at the current index of the list\n        list.insert(i,element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Create a new empty list to store the resulting list\n    new_list = []\n    # Iterate through the original list\n    for i in range(len(list)):\n        # Insert the element before the current element in the original list\n        new_list.append(element)\n        new_list.append(list[i])\n    # Return the resulting list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # Convert each complex number to polar form\n    polar_numbers = []\n    for number in numbers:\n        magnitude, angle = cmath.polar(number)\n        polar_numbers.append((magnitude, angle))\n\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input, and converts them to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        mod = cmath.sqrt(real**2 + imag**2)\n        theta = cmath.phase(num)\n        print(\"({}, {})\".format(mod, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(complex(real, imag))\n        print('Magnitude:', magnitude, 'Angle:', angle)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        polar_coords.append((r, phi))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        polar.append((magnitude, angle))\n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        r = abs(num)\n        phi = cmath.phase(num)\n        \n        # add the result to a list\n        result.append((r, phi))\n    \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''  \n    result = []  \n    for num in numbers:  \n        num = complex(num)  \n        r = abs(num)  \n        phi = cmath.phase(num)  \n        polar_num = (r, phi)  \n        result.append(polar_num)  \n    return result  \n  \nprint(convert([1 + 2j, 3 - 4j, 5 + 6j]))   # Output: [(1.0, 0.7853981633974483), (5.0, 0.0), (3.0, 1.5707963267948966)]"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        x = num.real\n        y = num.imag\n        magnitude = cmath.sqrt(x**2 + y**2)\n        angle = cmath.phase(num)\n        print(\"({}, {})\".format(magnitude, angle))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_number = cmath.rect(number)\n        complex_numbers.append(complex_number)\n    return complex_numbers"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    '''\n    Returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(1, len(l)+1):\n        for comb in combinations_with_replacement(l, i):\n            colors.append((comb))\n    return colors"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    if len(l) < n:\n        return []\n\n    combos = []\n    for i in range(len(l)):\n        for combo in combinations_with_replacement(l[i+1:], n-1):\n            combos.append((l[i],) + combo)\n\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n-1):\n            result.append((l[i],) + j)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Create a list of numbers from 2 to n\n    numbers = list(range(2, n+1))\n\n    # Create a set of prime numbers\n    primes = set(num for num in numbers if all(num % i!= 0 for i in range(2, num)) and num!= 1)\n\n    # Return the length of the set of prime numbers\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"\n    A function to check if a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    A function to count the number of prime numbers less than a given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the first tuple has more elements than the second\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = test_tup1\n    if test_tup2 > max_tuple:\n        max_tuple = test_tup2\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        max_element1 = max(test_tup1)\n        max_element2 = max(test_tup2)\n        if max_element1 > max_element2:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns the tuple that contains the highest value.\n\n    If both tuples have the same highest value, the function will return the first tuple.\n    '''\n    max_num = max(test_tup1, test_tup2)\n    if max_num == test_tup1:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples are of equal length\n    if len(test_tup1) == len(test_tup2):\n        # Compare each element of the two tuples\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                # Swap the elements if necessary\n                test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n        # Return the maximum tuple\n        return test_tup1\n    # If tuples are not of equal length, return the shortest tuple\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the given tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples do not have the same number of elements.\")\n        return None\n    \n    # Check if all elements of the tuples are comparable\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], (int, float, str)):\n            print(\"The elements of the tuples are not comparable.\")\n            return None\n    \n    # Sort the given tuples\n    max_tup = max(test_tup1, test_tup2)\n    min_tup = min(test_tup1, test_tup2)\n    \n    # Return the maximum tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of both tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # Compare the elements of both tuples\n        for i in range(len(test_tup1)):\n            # If the element of test_tup1 is greater than the element of test_tup2, swap them\n            if test_tup1[i] > test_tup2[i]:\n                test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n        # Return the maximum tuple\n        return max(test_tup1, test_tup2)\n    # If the length of both tuples is not equal, return None\n    else:\n        return None"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Loop through the elements of the first tuple\n    for element in test_tup1:\n        # Loop through the elements of the second tuple\n        for compare_element in test_tup2:\n            # If the element is greater than the compare_element, swap them\n            if element > compare_element:\n                test_tup1[test_tup1.index(element)] = compare_element\n                test_tup2[test_tup2.index(compare_element)] = element\n    \n    # Return the maximum tuple\n    if sum(test_tup1) > sum(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] >= test_tup2[0]:\n        if test_tup1[1] >= test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2\n    else:\n        if test_tup1[1] >= test_tup2[1]:\n            return test_tup2\n        else:\n            return test_tup1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a list of prime numbers\n    primes = [True] * (n + 1)\n    primes[0], primes[1] = False, False\n\n    # Use the Sieve of Eratosthenes algorithm to find primes\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n + 1, i):\n                primes[j] = False\n\n    # Find the nth newman\u2013shanks\u2013williams prime number\n    for i, prime in enumerate(primes):\n        if prime and i == n - 1:\n            return i + 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the count of prime numbers \n    count = 0 \n\n    # Initialize the array to store the primes \n    primes = [] \n\n    # Iterate till n is greater than 0 \n    while n > 0: \n        # Check if the current number is prime \n        if is_prime(n): \n            count += 1 \n            primes.append(n) \n\n        # Decrement the current number \n        n -= 1 \n\n    # If the count of prime numbers is equal to n, then n is the nth newman\u2013shanks\u2013williams prime number \n    if count == n: \n        return n \n    else: \n        # If the count of prime numbers is less than n, then n is not the nth newman\u2013shanks\u2013williams prime number \n        return \"n is not the nth newman\u2013shanks\u2013williams prime number\"\n\ndef is_prime(num): \n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    # Check if the number is less than 2 \n    if num < 2: \n        return False \n\n    # Check if the number is equal to 2 or 3 \n    if num == 2 or num == 3: \n        return True \n\n    # Check if the number is divisible by any number between 2 and the square root of the number \n    for i in range(2, int(num**0.5)+1): \n        if num % i == 0: \n            return False \n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the variables for the first two newman\u2013shanks\u2013williams primes\n    p1 = 2\n    p2 = 3\n    # Initialize the count variable for the next newman\u2013shanks\u2013williams prime\n    count = 0\n    \n    # Loop through the sequence of newman\u2013shanks\u2013williams primes\n    while count < n:\n        # Check if the current newman\u2013shanks\u2013williams prime is prime\n        if is_prime(p1) and is_prime(p2):\n            # If it is prime, increment the count variable\n            count += 1\n        # Check if the difference between the current newman\u2013shanks\u2013williams prime and the previous two is prime\n        if is_prime(p1 - p2):\n            # If it is prime, set the new current newman\u2013shanks\u2013williams prime to the difference and increment the count variable\n            p1 = p1 - p2\n            count += 1\n        else:\n            # If it is not prime, set the new current newman\u2013shanks\u2013williams prime to the previous two and decrement the count variable\n            p1 = p1 - p2\n            count -= 1\n        p2 += 2\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return p1\n\ndef is_prime(n):\n    \"\"\"\n    Write a helper function to check if a number is prime.\n    \"\"\"\n    # Check if the number is equal to 2 or 3\n    if n == 2 or n == 3:\n        return True\n    # Check if the number is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    # Check if the number is divisible by any odd number greater than 3\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 2\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                if n == 1:\n                    return i\n                elif n == i:\n                    return i + 2\n                else:\n                    return newman_prime(n - 1)\n        return newman_prime(n - 1) + 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list to store the primes\n    primes = []\n    # Initialize a flag to keep track of whether we found a prime\n    found_prime = False\n    # Initialize the current number to start with\n    current = 2\n    # Loop until we have found n primes\n    while len(primes) < n:\n        # Check if the current number is a prime\n        is_prime = True\n        for i in range(2, int(current**0.5)+1):\n            if current % i == 0:\n                is_prime = False\n                break\n        # If the current number is a prime, add it to the list of primes and check if we have found n primes\n        if is_prime:\n            primes.append(current)\n            if len(primes) == n:\n                found_prime = True\n                break\n        current += 1\n    # If we have not found n primes, return None\n    if not found_prime:\n        return None\n    # Otherwise, return the nth prime in the list\n    else:\n        return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0: \n        return 2 # the first newman\u2013shanks\u2013williams prime number is 2 \n    if n == 1: \n        return 5 # the second newman\u2013shanks\u2013williams prime number is 5 \n    else: \n        return newman_prime(n-1) + newman_prime(n-2) # compute the n-th newman\u2013shanks\u2013williams prime number recursively"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    result = 2\n    \n    for i in range(n):\n        if result**3 == result**2 or result**7 == result**2:\n            result += 1\n        elif is_prime(result):\n            return result\n        else:\n            result += 1\n    \n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2:\n        return None\n\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            i += 1\n        else:\n            j = 3\n            while j * j <= i:\n                if i % j == 0:\n                    break\n                j += 2\n            if j * j > i:\n                return i\n            i += 2\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to store the current prime number\n    prime = 2\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        print(\"Error: n must be a positive integer.\")\n        return\n\n    # Loop until the nth prime is found\n    for i in range(n):\n        # Check if the current prime number is prime\n        is_prime = True\n        for j in range(2, prime):\n            if prime % j == 0:\n                is_prime = False\n                break\n        # If the current prime number is prime, it is the nth prime\n        if is_prime:\n            return prime\n        # Increment the prime number by 1\n        prime += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    count = 0\n    p = 2\n    # loop through the numbers from 2 to n\n    while count < n:\n        # check if p is prime\n        if all(p % i!= 0 for i in range(2, int(p**0.5) + 1)):\n            # if p is prime, check if it is the nth newman\u2013shanks\u2013williams prime number\n            if count == n-1:\n                return p\n            count += 1\n        # increment p by 1\n        p += 1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the input tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the input tuples is not same.\")\n        return None\n    \n    # initialize a new tuple to store the result\n    result_tup = ()\n    \n    # perform the element-wise division operation and append the result to the new tuple\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    # return the new tuple as the result of the function\n    return result_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize empty list to store the result\n    result_list = []\n    # Loop through both tuples and perform element-wise division operation\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    # Return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Perform element-wise division of the two tuples\n    div_tup = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    return div_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_result = []\n    for i in range(len(test_tup1)):\n        division_result.append(test_tup1[i] / test_tup2[i])\n    return division_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of the two input tuples should be the same.\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 0 or test_tup2[i] == 0:\n                print(\"Error: Both elements in the input tuple should be non-zero.\")\n            else:\n                test_tup1[i] = test_tup1[i] / test_tup2[i]\n                test_tup2[i] = 1\n        return test_tup1"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Check if the length of the list is greater than L\n    if len(lst) > L:\n        # Create a new list that contains the first L elements of the original list\n        first_part = lst[:L]\n        # Create a new list that contains the last L-L elements of the original list\n        last_part = lst[L:]\n        # Return a tuple containing the first and last parts of the list\n        return (first_part, last_part)\n    else:\n        # If the length of the list is not greater than L, return the original list as a tuple\n        return (lst, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(lst) % L!= 0:\n        raise ValueError(\"The length of the list must be a multiple of L.\")\n    mid = len(lst) // 2\n    return lst[:mid], lst[mid:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if isinstance(lst, list):\n        if isinstance(L, int) and L > 0:\n            n = len(lst)\n            if L <= n:\n                return lst[:L], lst[L:]\n            else:\n                raise ValueError(\"The length of the first part of the list should be less than or equal to the length of the original list.\")\n        else:\n            raise TypeError(\"The second argument should be an integer greater than 0.\")\n    else:\n        raise TypeError(\"The first argument should be a list.\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts with a length of L, and return the resulting lists as a tuple.\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"Length of L should be less than or equal to the length of the list.\")\n    \n    return (lst[:L], lst[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is greater than or equal to the length of the list\n    if L >= len(list1):\n        raise ValueError(\"L must be less than or equal to the length of the list\")\n    \n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # split the list into chunks of size L\n    chunks = [list1[i:i+L] for i in range(0, len(list1), L)]\n    # return the two parts of the list in a tuple\n    return (chunks[0], chunks[1])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts where the length of the first part of the list is L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    dog_years = 7 * h_age\n\n    # Return the calculated dog's age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    This function takes the height of the dog in meters and returns the dog's age in dog's years.\n    \"\"\"\n    return h_age / 0.0254"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    for i in range(0, h_age + 1):\n        if i % 2 == 0:\n            dog_years += 1\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n    \n    Parameters:\n    h_age (float): number of hours the dog has lived.\n    \n    Returns:\n    float: the dog's age in dog years.\n    \"\"\"\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7) / 10"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 + (14 - h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Split the list into chunks based on the step parameter\n    S_chunks = [S[i:i+step] for i in range(0, len(S), step)]\n\n    # Return the list of resulting lists\n    return S_chunks"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    if n % step!= 0:\n        raise ValueError(\"The length of the list must be divisible by the step size.\")\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to store the resulting lists\n    result = []\n    \n    # split the input list into chunks of size n\n    for i in range(0, len(S), step):\n        # create a new list that contains the current chunk of the input list\n        chunk = S[i:i+step]\n        # add the new list to the result list\n        result.append(chunk)\n    \n    # return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if isinstance(S, list):\n        split_list = []\n        for i in range(0, len(S), step):\n            split_list.append(S[i:i+step])\n        return split_list\n    else:\n        return \"Error: Input must be a list.\""
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to hold the resulting lists\n    result = []\n    # Initialize a variable to keep track of the current position in the list\n    i = 0\n    # Loop through the list until we reach the end\n    while i < len(S):\n        # If the current position is a multiple of n, add the current list to the result list and increment i by n\n        if i % step == 0:\n            result.append(S[i:i+step])\n            i += step\n        # If the current position is not a multiple of n, increment i by 1\n        else:\n            i += 1\n    # Return the resulting list of lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step!= 0:\n        raise ValueError('Input list length must be divisible by step.')\n\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    # Initialize an empty list to store the split lists\n    split_lists = []\n    # Loop through each element in the list, starting from the first one\n    for i in range(0, len(S), step):\n        # Add a new list to the split_lists list containing all elements from index i to the end of the list\n        new_list = S[i:]\n        # Append the new list to the split_lists list\n        split_lists.append(new_list)\n    # Return the split_lists list\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i + step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer.\")\n    elif step > len(S):\n        return [S]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2 # Formula for lateral surface area\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    surface_area = (6 * l * l + 12 * l + 8) * l / 12\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = (6*l**2) + (l**2) + l # Formula to find the lateral surface area of a cube\n    return area # Return the lateral surface area of the cube"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * (l**2)\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the surface area of each side\n    side_areas = [(6*l*l + 6*l + 4), (6*l*l + 6*l + 4), (6*l*l + 6*l + 4)]\n    # calculate the total surface area by summing up the individual areas\n    total_area = sum(side_areas)\n    # return the total surface area\n    return total_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the surface area of the cube using Heron's formula\n    s = 6 * l * (l + 3 * l**2)\n    return s"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = (6 * l**2) + (12 * l) + (8 * l) + (6 * l**2)\n    return surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize sum variable\n    sum = 0\n\n    # iterate through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # calculate the square of the odd number\n        square = i**2\n        # add the square to the sum\n        sum += square\n\n    # return the sum of squares of odd numbers from 1 to n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initializing sum variable\n    sum = 0\n\n    # iterating over odd natural numbers\n    for i in range(1, n+1, 2):\n\n        # adding the square of the current odd natural number to the sum variable\n        sum += i*i\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    current_number = 1\n    count = 0\n\n    while count < n:\n        current_number += 2\n        if current_number % 2!= 0:\n            sum_of_squares += current_number ** 2\n            count += 1\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_squares = sum(x**2 for x in range(1, n+1, 2))\n    return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            sum += i**2\n        i += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum of squares to 0\n    sum_of_squares = 0\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum of squares\n        sum_of_squares += i*i\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # create a string of stars\n    stars = '*' * n\n    # find the length of the string and add 1 to it to get then'th number of stars\n    nth_star_num = len(stars) + 1\n    # return then'th star number\n    return nth_star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    if n == 1:\n        return \"1\"\n\n    for i in range(2, n+1):\n        if n % i == 0:\n            return \"Invalid input. Please enter a positive integer.\"\n\n    return str(n)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n\n    Parameters:\n    n (int): the number of stars to find (n > 0).\n\n    Returns:\n    int: then'th star number.\n\n    Examples:\n    >>> find_star_num(1)\n    1\n    >>> find_star_num(2)\n    2\n    >>> find_star_num(3)\n    3\n    >>> find_star_num(4)\n    4\n    >>> find_star_num(5)\n    5\n    >>> find_star_num(6)\n    6\n    '''\n\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    else:\n        return n * n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return \"*\"\n    elif n == 1:\n        return \"**\"\n    elif n > 1:\n        return \" \" + find_star_num(n-1) + \" \""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the variable star_num to 1\n    star_num = 1\n\n    # Loop through the first n-1 rows\n    for i in range(1, n):\n        # Loop through the number of stars for each row\n        for j in range(i+1):\n            # Print a star\n            print('*', end='')\n\n        # Move to the next row\n        print()\n\n    # Return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (find_star_num(n - 1) + find_star_num(n - 2))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 1\n    for i in range(n-1): \n        star_num *= 3\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 1\n    for i in range(1, n+1):\n        star_num = star_num * i\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * find_star_num(n // 2)\n    else:\n        return 1 + 4 * find_star_num(n // 2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the counter and result variables\n    counter = 0\n    result = \"\"\n    \n    # Loop through each digit in the number\n    while counter < n:\n        # Add a star to the result string\n        result += \"*\"\n        \n        # Increment the counter\n        counter += 1\n    \n    # Print the result\n    print(result)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return 'Invalid input'"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,\n       'm': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122,\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80,\n        'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90\n    }\n    return ascii_dict[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n        elif arr[i] % 2 == 1:\n            if even_index % 2 == 0:\n                even_sum += arr[i]\n                even_index += 1\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n    return even_sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n            if even_index % 2 == 0:\n                break\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total_sum = 0\n    for i in range(2, n+1):\n        total_sum += i ** 5\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 1\n    while i <= n: \n        sum += i**5\n        i += 1\n    return sum "
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_even_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_even_powers += i ** 5\n    return sum_of_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_nums = [2, 4, 6, 8, 10]\n    even_powers = [1, 16, 256, 3125, 100000]\n\n    total_sum = 0\n    for i in range(n):\n        total_sum += even_nums[i] ** even_powers[i]\n\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize the sum to zero\n    sum_of_powers = 0\n    \n    # Iterate over the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Compute the sum of the first n even natural numbers raised to the fifth power\n        sum_of_powers += i**5\n    \n    # Return the sum of the first n even natural numbers raised to the fifth power\n    return sum_of_powers"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear_element for (front_element, rear_element) in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        rear = tup[-1]\n        result_list.append(rear)\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear for tup in test_list for rear in tup]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        rear = item[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length!\")\n        return\n    \n    # Loop through the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples have different lengths.')\n    \n    # Iterate over the tuples and subtract the elements with the same index\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i >= len(test_tup2):\n            result.append(test_tup1[i])\n        else:\n            result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The number of elements in both tuples must be the same.\")\n        return None\n    else:\n        result_tup = tuple()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients to 0\n    even_binomial_coeff_sum = 0\n\n    # Iterate over the indices from 0 to n\n    for i in range(n+1):\n        # Calculate the even index binomial coefficient\n        even_binomial_coeff = math.comb(n, i)\n\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            even_binomial_coeff_sum += even_binomial_coeff\n\n    # Return the sum of even index binomial coefficients\n    return even_binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n    for i in range(1, n+1):\n        coeff = math.factorial(n)/(math.factorial(i-1)*math.factorial(n-i+1))\n        if i % 2 == 0:\n            coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            if (i+j) % 2 == 0:\n                sum += math.comb(i, j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum( n):  \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:  \n        return None  \n    elif n == 1:  \n        return 1  \n    else:  \n        sum = 0  \n        for i in range(2, n+1):  \n            coeff = math.comb(n, i)  \n            if i % 2 == 0:  \n                sum += coeff  \n        return sum  "
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            sum += math.comb(n,i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the sum to 0\n    even_sum = 0\n    # loop through all values of i from 1 to n\n    for i in range(1, n+1):\n        # calculate the even index binomial coefficient using math.comb() function\n        coeff = math.comb(n, i)\n        # check if the index i is even\n        if i % 2 == 0:\n            # add the coefficient to the even_sum\n            even_sum += coeff\n    # return the even_sum\n    return even_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    # Calculate the first even index binomial coefficient (1, 1, 1,..., 1, 1)\n    even_binomial_coeff = 1\n    for i in range(1, n//2+1):\n        even_binomial_coeff *= i\n        even_binomial_coeff //= (2*i+1)\n\n    # Calculate the sum of even index binomial coefficients\n    sum_even_binomial_coeff = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_binomial_coeff += even_binomial_coeff\n\n    return sum_even_binomial_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n + 1):\n        for j in range(1, i + 1, 2):\n            sum += math.comb(i, j)\n    return sum\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Returns the volume of a cylinder with the given radius and height.\n    \"\"\"\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 2 * 3.14159 * r * r\n    volume = area * h / 3.0\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3)*3.14*(r**2)*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume of the cylinder.\n    '''\n    # Calculate the volume using the formula: V = 1/3 * pi * r^2 * h\n    return (1/3) * 3.14159 * (r**2) * (h)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r * r * h\n    return volume\n\npi = 3.14159265358979323846\nr = float(input(\"Enter the radius of the cylinder: \"))\nh = float(input(\"Enter the height of the cylinder: \"))\n\nprint(\"The volume of the cylinder is:\", volume_cylinder(r, h))"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = ((1/3) * pi * r**2 * h)\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        elif test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    i = 0\n    while i < len(test_tup) - 1:\n        if test_tup[i+1] == test_tup[i]:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1]!= test_tup[i]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num += (i * (2 * i - 1))\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 0\n    for i in range(1, n+1):\n        dec_num += (i * (3 * i - 1)) / 2\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # calculate the value of the nth decagonal number using the formula\n    # (n * (2 * n - 1)) / 2\n    return (n * (2 * n - 1)) / 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = []\n    for i in range(1, n+1):\n        decagonal_numbers.append(5*i*(3*i-1) // 2)\n    return decagonal_numbers[n-1]\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        # Calculate the number of rows and columns for the square root of n\n        square_root = int(n**0.5)\n        rows = 1\n        cols = 1\n        for i in range(2, square_root + 1):\n            # Increase the number of rows and columns for each iteration\n            rows += i\n            cols += i\n        # Find the nth number in the decagonal sequence\n        num = 1\n        for i in range(1, rows + 1):\n            for j in range(1, cols + 1):\n                if i == j:\n                    num += (i**2 + j**2)**2\n                elif i!= j:\n                    num += (i**2 + j**2)**2\n        return num == n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a, b = 1, 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal = 0\n    while i <= n:\n        decagonal += i\n        i += 1\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        return (n * (2 * n - 1)) + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the sum variable\n    decagonal_sum = 0\n    \n    # Calculate the sum of decagonal numbers\n    for i in range(n):\n        decagonal_sum += i*i*10\n    \n    return decagonal_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize variables\n    decagonal = 1\n    num = 1\n\n    # loop until nth decagonal number is found\n    while num < n:\n        # increase decagonal number\n        decagonal += 2\n\n        # check if nth decagonal number is greater than n\n        if decagonal > n:\n            # return False\n            return False\n\n        # increase number by 2 for each iteration\n        num += 2\n\n    # return True if nth decagonal number is found\n    return True"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = []\n    for element in test_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Check if the list is empty\n    if len(test_list) == 0:\n        return True\n\n    # Check if the first element of the list is already present in the list\n    if test_list[0] in test_list[1:]:\n        return False\n\n    # Recursively call the function for the rest of the list\n    for i in range(1, len(test_list)):\n        if all_unique(test_list[i:]):\n            return False\n\n    # If the function has reached the end of the list and all elements are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # create a set to store unique elements\n    unique_set = set()\n\n    # loop through the list and add unique elements to the set\n    for item in test_list:\n        if item not in unique_set:\n            unique_set.add(item)\n\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and subtracts the elements of the second list from the first list element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    else:\n        # Subtract the elements of the second list from the first list element-wise and return the result\n        return [x-y for x,y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n\n    Args:\n        nums1: A list of numbers.\n        nums2: A list of numbers.\n\n    Returns:\n        A list containing the result of subtracting each element of `nums1` from the corresponding element of `nums2`.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    # loop through the digits of the integer\n    for digit in str(n):\n        # if the digit is not already in the dictionary, add it with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # otherwise, increment the frequency of the digit\n        else:\n            freq[digit] += 1\n    \n    # loop through the digits of the integer again and check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    # initialize a dictionary to store frequency of each digit\n    freq = {}\n\n    # loop through each digit in the number\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # loop through each digit in the number again and check its frequency\n    for digit in str(n):\n        # if the frequency of the digit is greater than the digit itself, return False\n        if freq[digit] > digit:\n            return False\n\n    # if no False is returned, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # loop through each digit in the integer\n    for digit in str(n):\n        # get the frequency of the digit in the integer\n        freq = n.count(digit)\n        # check whether the frequency of the digit is less than or equal to the digit itself\n        if freq > digit:\n            return False\n    # if all digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_count = {}\n    for digit in str(n):\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    for digit in str(n):\n        if digit_count[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # Split the integer into a list of digits\n    digits = list(str(n))\n    \n    # Count the frequency of each digit\n    freq = [digits.count(d) for d in set(digits)]\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for d, f in zip(digits, freq):\n        if f > 1 and int(d) > f:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for digit in str(n):\n        freq = n // int(digit)\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n\n    for digit in digits:\n        if digit == 0:\n            return False\n\n        count = digits.count(digit)\n\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n\n    for i in range(10):\n        if freq[i] > n:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_freq = {}\n    for digit in str(n):\n        digit_freq[digit] = digit_freq.get(digit, 0) + 1\n\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and returns True if all the elements in the list are equal to the given element.\n    \"\"\"\n    if len(lst) == 0:\n        return True\n    else:\n        if lst[0] == element:\n            return check_element(lst[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0]!= element:\n        return False\n    return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    # Loop through the list and check if all elements are equal to the given element\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    # Loop through the list and check if all items are equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n    # If all items in the list are equal to the given element, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n    # Check if the first element in the list is equal to the given element\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    # The first element in the list is not equal to the given element, so the list is not fully checked\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b(?:{2})?'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"The pattern '{pattern}' was found in the text '{text}' at index {match.start()}\")\n    else:\n        print(f\"The pattern '{pattern}' was not found in the text '{text}'\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=[b]{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?=.*a)(?=.*[bB][bB][bB])'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*?b{2,3}')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.{2,3}b')\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a.*b{2,3}')\n    if pattern.match(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # create a modified array by repeating the given array k times\n    modified_arr = [a] * k\n    # iterate over the modified array and calculate the sum of the subarrays\n    max_sum = 0\n    for i in range(k):\n        current_sum = 0\n        for j in range(n):\n            current_sum += modified_arr[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the first k elements of the array\n    first_k_sum = sum(a[:k])\n    \n    # Initialize the maximum sum to the first k elements\n    max_sum = first_k_sum\n    \n    # Repeat the array k times and calculate the sum of each subarray\n    for i in range(k, n):\n        # Calculate the sum of the current subarray\n        curr_subarray_sum = sum(a[i-k:i+1])\n        \n        # Update the maximum sum if the current subarray sum is greater\n        if curr_subarray_sum > max_sum:\n            max_sum = curr_subarray_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the maximum sum of the original array\n    max_sum = max(a)\n\n    # Create a new array of length n * k, where each element is the repeated version of the original array\n    modified_array = [a[0] for i in range(n * k)]\n    for i in range(1, n * k):\n        modified_array[i] = a[i % n]\n\n    # Find the maximum sum of the modified array\n    max_modified_sum = max(modified_array)\n\n    # Return the maximum sum of the modified array\n    return max_modified_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a modified array by repeating the given array k times\n    modified_array = [a[i] for i in range(n)]\n    for i in range(k-1):\n        modified_array.extend(a)\n\n    # Initialize variables\n    max_sum = float('-inf')\n    window_start = 0\n    window_end = n\n\n    # Iterate through the modified array\n    for i in range(n):\n        # Update the window until the i-th element is found\n        while window_end < n and modified_array[window_end]!= a[i]:\n            max_sum = max(max_sum, sum(modified_array[window_start:window_end]))\n            window_start += 1\n            window_end += 1\n\n        # Update the window until the i-th element is found\n        while window_end < n and modified_array[window_end] == a[i]:\n            window_end += 1\n\n        # Update the maximum sum\n        max_sum = max(max_sum, sum(modified_array[window_start:window_end]))\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_array = [0] * k\n\n    # Loop through the input array\n    for i in range(n):\n        current_sum = current_sum + a[i]\n        repeated_array[(i % k)] = a[i]\n\n        # Find the maximum sum of a contiguous array\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n\n    # Find the maximum sum of a contiguous array in the modified array\n    for i in range(k):\n        current_sum = 0\n        for j in range(n):\n            current_sum = current_sum + repeated_array[(j % k)]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = n\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a modified array by repeating the given array k times\n    modified_array = []\n    for i in range(k):\n        modified_array += a\n    # Find the maximum sum of a contiguous array in the modified array\n    max_sum = max_subarray(modified_array)\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum\n\ndef max_subarray(arr):\n    '''\n    Find the maximum sum of a contiguous subarray in the given array.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    max_subarray = []\n    for i in range(k):\n        for j in range(i, n-k+1):\n            curr_sum = sum(a[j:j+k])\n            max_sum = max(max_sum, curr_sum)\n            if curr_sum in max_subarray:\n                return max_subarray[max_subarray.index(curr_sum)]\n            else:\n                max_subarray.append(curr_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_sum = 0\n\n    for i in range(n):\n        current_sum += a[i]\n\n        if i >= k - 1:\n            repeated_sum = current_sum - a[i - k + 1]\n\n        max_sum = max(max_sum, repeated_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize a new array with repeated elements\n    modified_array = []\n    for i in range(k):\n        modified_array.extend(a)\n\n    # Calculate the sum of the modified array\n    modified_array_sum = sum(modified_array)\n\n    # Initialize variables to store the maximum sum of the modified array and the current subarray sum\n    max_sum = 0\n    current_sum = 0\n\n    # Traverse the array and find the maximum subarray sum which sums up to the modified array sum\n    for i in range(n):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(max_sum, current_sum)\n\n    # If the maximum sum is greater than the modified array sum, return the maximum sum\n    if max_sum > modified_array_sum:\n        return max_sum\n\n    # If the maximum sum is less than the modified array sum, check if there exists a subarray whose sum is greater than the modified array sum\n    else:\n        return max_sub_array_sum_repeated(a, n, k + 1)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Calculate the sum of the first k elements of the array\n    first_k_sum = sum(a[:k])\n\n    # Initialize variables to store the maximum sum of the array and the sum of the last k elements\n    max_sum = first_k_sum\n    current_sum = first_k_sum\n\n    # Loop through the array\n    for i in range(n - k):\n        # Calculate the sum of the last k elements of the modified array\n        last_k_sum = sum(a[i + k:])\n\n        # Calculate the sum of the current element and the first k elements of the modified array\n        modified_sum = current_sum + a[i] + first_k_sum\n\n        # Update the maximum sum and the sum of the current element\n        max_sum = max(max_sum, modified_sum)\n        current_sum = modified_sum\n\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 2\n            count += 1\n            if count == n:\n                break\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_of_squares = 0\n\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i*i\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    # loop through first n even numbers\n    for i in range(2, n+1, 2):\n        # add square of current even number to sum\n        sum += i*i\n    # return sum of squares of even numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    count = 0\n    sum_of_squares = 0\n    \n    # loop through the first n even natural numbers\n    while count < n:\n        # add the square of the current even natural number to the sum of squares\n        sum_of_squares += count**2\n        \n        # increment the counter\n        count += 1\n    \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n        return\n    elif n == 0:\n        return 0\n    else:\n        sum_square = 0\n        for i in range(2, n+1, 2):\n            sum_square += i**2\n        return sum_square"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns a list containing the maximum length of each sublist in the input list.\n    \"\"\"\n    # create a list to store the maximum length of each sublist\n    max_lengths = []\n    # loop through each sublist in the input list\n    for sublist in list1:\n        # create an empty list to store the maximum length of the sublist\n        sublist_max_lengths = []\n        # loop through each element in the sublist\n        for element in sublist:\n            # add the length of each element to the sublist_max_lengths list\n            sublist_max_lengths.append(len(str(element)))\n        # find the maximum length of the sublist by taking the maximum value in the sublist_max_lengths list\n        sublist_max_length = max(sublist_max_lengths)\n        # add the maximum length of the sublist to the max_lengths list\n        max_lengths.append(sublist_max_length)\n    # find the maximum length of the input list by taking the maximum value in the max_lengths list\n    max_length = max(max_lengths)\n    # create a list to store the sublists that have the maximum length\n    max_sublists = []\n    # loop through each sublist in the input list\n    for sublist in list1:\n        # loop through each element in the sublist\n        for element in sublist:\n            # create an empty list to store the sublists with the maximum length\n            sublist_lengths = []\n            # loop through each sublist in the input list\n            for subsublist in list1:\n                # add the length of each element in the subsublist to the sublist_lengths list\n                sublist_lengths.append(len(str(element)))\n            # find the sublist with the maximum length by taking the maximum value in the sublist_lengths list\n            sublist_index = sublist_lengths.index(max(sublist_lengths))\n            # add the index of the sublist with the maximum length to the sublist_index list\n            sublist_index_list = [sublist_index]\n            # loop through each sublist in the input list\n            for i in range(len(sublist_index_list)):\n                # create a list to store the elements of the sublist with the maximum length\n                sublist_max_elements = []\n                # loop through the elements of the sublist with the maximum length\n                for j in range(len(sublist_index_list[i])):\n                    # add the jth element of the sublist with the maximum length to the sublist_max_elements list\n                    sublist_max_elements.append(sublist[sublist_index_list[i][j]])\n                # create a new sublist that contains the jth element of the sublist with the maximum length\n                sublist_max = [sublist[sublist_index_list[i][j]] for i in range(len(sublist_index_list[i]))]\n                # add the new sublist to the max_sublists list\n                max_sublists.append(sublist_max)\n    # return the maximum length and the maximum sublists\n    return max_length, max_sublists"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in list1:\n        max_lengths.append(len(i))\n    max_length = max(max_lengths)\n    return list1[max_lengths.index(max_length)]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for item in list1:\n        if len(item) > len(max_length_list):\n            max_length_list = item\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        max_length_list.append(max(len(x) for x in sublist))\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of maximum lengths.\n    '''\n    # initialize an empty list to store the maximum lengths\n    max_lengths = []\n    \n    # loop through each sublist in the list of lists\n    for sublist in list1:\n        # loop through each element in the sublist\n        for element in sublist:\n            # if the current element is longer than the maximum length, update the maximum length\n            if len(element) > max(max_lengths):\n                max_lengths = [len(element)]\n            elif len(element) == max(max_lengths):\n                max_lengths.append(len(element))\n    \n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    # If the number of colors is less than or equal to 2, there is only one way to paint the fence\n    if k <= 2: \n        return 1\n    \n    # Initialize a dictionary to store the count of ways for each number of colors\n    ways = {0: 1}\n    for i in range(1, k): \n        ways[i] = ways[i-1] * (n - i + 1) // i\n    \n    # Find the count of ways for n colors\n    return ways[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Create a set to store the color count for each post\n    color_count = [0] * k\n    \n    # Check each possible combination of colors for the first two posts\n    for i in range(k):\n        for j in range(i+1, k):\n            color_count[i] += 1\n            color_count[j] += 1\n            if sum(color_count) <= 2:\n                return 1\n            color_count[i] -= 1\n            color_count[j] -= 1\n            \n    # Check each possible combination of colors for the last two posts\n    for i in range(k-2, -1, -1):\n        for j in range(i-1, -1, -1):\n            color_count[i] += 1\n            color_count[j] += 1\n            if sum(color_count) <= 2:\n                return 1\n            color_count[i] -= 1\n            color_count[j] -= 1\n            \n    return 0"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    fence = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    fence[1][1] = 1\n\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            if fence[i-1][j] == 1 and fence[i][j-1] == 1:\n                fence[i][j] = fence[i-1][j] + fence[i][j-1]\n\n    return fence[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize a 2D list to store the number of ways of painting fence with k colors\n    ways = [[0]*(k+1) for i in range(n+1)]\n    \n    # Initialize the first row and column of the 2D list to 1\n    ways[0][0] = 1\n    ways[0][1] = 0\n    \n    # Fill in the remaining values of the 2D list using dynamic programming approach\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the color of the post is not same as the previous post, then only one way can be painted\n            if j % 2 == 0:\n                ways[i][j] = ways[i-1][j]\n            # If the color of the post is same as the previous post, then there are two ways: paint it the same color as the previous post and paint it the color of the current post\n            else:\n                ways[i][j] = ways[i-1][j-1] + ways[i-1][j]\n    \n    # Return the value at the last row and last column of the 2D list\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the count of ways for each color combination\n    color_count = [[0 for _ in range(k)] for _ in range(n+1)]\n    \n    # Count the number of ways for each color combination\n    for i in range(n+1):\n        for j in range(k):\n            if i == 0 or j == 0 or i == n:\n                color_count[i][j] = 1\n            elif j == 1:\n                color_count[i][j] = color_count[i-1][j]\n            else:\n                color_count[i][j] = color_count[i-1][j-1] + color_count[i-1][j]\n    \n    # Calculate the number of ways using the color_count array\n    ways = 0\n    for i in range(n+1):\n        for j in range(k):\n            ways += color_count[i][j]\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a list to store the number of ways of painting the fence\n    count_list = [0]*(k+1)\n\n    # Set the first row as all the ways of painting the fence\n    for i in range(k+1):\n        count_list[i] = 1\n\n    # Fill the rest of the rows\n    for i in range(2, n+1):\n        for j in range(k+1):\n            count_list[j] += count_list[j-1]\n\n    # Return the last element of the list which is the number of ways of painting the fence\n    return count_list[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to keep track of the colors of adjacent posts\n    adj_colors = {}\n    count = 0\n    \n    # Iterate through all possible configurations of the fence\n    for i in range(n):\n        for j in range(n):\n            # Check if the colors of adjacent posts are different\n            if (j > 0 and adj_colors[(i, j-1)]!= adj_colors[(i, j)]) or (i > 0 and adj_colors[(i-1, j)]!= adj_colors[(i, j)]):\n                count += 1\n            \n            # Update the dictionary with the colors of adjacent posts\n            adj_colors[(i, j)] = i%k\n    \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize two arrays for counting the number of ways to paint the fence with n posts and k colors\n    ways1 = [0] * k\n    ways2 = [0] * k\n    for i in range(1, k+1):\n        ways1[i-1] = 1\n    for i in range(1, n+1):\n        for j in range(k-1, -1, -1):\n            if ways1[j] == 0:\n                continue\n            ways2[j] += ways1[j]\n    return ways2[0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # create a list of n-1 fences with 1 color each\n    fences = [1] * (n-1)\n    \n    # loop through the remaining n-1 fences and find out how many ways of painting the fence with k colors will have a maximum of 2 adjacent posts with the same color\n    for i in range(1,n-1):\n        fences[i] = 0\n        for j in range(i+1,n):\n            if (j-i-1) % (k-1) == 0:\n                fences[i] += fences[j-i-1]\n    \n    # the last fence will have only 1 color and cannot have more than 2 adjacent posts with the same color\n    fences[-1] = 1\n    \n    return sum(fences)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = n//m\n    if m > 0 and n % m!= 0: # if n is a multiple of m, we add 1 to the quotient to get the actual quotient\n        quotient += 1\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers n and m as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    This function takes two integer arguments n and m and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n/m\n    return round(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # check if m is 0, return n if m is 0\n    if m == 0:\n        return n\n    \n    # check if n is 0, return 0 if n is 0\n    if n == 0:\n        return 0\n    \n    # calculate the quotient\n    q = n//m\n    \n    # calculate the remainder\n    r = n%m\n    \n    # check if the remainder is 0, if not, return the quotient\n    if r == 0:\n        return q\n    else:\n        return q+1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes two arguments: the length of the base and height of the triangle.\n    It calculates the third side of the triangle using the formula:\n        side = sqrt(w^2 + h^2 - (base/2)^2)\n    '''\n    \n    base = math.sqrt(w**2 + h**2)\n    side = math.sqrt((base/2)**2 + h**2)\n    \n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w**2 + h**2)**0.5 # calculate the hypotenuse\n    s = math.sin(math.pi/3) # calculate the sin of 60 degrees\n    return c * s # return the third side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w\n    b = math.sqrt(w**2 + h**2)\n    c = h\n    return a, b, c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter\n    s = (w + h) / 2\n    # calculate the other side\n    other_side = math.sqrt(s**2 - w**2)\n    # return the other side\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        raise ValueError('The length of the two sides must be different.')\n    else:\n        return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the semi-perimeter\n    s = (w + h) / 2\n\n    # calculate the area of the triangle\n    a = math.sqrt(s * (s - w) * (s - h))\n\n    # find the cotangent of the angle bisectors\n    cot = (w / h) / math.tan(math.degrees(math.acos(w / h)))\n\n    # find the third side of the triangle\n    third_side = a * cot\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n\n    # Calculate the square of the semi-perimeter\n    s_sq = s ** 2\n\n    # Calculate the square of the hypotenuse\n    h_sq = math.pow(h, 2)\n\n    # Calculate the third side\n    third_side = math.sqrt(s_sq - h_sq)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w <= 0 or h <= 0:\n        print(\"Invalid dimensions\")\n        return\n    \n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s*(w/2))\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # calculate the length of the third side of the triangle\n    side = math.sqrt(s * (s - w) * (s - h))\n    # print the result\n    print(side)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf') # initialize max_val with negative infinity\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # find the maximum value in the list\n    max_val = None\n    for value in listval:\n        if max_val is None:\n            max_val = value\n        elif value > max_val:\n            max_val = value\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize the maximum value to be the first value in the list\n    max_val = listval[0]\n    # loop through the rest of the list and compare each value to the maximum value\n    for val in listval[1:]:\n        if val > max_val:\n            max_val = val\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize maximum value to the first element of the list\n    max_val = listval[0]\n    # loop through the remaining elements in the list\n    for val in listval[1:]:\n        # if the current value is greater than the current maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n    # return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize max value to the first element of the list\n    max_val = listval[0]\n\n    # Iterate through the list and compare each element with the current max value\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    divisor = 1\n    while divisor <= number // 2:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n\n    return sum_div\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    def merge(left, mid, right):\n        i = j = 0\n        inv_count = 0\n        inv_arr = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                inv_arr.append(left[i])\n                i += 1\n            else:\n                inv_arr.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        while i < len(left):\n            inv_arr.append(left[i])\n            i += 1\n        while j < len(right):\n            inv_arr.append(right[j])\n            j += 1\n        return inv_arr, inv_count\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, inv_left = merge_sort(arr[:mid])\n        right, inv_right = merge_sort(arr[mid:])\n        inv_arr, inv_count = merge(left, mid, right)\n        return inv_arr, inv_left + inv_right + inv_count\n\n    inv_arr, inv_count = merge_sort(arr)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n\n    # Sort the array \n    def merge_sort(arr): \n        if len(arr) <= 1: \n            return arr \n        mid = len(arr) // 2 \n        left = merge_sort(arr[:mid]) \n        right = merge_sort(arr[mid:]) \n        return merge(left, right) \n\n    def merge(left, right): \n        result = [] \n        i = j = 0 \n        while i < len(left) and j < len(right): \n            if left[i] < right[j]: \n                result.append(left[i]) \n                i += 1 \n            else: \n                result.append(right[j]) \n                j += 1 \n                inv_count += len(left) - i \n        result += left[i:] \n        result += right[j:] \n        return result \n\n    arr = merge_sort(arr) \n\n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Divide the array into two halves\n    mid = n // 2\n    inv_left = get_Inv_Count(arr[:mid])\n    inv_right = get_Inv_Count(arr[mid:])\n    \n    # Count inversions in each half\n    inv_left += count_inv(arr[:mid])\n    inv_right += count_inv(arr[mid:])\n    \n    # Merge the two halves and count inversions in the entire array\n    inv_right += merge_and_count_inv(arr, mid, n)\n    \n    return inv_left + inv_right\n\n\ndef merge_and_count_inv(arr, left, right):\n    \"\"\"\n    Merge two sorted halves of the array and count inversions in the entire array.\n    \"\"\"\n    inv_count = 0\n    i = left\n    j = right - 1\n    while i <= j:\n        if arr[i] <= arr[j]:\n            i += 1\n        else:\n            inv_count += j - i + 1\n            j -= 1\n    return inv_count\n\n\ndef count_inv(arr):\n    \"\"\"\n    Count inversions in a sorted array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    i = 1\n    while i < n:\n        if arr[i] < arr[i - 1]:\n            inv_count += n - i\n            i += 1\n        else:\n            i += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Function to count inversions in the array\n    def count_inv(arr):\n        inv_count = 0\n        n = len(arr)\n\n        # Sort the array\n        arr.sort()\n\n        # Count inversions\n        for i in range(1, n):\n            for j in range(i):\n                if arr[i] < arr[j]:\n                    inv_count += n - j\n\n        return inv_count\n\n    # Call the count_inv function and return the result\n    return count_inv(arr)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += n - i\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Count the number of inversions\n    count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Loop through the sorted array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # If the two elements are not in the correct order, increment the count\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += n - i - 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0 \n    for i in range(1, n): \n        for j in range(0, i): \n            if arr[i] < arr[j]: \n                count += i - j \n                arr[i], arr[j] = arr[j], arr[i] \n\n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inv_count += (i-j)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # if i is even, then every element after i can be greater than or equal to arr[i]\n        if i % 2 == 0:\n            for j in range(i+1, n):\n                if arr[j] >= arr[i]:\n                    count += n - j\n        # if i is odd, then every element before i can be smaller than arr[i]\n        else:\n            for j in range(i, n):\n                if arr[j] < arr[i]:\n                    count += j - i + 1\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Parameters:\n    lst (list): A nested list structure.\n\n    Returns:\n    list: The flattened list.\n    \"\"\"\n\n    def helper(lst):\n        flattened = []\n        for item in lst:\n            if isinstance(item, list):\n                flattened.extend(helper(item))\n            else:\n                flattened.append(item)\n        return flattened\n\n    return helper(lst)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened version of the list.\n    \"\"\"\n    # Base case: if the list is empty or contains only one element, return it as-is.\n    if len(lst) <= 1:\n        return lst\n\n    # Recursive case: flatten the nested list by appending all its elements to a new list.\n    new_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            new_lst.extend(flatten_list(item))\n        else:\n            new_lst.append(item)\n\n    return new_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    for item in stdata:\n        if item[1] not in agg_dict:\n            agg_dict[item[1]] = 1\n        else:\n            agg_dict[item[1]] += 1\n    max_agg = max(agg_dict.items(), key=lambda x:x[1])[0]\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the maximum aggregate for each transaction\n    max_dict = defaultdict(int)\n    # Traverse through the list of tuples\n    for transaction in stdata:\n        # Update the maximum aggregate for the transaction in the dictionary\n        max_dict[transaction[0]] = max(max_dict[transaction[0]], transaction[1])\n    # Traverse through the dictionary and find the maximum aggregate\n    max_aggregate = max(max_dict.values())\n    # Return the maximum aggregate\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the aggregate and its frequency\n    agg_freq = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for t in stdata:\n        # Get the aggregate and frequency\n        agg = t[0]\n        freq = t[1]\n\n        # Update the aggregate frequency dictionary\n        agg_freq[agg] += freq\n\n    # Find the maximum aggregate\n    max_agg = max(agg_freq, key=agg_freq.get)\n\n    # Calculate the maximum aggregate from the dictionary\n    max_agg_freq = agg_freq[max_agg]\n\n    return max_agg_freq"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate over the list of tuples and update the frequency of each item in the defaultdict\n    for item in stdata:\n        freq[item[0]] += 1\n\n    # Initialize the maximum aggregate to zero\n    max_agg = 0\n\n    # Iterate over the items in the defaultdict and find the maximum aggregate\n    for item in freq:\n        max_agg = max(max_agg, item * freq[item])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n\n    # initialize the dictionary to store the sum of each product and the count of each product\n    product_count = defaultdict(int)\n\n    # loop through each tuple in the list of tuples\n    for item in stdata:\n        # add the product and the count to the dictionary\n        product_count[item[0]] += item[1]\n\n    # initialize variables to store the maximum aggregate and the maximum count of each product\n    max_agg = 0\n    max_count = 0\n\n    # loop through the dictionary to find the maximum aggregate and the maximum count of each product\n    for product, count in product_count.items():\n        if count > max_count:\n            max_agg = product\n            max_count = count\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each product\n    counts = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Get the product name from the tuple\n        product = item[0]\n        # Get the price from the tuple\n        price = item[1]\n        # Increment the count of the product by 1\n        counts[product] += 1\n\n    # Create a defaultdict to store the maximum aggregate for each product\n    max_aggs = defaultdict(float)\n\n    # Iterate through the keys of the defaultdict to get the products\n    for product in counts:\n        # Get the count of the product\n        count = counts[product]\n        # Get the price of the product\n        price = item[1]\n        # Calculate the maximum aggregate for the product\n        max_agg = count * price\n        # Set the maximum aggregate for the product in the max_aggs dictionary\n        max_aggs[product] = max_agg\n\n    # Find the maximum aggregate for all products\n    max_agg = max(max_aggs.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for i in range(1, len(item)+1):\n            key = item[:i]\n            max_dict[key] = max(max_dict[key], item[i])\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_key = ''\n    seen = defaultdict(int)\n\n    for name, age, salary in stdata:\n        if seen[name] == 0:\n            max_sum = salary\n            max_key = name\n        else:\n            if salary > max_sum:\n                max_sum = salary\n                max_key = name\n        seen[name] += 1\n\n    return max_key, max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_aggregate = 0\n    \n    for item in stdata:\n        max_dict[item[0]] += item[1]\n        if max_dict[item[0]] > max_aggregate:\n            max_aggregate = max_dict[item[0]]\n    \n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    max_agg = 0\n\n    for tup in stdata:\n        agg = tup[1]\n        agg_dict[agg] += 1\n\n    for key, val in agg_dict.items():\n        if val > max_agg:\n            max_agg = val\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Create a list to store the count of each sequence\n    count_list = []\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the binary sequence to a number\n        binary_num = bin(i)[2:]\n        # Initialize the sum of first n bits to 0\n        first_sum = 0\n        # Initialize the sum of last n bits to 0\n        last_sum = 0\n        # Loop through the first n bits of the sequence\n        for j in range(n):\n            # If the current bit is 1, add it to the first_sum\n            if binary_num[j] == '1':\n                first_sum += 2**(n-j-1)\n        # Loop through the last n bits of the sequence\n        for j in range(n):\n            # If the current bit is 1, add it to the last_sum\n            if binary_num[j] == '1':\n                last_sum += 2**(n-j-1)\n        # If the sum of first n bits is equal to the sum of last n bits, add 1 to the count_list\n        if first_sum == last_sum:\n            count_list.append(1)\n    # Return the count_list\n    return count_list"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if int(binary[:n]) == int(binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize a count variable\n    count = 0\n\n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n, 2**(2*n)+1):\n        # Extract the first n bits from the sequence\n        first_n = i & ((1 << n) - 1)\n\n        # Extract the last n bits from the sequence\n        last_n = i >> n\n\n        # Check if the sum of the first n bits is the same as the sum of the last n bits\n        if first_n == last_n:\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits\n        first_n_bits = bin(i)[2:][-n:]\n        # Extract the last n bits\n        last_n_bits = bin(i)[2:][-n:]\n        # Add them together and check if the sum is same\n        if int(first_n_bits, 2) + int(last_n_bits, 2) == i:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        for j in range(1, 2**n+1):\n            if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(j)[2:].zfill(n)):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n, 2**(n+1)):\n        first_sum = sum(int(digit) for digit in bin(i)[2:].zfill(n))\n        last_sum = sum(int(digit) for digit in bin(i)[-2-n:].zfill(n))\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Initialize a dictionary to store the count of binary sequences of length 2n\n    count_dict = {}\n    \n    # Define a function to generate all binary sequences of length n\n    def binary_seq(n):\n        binary_seq = [0] * n\n        for i in range(n):\n            binary_seq[i] = 1\n            yield binary_seq\n            \n    # Define a function to calculate the sum of first n bits\n    def sum_bits(binary_seq):\n        return sum(binary_seq[:n])\n    \n    # Iterate over all binary sequences of length 2n\n    for binary_seq in binary_seq(2*n):\n        # Calculate the sum of first n bits and the sum of last n bits\n        sum_n_bits = sum_bits(binary_seq)\n        \n        # Check if the sum of first n bits is same as the sum of last n bits\n        if sum_bits(binary_seq[1:]) == sum_n_bits:\n            # If they are same, increment the count of the sequence in the dictionary\n            if binary_seq in count_dict:\n                count_dict[binary_seq] += 1\n            else:\n                count_dict[binary_seq] = 1\n    \n    # Return the count of all sequences\n    return count_dict"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        for j in range(i, 2**n): \n            sum_1 = sum(int(digit) for digit in bin(i)[2:].zfill(n))\n            sum_2 = sum(int(digit) for digit in bin(j)[2:].zfill(n))\n            if sum_1 == sum_2: \n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    total_sum = 0\n    num = 0\n    \n    for i in range(2**n):\n        num = i\n        total_sum = 0\n        \n        for j in range(n):\n            total_sum += (num % 2)\n            num = num // 2\n            \n        if total_sum == (2**n - 1) // 2:\n            count += 1\n            \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(2*n)\n        sum1 = sum(int(binary[i:i+n]) for i in range(n))\n        sum2 = sum(int(binary[i:i+n]) for i in range(n, 2*n))\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case: if the dictionary is empty, return 0\n    if not d:\n        return 0\n    \n    # Recursive case: depth of the dictionary is the maximum depth of its keys\n    max_depth = max([dict_depth(v) for v in d.values()])\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n        elif isinstance(value, tuple):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n                    depth += dict_depth(item)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for _ in d:\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the maximum depth\n    max_depth = 0\n    \n    # Recursively check each key in the dictionary\n    for key in d:\n        # If the value is a dictionary, recursively call the function\n        if isinstance(d[key], dict):\n            new_depth = dict_depth(d[key]) + 1\n            \n            # If the new depth is greater than the current max_depth, update max_depth\n            if new_depth > max_depth:\n                max_depth = new_depth\n        # If the value is not a dictionary, simply increment the max_depth\n        else:\n            max_depth += 1\n    \n    # Return the final max_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Input:\n    arr: A list of integers\n    ranges: A list of tuples representing the minimum and maximum values that can be present in the array\n    rotations: An integer representing the number of rotations required to reach the target element\n    index: An integer representing the index of the element whose value needs to be found\n\n    Output:\n    An integer representing the element at the given index after number of rotations\n\n    Example:\n    >>> find_Element([1, 2, 3, 4, 5, 6, 7, 8, 9], [(1, 5), (6, 10)], 3, 3)\n    4\n    '''\n    # Initialize variables\n    element = None\n    count = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the element is within the range and if the count is within the rotations\n        if (arr[i] >= ranges[0][0] and arr[i] <= ranges[0][1]) and (count + i + 1) % rotations == 0:\n            # If the count is within the rotations, update the element and count\n            element = arr[i]\n            count = count + i + 1\n        # If the element is found, break out of the loop\n        if count + i + 1 == index:\n            break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    element = arr[index]\n\n    # Applying rotations to the array\n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(1, len(arr)):\n            arr[j-1] = arr[j]\n        arr[len(arr)-1] = temp\n\n    # Finding the element in the rotated array\n    rotated_arr = arr[index:] + arr[:index]\n    for i in range(len(rotated_arr)):\n        if rotated_arr[i] == element:\n            return rotated_arr[i]\n\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n\n    for i in range(rotations):\n        if index in ranges:\n            ranges.remove(index)\n            index = arr.index(index)\n            continue\n        else:\n            index = arr.index(index)\n\n    return index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): List of elements to rotate\n    ranges (list): List of ranges of elements to rotate\n    rotations (int): Number of rotations to perform\n    index (int): Index of element to find\n\n    Returns:\n    element (int): Element at the given index after rotating the list\n    '''\n\n    # Calculate the new index after rotations\n    new_index = (index - 1 + rotations) % len(arr)\n\n    # Rotate the list\n    for i in range(rotations):\n        new_index = (new_index + len(arr) - 1) % len(arr)\n        arr[i], arr[new_index] = arr[new_index], arr[i]\n\n    # Find the element at the new index\n    element = arr[new_index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Iterate through each range and rotation\n    for i in range(len(ranges)):\n        for j in range(rotations[i]):\n            # Calculate the new index after the rotation\n            new_index = (index - ranges[i][0]) % (ranges[i][1] - ranges[i][0] + 1) + ranges[i][0]\n            # Check if the new index is valid\n            if new_index <= ranges[i][1] and new_index >= ranges[i][0]:\n                return arr[new_index]\n            else:\n                return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    if rotations > len(arr) - 1:\n        return \"Index out of range\"\n\n    if index >= len(arr):\n        return \"Index out of range\"\n\n    # Convert rotations to modulo rotations\n    rotations %= len(arr)\n\n    # Calculate the current element after rotations\n    current_element = arr[(index - rotations) % len(arr)]\n\n    # Calculate the required element after rotations\n    required_element = arr[index]\n\n    # Check if the required element is in the range of the current element\n    if required_element >= ranges[0] and required_element <= ranges[1]:\n        # If the required element is in the range, check if it is equal to the current element\n        if current_element == required_element:\n            return current_element\n        else:\n            # If not, return the required element\n            return required_element\n    else:\n        # If the required element is out of range, return the current element\n        return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Initialize variables for result and current index\n    result = -1\n    current_index = index\n\n    # Iterate through all rotations\n    for _ in range(rotations):\n        # Find the current element and its index\n        current_element = arr[current_index]\n        current_index = (current_index + ranges[current_index]) % len(arr)\n        # Update the result if current element is greater than or equal to the target element\n        if current_element >= arr[current_index]:\n            result = current_element\n\n    # Return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    # Check if the number of rotations is valid\n    if rotations <= 0 :\n        return arr\n    \n    # Calculate the final index\n    final_index = index + rotations\n    \n    # Check if the final index is out of bounds\n    if final_index >= len(arr) :\n        return arr\n    \n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n        arr (list): List of elements to be rotated.\n        ranges (list): List of range pairs that represent the rotation.\n        rotations (int): Number of rotations to perform.\n        index (int): Index at which we want to find the element after rotations.\n\n    Returns:\n        int: The element at the given index after the number of rotations.\n    '''\n\n    # Initialize the element at the given index as None\n    element = None\n\n    # Loop through the ranges and perform the rotations\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index < ranges[i][1]:\n            element = arr[(index - ranges[i][0]) % len(arr)]\n            break\n        else:\n            arr = arr[ranges[i][1] - ranges[i][0]:] + arr[:ranges[i][0]]\n\n    # Return the element at the given index after the rotations\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Initialize variables\n    i = 0\n    j = index\n\n    while j < len(arr):\n        # Rotate the array\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j += 1\n\n    # Find the element at the given index\n    while i < len(arr):\n        if arr[i] == index:\n            return arr[i]\n        i += 1\n\n    return -1"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-z]*$'\n    result = re.findall(pattern, words)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define regex pattern to match words starting with 'p'\n    pattern = r'^p[a-zA-Z]*'\n    # create a list of words that match the pattern\n    matches = [word for word in words if re.match(pattern, word)]\n    # check if there are two words starting with 'p'\n    if len(matches)!= 2:\n        return 'No two words starting with \"p\" found.'\n    # return the two words\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i].startswith('p'):\n            return words[i], words[i+1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # create a regex pattern to match words starting with 'p'\n    pattern = r'p\\w+'\n\n    # create a list to store matching words\n    matching_words = []\n\n    # loop through the list of words and check if each word matches the pattern\n    for word in words:\n        if re.match(pattern, word):\n            matching_words.append(word)\n\n    # check if there are at least two matching words\n    if len(matching_words) >= 2:\n        # return the two matching words\n        return matching_words[0], matching_words[1]\n    else:\n        # return an empty string if there are not at least two matching words\n        return ''"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p.*')\n    matches = re.findall(pattern, words)\n    if len(matches) == 0:\n        return None\n    else:\n        return matches[0] + matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*') # regular expression pattern to match words starting with 'p'\n    result = []\n\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                break\n\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match(\"^p\", word):\n            print(word)\n            break\n    for word in words:\n        if re.match(\"^p\", word):\n            print(word)\n            break"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    for word in words:\n        if re.match(pattern, word):\n            return [word, words[words.index(word)+1]]\n    return ['No words starting with p were found', None]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p[a-z]*')\n    matches = pattern.findall(words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-z]*$')\n    matches = [word for word in words if pattern.match(word)]\n    if len(matches) == 2:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize max_sum and max_end\n    max_sum = float('-inf')\n    max_end = -1\n    \n    # Initialize sum and end as 0\n    sum_till_now = 0\n    end_till_now = -1\n    \n    # Traverse through the array from index+1 to n-1\n    for i in range(index+1, n):\n        # Update sum_till_now and end_till_now\n        sum_till_now += a[i]\n        end_till_now = i\n        \n        # Check if the sum_till_now exceeds max_sum\n        if sum_till_now > max_sum:\n            max_sum = sum_till_now\n            max_end = end_till_now\n        \n        # Check if the sum_till_now exceeds k*sum_till_now\n        if sum_till_now > k*sum_till_now:\n            break\n            \n    # Return the maximum sum of increasing subsequence from index+1 to end_till_now\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        raise ValueError(\"k should be less than or equal to index\")\n    if index == 0:\n        return max(a[0], max_sum_increasing_subseq(a, n - 1, 0, k) + a[index])\n    else:\n        if k <= index:\n            return max(a[k], max_sum_increasing_subseq(a, n - 1, index - 1, k - 1) + a[index])\n        else:\n            return max_sum_increasing_subseq(a, n - 1, index - 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index-1, -1, -1):\n        if a[i] < a[index] and a[i] >= a[k-1] and i+1 < index:\n            dp[i] = max(dp[i], dp[i+1] + a[i])\n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n\n    if index == 0:\n        if k < index:\n            return max(0, a[k] - a[index])\n        else:\n            return max(0, a[k] - a[n-1])\n\n    max_left = max_sum_increasing_subseq(a, n, index-1, k)\n\n    if a[index] < a[k] and a[index] <= a[index-1]:\n        max_right = max_sum_increasing_subseq(a, n, index-1, k)\n    else:\n        max_right = 0\n\n    return max(max_left, max_right)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0]*n\n    dp[index] = a[index]\n    max_sum = a[index]\n    \n    for i in range(index, n):\n        if i+k < n and a[i+k] > a[i]:\n            dp[i] = dp[i+k] + a[i+k]\n            max_sum = max(max_sum, dp[i])\n        elif a[i] > a[i-1]:\n            dp[i] = a[i]\n            max_sum = max(max_sum, a[i])\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize max sum, current subsequence sum, and index of k\n    max_sum = float('-inf')\n    current_sum = 0\n    k_index = -1\n\n    # Iterate through the array\n    for i in range(n):\n\n        # If current element is greater than k, update k\n        if a[i] > k:\n            k_index = i\n\n        # If current index is less than or equal to k, add current element to sum\n        if i <= k_index:\n            current_sum += a[i]\n\n        # Update max sum if current subsequence sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * n\n    max_sum = float('-inf')\n    \n    # initialize the first subsequence with a[i]\n    dp[index] = a[index]\n    \n    for i in range(index+1, n):\n        # if the next element is greater than or equal to k, add its value to the current sum\n        if a[i] >= k:\n            dp[i] = a[i] + dp[i-1]\n        else:\n            dp[i] = dp[i-1]\n        \n        # update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, dp[i])\n        \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # initialize variables\n    max_sum = 0\n    max_sum_index = 0\n\n    # loop through the array from start to index and store the maximum sum\n    for i in range(index):\n        if i + k >= n:\n            break\n        if a[i] <= a[i + k]:\n            continue\n        else:\n            max_sum = max(max_sum, a[i] + a[i + k])\n            max_sum_index = i\n\n    # add the last kth element if it's less than the current max sum\n    if a[index] + a[index + k] > max_sum:\n        max_sum = a[index] + a[index + k]\n        max_sum_index = index\n\n    return max_sum, max_sum_index\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize an array to store the sum of increasing subsequences\n    # where each element stores the maximum sum of increasing subsequence\n    # ending at the ith index\n    dp = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence ending at the\n    # ith index and including the kth element\n    dp[index] = a[index] + k\n\n    # Traverse through all the elements from the ith index to the end of\n    # the array and calculate the maximum sum of increasing subsequence\n    # ending at the ith index and including the kth element\n    for i in range(index + 1, n):\n        # Check if the sum of increasing subsequence ending at the i-1th\n        # index and including the k-1th element is greater than or equal to\n        # the sum of increasing subsequence ending at the i-1th index and\n        # including the kth element\n        if dp[i - 1] + a[i] >= k:\n            dp[i] = dp[i - 1] + a[i]\n        else:\n            dp[i] = k\n\n    # Traverse through all the elements from the ith index to the end of\n    # the array and calculate the maximum sum of increasing subsequence\n    # ending at the ith index and including the kth element\n    max_sum = dp[index]\n\n    # Traverse through all the elements from the ith index to the end of\n    # the array and find the maximum sum of increasing subsequence ending\n    # at the ith index and including the kth element\n    for i in range(index + 1, n):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and prefix sum variables\n    max_sum = float('-inf')\n    prefix_sum = 0\n    \n    # Loop through the array from index to n-1\n    for i in range(index, n):\n        # Calculate the maximum sum of the subsequence including the current element\n        subseq_sum = a[i] + prefix_sum\n        \n        # If the subsequence sum is greater than max_sum or if the current element is greater than k\n        if subseq_sum > max_sum or a[i] > k:\n            # Update max_sum and prefix_sum\n            max_sum = subseq_sum\n            prefix_sum = a[i]\n        \n        # If the current element is greater than the kth element\n        elif a[i] > a[k]:\n            # Update max_sum and prefix_sum\n            max_sum = subseq_sum\n            prefix_sum = a[i]\n            \n    # Return the maximum sum of the increasing subsequence from prefix to index and including k\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        for j in range(n):\n            colon.append(tuplex[i][j])\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(deepcopy(tuplex[j]))\n        colon.append(row)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Iterate over the rows of the tuple\n    for row in range(m):\n        # Iterate over the columns of the tuple\n        for col in range(n):\n            # Set the value to None if the tuple is empty\n            if tuplex_copy[row][col] is None:\n                tuplex_copy[row][col] = ''\n            # If the tuple is not empty, append a colon to the value\n            else:\n                tuplex_copy[row][col] += ':'\n    # Return the modified tuple\n    return tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    for i in range(m):\n        colon[i] = []\n        for j in range(n):\n            colon[i].append(tuplex[i][j])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i*n:(i+1)*n]))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a copy of the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n    # get the index of the first tuple in the new tuple\n    first_index = m - 1\n    # get the index of the last tuple in the new tuple\n    last_index = n - 1\n    # loop through the new tuple\n    for i in range(first_index, last_index + 1):\n        # set the element at the index to None\n        new_tuplex[i] = None\n    # return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # Check if the number of elements in the tuple is less than m\n    if len(tuplex) < m:\n        return None\n    \n    # Create a new tuple with length n\n    colon = deepcopy(tuplex[:n])\n    \n    # Fill the rest of the tuple with zeros\n    for i in range(m-n):\n        colon.append(0)\n        \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # First, check if the length of the tuple is greater than m.\n    if len(tuplex) > m:\n        raise ValueError('The length of the tuple should be less than or equal to m.')\n    # If the length of the tuple is less than or equal to m, create a new tuple with n elements.\n    else:\n        new_tuplex = deepcopy(tuplex)\n        for i in range(len(new_tuplex), m):\n            new_tuplex.append(0)\n        # Then, return a colon of the new tuple.\n        return new_tuplex[:n]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = deepcopy(tuplex[0])\n    col = []\n    for i in range(m):\n        col.append(row[i*n:(i+1)*n])\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        for j in range(n):\n            colon.append(deepcopy(tuplex[i][j]))\n    return tuple(colon)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through the sorted input lists and find the N largest products\n    i = 0\n    j = 0\n    while len(result) < N:\n        # Calculate the product of the current two factors\n        product = nums1[i] * nums2[j]\n\n        # Add the product to the result list if it's not already there\n        if product not in result:\n            result.append(product)\n\n        # Move to the next pair of factors in the respective lists\n        if nums1[i] == nums1[i]:\n            i += 1\n        if nums2[j] == nums2[j]:\n            j += 1\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError(\"N must be less than or equal to the length of the two input lists.\")\n\n    products = []\n    for i in range(N):\n        product = 1\n        for j in range(len(nums1)):\n            product *= nums1[j]\n        products.append(product)\n\n        product = 1\n        for j in range(len(nums2)):\n            product *= nums2[j]\n        products.append(product)\n\n    return max(products)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list with zeros\n    result = [0] * N\n\n    # Iterate over the desired number of largest products\n    for i in range(N):\n        # Calculate the product of the largest numbers in each list\n        product = nums1[-1] * nums2[-1]\n\n        # Update the result list with the new product\n        result[i] = product\n\n        # Remove the largest numbers from the lists\n        nums1.pop()\n        nums2.pop()\n\n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Find the largest products\n    largest_products = []\n    for i in range(N):\n        # Calculate the product of the i-th largest element of nums1 and nums2\n        product = nums1[i] * nums2[i]\n        \n        # Add the product to the list of largest products\n        largest_products.append(product)\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    max_product1 = nums1[N-1] * nums2[N-1]\n    max_product2 = nums1[N-2] * nums2[N-2]\n    for i in range(N-2, -1, -1):\n        if max_product1 / nums1[i] > max_product2 / nums2[i]:\n            max_product2 = max(max_product1 / nums1[i], max_product2)\n        else:\n            max_product1 = max(max_product1, max_product2 / nums2[i])\n    return max_product1"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        return 'Lists must have the same length'\n    \n    max_product1 = max_product2 = float('-inf')\n    for i in range(len(nums1)):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[i+1]\n        if product1 > max_product1:\n            max_product1 = product1\n        if product2 > max_product2:\n            max_product2 = product2\n    \n    return max(max_product1, max_product2)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Calculate the sum of products\n    product_sum = sum([nums1[i] * nums2[i] for i in range(N)])\n    \n    # Initialize the largest products to the first two factors\n    largest_products = [max(nums1[0], nums2[0]), max(nums1[1], nums2[1])]\n    \n    # Iterate over the remaining factors to find the largest products\n    for i in range(2, N):\n        # Calculate the current factor's product\n        factor_product = nums1[i] * nums2[i]\n        \n        # Update the largest products if the current factor's product is greater\n        if factor_product > largest_products[0]:\n            largest_products[0] = factor_product\n        elif factor_product > largest_products[1]:\n            largest_products[1] = factor_product\n    \n    # Calculate the largest product sum\n    largest_product_sum = product_sum - largest_products[0] - largest_products[1]\n    \n    # Return the largest products and the largest product sum\n    return largest_products, largest_product_sum"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Find the largest N products\n    largest_products = []\n    for i in range(N):\n        largest_products.append(nums1[i] * nums2[i])\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    result = []\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[N-1-i] * nums2[N-1-i]\n        result.append(max(product1, product2))\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists must be of equal length.\"\n\n    products = []\n    for i in range(N):\n        products.append(max(nums1[i] * nums2[i], nums1[i] * nums2[i] * nums1[i], nums2[i] * nums1[i] * nums2[i]))\n\n    return products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Returns the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Returns the maximum of two numbers.\n    \"\"\"\n    return max(a, b)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as arguments and returns the maximum of the two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n\n    Parameters:\n        n (int): An integer whose left most unset bit needs to be set.\n\n    Returns:\n        int: The integer with the left most unset bit set to 1.\n    \"\"\"\n    # Find the position of the leftmost set bit\n    bit = 1\n    while (n & bit) == 0:\n        bit <<= 1\n\n    # Set the leftmost set bit to 1\n    n |= bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while (n & 1) == 0:\n        n = n >> 1\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the leftmost unset bit to 1\n    unset_bit = 1\n    # check each bit from left to right\n    while unset_bit <= n:\n        # if the current bit is set, set the next unset bit to the next unset bit to the right\n        if n & unset_bit:\n            unset_bit <<= 1\n        # if the current bit is unset, set the next unset bit to the next unset bit to the left\n        else:\n            unset_bit <<= 1\n            unset_bit += 1\n    return unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Set the left most unset bit in an integer `n`.\n    Returns `n` with its leftmost unset bit set to 1.\n    '''\n    # Initialize mask with all bits set to 1\n    mask = 2**31 - 1\n    # Shift mask to the left by the position of the leftmost unset bit\n    mask <<= 32 - n.bit_length()\n    # XOR the original number with the shifted mask\n    return n ^ mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the variable to store the unset bits\n    unset_bits = 0\n    # Convert the integer to binary\n    binary = bin(n)[2:]\n    # Loop through each bit in the binary string\n    for bit in binary:\n        if bit == '0':\n            unset_bits += 1\n            # If the unset bits reaches 1, then we have found the left most unset bit\n            if unset_bits == 1:\n                break\n    # Convert the unset bits back to integer and set it to the LSB position\n    unset_bits = int(unset_bits, 2)\n    return n ^ (1 << unset_bits)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize variable to keep track of leftmost unset bit\n    leftmost_unset_bit = 0\n    \n    # Loop through each bit in the integer\n    for i in range(32):\n        # Check if the bit is set\n        if ((n & (1 << i)) == 0):\n            # If bit is unset, set the leftmost_unset_bit variable to i\n            leftmost_unset_bit = i\n            # Stop looping as we have found the leftmost unset bit\n            break\n    \n    # Set the leftmost unset bit to 1 if it is not already set to 1\n    if leftmost_unset_bit == 0:\n        leftmost_unset_bit = 1\n    \n    # Set the leftmost unset bit in the integer\n    n |= (1 << leftmost_unset_bit)\n    \n    # Return the integer with the leftmost unset bit set to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            break\n        n >>= 1\n        count += 1\n\n    return (1 << count)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: \n        n >>= 1 \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the number of set bits to the number of bits in n\n    num_set_bits = bin(n).count('1')\n\n    # Iterate through each bit in reverse order\n    for i in range(31, -1, -1):\n        if (n >> i) & 1 == 0:\n            # Set the leftmost unset bit\n            n = n | (1 << i)\n            num_set_bits += 1\n\n    # Return the updated number of set bits\n    return num_set_bits"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    Inputs:\n    - r: float, radius of the cone\n    - h: float, height of the cone\n    Outputs:\n    - volume: float, volume of the cone\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3)*math.pi*(r**2)*h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with base radius `r` and height `h`.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with a base radius r and height h.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3)*math.pi*(r**2)*h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments: the radius of the cone and the height of the cone.\n    The function returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Convert n to binary and count the number of 1s in the binary representation\n    count = 0\n    while n > 0:\n        n = n // 2\n        count += 1\n\n    # Find the highest power of 2 that is less than or equal to n\n    highest_power = 1\n    for i in range(count):\n        highest_power *= 2\n\n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 << highest_Power_of_2(n-1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 found so far\n    highest = 0\n\n    # Iterate through all powers of 2 less than or equal to n\n    for power in range(1, n+1):\n        # If this power of 2 is greater than the current highest power found so far, update highest\n        if power > highest:\n            highest = power\n\n    # Return the highest power of 2 found so far\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0 \n\n    highest_power = 1 \n    while highest_power < n: \n        highest_power *= 2 \n\n    return highest_power "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(0, n): \n        if 1 << i <= n:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the highest power of 2 \n    that is less than or equal to `n`.\n    \"\"\"\n    # Initialize a variable `max_power` to store the highest power of 2\n    max_power = 0\n    \n    # Loop through all possible powers of 2 from 1 to `n`\n    for power in range(1, n+1):\n        # Check if the current power is less than or equal to `n`\n        if power <= n:\n            # If it is, update `max_power` to the current power\n            max_power = power\n    \n    # Return the highest power of 2 less than or equal to `n`\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while True:\n        if 2**i <= n:\n            return 2**i\n        i += 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return highest_Power_of_2(n >> 1) << 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n //= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable to store the highest power of 2\n    max_power = 0\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a power of 2\n        if i == 2**max_power:\n            # If it is, update the max_power\n            max_power += 1\n        elif i < 2**max_power:\n            # If it isn't, break out of the loop\n            break\n\n    # Return the highest power of 2 that is less than or equal to n\n    return max_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else:\n        lucas = find_lucas(n-1) + find_lucas(n-2)\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_lucas = find_lucas(n-1)\n        lucas = prev_lucas + prev_lucas\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Initialize variables\n    prev_lucas = 0\n    lucas = 2\n    count = 0\n    \n    # Loop until we have found then'th lucas number\n    while count < n:\n        # Calculate the next lucas number\n        next_lucas = prev_lucas + lucas\n        \n        # Update variables\n        prev_lucas = lucas\n        lucas = next_lucas\n        count += 1\n        \n    return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two Lucas numbers\n    a, b = 2, 1\n    # Loop through n-1 times\n    for i in range(2, n+1):\n        # Calculate the next Lucas number as the sum of the previous two\n        c = a + b\n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n    # Return the nth Lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the nth lucas number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find the nth lucas number using the formula: L(n) = L(n-1) + L(n-2)\n    \n    Args:\n    n (int): The index of the lucas number to find.\n    \n    Returns:\n    int: The nth lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string % item)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(x, string) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # convert the lists to dictionaries\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l3, l3))\n    \n    # merge the two dictionaries\n    d = {**d1, **d2}\n    \n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    nested_dict = {}\n    \n    # loop through the lists and add the values to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n        \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i, lst in enumerate(args):\n        for j, item in enumerate(lst):\n            nested_dict[i] = {j: item}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary\n    result = {}\n    # loop through each list and add its elements to the dictionary\n    for i in range(len(l1)):\n        result[i] = {}\n        for j in range(len(l2[i])):\n            result[i][j] = l3[l2[i][j]][i]\n    # return the final dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Convert the list to dictionary\n    result = dict(zip(l1, l2))\n    result.update(dict(zip(l1, l3)))\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a dictionary to store the nested dictionary\n    result = {}\n    # Loop through each list\n    for i in range(len(l1)):\n        # Create a new dictionary for each list\n        inner_dict = {}\n        # Loop through each element in the list\n        for j in range(len(l1[i])):\n            # Add the key-value pair to the inner dictionary\n            inner_dict[l1[i][j]] = l2[i][j]\n        # Add the inner dictionary to the result dictionary\n        result[l3[i]] = inner_dict\n    # Return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through each list\n    for i in range(len(l1)):\n\n        # Create a new dictionary for each list\n        new_dict = {}\n\n        # Loop through each element in the list\n        for j in range(len(l1[i])):\n\n            # Add the element to the new dictionary\n            new_dict[l2[i][j]] = l3[i][j]\n\n        # Add the new dictionary to the nested dictionary\n        nested_dict[l1[i]] = new_dict\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i, list_obj in enumerate(lists):\n        if i == 0:\n            for item in list_obj:\n                nested_dict[item] = {}\n        elif i == 1:\n            for item in list_obj:\n                nested_dict[item][\"name\"] = item\n        elif i == 2:\n            for item in list_obj:\n                nested_dict[item][\"age\"] = item\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {i: {'name': j, 'age': k} for i, j, k in zip(l1, l2, l3)}"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: when n is equal to 1\n    if n == 1:\n        return 1\n    \n    # Base case: when n is equal to 2\n    elif n == 2:\n        return 3\n    \n    # Base case: when n is equal to 3\n    elif n == 3:\n        return 6\n    \n    # Base case: when n is equal to 4\n    elif n == 4:\n        return 10\n    \n    # Recursive case: when n is greater than 4\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def f(n):\n        if n == 1:\n            return n\n        else:\n            return max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n    \n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    elif n == 2:\n        return n * 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n\n    # Base case: if n is 1 or greater, the maximum sum is n\n    return n\n\n    # Recursive case: calculate the maximum sum for n/2, n/3, n/4, and n/5\n    max_sum_2 = get_max_sum(n // 2)\n    max_sum_3 = get_max_sum(n // 3)\n    max_sum_4 = get_max_sum(n // 4)\n    max_sum_5 = get_max_sum(n // 5)\n\n    # Calculate the maximum sum for n using the given equation\n    max_sum = max(max_sum_2 + max_sum_3 + max_sum_4 + max_sum_5, n)\n\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    elif n % 2 == 0:\n        return get_max_sum(n//2) + n\n    \n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3)) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1 or n==2:\n        return n\n    else:\n        return max(get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5)+n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 15\n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = len(input_list[0])\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    max_length_list = []\n    for item in input_list:\n        if len(str(item)) > length:\n            length = len(str(item))\n            max_length_list = [item]\n        elif len(str(item)) == length:\n            max_length_list.append(item)\n    return max_length_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = []\n    for item in input_list:\n        lengths.append(len(item))\n    return input_list[lengths.index(max(lengths))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set and back to a tuple to remove duplicates\n    set_tup = tuple(set(test_tup))\n    # check if the length of the original and modified tuple is the same\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store unique elements of the tuple\n    unique_elements = set(test_tup)\n    \n    # check if the set has only one element (i.e., all elements are distinct)\n    return len(unique_elements) == 1"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = list(set(test_tup))\n    if len(test_tup) == len(test_tup.pop()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(string):\n    # initialize a dictionary to store character frequency\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # initialize the current index and the first non-repeating character\n    current_index = 0\n    first_non_repeating_char = None\n    \n    # traverse the string and update the current index and first non-repeating character accordingly\n    for char in string:\n        if freq[char] == 1:\n            current_index += 1\n        if freq[char] == 2 and first_non_repeating_char is None:\n            first_non_repeating_char = char\n        freq[char] -= 1\n    \n    # return the first non-repeating character\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes in a string and returns the first non-repeated character.\n\n    Args:\n        str1: string - the input string.\n\n    Returns:\n        char: string - the first non-repeated character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    char_count = {}  # create an empty dictionary to store the character counts\n    \n    # iterate through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # iterate through the dictionary and find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert the string to a set to get unique characters\n    unique_chars = set(str1)\n\n    # iterate over the unique characters and check if the index is equal to the character\n    for index, char in enumerate(unique_chars):\n        if index == ord(char):\n            return char\n\n    # if the loop finishes without returning a character, the string is all repeated\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the string again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq_dict = {}\n    for char in str1:\n        if char not in freq_dict:\n            freq_dict[char] = 1\n        else:\n            freq_dict[char] += 1\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # find the first character in the string that has a frequency of 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate over the frequency dictionary and find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create an empty dictionary to store the count of each character in the string\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is already in the dictionary\n        if char in char_count:\n            # If the character is already in the dictionary, increment its count\n            char_count[char] += 1\n        # If the character is not already in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # Loop through each character in the string again and find the first non-repeating character\n    for char in str1:\n        # Check if the character is already in the dictionary and its count is 1\n        if char in char_count and char_count[char] == 1:\n            return char\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if not re.match(regex, string):\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(pattern, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n\ninput_string = input(\"Enter a string: \")\nresult = check_char(input_string)\nif result:\n    print(\"The string starts and ends with the same character.\")\nelse:\n    print(\"The string does not start and end with the same character.\")"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    sorted_numbers = sorted(numbers)\n    n = len(numbers)\n    median = sorted_numbers[n // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    # Create a list to store the three numbers\n    numbers = [a, b, c]\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Calculate the length of the list\n    length = len(numbers)\n\n    # If the length is odd, the median is the middle number\n    if length % 2 == 1:\n        median = numbers[length//2]\n    # If the length is even, the median is the average of the two middle numbers\n    else:\n        # Calculate the index of the middle two numbers\n        middle_one = length//2\n        middle_two = middle_one - 1\n\n        # Calculate the average of the two middle numbers\n        median = (numbers[middle_one] + numbers[middle_two]) / 2\n\n    # Return the median value\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Find the median of the sorted numbers\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    midpoint = len(sorted_numbers) // 2\n\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[midpoint - 1] + sorted_numbers[midpoint]) / 2\n    else:\n        return sorted_numbers[midpoint]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sort the three numbers in ascending order\n    num_list = sorted([a, b, c])\n\n    # Find the middle two numbers\n    mid_index = len(num_list) // 2\n\n    # If there are an odd number of numbers, the median is the middle number\n    if len(num_list) % 2 == 1:\n        median = num_list[mid_index]\n    # If there are an even number of numbers, the median is the average of the two middle numbers\n    else:\n        median = (num_list[mid_index - 1] + num_list[mid_index]) / 2\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    a = sorted([a,b,c])\n    # Calculate the median\n    n = len(a)\n    if n % 2 == 1:\n        median = a[n//2]\n    else:\n        median = (a[n//2-1] + a[n//2]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Find the minimum value\n    min_value = min(a, b, c)\n    \n    # Find the maximum value\n    max_value = max(a, b, c)\n    \n    # Find the median value\n    median_value = (max_value + min_value) / 2\n    \n    return median_value"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        # if there are even number of numbers\n        middle = n // 2\n        return (sorted_numbers[middle - 1] + sorted_numbers[middle]) / 2\n    else:\n        # if there are odd number of numbers\n        middle = n // 2\n        return sorted_numbers[middle]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the length of the array\n    n = len(numbers)\n\n    # Calculate the middle index\n    mid = n // 2\n\n    # If the length of the array is odd\n    if n % 2 == 1:\n        return numbers[mid]\n\n    # If the length of the array is even\n    else:\n        # Return the average of the two middle numbers\n        return (numbers[mid - 1] + numbers[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # Determine the size of the array\n    n = len(sorted_numbers)\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # If the length of the array is odd, the median is the middle number\n    if n % 2 == 1:\n        return sorted_numbers[median_index]\n    \n    # If the length of the array is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_numbers[median_index-1] + sorted_numbers[median_index]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        result.append(sum(digits))\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits of each number\n    sum_list = []\n\n    # Loop through each number in the list and compute its sum of digits\n    for num in nums:\n        digits_sum = sum([int(digit) for digit in str(num)])\n        sum_list.append(digits_sum)\n\n    # Return the list of sums of digits of each number\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # add up the digits\n        sum_of_digits = sum(digits)\n        # print the sum of digits for each number\n        print(num, sum_of_digits)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        result.append(sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(digit) for digit in str(num)]\n        # Add up the digits and store the sum in the total_sum variable\n        total_sum += sum(digits)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = 0\n    for num in nums:\n        digits = sum(int(digit) for digit in str(num))\n        digits_sum += digits\n    return digits_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert tuples to lists for bitwise xor operation\n    list_tup1 = list(test_tup1)\n    list_tup2 = list(test_tup2)\n    # Bitwise xor operation across the two lists\n    xor_list = [i^j for i, j in zip(list_tup1, list_tup2)]\n    # Convert the list back to a tuple\n    xor_tup = tuple(xor_list)\n    return xor_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += ((test_tup1[i] ^ test_tup2[i]),)\n    return result_tuple"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_value = 0\n    for i in range(len(test_tup1)):\n        xor_value |= test_tup1[i] ^ test_tup2[i]\n    return xor_value"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Initialize result tuple with same length as test_tup1 and test_tup2\n    result = (0,)*len(test_tup1)\n\n    # Perform bitwise xor operation across each pair of corresponding elements of the tuples\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result ^ test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Use a loop to iterate over the elements of the input tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the corresponding elements\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= (test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Use set to remove duplicates\n    unique_tuples = set(test_list)\n    # Use len to find the length of the set\n    freq = len(unique_tuples)\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    from collections import Counter\n    unique_tuples = Counter(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # create a set to store unique tuples\n    unique_tuples = set()\n\n    # loop through the list and add each unique tuple to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    # return the length of the set which will be the number of unique tuples in the list\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        if len(i) == len(set(i)):\n            count += 1\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create an empty dictionary to store the unique tuples\n    freq_dict = {}\n    # Loop through the list\n    for item in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n    # Return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    count = 0\n    unique_tuples = set()\n    for item in test_list:\n        if tuple(item) not in unique_tuples:\n            unique_tuples.add(tuple(item))\n            count += 1\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples should have the same length.\"\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] + test_tup2[i])\n        return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        # check if the element is a tuple\n        if isinstance(test_tup1[i], tuple):\n            # check if the nested tuple is empty\n            if not isinstance(test_tup2[i], tuple):\n                result_tup.append(test_tup1[i] + (test_tup2[i],))\n            else:\n                result_tup.append(test_tup1[i] + test_tup2[i])\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(temp)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Creating a new empty tuple to store the sum of each tuple element\n    new_tup = ()\n    # Iterating over each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Adding the elements of each tuple together\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    # iterate through the two tuples\n    for i in range(len(test_tup1)):\n        # add the corresponding elements of the two tuples and append the result to the result tuple\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both input tuples must have same length')\n\n    # Perform index wise addition of the elements in the two tuples\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the sum of each tuple\n    sum_list = []\n    # iterate over each tuple in the input tuples\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        # check if both tuples have the same number of elements\n        if len(tup1) == len(tup2):\n            # create an empty tuple to store the sum of each element\n            sum_tup = ()\n            # iterate over each element in the two tuples\n            for i in range(len(tup1)):\n                # add the two elements together and store the result in the sum tuple\n                sum_tup += (tup1[i] + tup2[i],)\n            # append the sum tuple to the sum list\n            sum_list.append(sum_tup)\n        else:\n            print(\"Error: Both tuples must have the same number of elements.\")\n    # return the sum list\n    return sum_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length.\")\n        return\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple:\n            if type(test_tup2[i]) == tuple:\n                result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            else:\n                print(\"Both tuples should have same type.\")\n                return\n        else:\n            if type(test_tup2[i]) == tuple:\n                print(\"Both tuples should have same type.\")\n                return\n            else:\n                result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            print(element, \"exists in tuple1\")\n        else:\n            print(element, \"does not exist in tuple1\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)): \n        if tuplex[i] == tuple1: \n            return True \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element found\")\n    else:\n        print(\"Element not found\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes two parameters: a tuple and a tuple of elements. The function checks whether \n    any of the elements in the first tuple exist in the second tuple. If a match is found, the function \n    returns True, otherwise it returns False.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    parity = x % 2\n    if parity == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns True if its parity is odd, False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # If the number is even, it's odd.\n        return False\n    else: # If the number is odd, it's even.\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    if x % 2!= 0: # If the remainder of x divided by 2 is not equal to 0\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Check if the number is even or odd using modulo operator\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2!= 0"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    # initialize a variable to keep track of the parity of the number\n    parity = False\n    \n    # loop through each digit in the number and check if the digit is odd\n    while x > 0:\n        digit = x % 10\n        if digit % 2!= 0:\n            parity = True\n        x //= 10\n    \n    # return the parity of the number\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n        return \"even\"\n    else:\n        print(x, \"is odd.\")\n        return \"odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns True if the parity of the number is odd and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string and get the list of digits\n    digits = list(str(n))\n    \n    # Initialize a variable to keep track of the next bigger number\n    next_bigger = 0\n    \n    # Loop through the list of digits and add the corresponding digits in reverse order to the next bigger number\n    for digit in digits:\n        next_bigger += int(digit) * (10 ** digits.index(digit))\n    \n    # Add one to the next bigger number to get the next one\n    next_bigger += 1\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize the next bigger number to None\n    next_bigger = None\n    # Loop through each digit in the number from right to left\n    for i in range(len(num_str)-1, -1, -1):\n        # Extract the current digit\n        digit = int(num_str[i])\n        # Check if the digit is greater than or equal to 9\n        if digit >= 9:\n            # If it is, set the next bigger number to be the current number plus one\n            next_bigger = digit + 1\n        # If the next bigger number is still None, it means all digits are less than 9\n        elif next_bigger is None:\n            # Therefore, the next bigger number is the current number plus one\n            next_bigger = digit + 1\n    # Check if the next bigger number is still None, in which case the current number is the next biggest number\n    if next_bigger is None:\n        next_bigger = n + 1\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize variables\n    number = list(str(n))\n    result = []\n    # Loop through each digit\n    for digit in number:\n        # Check if the digit is even\n        if int(digit) % 2 == 0:\n            # If the digit is even, add it to the result\n            result.append(int(digit))\n        # If the digit is odd, add the next bigger odd digit to the result\n        else:\n            # Calculate the next bigger odd digit\n            next_bigger_odd_digit = int(digit) + 2\n            if next_bigger_odd_digit > 9:\n                # If the next bigger odd digit is greater than 9, subtract 10 from it\n                next_bigger_odd_digit -= 10\n            # Add the next bigger odd digit to the result\n            result.append(next_bigger_odd_digit)\n    # Convert the result to a string and return it\n    return int(''.join(map(str, result)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # initialize variables\n    big = False\n    temp = 0\n    # loop through each digit of the number\n    for i in range(len(num)):\n        # if the current digit is smaller than the previous one, swap them\n        if int(num[i]) < int(num[i-1]):\n            temp = num[i]\n            num[i] = num[i-1]\n            num[i-1] = temp\n        # if the current digit is already the maximum possible digit, return the original number\n        elif int(num[i]) == 9 and big:\n            return n\n        # if the current digit is the maximum possible digit, set big to True\n        elif int(num[i]) == 9:\n            big = True\n    # if the number was already the next bigger number, return it\n    if big:\n        return n\n    # otherwise, return the next bigger number by appending zeros\n    else:\n        return int(num + '0'*(len(num)-1))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # split the number into its digits\n    digits = [int(d) for d in str(n)]\n    # reverse the digits\n    digits.reverse()\n    # find the index of the first digit greater than 9\n    index = digits.index(9)\n    # reverse the digits from index to the end\n    digits = digits[:index] + digits[index+1:][::-1]\n    # join the digits back into a string and convert it back to an integer\n    next_bigger = int(''.join(map(str, digits)))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Find the length of the input number\n    length = len(str(n))\n    \n    # Initialize the output number as 0\n    output = 0\n    \n    # Iterate through each digit in the input number\n    for i in range(length):\n        # Extract the current digit and its index\n        digit = int(str(n)[i])\n        index = i\n        \n        # Iterate through all the digits from the current digit to 9\n        for j in range(digit, 10):\n            # If the next number is greater than the current number, then swap it with the current number\n            if j * 10**index > digit * 10**i:\n                temp = digit\n                digit = j\n                j = temp\n                break\n        \n        # Update the output number with the new digit\n        output += digit * 10**i\n    \n    # Return the output number\n    return output"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    Args:\n    n (int): the number to rearrange\n\n    Returns:\n    int: the next bigger number\n    \"\"\"\n\n    # Convert the input number to a string and reverse its order\n    s = str(n)[::-1]\n\n    # Reverse the string until we find the first pair of digits that are in the wrong order\n    while True:\n        i = 0\n        while i < len(s) - 1 and s[i] <= s[i+1]:\n            i += 1\n        if i == len(s) - 1:\n            break\n        j = i + 1\n        while j < len(s) and s[j] >= s[i]:\n            j += 1\n        s = s[:i] + s[j:i] + s[i+1:j] + s[i:i+1] + s[j+1:]\n\n    # Convert the reversed string back to an integer and return it\n    return int(s)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize the new number to be the input number\n    new_num = n\n    \n    # loop through each digit in the input number\n    for i in range(9):\n        # initialize the digit count to zero\n        digit_count = 0\n        \n        # loop through each digit in the input number\n        for digit in str(n):\n            # check if the current digit is the i-th digit\n            if int(digit) == i:\n                # increment the digit count by 1\n                digit_count += 1\n                \n        # check if the digit count is less than the input number\n        if digit_count < n:\n            # create a list of all the digits in the input number\n            digits = list(str(n))\n            \n            # find the index of the first digit that has a digit count greater than or equal to the input number\n            for j in range(len(digits)):\n                if int(digits[j]) == i and int(digits[j]) < n:\n                    # swap the i-th digit with the first digit that has a digit count greater than or equal to the input number\n                    digits[j], digits[j+1] = digits[j+1], digits[j]\n                    \n            # convert the list of digits back to a string\n            new_num = int(''.join(digits))\n            \n            # break out of the loop because we've found a valid rearrangement\n            break\n    \n    # return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string and split it into its digits\n    digits = [int(d) for d in str(n)]\n    # Reverse the order of the digits\n    digits.reverse()\n    # Find the index of the largest digit\n    index = digits.index(max(digits))\n    # Increment the digit at that index by 1\n    digits[index] += 1\n    # Convert the digits back to a string and add a '0' at the beginning to pad the number with leading zeros\n    result = str(0) * (len(digits) - 1) + ''.join([str(d) for d in digits])\n    # Convert the result back to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Get the digits of the given number\n    digits = [int(d) for d in str(n)]\n\n    # Find the largest index of a digit\n    max_index = digits.index(max(digits))\n\n    # Reverse the digits from the maximum index to the end of the list\n    digits[max_index:] = digits[max_index:][::-1]\n\n    # Concatenate the digits into a string\n    new_number = ''.join(map(str, digits))\n\n    # Convert the string back to an integer\n    new_number = int(new_number)\n\n    # Return the next bigger number\n    return new_number"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the result list and the heap with the first element from each array\n    result = []\n    heapq.heappush(result, (nums1[0], nums2[0]))\n\n    # Iterate over the remaining k pairs and add the smaller pairs to the heap\n    for i in range(1, k):\n        # Remove the smallest pair from the heap and add the next smaller pair\n        pair = heapq.heappop(result)\n        if pair[0] < nums1[-1]:\n            heapq.heappush(result, (pair[0] + 1, pair[1]))\n        if pair[1] < nums2[-1]:\n            heapq.heappush(result, (pair[0], pair[1] + 1))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k elements from both arrays\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, (-nums1[i], nums2[i]))\n    # Initialize variables for the maximum value of the first array and the second array\n    max_value1 = nums1[-1]\n    max_value2 = nums2[-1]\n    # Initialize variables for the minimum value of the first array and the second array\n    min_value1 = float('inf')\n    min_value2 = float('inf')\n    # Initialize a variable to store the number of pairs found\n    pairs_count = 0\n    # Loop through the arrays from smallest to largest\n    for i in range(len(nums1)-1, -1, -1):\n        # If the second array has the maximum value, pop the smallest element from the second array and push it into the min heap\n        if nums2[-1] == max_value2:\n            # Pop the smallest element from the second array\n            nums2_popped = heapq.heappop(min_heap)[1]\n            # If the value of the element in the second array is greater than the current maximum value, update the maximum value\n            if nums2_popped > max_value2:\n                max_value2 = nums2_popped\n            # If the value of the element in the second array is less than the current minimum value, update the minimum value\n            if nums2_popped < min_value2:\n                min_value2 = nums2_popped\n            # Increment the pairs count\n            pairs_count += 1\n        # If the first array has the maximum value, pop the smallest element from the first array and push it into the min heap\n        if nums1[-1] == max_value1:\n            # Pop the smallest element from the first array\n            nums1_popped = heapq.heappop(min_heap)[0]\n            # If the value of the element in the first array is greater than the current maximum value, update the maximum value\n            if nums1_popped > max_value1:\n                max_value1 = nums1_popped\n            # If the value of the element in the first array is less than the current minimum value, update the minimum value\n            if nums1_popped < min_value1:\n                min_value1 = nums1_popped\n            # Increment the pairs count\n            pairs_count += 1\n    # Return the number of pairs found\n    return pairs_count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Sort the two arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Create a min heap to store the pairs\n    heap = []\n\n    # Initialize the count and i\n    count = 0\n    i = 0\n\n    # Loop through the arrays\n    while count < k:\n        # Add the smaller element from each array to the heap\n        heapq.heappush(heap, (min(nums1[i], nums2[0]), i, 0))\n\n        # Update the count and increment the index\n        count += 1\n        i += 1\n\n        # If the count is less than k, remove the smallest element from the heap\n        if count < k:\n            if i == len(nums1):\n                # If we have reached the end of the first array, pop the smallest element from the heap\n                value, index, j = heapq.heappop(heap)\n                nums2.pop(j)\n            else:\n                # If we have not reached the end of the first array, pop the smallest element from the heap\n                value, index, j = heapq.heappop(heap)\n                nums1.pop(index)\n                nums2.pop(j)\n                heapq.heappush(heap, (min(nums1[i], nums2[0]), i, 0))\n\n    # Extract the pairs from the heap and return them\n    pairs = []\n    while heap:\n        value, index, j = heapq.heappop(heap)\n        pairs.append((nums1[index], nums2[j]))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Define a custom sorting function\n    def custom_sort(pair):\n        return pair[0]\n\n    # Create a min heap of size k\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Create a list to store pairs\n        pairs = []\n\n        # Iterate through the second array\n        for num2 in nums2:\n            # Calculate the sum of the current pair\n            pair_sum = num1 + num2\n\n            # If the pair_sum is less than k, add the pair to the list\n            if pair_sum < k:\n                heapq.heappush(min_heap, (pair_sum, (num1, num2)))\n                pairs.append((num1, num2))\n\n        # Sort the pairs in decreasing order based on the first element in each pair\n        pairs.sort(key=lambda x: x[0], reverse=True)\n\n        # If there are more pairs than k, remove the extra pairs from the min heap\n        if len(pairs) > k:\n            for i in range(k):\n                heapq.heappop(min_heap)\n\n        # Print the pairs\n        for pair in pairs:\n            print(pair)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if not heap or -num1 > heap[0]:\n                heapq.heappush(heap, -num1)\n            if not heap or -num2 > heap[0]:\n                heapq.heappush(heap, -num2)\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(pairs) < k:\n                pairs.append((heap[0], num1, num2))\n            if len(pairs) == k:\n                break\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return []\n\n    nums1.sort()\n    nums2.sort()\n\n    result = []\n    heap1 = []\n    heap2 = []\n\n    i = j = 0\n\n    while k > 0 and i < len(nums1) and j < len(nums2):\n        if (nums1[i] + nums2[j]) < (nums1[i] + nums2[j - 1]):\n            if not heap1 or (heap1 and heap1[0] > nums1[i]):\n                heapq.heappush(heap1, nums1[i])\n            if not heap2 or (heap2 and heap2[0] > nums2[j]):\n                heapq.heappush(heap2, nums2[j])\n            if len(heap1) > len(heap2):\n                if not heap1 or (heap1 and heap1[0] < nums1[i]):\n                    heapq.heappop(heap1)\n                if not heap2 or (heap2 and heap2[0] > nums2[j]):\n                    heapq.heappush(heap2, nums2[j])\n            else:\n                if not heap2 or (heap2 and heap2[0] < nums2[j]):\n                    heapq.heappop(heap2)\n                if not heap1 or (heap1 and heap1[0] > nums1[i]):\n                    heapq.heappush(heap1, nums1[i])\n        else:\n            if not heap1 or (heap1 and heap1[0] > nums1[i]):\n                heapq.heappush(heap1, nums1[i])\n            if not heap2 or (heap2 and heap2[0] > nums2[j]):\n                heapq.heappush(heap2, nums2[j])\n            if len(heap1) > len(heap2):\n                if not heap1 or (heap1 and heap1[0] < nums1[i]):\n                    heapq.heappop(heap1)\n                if not heap2 or (heap2 and heap2[0] > nums2[j]):\n                    heapq.heappush(heap2, nums2[j])\n            else:\n                if not heap2 or (heap2 and heap2[0] < nums2[j]):\n                    heapq.heappop(heap2)\n                if not heap1 or (heap1 and heap1[0] > nums1[i]):\n                    heapq.heappush(heap1, nums1[i])\n\n        k -= 1\n        result.append([heap1[0], heap2[0]])\n        i += 1\n        j += 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    \n    # Initialize the heap with the smallest elements from both arrays\n    heapq.heappush(heap, (-nums1[0], -nums2[0]))\n    heapq.heappush(heap, (-nums1[0], nums2[0]))\n    heapq.heappush(heap, (nums1[0], -nums2[0]))\n    heapq.heappush(heap, (nums1[0], nums2[0]))\n    \n    # Iterate until the heap has k elements\n    while len(heap) > 0 and len(result) < k:\n        # Get the minimum elements from the heap\n        x1, x2 = heapq.heappop(heap)\n        y1, y2 = heapq.heappop(heap)\n        \n        # Add the pair to the result and the heap\n        result.append((x1, y1))\n        if x1 <= y2:\n            heapq.heappush(heap, (-x1, y2+1))\n        else:\n            heapq.heappush(heap, (x1-y2, y2))\n        heapq.heappush(heap, (x1+y2, y2))\n        heapq.heappush(heap, (x1, y2-1))\n        \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = [(nums1[0], 0, 0)]\n    heapq.heapify(pq)\n\n    result = []\n\n    for num2 in nums2:\n        while pq and pq[0][0] > num2:\n            heapq.heappop(pq)\n        if pq:\n            result.append((pq[0][1], num2))\n        if len(result) == k:\n            break\n        heapq.heappush(pq, (num2, nums1[0], 0))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Convert the list of numbers to a set to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # Sort the numbers in the first array\n    nums1_sorted = sorted(nums1)\n\n    # Create a priority queue (max heap) to store the smallest pairs\n    heap = []\n\n    # Iterate over the numbers in the second array and add them to the heap\n    for num in nums2_sorted:\n        if heap and num > heap[0][0]:\n            heapq.heappushpop(heap, (-heap[0][1], num))\n        else:\n            heapq.heappush(heap, (-num, num))\n\n        # If the heap size is less than k, remove the largest element from the heap\n        if len(heap) > k:\n            heapq.heappop(heap)\n\n    # Convert the heap to a list of tuples\n    result = [-pair[0] for pair in heap]\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    heapq.heapify(pq)\n    for num in nums1:\n        heapq.heappush(pq, -num)\n        if len(pq) > k:\n            heapq.heappop(pq)\n    res = []\n    while pq:\n        res.append(nums1[heapq[0]])\n        heapq.heappop(pq)\n    return res[::-1]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product of pairs of tuples.\n    \"\"\"\n    if not list1:\n        return \"List is empty\"\n\n    # find the length of the list of tuples\n    n = len(list1)\n\n    # sort the list of tuples by the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n\n    # initialize variables to store the minimum product and its indices\n    min_prod = list1[0][1]\n    min_index = 0\n\n    # loop through the sorted list of tuples\n    for i in range(n):\n        # find the difference between the product of the current tuple and the minimum product\n        diff = list1[i][1] * (list1[i][0] - list1[min_index][0])\n\n        # if the difference is smaller than the current minimum product, update the minimum product and its index\n        if diff < min_prod:\n            min_prod = diff\n            min_index = i\n\n    # return the minimum product\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to keep track of the minimum product and its tuple\n    min_product = float('inf')\n    min_product_tuple = None\n    \n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            \n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n                min_product_tuple = (list1[i], list1[j])\n    \n    # Return the tuple with the minimum product\n    return min_product_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    if len(list1) < 2:\n        return \"List should have at least two tuples.\"\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of any two pairs of tuples within the list.\n    '''\n    if len(list1) < 2:\n        return 0\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    min_pair = [0, 0]\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_pair = [i, j]\n\n    return min_pair, min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum product of any two tuples in the list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0]*lst[j][1]\n            min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product\n    between any two pairs of tuples within the list.\n    '''\n    \n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the i-th tuple and j-th tuple\n            product = list1[i][0] * list1[j][1]\n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf') # initializing the minimum product as infinity\n    \n    # iterating over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1] # calculating the product of the first and second elements in the pair\n            \n            # checking if the product is smaller than the current minimum product\n            if product < min_product:\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes in a list of tuples and returns the minimum product of any two pairs of tuples within the list.\n    '''\n    # Initialize minimum product as infinity\n    min_product = float('inf')\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # Check if the product is smaller than the current minimum product\n            if product < min_product:\n                # Update the minimum product\n                min_product = product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n    # Loop through the list to find the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of values and returns the minimum value in the list.\n    '''\n    min_val = float('inf')\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # create a dictionary to store the count of each type of value in the list\n    count = {}\n    for item in listval:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    \n    # find the key with the minimum value in the dictionary\n    min_key = min(count, key=count.get)\n    \n    # return the minimum value\n    return min_key"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for item in listval:\n        if min_val is None or item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value as the first element of the list\n    min_val = listval[0]\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # Check if the current element is smaller than the minimum value\n        if listval[i] < min_val:\n            # Update the minimum value\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"List cannot be empty.\")\n    else:\n        if len(listval) == 1:\n            return listval[0]\n        else:\n            min_val = listval[0]\n            for i in range(1, len(listval)):\n                if listval[i] < min_val:\n                    min_val = listval[i]\n            return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_case = ''.join([word[:i].capitalize() + word[i:] for i in range(1, len(word)) if word[i].islower()])\n    # return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case by splitting the word by underscores and capitalizing the first letter of each word\n    camel_case = ''.join(w.capitalize() for w in re.findall(r'_(.?)[^_]*', word))\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'(\\w+)', word)\n    camel_word = words[0].lower()\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = ''\n    for word_part in word.split('_'):\n        camel_word += word_part.capitalize()\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into words separated by underscores\n    words = re.findall(r'\\w+', word)\n    \n    # convert the words to camel case\n    camel_word = ''\n    for word in words:\n        camel_word += word.capitalize()\n    \n    # return the camel case word\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    return camel_case.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace underscores with spaces\n    word = re.sub(r'_','', word)\n    # Split the word into words\n    words = word.split()\n    # Capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    # Join the words with underscores\n    camel_word = '_'.join(words)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into words\n    words = re.findall(r'\\w+', word)\n    # convert each word to camel case\n    camel_words = [word.title() for word in words]\n    # join the camel case words into a camel case string\n    camel_case = ''.join(camel_words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Use regular expressions to split the input word into a list of words\n    words = re.findall(r'\\w+', word)\n    # Convert each word to camel case\n    camel_case_words = [''.join(map(str.capitalize, word.split('_'))) for word in words]\n    # Join the camel case words into a camel case string\n    camel_case_string = ''.join(camel_case_words)\n    # Return the camel case string\n    return camel_case_string"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes in a list as an argument and removes all odd numbers from it.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes all the odd numbers from it.\n    \"\"\"\n    odd_list = []\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"List does not have enough elements to extract the nth element.\")\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if n is a positive integer\n    if n <= 0:\n        return None\n    # Get the length of the list\n    length = len(list1)\n    # Check if n is greater than or equal to the length of the list\n    if n > length:\n        return None\n    # Extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Convert the list to a list of lists\n    list2 = [[x[i] for x in list1] for i in range(len(list1[0]))]\n    \n    # Get the nth element of the list\n    return list2[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the input list is empty\n    if not list1:\n        return None\n    else:\n        # extract the nth element from the list of tuples\n        nth_element = list1[n-1]\n        return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return None\n    \n    # check if the index is valid\n    if n < 0 or n > len(list1) - 1:\n        return None\n    \n    # extract the nth element\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element from the list.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input is a list of tuples\n    if not isinstance(list1, list) or not all(isinstance(tup, tuple) for tup in list1):\n        return None\n    \n    # Check if n is a valid input\n    if not isinstance(n, int) or n < 1:\n        return None\n    \n    # Extract the nth element from the list of tuples\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # convert the list of tuples to a list of lists\n    list2 = [list(x) for x in list1]\n    # find the length of the longest list\n    max_len = max([len(x) for x in list2])\n    # create a list of lists of length max_len\n    result = [[] for _ in range(max_len)]\n    # loop through the lists of lists and extract the nth element\n    for i in range(max_len):\n        result[i] = [x[i] for x in list2]\n    # return the nth element from the list of lists\n    return result[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(n):\n        list1.pop(0)\n    return list1[0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n\n    Args:\n    list1 (list): a list of tuples.\n    n (int): the position of the element to extract.\n\n    Returns:\n    tuple: the nth element of the list of tuples.\n\n    Raises:\n    ValueError: if n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            print(value)\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(value in list2 for value in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in list1\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    # Iterate through list2 and check if any value in list2 exists in freq\n    for item in list2:\n        if item in freq:\n            freq[item] -= 1\n            if freq[item] == 0:\n                del freq[item]\n        else:\n            return False\n\n    # If all values in list2 have been checked, return True\n    return True"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # convert both lists to sets to remove duplicates and then compare their intersection\n    return len(set(list1) & set(list2)) > 0"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns a list of all the values that are present in both lists.\n    '''\n    # creating an empty set to store all the common values\n    common_values = set()\n    \n    # iterating through each value in the first list\n    for value in list1:\n        # checking if the value exists in the second list\n        if value in list2:\n            # adding the value to the set of common values\n            common_values.add(value)\n            \n    # converting the set to a list and returning it as the output\n    return list(common_values)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence or not.\n\n    Parameters:\n    list1 (list): A sequence of values.\n    list2 (list): Another sequence of values.\n\n    Returns:\n    bool: True if any value in list1 exists in list2, else False.\n    \"\"\"\n\n    # Loop through each value in list1\n    for value in list1:\n        # Check if the value exists in list2\n        if value in list2:\n            # If it does, return True\n            return True\n\n    # If we get here, no value in list1 exists in list2, so return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value in the first list exists in the second list,\n    otherwise, it returns False.\n    \"\"\"\n\n    # Check if the two lists are not empty\n    if not list1 or not list2:\n        return False\n\n    # Loop through the first list and check if any value exists in the second list\n    for item in list1:\n        if item in list2:\n            return True\n\n    # If no overlapping values were found, return False\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -float('inf')\n    max_pair = (float('-inf'), float('-inf'))\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    This function takes in an array of integers and returns the pair with the highest product.\n    '''\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n\n    Args:\n    arr: list of integers representing the array of integers\n\n    Returns:\n    int: the index of the pair with the highest product\n    \"\"\"\n\n    # Initialize variables\n    max_product = float('-inf')\n    pair_index = 0\n\n    # Loop through the array and compare the product of each element with the current max_product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                pair_index = i, j\n\n    # Return the index of the pair with the highest product\n    return pair_index"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables to store the maximum product found so far and the pair with it\n    max1 = arr[0]\n    max2 = arr[0] * arr[1]\n    max3 = arr[1]\n\n    # Iterate through the array and update the max1, max2 and max3 variables accordingly\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max3 = max2\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max3 = max2\n            max2 = arr[i]\n        elif arr[i] > max3:\n            max3 = arr[i]\n\n    # Return the pair with highest product found\n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Finds a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        elif num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    return (max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n    min_pair = (-1, -1)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n            elif current_product < max_product:\n                if current_product > min_product:\n                    min_product = current_product\n                    min_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n\n    # Find the pair with highest product\n    max_product = sorted_arr[0] * sorted_arr[1]\n    second_max_product = sorted_arr[0] * sorted_arr[2]\n\n    if max_product < second_max_product:\n        return max_product\n    else:\n        return second_max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    first_max = float('-inf')\n    second_max = float('-inf')\n\n    for num in arr:\n        if num > max_product:\n            second_max = max_product\n            max_product = num\n        elif num > first_max and num!= max_product:\n            second_max = first_max\n            first_max = num\n        elif num > second_max and num!= max_product and num!= first_max:\n            second_max = num\n\n    return second_max"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    max1 = arr[0] \n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max2 = arr[i] \n        elif arr[i] < min1: \n            min2 = min1 \n            min1 = arr[i] \n        elif arr[i] < min2: \n            min2 = arr[i] \n\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    # loop through the list of tuples\n    for tup in Input: \n        # get the first element of the tuple\n        first = tup[0] \n        # check if the first element is already in a dictionary\n        if first in common_dict: \n            # if it is, add the tuple to the list of tuples for that first element\n            common_dict[first].append(tup) \n        else: \n            # if it isn't, create a new dictionary for that first element with the tuple as the value\n            common_dict[first] = [tup] "
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    common_first_element = set()\n    for i in Input:\n        common_first_element.add(i[0])\n    return list(common_first_element)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple in Input:\n        if common_element is None:\n            common_element = tuple[0]\n        elif tuple[0] == common_element:\n            pass\n        else:\n            common_element = None\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # create a dictionary to store the count of each element in the input list\n    count = {}\n\n    # loop through each tuple in the input list\n    for i in Input:\n\n        # get the first element of the tuple\n        key = i[0]\n\n        # check if the first element is already in the dictionary\n        if key in count:\n            count[key] += 1\n        else:\n            count[key] = 1\n\n    # create a list of tuples with the count of each element\n    result = [(k, v) for k, v in count.items()]\n\n    # sort the list of tuples in descending order of count\n    result.sort(key=lambda x: x[1], reverse=True)\n\n    # return the first tuple with count of 1\n    return result[0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    common = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common.append(Input[i])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    # Define a dictionary to store the common first element for each tuple\n    common_dict = {}\n    \n    # Loop through each tuple in the input list\n    for tup in Input:\n        # Check if the first element of the tuple is already in the dictionary\n        if tup[0] in common_dict:\n            # If it is, append the second element of the tuple to the list stored in the dictionary\n            common_dict[tup[0]].append(tup[1])\n        # If the first element of the tuple is not already in the dictionary, add it with its second element as a list\n        else:\n            common_dict[tup[0]] = [tup[1]]\n    \n    # Loop through the dictionary and print the common elements\n    for key, value in common_dict.items():\n        print(key, \":\", value)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store common first elements\n    common_dict = {}\n    # Iterate through the list of tuples\n    for tup in Input: \n        # Check if the first element of the tuple is already in the dictionary\n        if tup[0] in common_dict: \n            # If it is, add the second element of the tuple to the list of values\n            common_dict[tup[0]].append(tup[1])\n        else: \n            # If it's not, create a new list for the values and add it to the dictionary\n            common_dict[tup[0]] = [tup[1]]\n    # Create an empty list to store the common first elements\n    common_list = []\n    # Iterate through the dictionary and append the common first elements to the list\n    for key in common_dict: \n        common_list.append(key)\n    # Return the list of common first elements\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # initializing empty dictionary to store the counts of common first elements in each tuple\n    count_dict = {}\n\n    # iterating through the list of tuples\n    for item in Input:\n\n        # extracting the first element from each tuple\n        first_element = item[0]\n\n        # incrementing the count of the common first element in the dictionary\n        if first_element in count_dict:\n            count_dict[first_element] += 1\n        else:\n            count_dict[first_element] = 1\n\n    # initializing an empty list to store the common first elements\n    common_elements = []\n\n    # iterating through the dictionary to find the common first elements\n    for item in count_dict:\n        if count_dict[item] == Input.count(item):\n            common_elements.append(item)\n\n    # returning the list of common first elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.add(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a dictionary\n    where each key is a tuple with the first element common to all tuples in \n    the input list and the value is a list of all tuples with that first element.\n    '''\n    common_first = None\n    common_first_list = []\n    \n    for i in range(len(Input)):\n        if common_first is None:\n            common_first = Input[i][0]\n            common_first_list.append(Input[i])\n        else:\n            if Input[i][0] == common_first:\n                common_first_list.append(Input[i])\n            else:\n                break\n    \n    result_dict = {}\n    for i in range(len(common_first_list)):\n        for j in range(i+1, len(common_first_list)):\n            if common_first_list[i][0] == common_first_list[j][0]:\n                if common_first_list[i] not in result_dict:\n                    result_dict[common_first_list[i]] = []\n                result_dict[common_first_list[i]].append(common_first_list[j])\n    \n    return result_dict"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_element = elem\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_len = 0\n    max_element = None\n\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = \"\"\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and returns the total sum of the rounded numbers multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    return total_sum * len(lst)\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    result = total * len(lst)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Rounding every number in the list\n    list1 = [round(num, 2) for num in list1]\n\n    # Calculating the total sum of the rounded numbers\n    total_sum = sum(list1)\n\n    # Printing the result\n    print(f\"The total sum of the rounded numbers is: {total_sum}\")\n    print(f\"The result is: {total_sum * len(list1)}\")"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    total_sum = 0\n    length = len(list1)\n\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n\n    result = total_sum * length\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Calculate the sum of the list and the length of the list\n    total_sum = sum(list1)\n    length = len(list1)\n    # Round each number in the list\n    list1_rounded = [round(num) for num in list1]\n    # Calculate the total sum of the rounded list\n    total_sum_rounded = sum(list1_rounded)\n    # Print the result\n    print(total_sum_rounded * length)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    sum = 0\n    i = 0\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum += cube\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize the sum variable to 0\n    cube_sum = 0\n\n    # iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the even natural number\n        cube = i**3\n\n        # add the cube of the even natural number to the cube sum\n        cube_sum += cube\n\n    # return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize a variable to keep track of the sum of cubes\n    sum = 0\n\n    # Iterate through the first n even natural numbers\n    for i in range(1, n+1, 2):\n\n        # Calculate the cube of the current number and add it to the sum\n        sum += i ** 3\n\n    # Return the final sum of cubes\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    cube_sum = 0\n    even_num = 2\n    \n    while cube_sum < n:\n        cube_sum += even_num ** 3\n        even_num += 2\n    \n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n    \"\"\"\n    concatenated_str = delimiter.join(str(x) for x in test_tup)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    concatenated_str = \"\"\n    for elem in test_tup:\n        concatenated_str += str(elem) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \", \"\n    result = \"\"\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) +''\n    return result.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initializing sum and count variables\n    sum = 0\n    count = 0\n\n    # loop through n numbers and find their cubes\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n\n    # calculate the average of cubes\n    average = sum/count\n\n    # print the average\n    print(\"The average of cubes of first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    sum_of_cubes = 0\n\n    for i in range(1, n+1):\n        cube = i ** 3\n        count += 1\n        sum_of_cubes += cube\n\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes a number as input and returns the average of cubes of the first n natural numbers.\n    '''\n\n    # Initializing the sum and count of cubes to 0\n    sum = 0\n    count = 0\n\n    # Using for loop to calculate the average of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum += i ** 3\n        count += 1\n\n    # Dividing the sum by the count to get the average of cubes\n    average = sum / count\n\n    # Returning the average of cubes\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize sum of cubes and count of cubes to zero\n    sum_cubes = 0\n    count_cubes = 0\n\n    # Calculate the sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n        count_cubes += 1\n\n    # Calculate the average of cubes\n    average_cubes = sum_cubes / count_cubes\n\n    # Return the average of cubes\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    #initialize variables to store the sum and count of cubes\n    sum_of_cubes = 0\n    count = 0\n    \n    #iterate n times to find sum of cubes of natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n        \n    #calculate the average of cubes\n    average_of_cubes = sum_of_cubes/count\n    \n    #return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize sum and count\n    sum_of_cubes = 0\n    count = 0\n\n    # iterate through first n natural numbers\n    for i in range(1, n+1):\n        # calculate cube of i and add to sum\n        sum_of_cubes += i*i*i\n        # increment count\n        count += 1\n\n    # calculate average of cubes and return it\n    return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    average_cube = cube_sum / n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum += cube\n        count += 1\n    average = sum / count\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i*i*i  \n    return sum_of_cubes / n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple)) if type(test_tuple[i]) == str]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_index = []\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_index.append(string[i])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(len(test_tuple[i]) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str(test_tuple[i][-1]) for i in range(len(test_tuple)))"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([s[-1] for s in test_tuple])"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    This function takes a list of lists and an element x as input, and returns the number of sublists\n    in the list containing the element x.\n    '''\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list containing only the odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import datetime\n\ndef change_date_format(dt):\n    try:\n        # Convert the date to datetime object\n        dt_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n        # Convert the datetime object to string in desired format\n        dt_str = dt_obj.strftime('%d-%m-%Y')\n        return dt_str\n    except ValueError:\n        # If the date format is not in the expected format, return None\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'\\3-\\2-\\1'\n    return re.sub(pattern, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regex pattern for matching the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Match the pattern in the date string\n    match = re.match(pattern, dt)\n\n    # If the pattern is found, convert it to dd-mm-yyyy format and return the result\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = day + '-' + month + '-' + year\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    \n    # check if the match is not None\n    if match:\n        # extract the matched groups and rearrange them in the desired order\n        year, month, day = match.groups()\n        new_dt = day + '-' + month + '-' + year\n        \n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'\\3-\\2-\\1'\n    return re.sub(pattern, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date of format yyyy-mm-dd and returns the date in format dd-mm-yyyy.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Match the pattern with the input date\n    match = re.match(pattern, dt)\n\n    # If the match is found, extract the date parts and return them in the required format\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    \n    # If the match is not found, return the original date as it is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    new_pattern = r'\\d{2}-\\d{2}-\\d{4}'\n    dt = re.sub(pattern, new_pattern, dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a pattern for the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # search the date string using the pattern\n    match = re.search(pattern, dt)\n    # if a match is found, convert the date to dd-mm-yyyy format\n    if match:\n        # extract the date components and join them in the desired format\n        date_str = '{}-{}-{}'.format(match.group(3), match.group(2), match.group(1))\n        return date_str\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # convert yyyy-mm-dd to dd-mm-yyyy format\n    date_format = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(date_format, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the maximum gap\n    max_gap = len(my_list) // 2\n    \n    # While gap is not equal to 1\n    while max_gap > 0:\n        # Step through the array\n        for i in range(max_gap, len(my_list)):\n            # Swap adjacent elements if they are in the wrong order\n            temp = my_list[i]\n            j = i\n            while j >= max_gap and my_list[j-max_gap] > temp:\n                my_list[j] = my_list[j-max_gap]\n                j -= max_gap\n            my_list[j] = temp\n        # Decrease the gap size\n        max_gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # choose a gap based on the size of the array\n    gap = n // 2\n    while gap > 0:\n        # for each gap, sort the array by repeatedly\n        # inserting the minimum element into its correct position\n        for i in range(gap, n):\n            # find the minimum element in the gap range\n            min_idx = i\n            for j in range(i - gap, i - gap + gap):\n                if my_list[j] < my_list[min_idx]:\n                    min_idx = j\n            # swap the minimum element with the current element\n            temp = my_list[i]\n            my_list[i] = my_list[min_idx]\n            my_list[min_idx] = temp\n        # decrease the gap by half\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Calculate the length of the array\n    n = len(my_list)\n\n    # Set the gap to a power of two between 1 and the length of the array\n    gap = n // 2\n\n    # Start the outer loop until the gap is less than or equal to 1\n    while gap > 0:\n        # Start the inner loop from the gap to the length of the array\n        for i in range(gap, n):\n            # Get the current element\n            curr_elem = my_list[i]\n\n            # Shift the elements to its correct position\n            j = i\n            while j >= gap and my_list[j-gap] > curr_elem:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = curr_elem\n\n        # Decrease the gap by half\n        gap //= 2\n\n    # Return the sorted array\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tups = ()\n    for i in range(len(test_tup1)):\n        and_tups += (test_tup1[i] & test_tup2[i],)\n    return and_tups"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns their elementwise and tuples.\n\n    Parameters:\n    test_tup1 (tuple): The first tuple to be processed.\n    test_tup2 (tuple): The second tuple to be processed.\n\n    Returns:\n    tuple: The elementwise and tuples of the given two tuples.\n    '''\n    and_tuple = ()\n    for i in range(len(test_tup1)):\n        and_tuple += (test_tup1[i] & test_tup2[i],)\n    return and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the elements from the input tuples\n    tup1_elements = [i for i in test_tup1]\n    tup2_elements = [i for i in test_tup2]\n\n    # Iterate over the tuples and perform elementwise and operation\n    result_tup = []\n    for i in range(len(tup1_elements)):\n        result_tup.append(tup1_elements[i] & tup2_elements[i])\n\n    # Convert the result tuple into a new tuple and return it\n    return tuple(result_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty tuple for the result\n    result_tup = ()\n    \n    # iterate over both tuples and extract the elementwise and tuples\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # Initialize an empty list to store the elementwise and tuples\n    and_list = []\n\n    # Iterate over the elements of the tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements of the tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n\n        # Perform the elementwise and operation\n        and_elem = elem1 & elem2\n\n        # Add the elementwise and tuple to the list\n        and_list.append((elem1, elem2, and_elem))\n\n    # Return the list of elementwise and tuples\n    return and_list"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return -c/b\n    else:\n        return \"The directrix is complex or undefined.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0: \n        return (-b + discriminant**0.5)/(2*a) \n    elif discriminant == 0: \n        return (-b)/(2*a) \n    else: \n        return \"The equation has no real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix is\", x1)\n        print(\"The directrix is\", x2)\n    elif discriminant == 0:\n        x1 = -b / (2*a)\n        x2 = x1\n        print(\"The directrix is\", x1)\n        print(\"The directrix is\", x2)\n    else:\n        print(\"There are no real solutions\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return \"No real roots\"\n    elif delta == 0:\n        x1 = -b / (2 * a)\n        return f\"The directrix is {x1}\"\n    else:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n        return f\"The directrix is {x1} and {x2}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0: \n        # If the equation is y = mx^2\n        directrix = -b/(2*a)\n    else: \n        # If the equation is y = mx^2 + c\n        directrix = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Using the formula for the directrix:\n    # directrix = -b / (2 * a)\n    \n    # Using the formula for the quadratic equation:\n    # discriminant = b**2 - 4 * a * c\n    \n    # Substituting values for the coefficients:\n    # b = 2 * a * c\n    \n    # Using the quadratic formula, we get:\n    # discriminant = 4 * a * c\n    \n    # Solving the quadratic equation:\n    # discriminant**0.5 = 4 * a * c\n    discriminant = 4 * a * c\n    root = (-b + discriminant**0.5) / (2 * a)\n    \n    return root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant > 0:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        return f\"The directrix of the parabola is {x1} and {x2}.\"\n    elif discriminant == 0:\n        x1 = -b / (2 * a)\n        return f\"The directrix of the parabola is {x1}.\"\n    else:\n        return \"The discriminant is less than zero.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes three parameters: the coefficients a, b, and c of a parabola.\n    It calculates the slope of the parabola and returns its directrix.\n    '''\n    slope = -b / (2 * a)\n    return slope"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x0 = (-b + c**2**0.5)/(2*a)\n    x1 = (-b - c**2**0.5)/(2*a)\n    print(\"The directrix is:\", x0)\n    print(\"The directrix is:\", x1)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # If the discriminant is zero, there is only one root\n    if discriminant == 0:\n        root1 = -b / (2*a)\n        print(\"The directrix is:\", root1)\n        \n    # If the discriminant is positive, there are two distinct roots\n    elif discriminant > 0:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        print(\"The directrix is:\", root1, \"and\", root2)\n        \n    # If the discriminant is negative, there are two conjugate complex roots\n    else:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        print(\"The directrix is:\", root1, \"and\", root2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Check if two lists have at least one common element.\n\n    Args:\n    list1 (list): the first list to check\n    list2 (list): the second list to check\n\n    Returns:\n    bool: True if there is at least one common element in the lists, False otherwise.\n    \"\"\"\n\n    # Create a set from each list to remove duplicates and get a list of unique elements\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if there is at least one common element\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Loop through each element in list1\n    for element1 in list1:\n        # Check if the element is also in list2\n        if element1 in list2:\n            return True\n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2 and item not in set(list1) and item not in set(list2):\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    length1 = base1 + base2\n    length2 = 2 * base1 + height\n    length3 = 2 * base2 + height\n\n    if length1 > length2 and length1 > length3:\n        return length1\n    elif length2 > length1 and length2 > length3:\n        return length2\n    else:\n        return length3"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_length = 0.5 * (base1 + base2 + height)\n    return trapezium_length\n\ndef median_trapezium_area(base1, base2, height):\n    '''\n    Write a function to find the area of a trapezium with a given base1, base2, and height.\n    '''\n    area = 0.5 * base1 * (height + base2)\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the lengths of both sides of the trapezium\n    s1 = 0.5 * base1\n    s2 = 0.5 * (base1 + base2)\n    # calculate the lengths of the bases of the trapezium\n    b1 = math.sqrt(s1**2 - height**2)\n    b2 = math.sqrt(s2**2 - height**2)\n    # calculate the areas of the two trapezium bases\n    a1 = math.pi * b1**2\n    a2 = math.pi * b2**2\n    # calculate the height of the trapezium\n    h = 0.5 * height\n    # calculate the area of the trapezium\n    A = 0.5 * (a1 + a2)\n    # calculate the length of the hypotenuse\n    L = math.sqrt(height**2 - b1**2 - b2**2)\n    # calculate the lengths of the trapezium's sides\n    s3 = b1 + L\n    s4 = b2 + L\n    # calculate the lengths of the trapezium's bases\n    b3 = math.sqrt(s3**2 - height**2)\n    b4 = math.sqrt(s4**2 - height**2)\n    # calculate the areas of the two trapezium bases\n    a3 = math.pi * b3**2\n    a4 = math.pi * b4**2\n    # calculate the area of the trapezium\n    A1 = 0.5 * (a1 + a3)\n    A2 = 0.5 * (a2 + a4)\n    # calculate the length of the hypotenuse\n    L1 = math.sqrt(height**2 - b1**2 - b3**2)\n    L2 = math.sqrt(height**2 - b2**2 - b4**2)\n    # calculate the area of the second trapezium\n    A21 = 0.5 * (a1 + a4)\n    A22 = 0.5 * (a2 + a3)\n    # calculate the lengths of the first and second trapezium bases\n    b21 = math.sqrt(s2**2 - height**2)\n    b22 = math.sqrt(s1**2 - height**2)\n    # calculate the areas of the two trapezium bases\n    a21 = math.pi * b21**2\n    a22 = math.pi * b22**2\n    # calculate the area of the first trapezium\n    A11 = 0.5 * (a1 + a21)\n    A12 = 0.5 * (a2 + a22)\n    # calculate the area of the second trapezium\n    A211 = 0.5 * (A11 + A21)\n    A212 = 0.5 * (A12 + A22)\n    # calculate the length of the hypotenuse\n    L11 = math.sqrt(height**2 - b1**2 - b21**2)\n    L12 = math.sqrt(height**2 - b2**2 - b22**2)\n    L21 = math.sqrt(height**2 - b3**2 - b21**2)\n    L22 = math.sqrt(height**2 - b4**2 - b22**2)\n    # calculate the area of the third and fourth trapezium bases\n    b31 = math.sqrt(s3**2 - height**2)\n    b32 = math.sqrt(s2**2 - height**2)\n    b41 = math.sqrt(s4**2 - height**2)\n    b42 = math.sqrt(s1**2 - height**2)\n    # calculate the areas of the two trapezium bases\n    a31 = math.pi * b31**2\n    a32 = math.pi * b32**2\n    a41 = math.pi * b41**2\n    a42 = math.pi * b42**2\n    # calculate the areas of the first and second trapeziums\n    A111 = 0.5 * (A11 + A111)\n    A112 = 0."
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the trapezium's base\n    base = (area - height) / 2\n\n    # Calculate the length of the trapezium's height\n    height = 0.5 * area - base\n\n    return (base, height)\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the height of the trapezium\n    trapezium_height = 2 * height\n\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the trapezium's base\n    trapezium_base = 0.5 * (base1 + base2)\n\n    # Calculate the area of the trapezium\n    trapezium_area = area1 + area2\n\n    # Calculate the length of the trapezium\n    trapezium_length = trapezium_base\n\n    # Calculate the area of the trapezium's perimeter\n    perimeter_area = (base1 + base2) * height\n\n    # Calculate the median length of the trapezium\n    median_length = trapezium_length\n\n    # Check if the median length is greater than half the perimeter\n    if median_length > perimeter_area / 2:\n        median_length = perimeter_area / 2\n\n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    median_length = 0.5 * area / height\n    \n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * base1 + 2 * base2\n    \n    # Calculate the length of the hypotenuse\n    hypotenuse = (perimeter ** 0.5)\n    \n    # Calculate the length of the semi-perimeter\n    semi_perimeter = (2 * perimeter) ** 0.5\n    \n    # Calculate the length of the midpoint\n    midpoint = 0.5 * semi_perimeter\n    \n    # Calculate the difference between the area and the midpoint\n    diff = abs(area - midpoint)\n    \n    # Calculate the percentage difference between the area and the midpoint\n    percent_diff = diff / area\n    \n    # Calculate the median length\n    median = 2 * base1 * (1 - percent_diff)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of the trapezium using Heron's formula\n    s = (base1 + base2 + height) / 2\n    area = (base1 * height) / 2 + (base2 * height) / 2\n    length = (s * s) ** 0.5\n\n    # Calculate the median\n    median = (area - height) / (length - height)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the first half of the trapezium\n    half_base1 = base1 / 2\n\n    # Calculate the length of the second half of the trapezium\n    half_base2 = base2 / 2\n\n    # Calculate the length of the trapezium\n    total_length = half_base1 + half_base2\n\n    # Calculate the length of the third half of the trapezium (the length of the top half)\n    half_height = height / 2\n\n    # Calculate the length of the trapezium (the length of the trapezium)\n    trapezium_length = total_length + half_height\n\n    # Calculate the area of the trapezium\n    trapezium_area = 0.5 * (base1 * height + base2 * height)\n\n    # Find the median length of the trapezium\n    median_length = trapezium_length\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Step 1: Calculate the length of the base1 and base2\n    len1 = base1\n    len2 = base2\n    \n    # Step 2: Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Step 3: Calculate the length of the half of the trapezium\n    half_len = math.sqrt(area)\n    \n    # Step 4: Sort the two halves in ascending order\n    if len1 < len2:\n        len1, len2 = len2, len1\n    if half_len < len1:\n        half_len = len1\n    if half_len < len2:\n        half_len = len2\n    \n    # Step 5: Determine the median\n    median = 0.5 * (len1 + len2)\n    \n    # Return the median\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function takes an array and a number as input and returns True if the number is greater than the elements of the array, False otherwise.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(i)\n            break\n    else:\n        print(number, \"is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number entered is greater than the element at index\", arr.index(i))\n            return\n    print(\"The number entered is not greater than any element in the array.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b|){1,}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a(b*)\"\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a.*b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b){1,}'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return \"No match found.\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return \"Match found!\"\n    else:\n        return \"No match found.\""
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n\n    return n % 10 # Use the modulo operator to find the last digit of the number."
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    if n<10:\n        return n\n    else:\n        return last_Digit(n//10)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    # create an empty list to store the negative numbers\n    neg_list = []\n    # iterate over each element of the input list\n    for num in list1:\n        # if the element is negative, append it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # initialize an empty list to store negative numbers\n    negative = []\n    \n    # loop through each element in the list\n    for num in list1:\n        # check if the number is negative\n        if num < 0:\n            # if it is, add it to the negative list\n            negative.append(num)\n        # if the number is positive or 0, ignore it\n        else:\n            pass\n    \n    # return the negative list\n    return negative"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the input list.\n    '''\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the input list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Create an empty list to store the negative numbers\n    negative_numbers = []\n    # Loop through the list\n    for num in list1:\n        # Check if the number is negative\n        if num < 0:\n            # Append the negative number to the list\n            negative_numbers.append(num)\n    # Return the list of negative numbers\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = [chr(i) for i in range(ord('a'), ord('z')+1) if i % 2!= 0]\n    return ''.join(c for c in str1 if c not in odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalnum():\n            if char.isalpha() and char.isupper():\n                new_str += char.lower()\n            elif char.isalpha() and char.islower():\n                new_str += char.upper()\n            elif not char.isalpha():\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            if char.islower():\n                new_str += char.upper()\n            else:\n                new_str += char.lower()\n        else:\n            pass\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if char % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    odd_chars = []\n    for char in str1:\n        if int(char) % 2 == 1:\n            odd_chars.append(char)\n    return \"\".join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes odd characters from the given string.\n    \"\"\"\n    odd_chars = \"\"\n    for char in string:\n        if char.isdigit() and int(char)%2!=0:\n            odd_chars += char\n    return odd_chars"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_pairs = []\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in bidirectional_pairs:\n                continue\n            if (test_list[j], test_list[i]) in bidirectional_pairs:\n                continue\n            bidirectional_pairs.append((test_list[i], test_list[j]))\n\n    return len(bidirectional_pairs)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list to a string\n    L = str(L)\n    # Split the string into a list of characters\n    L = list(L)\n    # Initialize an empty string\n    result = ''\n    # Iterate over the characters in the list\n    for char in L:\n        # If the character is a digit, append it to the result\n        if char.isdigit():\n            result += char\n    # Convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for i in L:\n        result += i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Sort the list in ascending order\n    L.sort()\n    \n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate over the sorted list\n    for i in range(len(L)):\n        # Add the current element to the total\n        total += L[i]\n        \n        # If the total exceeds the maximum value of an integer, add 1 to the sum and restart the total with the current element\n        if total > 2**31 - 1:\n            total = L[i]\n    \n    # Return the final sum\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        single = multiple_to_single(L[1:])\n        return L[0] + (single * len(L))"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable with the first element of the list\n    result = L[0]\n    # Loop through the rest of the list\n    for i in range(1, len(L)):\n        # If the current element is a multiple of 5, add it to the result\n        if L[i] % 5 == 0:\n            result += L[i]\n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num = single_num * 10 + num\n    return single_num"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Create a regular expression pattern for adverbs\n    pattern = r'\\b\\w*[a-z]*\\b\\s*[a-z]*\\b'\n\n    # Find all the occurrences of adverbs in the text\n    matches = re.findall(pattern, text)\n\n    # Sort the adverb matches by their positions in the sentence\n    matches.sort(key=lambda x: (text.find(x), x))\n\n    # Return the adverb matches and their positions\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define regular expression pattern to match adverbs\n    pattern = r'\\b(?:[a-z]+[-\\']?[a-z]+)([\\.!?])\\b'\n    \n    # use regex to find all the matches in the sentence\n    matches = re.findall(pattern, text)\n    \n    # if there are no matches, return None\n    if not matches:\n        return None\n    \n    # initialize empty dictionary to store the positions of adverbs\n    adverb_positions = {}\n    \n    # iterate over the matches and add their positions to the dictionary\n    for match in matches:\n        adverb = match[0]\n        position = text.find(match[0])\n        adverb_positions[adverb] = position\n    \n    # return the dictionary of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern for identifying adverbs\n    pattern = re.compile(r'\\b([a-z]+)(\\s|$)')\n    \n    # Find all matches in the text\n    matches = pattern.finditer(text)\n    \n    # Iterate through matches and store adverb and its position\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start() + 1 # adjust for the space before the adverb\n        print(f\"{adverb} found at position {position}\")\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for adverbs\n    pattern = r\"\\b\\w*([aeiou][.,;:?!])\\b\\w*\"\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize a dictionary to store the adverbs and their positions\n    adverb_positions = {}\n\n    # Iterate over the matches and extract the adverbs and their positions\n    for match in matches:\n        # Extract the adverb and its position\n        adverb = match[0]\n        position = text.find(adverb)\n\n        # Add the adverb and its position to the dictionary\n        adverb_positions[adverb] = position\n\n    # Return the dictionary of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Initialize an empty dictionary to store the adverbs and their positions\n    adverbs = {}\n\n    # Iterate over each word in the sentence\n    for i, word in enumerate(words):\n\n        # Check if the current word is an adverb\n        if re.match(r'\\b(very|well|seriously|just|also|too|really|enough|very|not|really|also|too|really|not|so|too)\\b', word):\n\n            # If it is, add its position to the dictionary\n            adverbs[word] = i\n\n    # Return the dictionary of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define a regex pattern to match adverbs\n    pattern = re.compile(r'\\b(brilliant|amazing|amazingly|awesomeness|enamored|enamorous|enormous|excited|exciting|excitingly|fantastic|fantastical|fantastically|fierce|frail|frightening|frighteningly|frighteningly|gigantic|gigantically|gracious|handsome|handsomely|helpful|hilarious|horrible|horrific|horrifying|horrifyingly|impressive|incomprehensible|incomprehensibly|incredible|incredibly|inebriated|inebriating|inebriation|infuriating|infuriatingly|jaw-dropping|jaw-drenched|jaw-droppingly|joyous|joyously|jubilant|jubilantly|just|joyful|joyfully|joyous|joyously|killing|laudable|laudably|lovely|lovely|magical|magical|mighty|mightily|nifty|nice|nice|nifty|optimistic|optimistically|panoramic|panoramically|powerful|powerfully|radiant|radiantly|real|realistic|realistically|red|remarkable|remarkably|reverent|reverent|ridiculous|ridiculously|romantic|romantically|sad|sadly|scary|scary|scarily|scorched|scorched|sexy|sexy|shocking|shockingly|shockingly|smashing|smashingly|spectacular|spectacularly|splendid|splendid|splendidly|stunning|stunningly|super|superb|superb|superbly|sweet|terrific|terrific|tremendous|tremendously|uplifting|upliftingly|uptight|uptightly|violent|violently|wonderful|wonderfully|worrisome|worrisomely|wonderful|wonderfully|wondrous|wondrously|youthful|youthful|youthfully|yummy)\\b')\n    \n    # Find all the adverbs in the text\n    matches = pattern.findall(text)\n    \n    # If there are no adverbs, return None\n    if not matches:\n        return None\n    \n    # Sort the adverbs by position in the sentence\n    matches.sort(key=lambda x: text.index(x))\n    \n    # Return the adverbs and their positions in the text\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Extract the first adverb using regular expressions\n    first_adverb = re.search(r'\\b[A-Z]\\w*\\b', text)\n\n    # If there is no adverb, return an empty list\n    if first_adverb is None:\n        return []\n\n    # Extract the adverb and its position from the matched string\n    adverb = first_adverb.group()\n    position = first_adverb.start()\n\n    # Return a list with the adverb and its position\n    return [{'adverb': adverb, 'position': position}]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # define pattern to match adverbs\n    pattern = r'\\b(adverbial|adverbials|adv|adv\\.)\\b'\n\n    # find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # loop through all matches and print the position and the matched adverb\n    for i, match in enumerate(matches):\n        print(f'Position {i+1}: {match}')\n\n    # return the list of matches\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # split the text into words\n    words = text.split()\n    # initialize the count of adverbs and their positions\n    count = 0\n    pos = []\n    \n    # loop through each word in the sentence\n    for i in range(len(words)):\n        # check if the current word is an adverb\n        if re.search(r'^[A-Za-z]+$', words[i]) and re.search(r'(?i)adverb', words[i]):\n            count += 1\n            pos.append(i)\n    \n    # return the adverb and its positions\n    return count, pos"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b|\\b\\w+edly\\b|\\b\\w+ly\\b|\\b\\w+edly\\b|\\b\\w+ly\\b|\\b\\w+edly\\b', text)\n\n    # Find the position of the first adverb in the sentence\n    adverb_position = None\n    for i, word in enumerate(text.split()):\n        if word.lower() in adverbs and adverb_position is None:\n            adverb_position = i\n\n    return adverb_position"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * math.pi * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    positive_count = len(positive_nums) / len(nums)\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the input array to a Python list\n    nums_list = list(nums)\n    \n    # initialize the count of positive numbers to zero\n    pos_count = 0\n    \n    # iterate through the list of numbers\n    for num in nums_list:\n        # check if the number is positive\n        if num > 0:\n            # increment the count of positive numbers\n            pos_count += 1\n    \n    # calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums_list)\n    \n    # return the ration as a float rounded to two decimal places\n    return round(pos_ratio, 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    ratio = positive / len(nums)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to an array of integers\n    int_array = array('i', nums)\n\n    # Initialize counters\n    pos_count = 0\n    neg_count = 0\n\n    # Iterate through the array\n    for num in int_array:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    # Calculate the ration\n    pos_ratio = pos_count / len(int_array)\n\n    # Return the ration\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_sum = 0\n    for num in nums:\n        if num > 0:\n            positive_sum += 1\n    return positive_sum / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array to store the positive numbers\n    positive = array('i')\n    # Iterate over the array and add the positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n    # Calculate the ration of positive numbers\n    positive_count = len(positive) / len(nums)\n    # Return the ration of positive numbers\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Initialize an empty array to store the positive numbers\n    pos_nums = []\n\n    # Loop through the array and check if each number is positive\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n\n    # Calculate the ration of positive numbers by dividing the length of the positive array by the length of the array\n    pos_len = len(pos_nums)\n    total_len = len(nums)\n    pos_ratio = pos_len / total_len\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(arr) * 100"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    # Initialize largest negative number to be the first element of the list\n    largest_num = list1[0]\n\n    # Iterate through the list and update largest negative number if an element is negative\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest_num:\n            largest_num = list1[i]\n\n    # Return the largest negative number\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    \"\"\"\n    max_neg = lst[0]\n    for i in lst:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an argument and finds the largest negative number in the list.\n    '''\n    largest = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j == len(test_list[i]) - 1:\n                test_list[i] = test_list[i][:j]\n                break\n            else:\n                test_list[i] = test_list[i][:j] + (test_list[i][j+1:],)\n                break\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        result.append(tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][:K])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    This function takes a list of tuples as input and trims each tuple by k.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Get the current tuple\n        curr_tuple = test_list[i]\n        # Trim the tuple by k\n        trimmed_tuple = tuple(curr_tuple[j] for j in range(len(curr_tuple)) if j % K!= 0)\n        # Replace the current tuple with the trimmed tuple\n        test_list[i] = trimmed_tuple\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # iterate through the tuple list and trim each tuple by k\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:-K]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Invalid input - tuples should have same length.'\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # iterate through each element of the first tuple and multiply with each element of the second tuple\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    #create a dictionary to store the count of each element in the tuple\n    count_dict = {}\n\n    #loop through each element of the tuple\n    for element in tup:\n        #check if the element is in the list\n        if element in lst:\n            #if it is, increment the count of that element in the dictionary\n            if element in count_dict:\n                count_dict[element] += 1\n            else:\n                count_dict[element] = 1\n\n    #return the count of each element in the dictionary\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return count[elem]"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert the tuple to a list\n    lst = list(tup)\n\n    # convert the list to a dictionary\n    dict_lst = dict(Counter(lst))\n\n    # return the dictionary\n    return dict_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    lst = set(lst)\n    \n    # Count the number of occurrences of each element in the tuple\n    count = Counter(tup)\n    \n    # Print the count of each element in the tuple\n    for i in count:\n        print(i, ':', count[i])"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup) #counter function from collections module to count the occurence of each element in the tuple\n    for key in count_dict:\n        if key in lst:\n            count_dict[key] += 1 #updating the count of the element in the tuple to include the count of the element in the list as well\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = tup.count(item)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # create a dictionary to store the count of each element of the list\n    count_dict = {}\n    for i in lst:\n        count_dict[i] = count_dict.get(i, 0) + 1\n\n    # create a dictionary to store the count of each element of the tuple\n    count_tup_dict = {}\n    for i in tup:\n        count_tup_dict[i] = count_tup_dict.get(i, 0) + 1\n\n    # combine the two dictionaries and return the counts of the elements of both tuples\n    combined_dict = {**count_dict, **count_tup_dict}\n    return Counter(combined_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = Counter(lst)\n    # create a new tuple with the count of each element in the tuple\n    new_tup = tuple(count_dict[x] for x in tup)\n    return new_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count.most_common(len(tup))"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, 16777216, 67108864, 268435456, 1073741824, 4294967296]\n    total_sum = 0\n    \n    for num in perrin_numbers:\n        total_sum += num\n    \n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # initialize a variable to store the sum of perrin numbers\n    perrin_sum = 0\n    \n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the perrin number using the formula (n + i)^2\n        p = (n + i)**2\n        # add the perrin number to the sum\n        perrin_sum += p\n    \n    # return the sum of perrin numbers\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return sum(perrin_numbers)\n\nprint(cal_sum(5)) # Output: 55"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += 1 / (2 * i + 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 3, 10, 28, 62, 126, 252, 504, 1008]\n    total_sum = 0\n    \n    for num in perrin_numbers:\n        if num <= n:\n            total_sum += num\n            \n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # initializing the sum variable\n    sum = 0\n\n    # iterating from 1 to n\n    for i in range(1, n+1):\n\n        # calculating the perrin number\n        perrin = 0\n        temp = i\n        while temp!= 1:\n            if temp % 2 == 0:\n                temp = temp // 2\n                perrin += 1\n            else:\n                temp = temp * 3 + 1\n                perrin += 2\n\n        # adding the perrin number to the sum\n        sum += perrin\n\n    # returning the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0 \n    for i in range(1, n+1): \n        s += i \n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 4, 9, 16, 25, 36, 49, 64, 81]\n    sum_perrin = 0\n    for num in perrin_numbers:\n        sum_perrin += num\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n\n    # Loop through the numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Calculate the perrin number for the current number\n        perrin = i ** 3 - 1\n\n        # Add the perrin number to the total\n        total += perrin\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            perrin_sum += i\n    return perrin_sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes a list of string values and a specified size (l) as input and returns a new list of strings.\n    The specified size is the length of the strings that will be extracted from the original list.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[:l] for x in str]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts the specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_str_list = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_str_list.append(string)\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size as input and returns a new list containing the extracted strings.\n    \"\"\"\n    # Create an empty list to store extracted strings\n    extracted_list = []\n\n    # Loop through the list of strings\n    for string in str_list:\n        # Check if the length of the current string is greater than or equal to the size\n        if len(string) >= size:\n            # If the length of the current string is greater than or equal to the size, append it to the extracted list\n            extracted_list.append(string)\n\n    # Return the extracted list\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a string of specified size from the given list of string values.\n\n    :param str_list: list of strings\n    :param size: size of the extracted string\n    :return: list of extracted strings\n    \"\"\"\n    extracted_str_list = []\n    for str in str_list:\n        if len(str) >= size:\n            extracted_str_list.append(str[:size])\n        else:\n            extracted_str_list.append(str)\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(0, len(l), 1):\n        print(l[i][0:l[i].find(str)])"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces from the text\n    text2 = re.sub('\\s+','', text1)\n    # Remove starting and ending whitespaces\n    text3 = text2.strip()\n    # Return the cleaned text\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    text1 = pattern.sub('', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    text2 = re.sub('\\s+','', text1)\n    # Remove the leading and trailing whitespaces from the string\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Replace all whitespace characters with a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    # remove leading and trailing whitespaces\n    text3 = text2.strip()\n    # return the resulting string\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove all whitespaces\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount: \n        return 0 \n    else: \n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        loss_amount = 0\n    else:\n        loss_amount = sale_amount - actual_cost\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (actual_cost/sale_amount)*100\n    if loss_percentage > 5:\n        loss_amount = (actual_cost*0.05)\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    \n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount >= actual_cost: \n        return 0 \n    else: \n        return actual_cost - sale_amount "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            evenFactors.append(i)\n    return sum(evenFactors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n) : \n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenFactors = [2]  # Initialize a list of even factors to 2\n    \n    for i in range(3, int(math.sqrt(n))+1, 2) : # Loop through odd factors of n\n        if n%i == 0 : \n            evenFactors.append(i)\n            while n%i == 0 : \n                n = n/i\n    \n    # Check if the remaining number is even\n    if n%2 == 0 : \n        evenFactors.append(n)\n    \n    # Return the sum of the even factors\n    return sum(evenFactors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    # base case: if the number is 2 or 4, it has already been added to the sum\n    if n == 2 or n == 4:\n        return n\n    elif n % 2 == 0:\n        return sumofFactors(n/2)\n    else:\n        return sumofFactors(3*n+1)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize sum variable \n    sum = 0\n\n    # iterate through all the integers from 2 to n \n    for i in range(2, n+1): \n        # check if i is even and if it is a factor of n \n        if i % 2 == 0 and n % i == 0: \n            # add i to sum \n            sum += i\n\n    # return the sum of even factors \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of the even factors of n.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            else:\n                sum += i+n//i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b' # matches a word containing 'z' surrounded by word boundaries\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Use regex to match words containing 'z'\n    pattern = r'\\b[a-zA-Z]+\\s[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n\n    # Return the matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Convert the text to lowercase and split it into words\n    words = text.lower().split()\n    \n    # Initialize an empty list to store matches\n    matches = []\n    \n    # Loop through each word in the list\n    for word in words:\n        \n        # Check if the word contains 'z'\n        if 'z' in word:\n            \n            # If it does, add it to the matches list\n            matches.append(word)\n    \n    # Return the list of matches\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use a regular expression to match words containing 'z'\n    pattern = r'\\b[a-zA-Z]+\\b'\n    # Use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Create a regular expression pattern to match a word containing 'z'\n    pattern = r'\\w*z\\w*'\n    \n    # Use the re.search() method to search for matches in the text\n    match = re.search(pattern, text)\n    \n    # If a match is found, return the matched word\n    if match:\n        return match.group()\n    \n    # If no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Define a regular expression pattern that matches words containing 'z'\n    pattern = r'\\w+z\\w+'\n\n    # Use the re.search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If a match is found, return the matched word\n    if match:\n        return match.group()\n\n    # If no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13):\n        if monthnum2 == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return True if days[monthnum2-1]!= 0 else False\n    else:\n        print(\"Invalid month number!\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = str(monthnum2)\n    if len(monthnum) == 2:\n        monthnum = '0' + monthnum\n    if int(monthnum) in [1, 3, 5, 7, 8, 10, 12]:\n        return '31 days'\n    elif int(monthnum) in [4, 6, 9, 11]:\n        return '30 days'\n    else:\n        return '28 or 29 days'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if monthnum2 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if month number is valid\n    if len(monthnum2)!= 2 or monthnum2[0] < '1' or monthnum2[0] > '12' or monthnum2[1] < '0' or monthnum2[1] > '31':\n        return \"Invalid month number.\"\n\n    # check if month number has 31 days\n    days_in_month = {\n        '01': 31,\n        '03': 31,\n        '05': 31,\n        '07': 31,\n        '08': 31,\n        '10': 31,\n        '12': 31\n    }\n\n    if monthnum2[1] in days_in_month.keys():\n        return \"Month has 31 days.\"\n    else:\n        return \"Month does not have 31 days.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum2 in [4,6,9,11]:\n        return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether a given month number (1-12) contains 31 days or not.\n    \n    Parameters:\n    monthnum (int): The month number to check.\n    \n    Returns:\n    bool: True if the given month number contains 31 days, False otherwise.\n    \"\"\"\n    \n    # If the month number is not in the range 1-12, return False\n    if monthnum < 1 or monthnum > 12:\n        return False\n    \n    # Get the number of days in the given month\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # If the month number is 2 and the year is divisible by 4, add 1 to the number of days\n    if monthnum == 2 and (year % 4 == 0):\n        days_in_month[monthnum] += 1\n    \n    # If the month number is 2 and the year is not divisible by 4, but is divisible by 100, add 1 to the number of days\n    elif monthnum == 2 and (year % 400 == 0 or (year % 100!= 0 and year % 4 == 0)):\n        days_in_month[monthnum] += 1\n    \n    # Return True if the month number contains 31 days, False otherwise\n    return days_in_month[monthnum] == 31"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through the list of strings\n    for string in stringlist:\n        # reverse the string using slicing\n        reversed_string = string[::-1]\n        # assign the reversed string to the same index in the list\n        stringlist[stringlist.index(string)] = reversed_string"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the current string\n        stringlist[i] = stringlist[i][::-1]\n    # Return the reversed list of strings\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') # minimum length that can be achieved\n    min_sublist = None # initialize minimum sublist to None\n    for i in range(len(lst)): # iterate through each sublist of the list\n        if len(lst[i]) < min_length: # check if the length of the current sublist is less than the current minimum\n            min_length = len(lst[i]) # update the minimum length if it's smaller\n            min_sublist = lst[i] # update the minimum sublist if it's smaller\n    return min_sublist # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = [sublist]\n        elif len(sublist) == min_len:\n            min_lst.append(sublist)\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize min_len to the length of the entire list\n    min_len = len(lst)\n    # Initialize the minimum sublist to be the entire list\n    min_sublist = lst\n    # Loop through the list and update min_len and min_sublist accordingly\n    for i in range(len(lst)):\n        # Find the length of the sublist starting from index i\n        sublist_len = 0\n        for j in range(i, len(lst)):\n            sublist_len += 1\n            if sublist_len > min_len:\n                break\n        # Update min_len and min_sublist if the length of the sublist is smaller\n        if sublist_len < min_len:\n            min_len = sublist_len\n            min_sublist = lst[i:i+sublist_len]\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of sublists as input and returns the sublist with the minimum length.\n    '''\n    min_len = len(lst[0]) # assuming the length of the sublist is same for all sublists\n    min_sublist = lst[0] # assuming the sublist is same for all sublists\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Find the sublist with the minimum length in a given list.\n    \n    Parameters:\n    lst (list): A list of sublists.\n    \n    Returns:\n    The sublist with the minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    # Initialize variables\n    min_len = float('inf')\n    min_sublist = []\n    # Loop through the list\n    for sublist in lst:\n        # Check if the length of the sublist is less than the minimum length\n        if len(sublist) < min_len:\n            # If it is, update the minimum length and minimum sublist\n            min_len = len(sublist)\n            min_sublist = sublist\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of sublists as input and returns the sublist with the minimum length.\n    '''\n\n    # initialize min_len with the length of the first sublist in the list\n    min_len = len(lst[0])\n\n    # loop through the list of sublists and compare their lengths to min_len\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    # create a list to store the sublists with minimum length\n    min_sublists = []\n\n    # loop through the list of sublists and append those with length equal to min_len to min_sublists\n    for sublist in lst:\n        if len(sublist) == min_len:\n            min_sublists.append(sublist)\n\n    # return the sublist with minimum length\n    return min_sublists"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst\n    for sublist in lst:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle.\n    \n    Parameters:\n    l (int): Length of the rectangle.\n    b (int): Height of the rectangle.\n    \n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # define regular expression pattern for uppercase substrings\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    \n    # find all uppercase substrings in the string using re.findall() method\n    uppercase_substrings = re.findall(pattern, string)\n    \n    # iterate over the uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        string = string.replace(substring, '')\n        \n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'\\b[A-Z][a-z]*\\b', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # Use the pattern to find all uppercase substrings in the string\n    matches = re.findall(pattern, str1)\n    # Loop through the matches and replace them with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and returns a new string with all uppercase substrings removed.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    # Use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(string)\n    # Loop through all matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n    # Return the modified string\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    string = re.sub(r'([A-Z])', r'\\1', string)\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Define an empty list to hold the extracted elements\n    result = []\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Extract the first element of the sublist and append it to the result list\n        result.append(sublist[0])\n    # Return the result list containing the extracted elements\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a list where each sublist is replaced by the first element of that sublist.\n    '''\n    res = []\n    for i in lst:\n        if isinstance(i, list):\n            res.append(i[0])\n        else:\n            res.append(i)\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublist_first_elements = []\n    for sublist in lst:\n        sublist_first_elements.append(sublist[0])\n    return sublist_first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        if isinstance(sublist, list):\n            print(sublist[0])\n        else:\n            print(sublist)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            print(' '.join(str(x) for x in list1[j-i:j]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i]!= list1[i-1]:\n            result.append([list1[i]])\n        else:\n            result[-1].append(list1[i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            combinations.append(list1[j:j+i])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # Sort the list in ascending order\n    list1.sort()\n\n    # Initialize variables\n    n = len(list1)\n    result = []\n    temp = []\n\n    # Loop through all possible combinations\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            temp = list1[i-1:j]\n            result.append(temp)\n\n    # Return the list of combinations\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            combinations.append(list1[j:j+i])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()  # Sort the list in ascending order\n    res = []  # Initialize an empty list to store the combinations\n\n    def backtrack(start):\n        if start == len(list1):\n            res.append(list1[:])  # Append a copy of the sorted list to the result list\n            return\n\n        for i in range(start, len(list1)):\n            list1[start], list1[i] = list1[i], list1[start]  # Swap the current element with the next element in the list\n            backtrack(start + 1)  # Recursively call the function with the next element\n            list1[start], list1[i] = list1[i], list1[start]  # Undo the swap\n\n    backtrack(0)  # Call the backtrack function with the starting index of 0\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a list of lists to store all possible combinations\n    all_combinations = []\n\n    # Use two loops to iterate through the list and find all possible combinations\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1) + 1):\n            # Append the combination to the list of combinations\n            all_combinations.append(list1[i:j])\n\n    return all_combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = list(set(list1))  # Remove duplicates from the list\n    n = len(list1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    max_so_far = float('-inf')\n\n    for i in range(len(arr)):\n        if current_product * arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = 1\n\n        max_so_far = max(max_so_far, current_product)\n        max_product = max(max_product, max_so_far)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    current_product = 1\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n            max_ending_here = arr[i]\n        elif current_product > 0:\n            current_product *= arr[i]\n            max_ending_here = max(max_ending_here, current_product)\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            \n    return max_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for num in arr:\n        max_ending_here = max(max_ending_here * num, num)\n        min_ending_here = min(min_ending_here * num, num)\n        \n        max_product = max(max_product, max_ending_here)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here*num)\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        result = max(result, max_ending_here)\n\n    return result\n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    for value in dict.values():\n        if len(set(list(dict.values())))!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    if len(dict) == 0:\n        return False\n\n    first_value = next(iter(dict.values()))\n    for value in dict.values():\n        if value!= first_value:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(x == dict[n] for x in dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_set = set(dict.values()) # Convert all values to a set\n    if len(value_set) == 1: # If all values are same in the set\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = list(dict.values())\n    return all(x == values[0] for x in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = next(iter(dict.values()))\n    for v in dict.values():\n        if v!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if dictionary is empty\n    if len(dict) == 0:\n        print(\"Dictionary is empty\")\n        return\n\n    # Initialize a set to store unique values\n    unique_values = set()\n\n    # Iterate through the dictionary and add unique values to set\n    for value in dict.values():\n        unique_values.add(value)\n\n    # Check if there are more than one unique value in the set\n    if len(unique_values) > 1:\n        print(\"Dictionary contains duplicate values\")\n        return\n\n    # Check if all values in the dictionary are same as the first value in the set\n    if len(unique_values) == 1:\n        if all(x == unique_values.pop() for x in dict.values()):\n            print(\"All values are same\")\n            return\n        else:\n            print(\"Dictionary contains different values\")\n            return\n    else:\n        return"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # Create a new dictionary without empty items\n    dict2 = {k: v for k, v in dict1.items() if v is not None and v!= ''}\n    return dict2"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # create an array to store the products of each increasing subsequence\n    product = [0] * (len(arr) + 1)\n\n    # initialize the product of the entire sequence as 1\n    product[0] = 1\n\n    # loop through the array and calculate the product of each increasing subsequence\n    for i in range(1, len(arr) + 1):\n        for j in range(i):\n            product[i] = max(product[i], product[j] * arr[i - 1])\n\n    return product[len(arr)]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n    else:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n\n        for i in range(1, len(arr)):\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n            max_so_far = max(max_so_far, max_ending_here)\n\n        return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    max_product = float('-inf')\n    curr_product = 1\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_ending_here = max(max_ending_here, curr_product)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)   \n    max_so_far = float('-inf')   \n    max_ending_here = 1   \n    min_ending_here = 1   \n    for i in range(1, n):   \n        if arr[i] > arr[i-1]:   \n            max_ending_here = max(max_ending_here * arr[i], arr[i])   \n            min_ending_here = min(min_ending_here * arr[i], arr[i])   \n        else:   \n            max_ending_here = max(max_ending_here * arr[i], arr[i])   \n            min_ending_here = min(min_ending_here * arr[i], arr[i])   \n        max_so_far = max(max_so_far, max_ending_here)   \n    return max_so_far   \n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    \n    for i in range(1, n):\n        max_so_far = max(max_so_far, arr[i], min_so_far * arr[i])\n        min_so_far = min(min_so_far, arr[i], max_so_far / arr[i])\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subseq = arr[i:j]\n            product = 1\n            for num in subseq:\n                product *= num\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    n = len(arr)\n    max_product = float('-inf')\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                curr_product = arr[i] * arr[j]\n                max_product = max(max_product, curr_product)\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    if not arr:  # if the array is empty\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n    max_product_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], max_ending_here, arr[i])\n        min_ending_here = min(min_ending_here * arr[i], min_ending_here, arr[i])\n        max_product_so_far = max(max_product_so_far, max_ending_here)\n    return max_product_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Create an empty list to store the pairwise sum\n    pairwise_sum = []\n    # Loop through the tuple and add the neighboring elements together\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    # Return the pairwise sum as a list\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # unpacking the tuple\n    a, b = test_tup\n\n    # adding the neighboring elements\n    return a + b"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[1:] + test_tup[:-1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the first and second elements of the tuple\n    first = test_tup[0]\n    second = test_tup[1]\n    \n    # Initialize the sum of the pairwise additions\n    pairwise_sum = 0\n    \n    # Loop through the remaining elements of the tuple\n    for i in range(2, len(test_tup)):\n        # Calculate the pairwise addition of the current element and the previous element\n        pairwise_sum += test_tup[i]\n        \n        # Store the current element as the previous element\n        first = second\n        second = test_tup[i]\n    \n    # Return the final sum of the pairwise additions\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    size = len(test_tup)\n    if size <= 1:\n        return 0\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    # initialize a list to store the pairwise sums\n    pairwise_sum = []\n    # iterate over the tuple and calculate the sum of the neighboring elements\n    for i in range(1, n):\n        pairwise_sum.append(test_tup[i] + test_tup[i-1])\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"The given tuple is too small to perform pairwise addition.\")\n        return None\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        for i in range(1, len(test_tup)-1):\n            test_tup[i] = test_tup[i-1] + test_tup[i]\n        return test_tup[-1] + test_tup[0]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables\n    total_sum = 0\n    \n    # Loop through the tuple and add the neighboring elements\n    for i in range(len(test_tup)-1):\n        total_sum += test_tup[i] + test_tup[i+1]\n    \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    for i in arr:\n        product = (product * i) % n\n        \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as input and returns the product of the array \n    multiplication modulo n.\n    \n    This function assumes that the array contains only integers.\n    '''\n    # Initialize the product to be 1\n    product = 1\n    \n    # Loop through each element of the array\n    for element in arr: \n        # Multiply the current element with the product\n        product *= element\n        \n        # Find the remainder of the product divided by n\n        remainder = product % n\n        \n        # If the remainder is not zero, then the product cannot be divided by n\n        # so we break out of the loop\n        if remainder!= 0: \n            break\n            \n    # Return the product modulo n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in two arguments: the array and the modulo value n.\n    The function multiplies all the elements of the array and returns the remainder modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product*i) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in two arguments:\n    - arr: an array of integers\n    - n: an integer representing the modulo value\n\n    This function finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n):\n        if l[i]!= l[i+1] and i < n-1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l) \n    if n==0: \n        return False\n    for i in range(n-1): \n        if l[i] == l[i+1]+1: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: #if the list has less than two elements, it cannot be a consecutive number\n        return False\n    elif l[0] == l[1]: #if the first two elements are the same, it cannot be a consecutive number\n        return False\n    else: #if the list is at least two elements long, check if it contains consecutive numbers\n        for i in range(len(l)-1): #loop through the list starting from the second element\n            if l[i] + 1!= l[i+1]: #if the difference between the current element and the next element is not 1, the list cannot be consecutive\n                return False\n    return True #if the loop completes without returning False, the list is consecutive"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n    It returns True if the list contains consecutive numbers, otherwise it returns False.\n    '''\n    \n    # Initialize variables\n    count = 0\n    prev = -1\n    \n    # Loop through the list\n    for i in l:\n        \n        # Check if the current number is consecutive with the previous number\n        if i == prev + 1:\n            count += 1\n            prev = i\n        else:\n            # Reset the count if the current number is not consecutive with the previous number\n            count = 0\n            prev = i\n            \n        # If the count reaches the length of the list, return True\n        if count == len(l):\n            return True\n    \n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            print(l[i], l[i+1], \"are consecutive numbers.\")\n        else: \n            print(l[i], l[i+1], \"are not consecutive numbers.\")\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n    A number is said to be consecutive if the difference between any two adjacent numbers in the list is equal. \n    '''\n    \n    if len(l) <= 1:\n        return \"The list should have at least two numbers to check for consecutive numbers.\"\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return f\"The list does not contain consecutive numbers. The difference between {l[i]} and {l[i+1]} is {l[i] + 1 - l[i+1]}.\"\n    \n    return \"The list contains consecutive numbers.\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # check for consecutive numbers\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n\n    # if no consecutive numbers found, return True\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n\n    for i in test_list1:\n        if i in test_list2 and i not in intersection_list:\n            intersection_list.append(i)\n\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create an empty set to store the unique elements of the first list\n    unique_set1 = set()\n\n    # Loop through the first list and add each element to the set\n    for item in test_list1:\n        unique_set1.add(item)\n\n    # Create an empty set to store the common elements of the first and second list\n    common_set = set()\n\n    # Loop through the second list and check if each element is in the set of unique elements of the first list\n    for item in test_list2:\n        if item in unique_set1:\n            common_set.add(item)\n\n    # Return the common set as a tuple\n    return tuple(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    intersection = list(set1.intersection(set2))\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the two lists into sets to remove duplicates and maintain their order\n    set_1 = set(test_list1)\n    set_2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set_1.intersection(set_2)\n\n    # Convert the intersection set back to a list and sort it\n    result = list(intersection)\n    result.sort()\n\n    # Return the sorted list of tuples\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Creating a set to store unique elements from both lists\n    unique_set = set(test_list1 + test_list2)\n    # Initializing a set to store the intersection of unique elements from both lists\n    intersection_set = set()\n    # Looping through the unique elements from both lists\n    for element in unique_set:\n        # Checking if the element is present in both lists\n        if element in test_list1 and element in test_list2:\n            # Adding the element to the intersection set if it is present in both lists\n            intersection_set.add(element)\n    # Returning the intersection set of unique elements from both lists\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty list to store the common elements in both lists\n    common_elements = []\n    # Loop through each element in the first list\n    for element in test_list1:\n        # Check if the element exists in the second list\n        if element in test_list2:\n            # If it does, add it to the common_elements list\n            common_elements.append(element)\n        # If the element does not exist in the second list, remove it from the first list to avoid duplicates\n        else:\n            test_list1.remove(element)\n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the unique elements of the first list\n    unique_set1 = set()\n    \n    # Add all the elements of the first list to the unique set\n    for element in test_list1:\n        unique_set1.add(element)\n    \n    # Initialize an empty set to store the unique elements of the second list\n    unique_set2 = set()\n    \n    # Add all the elements of the second list to the unique set\n    for element in test_list2:\n        unique_set2.add(element)\n    \n    # Find the intersection of the two sets\n    intersection = unique_set1.intersection(unique_set2)\n    \n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Sort the first tuple list\n    test_list1.sort()\n\n    # Initialize an empty list to store the intersection\n    intersection = []\n\n    # Iterate through the second tuple list\n    for element in test_list2:\n        # If the element exists in the first tuple list, add it to the intersection list\n        if element in test_list1:\n            intersection.append(element)\n\n    # Return the sorted intersection list\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a set of elements from both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of elements in the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # initialize an empty list to store the unique elements of the first list\n    unique_list1 = []\n    # loop through the first list\n    for element in test_list1:\n        # check if the element is already in the unique list\n        if element not in unique_list1:\n            # add the element to the unique list\n            unique_list1.append(element)\n    \n    # initialize an empty list to store the unique elements of the second list\n    unique_list2 = []\n    # loop through the second list\n    for element in test_list2:\n        # check if the element is already in the unique list\n        if element not in unique_list2:\n            # add the element to the unique list\n            unique_list2.append(element)\n    \n    # initialize an empty list to store the intersection of the unique lists\n    intersection_list = []\n    # loop through the unique lists and append the intersection to the intersection list\n    for element in unique_list1:\n        if element in unique_list2 and element not in intersection_list:\n            intersection_list.append(element)\n    \n    # return the intersection list\n    return intersection_list"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Check if the current character is the character to be replaced\n        if str1[i] == ch:\n            # Replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with all occurrences of ch replaced with newch\n    newstr = str1.replace(ch, newch)\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes three arguments:\n    - str1: The string that we want to replace characters in.\n    - ch: The character that we want to replace.\n    - newch: The character that we want to replace the old character with.\n    \n    The function returns the new string with the specified character replaced with the new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character `ch` in a string `str1` with `newch`.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object to count the frequency of each value in the dictionary\n    count_dict = Counter(dict1.values())\n\n    # sort the Counter object based on the values in descending order\n    sorted_dict = count_dict.most_common()\n\n    # create a new dictionary with keys as the values in the sorted Counter object and values as the keys in the original dictionary\n    sorted_dict_reverse = dict(zip(sorted_dict, dict1.keys()))\n\n    return sorted_dict_reverse"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # sort the Counter object by values in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by value in descending order\n    sorted_counter = counter.most_common()\n    sorted_counter.sort(key=lambda x: x[1], reverse=True)\n    # Convert the sorted Counter object back to a dictionary\n    result = dict(sorted_counter)\n    return result"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        smallest = nums[0]\n        largest = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < smallest:\n                smallest = nums[i]\n            elif nums[i] > largest:\n                largest = nums[i]\n        return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #sort the array in descending order\n    nums.sort(reverse=True)\n    #return the sum of the first and last element\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums[0], nums[1])\n    min_val = min(nums[0], nums[1], nums[2])\n    max_val = max(nums[0], nums[1], nums[2])\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sorting the array in descending order\n    nums.sort(reverse=True)\n    # finding the sum of the first and last element\n    first_sum = nums[0] + nums[-1]\n    # finding the sum of the largest and smallest element\n    sum_largest_smallest = nums[0] + nums[-1]\n    # returning the sum\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest values.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    This function takes a list of integers as an input and returns the sum of the largest and smallest values in the array.\n    '''\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    # Find the sum of the largest and smallest value\n    return nums[0] + nums[-1]"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if all characters in the given string are lowercase.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case\n    lower_string = string.lower()\n    # Return the lower case string\n    return lower_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+')\n    return lowercase_pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]\\w+\\b'\n    \n    # Use the pattern to find all lowercase substrings in the string\n    substrings = re.findall(pattern, str1)\n    \n    # Loop through each substring and replace it with an empty string\n    for substr in substrings:\n        str1 = str1.replace(substr, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]\\w+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    # Find all lowercase substrings in the string\n    lowercase_substrings = re.findall('[a-z]+', string)\n    # Remove all lowercase substrings from the string\n    for substring in lowercase_substrings:\n        string = string.replace(substring, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Use the search() method to search for substrings matching the pattern in the string\n    substrings = pattern.findall(str1)\n    # Iterate over each substring and remove it from the string using replace()\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'(?i)[a-z]', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Use the re.sub() function to replace all lowercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to an integer\n    first_int = int(first_char)\n    # return the first integer\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_num = n // 10\n    return first_num"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns the first digit of that number.\n    \"\"\"\n    # Extract the first digit of the number\n    first_digit = str(n)[0]\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10 ** (len(str(n)) - 1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    str_num = str(n)\n    # get the first character of the string\n    first_char = str_num[0]\n    # convert the first character to an integer\n    first_int = int(first_char)\n    # return the first integer\n    return first_int"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2 == 1: \n            odd_list.append(num) \n    return odd_list "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n\n    # Loop through the list and add odd numbers to the odd_list\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1, n+1)]\n    sums = [sum(cubes[:i]) for i in range(1, n+1)]\n    return sum(sums) - sum(cubes)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    def cube_sum(n):\n        \"\"\"\n        Calculate the sum of the first n cubes.\n        \"\"\"\n        return n * (n + 1) * (2 * n + 1) / 6\n\n    def natural_sum(n):\n        \"\"\"\n        Calculate the sum of the first n natural numbers.\n        \"\"\"\n        return n * (n + 1) / 2\n\n    return cube_sum(n) - natural_sum(n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(n):\n        sum_cubes += i**3\n    sum_natural = 0\n    for j in range(n):\n        sum_natural += j + 1\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # calculate the sum of cubes of first n natural numbers\n    for i in range(n):\n        sum_cubes += i**3\n    \n    # calculate the sum of first n natural numbers\n    for i in range(n):\n        sum_natural += i\n    \n    # find the difference between the sum of cubes and sum of natural numbers\n    diff = sum_cubes - sum_natural\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n    natural_sum = sum(range(1, n+1))\n    return abs(cubes_sum - natural_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_nums += i\n    difference = sum_of_cubes - sum_of_nums\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    This function takes an integer argument 'n' and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Define a function to calculate the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n):\n        return n*n*n*(n+1)//6\n    \n    # Calculate the sum of cubes of the first n natural numbers and store it in the variable'sum_of_cubes'\n    sum_of_cubes = sum_of_cubes(n)\n    \n    # Calculate the sum of the first n natural numbers and store it in the variable'sum_of_natural_numbers'\n    sum_of_natural_numbers = sum(range(1,n+1))\n    \n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n\n    difference = abs(sum_of_cubes - sum_of_natural_numbers)\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes a list of integers A and a number N as inputs.\n    It then returns the count of the number of pairs whose xor value is odd.\n    '''\n\n    # XOR operation to get the xor value of each pair of elements\n    xor_value = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor_value ^= A[i] ^ A[j]\n    \n    # Count the number of odd xor values\n    count = 0\n    for i in range(1, (1<<len(A))):\n        if (i & (1<<len(A)-1)) == 0:\n            count += 1\n    \n    # Return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes an array A of integers and an integer N as input\n    and returns the count of odd pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize variables to keep track of the number of odd pairs and their count\n    count = 0\n    odd_pairs = []\n\n    # Loop through the list and compare each element with all the other elements\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                # If the xor value is odd, add the pair to the odd_pairs list and increment the count\n                odd_pairs.append((A[i], A[j]))\n                count += 1\n\n    return count, odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Use a loop to iterate over each character in the string\n    for i in range(len(string)):\n        # If the character is uppercase, convert it to lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # If the character is lowercase, convert it to uppercase\n        elif string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # If the character is neither uppercase nor lowercase, leave it as is\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isupper() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(10):\n        diff = n1 % 10 - n2 % 10\n        sum += diff\n        n1 //= 10\n        n2 //= 10\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings to get individual digits\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Initialize the sum of the per-digit differences to 0\n    sum_diff = 0\n\n    # Loop through each digit in both strings\n    for i in range(len(s1)):\n        # If the digits are different, add the difference to the sum\n        if s1[i]!= s2[i]:\n            sum_diff += abs(int(s1[i]) - int(s2[i]))\n\n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum_diff = 0\n    for i in range(10):\n        diff = abs(n1 - n2) % 10\n        sum_diff += diff * diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the input numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    # initialize the sum of differences to 0\n    diff_sum = 0\n    # loop through each digit in the strings\n    for i in range(len(s1)):\n        # subtract the corresponding digits from the strings and add the result to the diff_sum\n        diff_sum += int(s1[i]) - int(s2[i])\n    # return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert both integers to lists of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n\n    # compare the lengths of the two lists\n    if len(n1_list)!= len(n2_list):\n        return \"Error: Lists are not of the same length.\"\n\n    # initialize the sum of differences to zero\n    sum_diff = 0\n\n    # loop over each digit in the two lists\n    for i in range(len(n1_list)):\n        diff = abs(int(n1_list[i]) - int(n2_list[i]))\n        sum_diff += diff\n\n    # return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert n1 and n2 to lists of digits\n    d1 = [int(d) for d in str(n1)]\n    d2 = [int(d) for d in str(n2)]\n\n    # Calculate the sum of the per-digit differences\n    distance = 0\n    for i in range(len(d1)):\n        distance += abs(d1[i] - d2[i])\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input integers to strings to use string math functions\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # Calculate the sum of the absolute differences between the two strings\n    difference_sum = 0\n    for digit1, digit2 in zip(s1, s2):\n        difference_sum += abs(int(digit1) - int(digit2))\n        \n    return difference_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the digits of both integers\n    digits_n1 = list(map(int, list(str(n1))))\n    digits_n2 = list(map(int, list(str(n2))))\n\n    # Find the per-digit difference between the two numbers\n    per_digit_diff = []\n    for i in range(max(len(digits_n1), len(digits_n2))):\n        if i < len(digits_n1):\n            per_digit_diff.append(abs(digits_n1[i] - digits_n2[i]))\n        else:\n            per_digit_diff.append(abs(digits_n2[i] - 0))\n    return sum(per_digit_diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    difference = 0\n    \n    # loop through each digit in n1 and n2\n    for digit1, digit2 in zip(str(n1), str(n2)):\n        # compute the per-digit difference and add to the running total\n        difference += abs(int(digit1) - int(digit2))\n    \n    # return the total difference\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # Initialize the sum variable\n    diff_sum = 0\n    \n    # Loop through the digits of the two numbers\n    for i in range(len(s1)):\n        # Compute the difference between the corresponding digits of the two numbers\n        diff = abs(int(s1[i]) - int(s2[i]))\n        \n        # Add the difference to the sum variable\n        diff_sum += diff\n        \n    # Return the sum of the differences\n    return diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n            \n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    :param a: the input list\n    :param size: the size of the sublist to consider\n    :return: the sum of the largest contiguous sublist in the input list\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size, len(a)):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables to store the sum of the current subarray and the maximum sum so far\n    current_sum = max_sum = a[0]\n    for i in range(1, size):\n        # If the current element is negative, add it to the current sum and reset the current sum\n        if a[i] < 0:\n            current_sum += a[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        # If the current element is positive, add it to the current sum\n        else:\n            current_sum += a[i]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    Args:\n        a (list): List of integers.\n        size (int): Size of the sublist.\n\n    Returns:\n        int: Sum of the largest contiguous sublist.\n    \"\"\"\n\n    if len(a) < size:\n        return None\n\n    max_sum = float('-inf')\n    start = 0\n    end = 0\n    for i in range(len(a) - size + 1):\n        sum_of_sublist = sum(a[start:end + 1])\n        if sum_of_sublist > max_sum:\n            max_sum = sum_of_sublist\n        if sum_of_sublist < 0:\n            start = end + 1\n        end += 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n        elif current_sum < 0:\n            current_sum = 0\n\n    return a[start:start+size], max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Using set() function to remove duplicates from both tuples\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n\n    # Adding the elements from both tuples to a new set\n    union_set = unique_tup1.union(unique_tup2)\n\n    # Using sorted() function to sort the elements of the new set in ascending order\n    sorted_union = sorted(union_set)\n\n    # Printing the sorted union of elements\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # first, convert the tuples to sets to remove duplicates\n    unique_set1 = set(test_tup1)\n    unique_set2 = set(test_tup2)\n    \n    # then, combine the sets to get the union of the elements\n    union_set = unique_set1 | unique_set2\n    \n    # convert the set back to a list and sort it\n    sorted_list = sorted(list(union_set))\n    \n    # print the result\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set() to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the union of the sets\n    union = set1.union(set2)\n    # Convert the union to a list and sort it\n    union_list = sorted(list(union))\n    # Print the union list\n    print(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two given tuples\n    union_set = set(test_tup1 + test_tup2)\n    \n    # Sort the union set and print it\n    union_list = sorted(union_set)\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert tuples to lists and remove duplicates\n    list1 = list(set(test_tup1))\n    list2 = list(set(test_tup2))\n    # find the union of the two lists\n    union_list = list1 + list2\n    # sort the union list and return it\n    return sorted(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for i in test_tup1:\n        if i not in union and i not in test_tup2:\n            union.append(i)\n    for i in test_tup2:\n        if i not in union and i not in test_tup1:\n            union.append(i)\n    return sorted(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two tuples\n    union_list = list(set(test_tup1) | set(test_tup2))\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Output the union list\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set to a list and sort it in ascending order\n    sorted_union = sorted(list(union_set))\n\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples\n    union_tup = tuple(set(test_tup1).union(set(test_tup2)))\n\n    # Sort the union tuple in ascending order\n    sorted_union = sorted(union_tup)\n\n    # Output the sorted union tuple\n    print(\"Union of the elements in the tuples:\", sorted_union)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    \n    # output the sorted list\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        current_length += 1\n        if i > 0 and lst[i] == lst[i-1]:\n            current_length -= 1\n        max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(lst)):\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n        elif i!= len(lst) - 1 and lst[i]!= lst[i+1]:\n            current_length = 0\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    max_length = 0\n\n    # Loop through each list in the list\n    for sublist in lst:\n\n        # Initialize variables\n        current_length = 0\n\n        # Loop through each element in the sublist\n        for element in sublist:\n\n            # Increment the length of the current sublist\n            current_length += 1\n\n            # If the current length is greater than the maximum length, update the maximum length\n            if current_length > max_length:\n                max_length = current_length\n\n    # Return the maximum length of any sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # initialize a variable to store the length of the longest sublist\n    max_len = 0\n    \n    # loop through each element in the list\n    for i in range(len(lst)):\n        \n        # create a new list containing only the current element and the next element\n        sublist = lst[i:i+2]\n        \n        # find the length of the sublist using the built-in len function\n        length = len(sublist)\n        \n        # if the length of the sublist is greater than the current maximum length, update max_len\n        if length > max_len:\n            max_len = length\n    \n    # return the maximum length of the sublists\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if max_length < len(sublist):\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        temp_max = 0\n        for j in range(i, len(lst)):\n            temp_len = j - i + 1\n            if temp_len > temp_max:\n                temp_max = temp_len\n        max_len = max(max_len, temp_max)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:  \n        return 0  \n    elif len(lst) == 1:  \n        return 1  \n    else:  \n        max_length = 1  \n        for i in range(1, len(lst)):  \n            max_length = max(max_length, Find_Max_Length(lst[:i]+lst[i+1:]))  \n        return max_length  \n    \n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize variables\n    max_length = 0\n    current_length = 0\n\n    # loop through the list\n    for i in range(len(lst)):\n        # if the element is not in the sublist, add 1 to the current_length\n        if i == 0 or lst[i]!= lst[i-1]:\n            current_length += 1\n            # if the current_length is longer than the maximum, update max_length\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            # if the element is in the sublist, reset the current_length\n            current_length = 1\n\n    # return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        for j in range(i+1, len(lst)):\n            sublist += lst[j]\n            max_length = max(max_length, len(sublist))\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"') # match any double-quoted string\n    matches = re.findall(pattern, text) # find all matches using the pattern\n    return [match[1:-1] for match in matches] # remove quotes and return the values as a list"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and returns a list of values extracted from it\n    using regular expressions.\n    '''\n    pattern = r'\"([^\"]*)\"'  # extract value between double quotes\n    matches = re.findall(pattern, text)  # find all matches of pattern in text\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    pattern = r'(?<=\\\")(.*?)(?=\\\")'  # regex pattern to match values between quotes\n\n    match = re.findall(pattern, text)  # find all occurrences of pattern in text\n\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\')\"([^\\\"]*)\"\\s'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    :param text: The string from which to extract values.\n    :return: A list of strings representing the extracted values.\n    \"\"\"\n    pattern = r\"(?<=')(?:[^']|\\\\')*(?:')(?=')\"\n    matches = re.finditer(pattern, text)\n    return [match.group() for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    # Define the regular expression pattern to extract the value between quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the re.finditer() method to find all the matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the extracted values\n    values = []\n\n    # Loop through all the matches and extract the value between the quotation marks\n    for match in matches:\n        value = match.group(1)\n        values.append(value)\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:[^\"\\\\]|\\\\.)*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    # create a dictionary to store the counts of each element in the array\n    count_dict = {}\n    for i in range(n):\n        count_dict[arr[i]] = count_dict.get(arr[i], 0) + 1\n    \n    # initialize a count variable to store the number of pairs\n    count = 0\n    \n    # loop through the dictionary and count the number of pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            if i!= j and arr[i]!= arr[j]:\n                count += count_dict[arr[i]] * count_dict[arr[j]]\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Split the string into a list of characters\n    characters = list(word) \n    return characters "
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum = 0\n    \n    # Convert the number to a string and iterate over each digit\n    for digit in str(n):\n        # Convert the current digit to an integer and add it to the sum\n        sum += int(digit)\n    \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate over its digits\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(n)\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Loop through each digit in the number\n    while n > 0:\n        # Get the rightmost digit and add it to the total\n        total += n % 10\n        \n        # Remove the rightmost digit from the number\n        n = n // 10\n    \n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize the sum to zero\n    total = 0\n    # Loop through each character in the string\n    for digit in num_str:\n        # Convert the character to an integer\n        digit_int = int(digit)\n        # Add the integer to the sum\n        total += digit_int\n    # Return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty or not\n    if len(list1) == 0:\n        return True\n    \n    # Check if the first element of the list is greater than the second element\n    if list1[0] > list1[1]:\n        return False\n    \n    # Check if the first two elements of the list are greater than each other\n    for i in range(1, len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    # Check if the last two elements of the list are greater than each other\n    for i in range(len(list1)-2, -1, -1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    # check if the list contains only one element\n    if len(list1) == 1:\n        return True\n    # check if the list contains only unique elements\n    if len(list1) == len(set(list1)):\n        return True\n    # check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    elif list1[0] < list1[1]:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist of strings in the list\n    for sublist in list1:\n        # Sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist using the built-in sort function\n        sublist.sort()\n    # Return the sorted list of lists\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(*args):\n    unique_nums = set()\n    for num_list in args:\n        unique_nums.update(num_list)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n            if len(unique_nums) == 2:\n                return unique_nums\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    unique_nums = set(sum(nums, []))\n    \n    # Convert sets back to lists\n    unique_nums = list(unique_nums)\n    \n    # Return the unique numbers in a new list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n\n    # Loop through each list in the input list\n    for lst in nums:\n        # Add each number in the list to the set if it's not already in it\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Return a list of unique numbers\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a list of lists containing numbers.\n\n    Parameters:\n        nums (list[list]): A list of lists containing numbers.\n\n    Returns:\n        list[list]: A new list of lists with duplicate numbers removed.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Iterate over each list in the input list of lists\n    for num_list in nums:\n        # Iterate over each number in the current list\n        for num in num_list:\n            # Add the number to the set if it is not already in it\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Create a new list of lists with unique numbers\n    result = []\n    for num in unique_nums:\n        # Create a new list for each unique number\n        result.append([num])\n\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Use a set to store unique numbers\n    unique_nums = set(list_data)\n    # Calculate the product of unique numbers\n    unique_product = 1\n    for num in unique_nums:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Remove duplicates from the list\n    unique_list = list(set(list_data))\n\n    # Calculate the product of the unique numbers in the list\n    product = 1\n    for num in unique_list:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    unique_prod = 1\n    \n    for num in unique_nums:\n        unique_prod *= num\n        \n    return unique_prod"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    unique_list.sort()\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set to remove duplicates from the list\n    unique_list = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_list:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Remove duplicate values from the list\n    unique_data = list(set(list_data))\n\n    # Calculate the product of the unique values\n    result = 1\n    for num in unique_data:\n        result *= num\n\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2+h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*r + 2*3.14*r*h + 2*3.14*(r*h)**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n\n    Returns:\n    float: surface area of the cylinder.\n    '''\n\n    # Formula for surface area of a cylinder\n    # (2\u03c0r^2 + 2\u03c0rh + 2\u03c0rh^2) / 3\n\n    return (2 * math.pi * r**2 + 2 * math.pi * h + 2 * math.pi * r * h**2) / 3\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area using Heron's formula\n    surface_area = math.pi * r * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * r * h\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * r * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    \n    # Calculate the surface area of the cylinder\n    surface_area = 2*math.pi*r**2 + 2*math.pi*h*r\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    if len(B) == 0:\n        return True\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            j += 1\n            i += 1\n        else:\n            i = i - j + 1\n            j = i + 1\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) < len(B):\n        return False\n\n    for i in range(len(A) - len(B) + 1):\n        if A[i:] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    i = 0\n    j = 0\n    n = len(B)\n    m = len(A)\n    while j < m:\n        if A[j] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n        if i == n:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if A is a sublist of B, False otherwise.\n\n    Parameters:\n    A (list): List which we want to check if it is a sublist of B.\n    B (list): List which we want to check if it contains all elements of A.\n\n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n\n    if len(A) > len(B):\n        return False\n\n    for num in A:\n        if num not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "The function checks if `B` is a sublist of `A` by comparing the elements of `B` with the elements of `A`. If the length of `B` is greater than the length of `A` then the function returns `False`. If the first element of `B` is equal to the first element of `A` and the rest of the elements of `B` are present in `A` then the function returns `True`. If the function has iterated through the entire length of `B` and hasn't found a match, then it returns `False`."
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0 # index of A \n    j = 0 # index of B \n    while j < len(B): \n        if A[i] == B[j]: # if elements match, move both pointers \n            i += 1 \n            j += 1 \n        else: \n            i = i - (j - i) # move pointer of A by the length of the previous sublist \n            j += 1 # move pointer of B by 1 \n    if i == len(A): \n        return True # if i == len(A), then the entire A is a sublist of B \n    else: \n        return False # if i < len(A), then the entire A is not a sublist of B "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    # Function to find last digit in factorial\n    def last_digit(n):\n        # Check if n is less than 10\n        if n < 10:\n            return n\n        # Convert n to a string and get its last digit\n        last_digit_str = str(n)[-1]\n        # Convert last digit string to an integer\n        last_digit_int = int(last_digit_str)\n        # Recursively find last digit in factorial of n/last_digit\n        return last_digit(n//last_digit_int)\n\n    # Find last digit in factorial of n\n    last_digit_factorial = last_digit(n)\n    # Return last digit of factorial\n    return last_digit_factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return str(factorial % 10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    factorial = 1\n    while n > 0: \n        factorial *= n \n        n //= 10\n    return factorial % 10 "
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the number to a string\n    num = str(n)\n\n    # Initialize the result to 0\n    result = 0\n\n    # Loop through the digits of the number\n    for digit in num:\n        # Convert the digit to an integer and add it to the result\n        result += int(digit)\n\n    # Return the last digit of the factorial\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # convert the number to a string to extract the last digit\n    last_digit = str(n)[-1]\n    # convert the last digit to an integer and return it as the result\n    return int(last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    # Convert the number to a string\n    str_n = str(n)\n    \n    # Find the length of the string\n    len_str = len(str_n)\n    \n    # Calculate the last digit using indexing\n    last_digit = int(str_n[len_str-1])\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # get the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # get the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a positive integer as input and returns the last digit in the factorial of the number.\n    '''\n    # initialize factorial variable to 1\n    factorial = 1\n    # find the factorial of the input number\n    for i in range(1, n+1):\n        factorial *= i\n    # extract the last digit of the factorial\n    last_digit = factorial % 10\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize a variable to store the last digit of the factorial\n    last_digit = 0\n\n    # loop through each digit of the factorial\n    for i in range(int(n**0.5)+1):\n\n        # calculate the factorial of the current digit\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n\n        # find the last digit of the current factorial\n        last_digit = int(factorial/j)\n\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to hold the result\n    result = []\n\n    # Initialize a counter to keep track of the current index in each list\n    i = 0\n    j = 0\n    k = 0\n\n    # Loop through each element in each list, interleaving them into the result list\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        i += 1\n        result.append(list2[j])\n        j += 1\n        result.append(list3[k])\n        k += 1\n\n    # If there are any remaining elements in any of the lists, append them to the result list\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n\n    # Return the flattened result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # combine the lists and return the result\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Concatenate all lists into one big list\n    all_lists = list1 + list2 + list3\n    # Iterate over the big list and add every third element to the result list\n    result = []\n    for i in range(0, len(all_lists), 3):\n        result.append(all_lists[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): list of integers to be interleaved\n        list2 (list): list of integers to be interleaved\n        list3 (list): list of integers to be interleaved\n\n    Returns:\n        list: a single list with all elements from the input lists interleaved\n    \"\"\"\n    # Use zip() to combine all three lists into one large list\n    combined_list = list(zip(list1, list2, list3))\n    # Use list comprehension to flatten the combined list\n    flattened_list = [elem for sublist in combined_list for elem in sublist]\n    return flattened_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved list\n    result = []\n    # Loop through each element in each list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    # Return the flattened list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists of equal length and returns a single flat list.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # iterate over each list and append its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = ()\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_tup += (test_tup1[i],)\n    \n    return dissimilar_tup"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n    # Iterate through each element in the first tuple\n    for item1 in test_tup1:\n        # Check if the element exists in the second tuple\n        if item1 not in test_tup2:\n            # If the element does not exist, append it to the dissimilar list\n            dissimilar.append(item1)\n    # Return the dissimilar list\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # If the elements at the current index are different, add them to the list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element in both tuples\n    for element1, element2 in zip(test_tup1, test_tup2):\n        # If the elements are not the same, append them to the list\n        if element1!= element2:\n            dissimilar_list.append(element1)\n    \n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Find the set difference between the two tuples\n    diff = set(test_tup1) - set(test_tup2)\n    \n    # Return the list of dissimilar elements\n    return list(diff)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the set of elements from the two tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Get the common elements from the two sets\n    common_set = set1.intersection(set2)\n    # Get the dissimilar elements by subtracting the common elements from set1 and set2\n    dissimilar_set = set1 - common_set - set2\n    # Convert the set of dissimilar elements to a list and return it\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar = []\n    \n    # Loop over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # If the elements are different, add them to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    \n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes a nested mixed tuple as input and removes uneven elements using the provided function.\n    \"\"\"\n    # Initialize an empty list to store even elements\n    even_list = []\n    # Iterate over the elements of the tuple\n    for element in test_tuple:\n        # Check if the element is even\n        if even_fnc(element):\n            # If the element is even, append it to the even_list\n            even_list.append(element)\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # iterate through the nested tuple\n    for sub_tuple in test_tuple:\n        # iterate through each element in the sub_tuple\n        for element in sub_tuple:\n            # check if the element is even using the given function\n            if even_fnc(element):\n                # if it is, add it to a new list\n                new_list = [element]\n            else:\n                # otherwise, do nothing\n                continue\n        # if the sub_tuple has no even elements, remove it\n        if not new_list:\n            test_tuple.remove(sub_tuple)\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_tuple = []\n    for item in test_tuple: \n        if type(item) == tuple: \n            # If the item is a tuple, recursively call the function \n            filtered_tuple.append(even_ele(item, even_fnc)) \n        elif type(item) == list: \n            # If the item is a list, recursively call the function \n            filtered_tuple.append(even_ele(item, even_fnc)) \n        elif even_fnc(item): \n            # If the item satisfies the condition, append it to the filtered list \n            filtered_tuple.append(item) \n    return filtered_tuple "
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n        else:\n            pass\n    return even_list\n\ndef even_check(num):\n    \"\"\"\n    Check if the given number is even or not.\n    \"\"\"\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_elements.append(even_fnc(i))\n        else:\n            even_elements.append(i)\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_even_elements(inner_tuple):\n        return list(filter(lambda x: x % 2 == 0, inner_tuple))\n    \n    result = []\n    for inner_tuple in test_tuple:\n        if isinstance(inner_tuple, tuple):\n            result.append(tuple(remove_even_elements(inner_tuple)))\n        else:\n            result.append(inner_tuple)\n    \n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def helper(sub_tuple):\n        for sub_sub_tuple in sub_tuple:\n            if isinstance(sub_sub_tuple, tuple):\n                helper(sub_sub_tuple)\n            else:\n                if even_fnc(sub_sub_tuple):\n                    sub_tuple.remove(sub_sub_tuple)\n    \n    helper(test_tuple)\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.append(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            even_list.append(even_list(even_fnc(item)))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple: \n        if isinstance(item, (tuple, list)): \n            even_list += even_ele(item, even_fnc) \n        elif even_fnc(item): \n            even_list.append(item) \n    return even_list\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b*s) + (2*b*s) + (s*(s+1))\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    area_base = b*b\n    \n    # Calculate the area of each square in the pyramid\n    area_squares = []\n    for i in range(1,s+1):\n        area_squares.append(i*i*b)\n    \n    # Calculate the total surface area of the pyramid\n    surface_area = area_base + sum(area_squares)\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = b*s + b*s + b*s + b*s\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    area_base = b * s\n\n    # Calculate the area of the upper half of the pyramid\n    area_upper = (2 * b * s) / 2\n\n    # Calculate the area of the lower half of the pyramid\n    area_lower = (2 * b * s) / 2\n\n    # Calculate the total surface area of the pyramid\n    total_area = area_base + area_upper + area_lower\n\n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate the surface area of the base\n    base_area = (b*b)\n\n    # calculate the surface area of the whole pyramid\n    pyramid_area = ((base_area * 2) + (base_area * 2) + (s*s)) / 6\n\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base of the pyramid\n    area_base = b * s\n    # calculate the area of the top of the pyramid\n    area_top = (s * b) * (3 / 2)\n    # calculate the total area of the pyramid\n    total_area = area_base + area_top\n    # return the total area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Find the area of each triangle formed by the sides of the pyramid\n    area_1 = 0.5 * b * s\n    area_2 = 0.5 * b * b\n\n    # Calculate the surface area of the pyramid using Heron's formula\n    pyramid_area = (area_1 + area_2) / 2\n\n    # Return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = b * s + (b * s)**2 + (b * s)**3 + (b * s)**4 + (b * s)**5\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base\n    base_area = 0.5 * b * b\n    # Calculate the surface area of the top and bottom faces\n    top_area = 1/2 * b * s\n    bottom_area = 1/2 * b * s\n    # Combine the base area and the two top and bottom face areas to get the total surface area of the pyramid\n    total_area = base_area + top_area + bottom_area\n    # Return the surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (6 * b * s) + (2 * b * b) + (2 * s * s)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not any(dict1.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using dynamic programming.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        catalan = [0]*(n+1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, n+1):\n            catalan[i] = (4*catalan[i-1]-catalan[i-2])//(i)\n        return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial(n, r):\n    if r > n - r:\n        r = n - r\n    num = 1\n    den = 1\n    for i in range(r + 1):\n        num *= n - i + r\n        den *= i\n    return num // den\n\ndef catalan_number(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    if n % 2 == 0:\n        return (4 * catalan_number(n // 2) - catalan_number(n // 2 + 1)) / 3\n    else:\n        return (4 * catalan_number(n // 2) + catalan_number(n // 2 + 1)) / 3"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * catalan_number(n/2))\n    else:\n        return (4 * catalan_number(n-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    catalan = [1]\n    for i in range(1, n+1):\n        catalan.append(4*i*(i-1)/((2*i)-1))\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n - 1) + catalan_number(n - 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (4*num**2 - 2*num) / (num-1) + catalan_number(num-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    n = 2**num\n    catalan = 0\n    for i in range(n):\n        catalan += i\n    for i in range(1, n//2 + 1):\n        catalan -= i\n    for i in range(n//2, n):\n        catalan += i\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n < 1:\n        return \"The input number should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += catalan_number(i-1) * catalan_number(n-i)\n        return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n\n    Parameters:\n    text (str): The string to search in.\n\n    Returns:\n    A list of tuples containing the adverb ending with ly and its positions in the string.\n\n    Example:\n    find_adverbs(\"I am going to the store with a big smile.\")\n    Output: [('big', 12), ('smiling', 24)]\n    \"\"\"\n\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b\\w+(?:ing|ed|ing\\b|ed\\b)'\n\n    # Use the re.findall() method to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n\n    # Create a list of tuples containing the adverb ending with ly and its positions in the string\n    result = []\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        result.append((match, start, end))\n\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(ly|ll|lys|lyse|lyssa|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis|lysis"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(a|an|the|some|such|this|these|those|these)\\s*ly\\b'\n\n    # Use the re.finditer() function to search for all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n\n    # Loop through the matches and add their positions to the list\n    for match in matches:\n        adverb_positions.append(match.start())\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    if adverbs:\n        print(\"Adverbs found:\")\n        for i, adverb in enumerate(adverbs, 1):\n            print(f\"{i}. {adverb}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb ending with ly and its positions in the string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w*[ly]\\w*\\b'\n\n    # Find all the occurrences of the pattern in the string\n    matches = re.finditer(pattern, text)\n\n    # Create a list to store the positions of the adverbs ending with \"ly\"\n    adverb_positions = []\n\n    # Iterate over all the matches and add their positions to the list\n    for match in matches:\n        # Add the position of the match to the list\n        adverb_positions.append(match.start())\n\n    # Sort the list of positions in ascending order\n    adverb_positions.sort()\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    adverbs = []\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n\n    while match:\n        adverbs.append(match.start())\n        match = re.search(pattern, text, match.start() + 3)\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b[a-zA-Z]*ly\\b'\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n    # Iterate over the matches and add their positions to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n    # Return the positions of the matches\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with 'ly'\n    pattern = r'\\b[a-z]*ly\\b'\n    # Use re.findall() to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n    # Iterate through each match and append its position to the adverb_positions list\n    for match in matches:\n        start, end = match.span()\n        adverb_positions.append((start, end))\n    # Return the adverb_positions list\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b\\w*[aeiou]\\w*ly\\b'\n\n    # Search for all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Loop through the matches and extract the positions of the first adverb ending with ly\n    for match in matches:\n        start_pos = text.find(match)\n        end_pos = start_pos + len(match)\n        print(f\"Adverb found at positions {start_pos} and {end_pos}\")\n\n    # If no adverb is found, print a message indicating that no adverb was found\n    if not matches:\n        print(\"No adverb found\")"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # initialize an empty min heap to store the n most expensive items\n    heap = []\n    \n    # iterate over the items in descending order of their cost\n    for item in sorted(items, key=lambda x: x[1], reverse=True):\n        # if the heap is full, remove the smallest item from it\n        if len(heap) == n:\n            heapq.heappop(heap)\n        \n        # add the current item to the heap\n        heapq.heappush(heap, item)\n    \n    # return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    heap = []\n    for item in items:\n        # Add the item to the heap if it's greater than the minimum item in the heap\n        if len(heap) < n or item < heap[0]:\n            heapq.heappush(heap, item)\n        # If the heap size is equal to n, compare the item with the minimum item in the heap\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    # Return the n most expensive items from the heap\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    \n    # Iterate through the items in the dataset\n    for item in items:\n        # If the heap is not full, add the current item to it\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # If the heap is full and the current item is cheaper than the top item, replace it\n        elif item < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n    \n    # Return the n most expensive items in the dataset\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # initialize a min-heap with the first n items\n    min_heap = [heapq.heappushpop(min_heap, x) for x in items[:n]]\n\n    # iterate through the remaining items, adding them to the heap\n    for item in items[n:]:\n        if item < min_heap[0]:\n            heapq.heappushpop(min_heap, item)\n\n    # return the n most expensive items\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Initialize a min-heap of the first n items\n    min_heap = [(price, index) for index, price in enumerate(items[:n])]\n    heapq.heapify(min_heap)\n\n    # Iterate over the remaining items and update the min-heap as needed\n    for index, price in enumerate(items[n:], n):\n        if price < min_heap[0][0]:\n            # Replace the smallest item in the heap with the current item\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (price, index))\n        elif price == min_heap[0][0]:\n            # If the current item is the smallest one, add it to the heap\n            heapq.heappush(min_heap, (price, index))\n\n    # Extract the n most expensive items from the heap and return them\n    return [items[index] for price, index in min_heap[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    max_heap = []\n    for item in items:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        else:\n            if item > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, item)\n\n    # Return the items in the min heap\n    return [max_heap[i] for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    min_heap = []\n    # Use a dictionary to keep track of the prices of each item\n    prices = {}\n    # Loop through the items and add them to the min_heap and prices dictionaries\n    for item in items:\n        heapq.heappush(min_heap, (-item['price'], item['name']))\n        prices[item['name']] = item['price']\n        # Remove the cheapest item from the min_heap and update prices dictionary\n        if len(min_heap) > n:\n            price, name = heapq.heappop(min_heap)\n            prices[name] = price\n    # Return the n most expensive items and their prices\n    return sorted(prices.items(), key=lambda x: x[0])[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n to store the n most expensive items\n    min_heap = []\n    # iterate through the items and add them to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # if the size of the heap becomes greater than n, pop the item with the smallest value\n        while len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # return the n most expensive items in descending order\n    return sorted(min_heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    # Return the heap as a list of items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap to store the n most expensive items\n    min_heap = []\n\n    # add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(min_heap, item)\n\n    # add the remaining items to the heap\n    for item in items[n:]:\n        if item < min_heap[0]:\n            # if the item is cheaper than the smallest item in the heap, remove the smallest item from the heap\n            heapq.heappop(min_heap)\n            # add the new item to the heap\n            heapq.heappush(min_heap, item)\n\n    # return the n most expensive items\n    return min_heap[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n < 0 or n >= len(l):\n        return \"Invalid index.\"\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # First, we check if the length of the list is less than the n-th element\n    if len(l) < n:\n        print(\"Error: n is greater than the length of the list.\")\n        return\n    \n    # We create a new list and add the first n-1 elements of the original list to it\n    new_list = l[:n-1]\n    \n    # We add the last element of the original list to the end of the new list\n    new_list.append(l[n-1])\n    \n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n    # Concatenate the two halves and return the result\n    return right + left"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = l[:n]\n    l.append(l.pop(0))\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < len(l):\n        return l[:n] + [l[n]] + l[n+1:]\n    else:\n        return l + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is greater than the nth element\n    if len(l) > n:\n        # check if the nth element is even or odd\n        if n % 2 == 0:\n            # if it's even, add the first half to the end of the list\n            return l[:n] + l[n:]\n        else:\n            # if it's odd, add the first half to the end of the list and the last element to the beginning of the list\n            return l[:n-1] + [l[n]] + l[n+1:]\n    else:\n        # if the length of the list is less than or equal to the nth element, return the original list\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l) or n < 0:\n        return \"Invalid index\"\n    else:\n        new_list = l[n:] + l[:n]\n        return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Find the index of the nth element\n    index = l.index(n)\n\n    # Split the list at the nth element and add the first part to the end\n    return l[:index] + l[index:] + [n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n >= len(l):\n        return l\n    else:\n        l.insert(n, l.pop(0))\n        return split_Arr(l, n+1)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # find the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # calculate the difference between the max and min values\n    diff = max_num - min_num\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val\n"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers and finds the difference between the largest and smallest values in the list.\n    '''\n    if not nums:\n        return 'Error: List is empty.'\n    \n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between the two values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) > 0:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest - smallest\n    else:\n        return None"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return abs(max(nums) - min(nums))"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    \n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize variables\n    start = a\n    end = b\n    square_sum = 0\n\n    # loop through numbers from start to end\n    while start <= end:\n        square_sum += start ** 2\n        start += 1\n\n    # return the square_sum\n    return square_sum"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            squares.append(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a set to store the perfect squares\n    perfect_squares = set()\n    # Loop through the numbers between a and b\n    for num in range(a, b+1):\n        # Check if the square of the current number is within the range of b\n        if num ** 2 <= b:\n            # Add the square of the current number to the set of perfect squares\n            perfect_squares.add(num ** 2)\n    # Return the set of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        for j in range(i):\n            if i*i == j*j:\n                perfect_squares.append(i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers as input and returns a list of perfect squares between them.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            squares.append(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store the perfect squares\n    perfect_squares_list = []\n    \n    # Loop through all numbers between a and b\n    for num in range(a, b+1):\n        # Check if num is a perfect square\n        is_perfect_square = True\n        square = num\n        while square*square <= num:\n            if square*square == num:\n                perfect_squares_list.append(square)\n            else:\n                is_perfect_square = False\n                break\n            square += 1\n        if is_perfect_square:\n            perfect_squares_list.append(num)\n    \n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(a, b+1):\n        square = i*i\n        if square == i*i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function finds all perfect squares between two given numbers.\n    \"\"\"\n    # Create a list to store the perfect squares\n    squares = []\n\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the number is a perfect square\n        square = i*i\n        if square == i:\n            squares.append(square)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2) # calculate the magnitude of the vector\n    theta = cmath.phase(x + y*1j) # calculate the angle of the vector\n    \n    # calculate the rectangular coordinates\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    \n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(rho,theta):\n    '''\n    This function takes in polar coordinates in the form of rho and theta, and returns the equivalent rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    x (float): The radius value of the point.\n    y (float): The angle value of the point.\n\n    Returns:\n    tuple: A tuple containing the x and y values of the point in rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2) # calculate the distance from the origin\n    theta = cmath.phase(y) # calculate the angle in radians\n    x_rect = r * cmath.cos(theta) # calculate the x value\n    y_rect = r * cmath.sin(theta) # calculate the y value\n    return (x_rect.real, x_rect.imag), (y_rect.real, y_rect.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Args:\n        r (float): the length of the radius vector\n        theta (float): the angle of the radius vector\n    \n    Returns:\n        tuple: the x and y coordinates of the rectangular coordinates\n    \n    Examples:\n        polar_rect(3, cmath.pi/4)\n        # Output: (5.0, 5.0)\n    \"\"\"\n    \n    # Convert angle to radians\n    theta = theta * cmath.pi/180\n    \n    # Calculate x and y coordinates of rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Return the tuple of x and y coordinates\n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to rectangular coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n\n    # Return rectangular coordinates\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Converts polar coordinates (rho, theta) to rectangular coordinates.\n\n    Parameters\n    ----------\n    rho : float\n        Radius value in meters.\n    theta : float\n        Angle value in radians.\n\n    Returns\n    -------\n    x : float\n        X-coordinate in meters.\n    y : float\n        Y-coordinate in meters.\n    \"\"\"\n\n    # Convert angle to degrees\n    theta = cmath.phase(theta) * 180.0 / cmath.pi\n\n    # Calculate x and y\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"After swapping:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list has at least two elements\n    if len(newList) < 2: \n        return \"The list should have at least two elements.\"\n    \n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the list is empty\n    if len(newList) == 0:\n        return \"Error: List is empty.\"\n\n    # Check if the list has only one element\n    elif len(newList) == 1:\n        return \"Error: List has only one element.\"\n\n    # Check if the list has more than one element\n    else:\n        # Get the first and last elements\n        first = newList[0]\n        last = newList[-1]\n\n        # Interchange the first and last elements\n        newList[0] = last\n        newList[-1] = first\n\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    # Check if the list is empty\n    if len(newList) == 0:\n        print(\"Error: Empty list\")\n        return\n    \n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Print the updated list\n    print(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[n-1]\n        newList[0] = last\n        newList[n-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    else:\n        print(\"List must have at least two elements to swap.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the list has less than 2 elements\n    if length < 2:\n        return newList\n    # get the indices of the first and last elements\n    index1 = length - 1\n    index2 = 0\n    # swap the first and last elements\n    newList[index1], newList[index2] = newList[index2], newList[index1]\n    # return the modified list\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k): \n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    else:\n        return ((n - k) * binomial_Coeff(n - 1, k - 1) + k * binomial_Coeff(n - 1, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # check if n and k are integers\n    if not isinstance(n,int) or not isinstance(k,int):\n        return \"n and k must be integers\"\n    \n    # check if n is less than or equal to k\n    if n<=k:\n        return \"n must be greater than or equal to k\"\n    \n    # initialize sum variable\n    sum_coeff = 0\n    \n    # loop through all values of k\n    for i in range(k+1):\n        # calculate the binomial coefficient\n        coeff = ((n+1)/(k+i)) * ((n-i)/(k-i))\n        \n        # add the coefficient to the sum\n        sum_coeff += coeff\n    \n    # return the sum of the product of consecutive binomial co-efficients\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): number of elements in the sequence\n    k (int): number of terms in the sequence\n\n    Returns:\n    int: sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    if k > n or k < 0:\n        raise ValueError(\"Invalid input. k must be less than or equal to n and greater than or equal to 0.\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        binomial_coeff = binomial_Coeff(n-1, k)\n        return binomial_coeff + (k * binomial_Coeff(n-1, k-1))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    sum = 0\n    for i in range(1, n+1):\n        if i <= k:\n            sum += (binomial_Coeff(n-1,k-1)*i)/i\n        else:\n            sum += (binomial_Coeff(n-1,k)*i)/i\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    # Calculate the binomial coefficient using the formula: nCr = n! / (r! * (n-r)!)\n    # and use it to calculate the sum of the product of consecutive binomial co-efficients\n    nCr = factorial(n) / (factorial(k) * factorial(n - k))\n    return nCr * (n + 1) // 2"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize variables to store the sum and product of co-efficients\n    sum_prod = 0\n    prod = 1\n    # loop through the first k terms of the series\n    for i in range(k):\n        # calculate the product of the binomial coefficient\n        prod = (n-i)*(n-i+1)/2\n        # add the product to the sum\n        sum_prod += prod\n    # return the sum of the product of consecutive co-efficients\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0\n    else: \n        coeff = 1\n        for i in range(k): \n            coeff *= (n-i)/(i+1) \n        return coeff "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_product_binomial_coeffs(n, k):\n    product_sum = 0\n    for i in range(1, k+1):\n        product_sum += (n+i) * (n+i-1) *... * (n+1) // (1 * 2 *... * i)\n    return product_sum\n\nHere, we use a for loop to iterate through the consecutive integers from 1 to k and calculate the sum of the product of binomial coefficients C(n,i). Finally, we return the sum."
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\D+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Check if the input is a valid IPv4 address\n    if re.match(r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\", ip):\n        # Remove leading zeroes from each octet of the IP address\n        ip = re.sub(r\"^0+|0+$\", \"\", ip)\n        return ip\n    else:\n        return \"Invalid IP address\""
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = re.findall(r'[0-9]+', ip)\n    new_ip = '.'.join(ip_list)\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\.0+', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each octet of the ip address\n    pattern = r'(\\d)\\.\\d\\.\\d\\.\\d'\n    octets = re.findall(pattern, ip)\n    for i in range(len(octets)):\n        octets[i] = octets[i].replace('0', '')\n    # join the octets with dots and return the result\n    result = '.'.join(octets)\n    return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from each octet\n    ip = re.sub(r'([0-9]+)(?:\\.(?:[0-9]+)){3}', r'\\1\\2\\3', ip)\n\n    # Remove leading zeroes from the entire ip address\n    ip = re.sub(r'(?:^0+|^0+\\.)([0-9]+)', r'\\1', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+(\\d|\\D)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s+|^\\s+$', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = None\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = None\n    if even_num is None:\n        print(\"No even numbers found.\")\n        return None\n    if odd_num is None:\n        print(\"No odd numbers found.\")\n        return None\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize even and odd variables with first two elements of the list\n    even = list1[0]\n    odd = list1[1]\n\n    # find the first odd element in the list\n    for i in range(2, len(list1)):\n        if list1[i] % 2!= 0:\n            odd = list1[i]\n            break\n\n    # find the difference of even and odd and return it\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    # Check if the list is empty or not\n    if not lst:\n        return None\n    \n    # Initialize variables to store even and odd numbers\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list\n    for i in lst:\n        # Check if the current number is even or odd\n        if i % 2 == 0:\n            # If even, update even_num variable\n            if even_num is None:\n                even_num = i\n            else:\n                even_num += i\n        else:\n            # If odd, update odd_num variable\n            if odd_num is None:\n                odd_num = i\n            else:\n                odd_num += i\n    \n    # Check if even_num and odd_num are both defined\n    if even_num is None or odd_num is None:\n        return None\n    \n    # Return the difference of the even and odd numbers\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    # Check if the list is empty\n    if not lst:\n        return \"The list is empty.\"\n\n    # Iterate through the list and find the first even and first odd numbers\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = None\n                break\n        elif num % 2!= 0:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = None\n                break\n\n    # Check if the list has only one number\n    if even_num is None and odd_num is None:\n        return \"The list has only one number.\"\n\n    # Calculate the difference of the first even and first odd numbers\n    if even_num is None:\n        diff = abs(lst[0] - odd_num)\n    elif odd_num is None:\n        diff = abs(lst[0] - even_num)\n    else:\n        diff = abs(even_num - odd_num)\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        if count_even == 1 and count_odd == 1:\n            return num - (2 * (list1[0] + list1[1]))\n    return -1"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0][0]\n    odd = [num for num in list1 if num % 2!= 0][0]\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"List should have at least 2 elements\"\n\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            count += 1\n            if count == 1:\n                return num - list1[0]\n        else:\n            count += 1\n            if count == 1:\n                return list1[0] - num\n\n    return \"No even and odd numbers found\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    \n    if even_num is None or odd_num is None:\n        print(\"List does not have even or odd numbers.\")\n        return\n    \n    diff = even_num - odd_num\n    print(\"The difference between the even and odd numbers is:\", diff)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2): \n    # convert binary strings to integers \n    num1 = int(str1,2) \n    num2 = int(str2,2) \n  \n    # find the difference between the two numbers \n    diff = num1 - num2 \n  \n    # initialize the minimum number of swaps required \n    swaps = 0 \n  \n    # while the difference is greater than 0 \n    while diff > 0: \n  \n        # divide the difference by 2 \n        diff //= 2 \n  \n        # increment the number of swaps \n        swaps += 1 \n  \n    # return the number of swaps required \n    return swaps "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # check if both strings are of equal length\n    if len(str1)!= len(str2):\n        return \"Both strings must have the same length\"\n\n    # create a list of integers for each string\n    str1 = [int(x) for x in str1]\n    str2 = [int(x) for x in str2]\n\n    # create a list of tuples containing the elements of the two strings and their indices\n    elements = list(zip(str1, str2))\n\n    # initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # iterate through the list of tuples and check if any swaps can be made\n    for i in range(len(elements)):\n        for j in range(len(elements)):\n            if i!= j:\n                # create two new strings by swapping the elements at indices i and j\n                new_str1 = list(str1)\n                new_str2 = list(str2)\n                new_str1[i], new_str1[j] = new_str1[j], new_str1[i]\n                new_str2[i], new_str2[j] = new_str2[j], new_str2[i]\n\n                # count the number of swaps required to convert the two new strings to the original strings\n                swaps = 0\n                for a, b in zip(new_str1, str1):\n                    if a!= b:\n                        swaps += 1\n                for a, b in zip(new_str2, str2):\n                    if a!= b:\n                        swaps += 1\n\n                # update the minimum number of swaps found so far\n                if swaps < min_swaps:\n                    min_swaps = swaps\n\n    # return the minimum number of swaps found\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the two binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # get the length of each binary number\n    n = len(str1)\n    m = len(str2)\n    \n    # calculate the number of swaps required to convert num1 to num2\n    swaps = n + m - 2\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n, m = len(str1), len(str2)\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    for i in range(n, -1, -1):\n        for j in range(m, -1, -1):\n            if i == n and j == m:\n                dp[i][j] = (str1[i]!= str2[j])\n            else:\n                dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + (str1[i]!= str2[j])\n    return dp[0][0]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Remove leading zeros from both strings\n    str1 = str1.lstrip('0')\n    str2 = str2.lstrip('0')\n\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to keep track of the swaps\n    swaps = 0\n    i = 0\n\n    # While the numbers are not equal, swap their digits and increment the swap count\n    while num1!= num2:\n        if num1 > num2:\n            # Swap the first digit of num1 with the first digit of num2\n            num1 = num1 * 10 + num2 // 10\n            num2 = num2 % 10\n            swaps += 1\n        else:\n            # Swap the first digit of num2 with the first digit of num1\n            num2 = num2 * 10 + num1 // 10\n            num1 = num1 % 10\n            swaps += 1\n\n    # Return the final swap count\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to lists of integers\n    int1 = list(map(int, str1))\n    int2 = list(map(int, str2))\n\n    # Initialize variables to keep track of minimum swaps and count of swaps\n    min_swaps = sys.maxsize\n    swap_count = 0\n\n    # Iterate through each position in both strings\n    for i in range(len(int1)):\n        # If the characters at the current positions are not equal, swap them and update the minimum swaps and swap count\n        if int1[i]!= int2[i]:\n            int1[i], int2[i] = int2[i], int1[i]\n            min_swaps = min(min_swaps, i)\n            swap_count += 1\n\n    # Return the minimum swaps required to convert the two binary numbers\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    # convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize count of swaps\n    swaps = 0\n\n    # iterate through the binary strings and compare each digit\n    for i in range(len(str1)):\n        if num1 & 1!= num2 & 1:\n            # if the digits are different, swap them and increment the count\n            num1 = ((num1 << 1) & 0b11111111111111111111111111111111)\n            num2 = ((num2 << 1) & 0b111111111111111111111111111111111)\n            swaps += 1\n        else:\n            # if the digits are the same, shift the rightmost one to the left and decrement the count\n            num1 = ((num1 >> 1) & 0b111111111111111111111111111111111)\n            num2 = ((num2 >> 1) & 0b111111111111111111111111111111111)\n\n    # return the count of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n    \n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n    \n    # Iterate through all possible swaps\n    for i in range(len(str1)):\n        # Swap the characters of the binary strings\n        str1 = str1[:i] + str2[i] + str1[i+1:]\n        str2 = str2[:i] + str1[i] + str2[i+1:]\n        \n        # Convert the binary strings back to integers\n        int1 = int(str1, 2)\n        int2 = int(str2, 2)\n        \n        # Calculate the number of swaps required to convert int1 to int2\n        swaps = 0\n        while int1!= int2:\n            int1 = int1 ^ int2\n            if int1 < int2:\n                int1 = int1 << 1\n                swaps += 1\n            elif int1 > int2:\n                int2 = int2 << 1\n                swaps += 1\n        \n        # Update the minimum number of swaps if the current swap count is less than the minimum count\n        if swaps < min_swaps:\n            min_swaps = swaps\n    \n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert binary strings to lists\n    list1 = list(str1)\n    list2 = list(str2)\n    # Check if lengths are equal\n    if len(list1)!= len(list2):\n        print(\"Error: Input strings must have equal length.\")\n        return\n    \n    # Initialize variables for swaps and count of swaps\n    swaps = 0\n    count = 0\n    \n    # Iterate through each pair of digits\n    for i in range(len(list1)):\n        # If digits are not equal, swap them\n        if list1[i]!= list2[i]:\n            # Increment count of swaps and swap the digits\n            count += 1\n            list1[i], list2[i] = list2[i], list1[i]\n            swaps += 1\n    \n    # Print the result\n    print(\"Minimum number of swaps: \", swaps)\n    print(\"Number of swaps needed: \", count)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists of binary digits\n    list1 = [int(digit) for digit in str1[::-1]]\n    list2 = [int(digit) for digit in str2[::-1]]\n\n    # Initialize the swaps counter and a flag indicating whether the lists are equal\n    swaps = 0\n    equal = True\n\n    # Iterate over the lists and compare their elements\n    for i in range(len(list1)):\n        if list1[i] > list2[i]:\n            list1[i], list2[i] = list2[i], list1[i]\n            swaps += 1\n        elif list1[i] < list2[i]:\n            list2[i], list1[i] = list1[i], list2[i]\n            swaps += 1\n        else:\n            equal = False\n\n    # If the lists are equal, there were no swaps needed\n    if equal:\n        swaps = 0\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and calculates the size in bytes of each tuple.\n    The function returns a list of sizes in bytes.\n    '''\n    sizes = []\n    for tup in tuple_list:\n        size = sys.getsizeof(tup)\n        sizes.append(size)\n    return sizes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Convert the tuple to bytes using the `memoryview` class\n    byte_array = bytearray(memoryview(tuple_list))\n\n    # Calculate the total size of the tuple in bytes\n    total_size = sum(byte_array[i:i+sys.getsizeof(byte_array[i])] for i in range(len(byte_array)))\n\n    # Return the total size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for tuple in tuple_list:\n        tuple_size += sys.getsizeof(tuple)\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        tuple_size += sys.getsizeof(tuple_list[i])\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.setrecursionlimit(10000)\n\n    def size_helper(obj):\n        if isinstance(obj, tuple):\n            total_size = sys.getsizeof(obj)\n            for item in obj:\n                total_size += size_helper(item)\n            return total_size\n        else:\n            return sys.getsizeof(obj)\n\n    size_list = [size_helper(obj) for obj in tuple_list]\n    return sum(size_list)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Check if the length of both arrays are equal\n    if len(arr1)!= len(arr2):\n        return \"Both arrays must have equal length.\"\n    \n    # Initialize two pointers to traverse the arrays\n    i = 0\n    j = 0\n    \n    # Traverse the arrays until kth element is found\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    # If k is still greater than 0, kth element is not in both arrays\n    if k > 0:\n        return \"kth element is not in both arrays.\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # initializing pointers for both arrays\n    i = j = 0\n    \n    # checking if k is valid or not\n    if k > len(arr1) + len(arr2):\n        return \"Invalid value of k\"\n    \n    # loop through both arrays until kth element is found\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    \n    # if kth element is not found in both arrays, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the number of elements in the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Check if the arrays are of equal size\n    if n1!= n2:\n        raise ValueError(\"Both arrays must be of equal size.\")\n\n    # Find the minimum number of elements to be swapped\n    min_swap = min(n1, n2)\n\n    # Initialize the pointers for the two arrays\n    i = 0\n    j = 0\n\n    # Initialize the counter for the number of elements found\n    count = 0\n\n    # Iterate through the arrays until the kth element is found\n    while count < k - 1:\n        # Swap the elements at the current indices\n        arr1[i], arr1[j] = arr1[j], arr1[i]\n        arr2[i], arr2[j] = arr2[j], arr2[i]\n\n        # Increment the pointers\n        i += 1\n        j += 1\n\n        # Update the count\n        count += 1\n\n        # Check if the minimum number of elements have been swapped\n        if count >= min_swap:\n            # Find the minimum number of elements to be swapped\n            min_swap = min(i, j)\n\n            # Increment the pointers\n            i += 1\n            j += 1\n\n            # Update the count\n            count += 1\n\n    # Return the kth element\n    return arr1[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Check if the arrays are of equal length\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both arrays must have the same length.\")\n    \n    # Find the middle point of the arrays\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    # If the middle points of the arrays are the same, return the middle element\n    if mid1 == mid2:\n        return min(arr1[mid1], arr2[mid2])\n    \n    # If the first array has more elements, search in the first half\n    if len(arr1) > mid1:\n        if k <= len(arr1) - mid1:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1[mid1:], arr2, k - len(arr1) - mid1)\n    \n    # If the second array has more elements, search in the second half\n    elif len(arr2) > mid2:\n        if k <= len(arr2) - mid2:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1, arr2[mid2:], k - len(arr2) - mid2)\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    left = 0\n    right = len(arr1)\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if arr1[mid] == arr2[mid]:\n            left = mid + 1\n        elif arr1[mid] < arr2[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    return arr1[left - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and an integer k as input and returns the kth element\n    from the first sorted array. If k is greater than the length of the second sorted array, the function\n    will return None.\n    \"\"\"\n    if k > len(arr2):\n        return None\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    # Create a new empty array to store the merged arrays\n    merged_arr = []\n\n    # Merge the two arrays one by one\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Add the remaining elements of the first array\n    merged_arr += arr1[i:]\n\n    # Add the remaining elements of the second array\n    merged_arr += arr2[j:]\n\n    # Return the kth element\n    return merged_arr[k-1]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is an Armstrong number, else False.\n    \"\"\"\n    num = n\n    ar_num = 0\n    while num > 0:\n        digit = num % 10\n        ar_num += digit ** 3\n        num //= 10\n    if n == ar_num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Get the number of digits in the number\n    num_of_digits = len(str(number))\n\n    # Initialize the sum of the cubes of each digit in the number\n    sum_of_cubes = 0\n\n    # Loop through each digit in the number and calculate its cube and add it to the sum\n    for digit in str(number):\n        digit_cube = int(digit) ** 3\n        sum_of_cubes += digit_cube\n\n    # Compare the sum with the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Helper function to check if a number is an Armstrong number or not.\n    \"\"\"\n    if num < 10:\n        return False\n    total = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** len(str(num))\n        temp //= 10\n    return num == total\n\ndef armstrong_number(num):\n    \"\"\"\n    Main function to check if a number is an Armstrong number or not.\n    \"\"\"\n    if not isinstance(num, int):\n        return False\n    return is_armstrong(num)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Check if a given number is an Armstrong number or not.\n    \"\"\"\n    num = int(num)\n    temp = num\n    total = 0\n    \n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    \n    return num == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Function to check whether a given number is an Armstrong number or not.\n    \"\"\"\n    num = int(str(n))\n    sum_of_squares = 0\n    temp = num\n\n    while temp > 0:\n        digit = temp % 10\n        sum_of_squares += digit ** 3\n        temp //= 10\n\n    return num == sum_of_squares\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    sum_of_powers = 0\n    num = n\n    while num > 0:\n        digit = num % 10\n        sum_of_powers += digit ** 3\n        num //= 10\n    if n == sum_of_powers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    if n < 10:\n        return False\n    s = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        s += digit ** 3\n        temp //= 10\n    return s == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check if a given number is Armstrong or not.\n    \"\"\"\n    # Convert the given number into a string\n    n = str(n)\n    # Initialize a variable to store the sum of the cubes of digits\n    sum = 0\n    # Loop through each digit of the number\n    for digit in n:\n        # Convert the digit to an integer and cube it\n        cube = int(digit)**3\n        # Add the cube to the sum variable\n        sum += cube\n    # Check if the sum of cubes of digits is equal to the original number\n    return n == str(sum)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(n):\n    return str(n) == str(n)[::-1]\n\ndef armstrong_number(number):\n    if number < 10:\n        return False\n    else:\n        return is_armstrong(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    # Initialize a variable to store the sum of the squares of the digits of the number\n    sum_of_squares = 0\n    \n    # Traverse through each digit of the number and add the square of it to the sum_of_squares\n    for digit in str(number):\n        digit = int(digit)\n        sum_of_squares += digit**3\n    \n    # Return True if the sum_of_squares is equal to the number itself, else return False\n    return sum_of_squares == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total/count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    sum = 0\n    count = 0\n    # loop through n numbers\n    for i in range(1, n+1):\n        # add the number to the sum and increment the count\n        sum += i\n        count += 1\n    # calculate the average\n    average = sum/count\n    # return the sum and average as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = []\n    for i in range(number):\n        num = int(input(\"Enter a natural number: \"))\n        sum_list.append(num)\n    total = sum(sum_list)\n    average = total / number\n    print(\"Sum of the first\", number, \"natural numbers:\", total)\n    print(\"Average of the first\", number, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_ += i\n        count += 1\n    average = sum_/count\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(number):\n        total += i\n        count += 1\n    average = total/count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total_sum = 0\n    count = 0\n\n    for i in range(1, number+1):\n        total_sum += i\n        count += 1\n\n    average = total_sum / count\n\n    return total_sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        total += i\n    average = total / number\n    print(\"Sum of first\", number, \"natural numbers is\", total)\n    print(\"Average of first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    str: \"Even\" if the number is even, \"Odd\" otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether a given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, 'is even.')\n    else:\n        print(n, 'is odd.')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The given number\", n, \"is even.\")\n    else:\n        print(\"The given number\", n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, 'is even.')\n    else:\n        print(n, 'is odd.')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the character with the smallest count\n    smallest_count = min(char_count.values())\n    for char, count in char_count.items():\n        if count == smallest_count:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert the given string to a set to remove duplicate characters\n    set_str1 = set(str1)\n    \n    # iterate over the set and check if there are any duplicate characters\n    for char in set_str1:\n        if set_str1.count(char) > 1:\n            # return the first repeated character\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # loop through each character in the string and update the frequency in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # loop through the dictionary and find the first repeated character\n    for char, count in freq.items():\n        if count > 1:\n            return char\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize variables to store count and character\n    count = 0\n    char = None\n    \n    # Iterate over the string\n    for char in str1:\n        # Check if the current character has been seen before\n        if char in str1 and str1.count(char) > count:\n            # Update count and character\n            count = str1.count(char)\n            first_repeated = char\n    \n    # Return the first repeated character\n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # initialize a dictionary to keep track of the frequency of each character in the string\n    freq = {}\n    # iterate over each character in the string\n    for char in str1:\n        # if the character is not already in the dictionary, add it with a frequency of 1\n        if char not in freq:\n            freq[char] = 1\n        # otherwise, increment the frequency of the character\n        else:\n            freq[char] += 1\n    # iterate over each character in the string again and keep track of the first repeated character\n    for char in str1:\n        # if the character is already in the dictionary and its frequency is greater than 1,\n        # then it is the first repeated character and we return its index\n        if char in freq and freq[char] > 1:\n            return str1.index(char)\n    # if we reach this point, there was no repeated character in the string\n    return -1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # Initialize variables\n    char_count = {}\n    repeated_char = None\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the count dictionary, update the count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the count dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the count dictionary to find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1 and (repeated_char is None or char < repeated_char):\n            repeated_char = char\n    \n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string, if there is any.\n    \"\"\"\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the character with the count of 1 and return it as the first repeated character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    # If no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize variables\n    char_count = {}\n    repeated_char = None\n\n    # Loop through the string\n    for char in str1:\n        # If the character is not already in the count dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the count dictionary, increment its count\n        else:\n            char_count[char] += 1\n\n    # Loop through the count dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            repeated_char = char\n            break\n\n    return repeated_char"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given number is a lucid number.\n    '''\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = []\n    for i in range(1, n):\n        if i <= len(str(i)):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 0\n    while i <= n:\n        if i % 3 == 0 or i % 5 == 0:\n            ludic.append(i)\n        i += 1\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_lucid(n):\n    '''\n    Determine if a given integer is a lucid number. A lucid number is defined as a number\n    that is a multiple of the digits of its corresponding lucid number.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    for i in range(1, len(digits)+1):\n        lucid_number = int(''.join(map(str, digits[:i])))\n        if n % lucid_number == 0:\n            return True\n    return False"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_nums.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_nums.append(i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            lucid_numbers.append(i)\n        elif i % 2 == 0:\n            lucid_numbers.append(i)\n        elif i % 3 == 0:\n            lucid_numbers.append(i)\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            lucid_nums.append(i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    '''\n    is_lucid = True\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            is_lucid = False\n            break\n    return is_lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i == len(str(i))**2:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string with spaces\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    \n    # Join the reversed words into a string\n    reversed_string =''.join(reversed_words)\n    \n    # Return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words into a string\n    reversed_string =''.join(reversed_words)\n    # return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    words =''.join(words)\n    return words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    words.reverse()   # reverse the order of the words\n    reversed_str =''.join(words)  # join the words back into a string with spaces between them\n    return reversed_str"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string and return it\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Checks if the given integer is a prime number.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # check if the number is 2 or 3\n    if num in [2, 3]:\n        return True\n    \n    # check if the number is divisible by any number from 4 to num-1\n    for i in range(4, num):\n        if num % i == 0:\n            return False\n    \n    # if the number is not divisible by any number from 4 to num-1, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if len(result) > 0:\n        return result[0], 0, len(result[0])\n    else:\n        return None, 0, 0"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            result.append(match.group(0))\n        return result\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][1] + len(matches[0][0])\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use re.search() to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If there's a match, return the subtring, start index, and end index\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        result.append((match, start, end))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0, 1] # initialize list with first two bell numbers\n\n    for i in range(2, n+1):\n        # calculate bell number using formula\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return bell_Number(n-1) + bell_Number(n-2) "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n    elif n == 0:\n        print(0)\n    elif n == 1:\n        print(1)\n    else:\n        bell_numbers = [0, 1]\n        for i in range(2, n):\n            bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n        print(bell_numbers[n-1])"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize variables\n    factorial = 1\n    bell_num = 1\n    # Loop through each term and calculate the corresponding factorial\n    for i in range(1, n+1):\n        factorial *= i\n    # Calculate the bell number using the formula Bell_number = n * factorial\n    bell_num = n * factorial\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        print(a)\n        a, b = b, a+b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = [1, 1]\n    for i in range(2, n):\n        bell_list.append(bell_list[i-1] + bell_list[i-2])\n    return bell_list[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_array = [0]*(n+1)\n    bell_array[0] = 0\n    bell_array[1] = 1\n    for i in range(2, n+1):\n        bell_array[i] = bell_array[i-1] + bell_array[i-2]\n    return bell_array[n]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Check if the length of the list is less than the k'th element\n    if len(list1) < L:\n        return \"The length of the list is less than the k'th element.\"\n    \n    # Create a list to store the elements of the list1 except the k'th element\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    \n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and the index of the kth element to remove and returns a new list with the kth element removed.\n    \"\"\"\n    k = L - 1\n    n = len(list1)\n    list1 = list1[:k] + list1[k+1:]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Return a list with the same elements, but the k'th element removed\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and an integer L as input and returns a list with the same elements,\n    but the k'th element removed.\n    \"\"\"\n    return list1[:L-1] + list1[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    list1.pop(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Convert the list to a set to remove duplicates\n    list1 = set(list1)\n\n    # Sort the set in reverse order\n    sorted_set = sorted(list1, reverse=True)\n\n    # Remove the kth element from the sorted set\n    kth_element = sorted_set[L-1]\n    sorted_set.remove(kth_element)\n\n    # Convert the sorted set back to a list\n    result_list = sorted(list(sorted_set))\n\n    # Return the modified list\n    return result_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a list to store the elements in the list1\n    list_copy = list(list1)\n    # sort the list_copy using the built-in sort method\n    list_copy.sort()\n    # remove the kth element from the list_copy\n    del list_copy[L-1]\n    # create a new list with the same elements as the list1, but without the kth element\n    result_list = [list_copy[i] for i in range(len(list_copy)) if i!= L-1]\n    return result_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the length of the first row of the matrix\n    m = len(test_list)\n    \n    # check if the length of the matrix is valid\n    if m == 0:\n        return None\n    \n    # check if the length of the matrix is valid\n    if N >= m:\n        return None\n    \n    # initialize an empty list to store the max values of each row\n    row_max = []\n    \n    # loop through each row of the matrix\n    for i in range(m):\n        # get the value of then'th column for the current row\n        nth_col = test_list[i][N-1]\n        \n        # check if the nth column value is greater than the current max value\n        if nth_col > row_max[i]:\n            row_max[i] = nth_col\n    \n    # return the max value of the nth column in the first row\n    return row_max[0]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # check if list is empty\n    if not test_list:\n        return None\n\n    # check if N is valid\n    if N < 1 or N > len(test_list[0]):\n        return None\n\n    # initialize max value\n    max_val = test_list[0][N-1]\n\n    # loop through the list of lists\n    for i in range(1, len(test_list)):\n        # check if value is greater than max\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_index = N-1 # index of then'th column\n    max_val = float('-inf') # initialize max value to negative infinity\n    for row in test_list:\n        if row[col_index] > max_val:\n            max_val = row[col_index]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    count = 0\n    for row in test_list:\n        if count == N:\n            if row[N-1] > max_value:\n                max_value = row[N-1]\n        count += 1\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    max_val = 0\n    for i in range(n):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if len(test_list) == 0 or len(test_list[0]) == 0:\n        return None\n    \n    max_val = None\n    for row in test_list:\n        if max_val is None or row[N-1] > max_val:\n            max_val = row[N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    result = []\n    for row in matrix:\n        result.append(max(row[N-1], key=lambda x: row.index(x)))\n    return result"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the maximum value of the Nth column.\n    \"\"\"\n    # Find the maximum value of the Nth column using a list comprehension\n    max_column = max([row[N-1] for row in test_list])\n    return max_column"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Get the number of rows in the matrix\n    num_rows = len(test_list)\n    \n    # Get the number of columns in the matrix\n    num_cols = len(test_list[0])\n    \n    # Check if the N is valid\n    if N < 1 or N > num_cols:\n        return None\n    \n    # Initialize the variable to store the maximum value\n    max_val = None\n    \n    # Loop through all the rows in the matrix\n    for i in range(num_rows):\n        # Get the nth column value\n        nth_col_val = test_list[i][N-1]\n        \n        # If this is the first time we have seen this value, or if the current value is greater, update the max_val\n        if max_val is None or nth_col_val > max_val:\n            max_val = nth_col_val\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize variables\n    max_value = float('-inf')\n    column_index = 0\n    \n    # loop through the matrix and find the maximum value of then'th column\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n            column_index = N\n    \n    # return the max value and the column index\n    return max_value, column_index"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []  \n    for i in lst:  \n        merged.append([i[0], i[1]])  \n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    merged_lst = []\n    for i in range(0, len(lst), 2):\n        merged_lst.append([lst[i][0], lst[i+1][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged_lst = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if i == 0:\n                merged_lst.append([lst[i][j], lst[i][j+1]])\n            else:\n                merged_lst.append([lst[i][j], lst[i-1][j]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the cumulative sum of all the values present in the list.\n    \"\"\"\n    # Initialize variables for the cumulative sum and the index\n    cum_sum = 0\n    index = 0\n\n    # Loop through the tuple list and add up the values present in each tuple\n    for item in test_list:\n        cum_sum += item[index]\n\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for tup in test_list:\n        for val in tup:\n            total += val\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n\n    # loop through the list and add each value to the cumulative sum\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Iterate through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cumulative_sum += val\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        cum_sum += tup[1]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    avg_list = []\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average of the tuple\n        avg = sum(tup) / len(tup)\n        # Append the average to the list of averages\n        avg_list.append(avg)\n    # Return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup)/len(tup))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        average = total / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        average = total / len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        avg_list.append(avg)\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the averages\n    averages = []\n    \n    # loop through each tuple in the input list\n    for tup in nums:\n        # calculate the average of each tuple\n        avg = sum(tup) / len(tup)\n        # append the average to the list of averages\n        averages.append(avg)\n    \n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        tup_sum = sum(tup)\n        tup_len = len(tup)\n        result.append(tup_sum/tup_len)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        count = 0\n        for i in num:\n            sum += i\n            count += 1\n        result.append(sum / count)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths must be equal.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must be of the same length.\"\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] % test_tup2[i])\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    # Perform element-wise modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length!\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must be of the same length.\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current = 0\n    reach = 0\n    while current < steps:\n        if current + 1 == steps or abs(steps - current) <= d:\n            reach += 1\n            current += 1\n            jumps += 1\n        else:\n            current += 1\n            jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Define the starting position and set the target position as (0, 0)\n    pos = (0, 0)\n    target = (d, 0)\n\n    # Initialize the variables for number of jumps and distance traveled\n    jumps = 0\n    distance = 0\n\n    # Loop through the given steps and perform the necessary jumps to reach the target position\n    for i in range(steps):\n        # Check if the current position is (d, 0) and if we need to move to (0, 0)\n        if pos == target:\n            return jumps + 1\n        \n        # Check if we can move to the right\n        if pos[0] < d:\n            # Move to the right and update the position and distance traveled\n            pos = (pos[0] + 1, pos[1])\n            distance += 1\n            jumps += 1\n\n        # Check if we can move downwards\n        elif pos[1] > 0:\n            # Move downwards and update the position and distance traveled\n            pos = (pos[0], pos[1] - 1)\n            distance += 1\n            jumps += 1\n\n        # If we reach here, we cannot move any further, so we return the total number of jumps and the distance traveled\n        else:\n            return jumps + 1, distance\n\n    # If we reach here, the target position was not reached\n    return jumps + 1, distance"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_jumps = 0\n    curr_pos = 0\n    jumps = 0\n    \n    while curr_pos < steps:\n        if curr_pos + d >= steps:\n            return jumps\n        \n        curr_pos += 1\n        jumps += 1\n        \n        if curr_pos == 1:\n            max_jumps = jumps\n    \n    return max_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #initializing variables for count and i \n    count = 0\n    i = 0\n\n    #looping through steps \n    while i < steps: \n        \n        #checking if there is a step to the right \n        if i+d < steps: \n            count += 1\n        \n        #checking if there is a step up \n        if i-d >= 0: \n            count += 1\n        \n        #incrementing i by 1 \n        i += 1\n\n    #returning count \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    curr_pos = 0\n    curr_step = 0\n    \n    while curr_step < steps:\n        if curr_pos[0] >= d or curr_pos[1]!= 0:\n            curr_pos = (curr_pos[0] + 1, curr_pos[1])\n            jumps += 1\n            curr_step += 1\n        else:\n            curr_pos = (curr_pos[0], curr_pos[1] + 1)\n            curr_step += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # The number of jumps required to reach the point (d, 0) is equal to the number of steps taken to reach the point (0, d)\n    # Therefore, we can use a loop to check the number of jumps required\n    count = 0\n    i = 0\n    while i < steps:\n        i += d\n        count += 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    n = len(steps)\n    jumps = 0\n\n    for i in range(n - 1):\n        if steps[i] <= d:\n            steps[i] += 1\n            jumps += 1\n\n    if steps[-1] > d:\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n\n    for i in range(len(steps)):\n        if steps[i] >= d:\n            jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    i = 0\n    j = 0\n    \n    while i < steps:\n        j += 1\n        if j == d:\n            count += 1\n            j = 0\n        i += 1\n        \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0 or d == 0:\n        return 0\n    return 1 + min_Jumps(steps-1, d-1)"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through the two lists and divide each element\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divides two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have equal lengths.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have same length\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by 0\")\n            return None\n        else:\n            result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must be of same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            if nums2[i] == 0:\n                raise ValueError(\"Cannot divide by zero.\")\n            else:\n                result.append(nums1[i] // nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the two lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    # Divide each element of the lists element wise\n    result = [num1/num2 for num1, num2 in zip(nums1, nums2)]\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of both lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length!\")\n        return\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each element of the lists\n    for i in range(len(nums1)):\n        # If the second element is zero, return an error message\n        if nums2[i] == 0:\n            print(\"Second element is zero!\")\n            return\n        \n        # Calculate the result of division\n        result.append(nums1[i] / nums2[i])\n    \n    # Return the list of divided elements\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    for i, num in enumerate(numbers):\n        test_str = test_str.replace(num, '', 1)\n    return test_str + ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_pattern = re.compile(r'\\d')\n    num_list = re.findall(num_pattern, test_str)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_pattern = r'\\d+'\n    num_str = re.findall(num_pattern, test_str)\n    # join the numbers to the end of the string\n    return test_str.replace(num_str[0], '') + num_str[0] + test_str[len(num_str[0]):]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n\n    # Initialize two pointers, one for the starting point of the string and one for the ending point of the string\n    start = 0\n    end = len(char_list) - 1\n\n    # Loop through the list until the starting point is greater than or equal to the ending point\n    while start < end:\n\n        # If the character at the starting point is a number, move it to the end of the string\n        if char_list[start].isdigit():\n            char_list[start], char_list[end] = char_list[end], char_list[start]\n            end -= 1\n        else:\n            start += 1\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    for char in test_str:\n        if char.isalpha():\n            result += char\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n\n    for i in range(len(num_list)):\n        for j in range(len(num_list)-i-1):\n            if int(num_list[j]) > int(num_list[j+1]):\n                num_list[j], num_list[j+1] = num_list[j+1], num_list[j]\n\n    result = \"\".join(num_list)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # convert the input string to a list of characters\n    test_list = list(test_str)\n\n    # initialize two pointers to start and end of the string\n    start = 0\n    end = len(test_list) - 1\n\n    # loop while there are numbers in the string\n    while start < end:\n        # check if the current character is a number\n        if test_list[start].isdigit():\n            # move the number to the end of the string\n            test_list[start], test_list[end] = test_list[end], test_list[start]\n            # move the pointer to the next position\n            start += 1\n            end -= 1\n        # if the current character is not a number, move the pointer to the next position\n        else:\n            start += 1\n\n    # convert the list of characters back to a string\n    return ''.join(test_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        num_list.sort(reverse=True)\n        new_str = ''.join(num_list) + test_str.replace(num_list[0], '').replace(num_list[-1], '')\n    else:\n        new_str = test_str\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    n = len(a)\n    max_size = 0\n    for i in range(1, n):\n        size = 0\n        while i + size < n and a[i] % a[i + size] == 0:\n            size += 1\n        max_size = max(max_size, size)\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in descending order\n    a.sort(reverse=True)\n    # Initialize variables to store the current subset and the maximum subset found so far\n    curr_subset = []\n    max_subset = []\n    # Loop through the sorted list\n    for num in a:\n        # Check if the current number is divisible by the last number in the subset\n        if num % curr_subset[-1] == 0:\n            # If it is, append the current number to the subset and continue\n            curr_subset.append(num)\n        else:\n            # If not, start a new subset with the current number\n            curr_subset = [num]\n            # If the new subset is larger than the current maximum subset, update the maximum subset\n            if len(curr_subset) > len(max_subset):\n                max_subset = curr_subset\n    # Return the length of the maximum subset\n    return len(max_subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def find_largest_subset(arr):\n        '''\n        Helper function to find the largest subset of numbers that are divisible by each other.\n        '''\n        # Create a dictionary to store the count of numbers that are divisible by each other\n        count_dict = {}\n\n        # Initialize the count of numbers that are divisible by each other to zero\n        for num in arr:\n            count_dict[num] = 0\n\n        # Initialize the largest subset to an empty list\n        largest_subset = []\n\n        # Iterate through the list and update the count of numbers that are divisible by each other\n        for num in arr:\n            if num % max(largest_subset) == 0:\n                count_dict[max(largest_subset)] += 1\n            largest_subset.append(num)\n\n        # Find the maximum count in the count_dict\n        max_count = max(count_dict.values())\n\n        # Iterate through the count_dict and find the number(s) that have the maximum count\n        for num, count in count_dict.items():\n            if count == max_count:\n                largest_subset.append(num)\n\n        # Return the length of the largest subset\n        return len(largest_subset)\n\n    # Find the length of the largest subset\n    return find_largest_subset(a)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 1\n            \n    max_size = max(dp)\n    max_count = 1\n    \n    for i in range(n-1, -1, -1):\n        if dp[i] == max_size:\n            max_count += 1\n        else:\n            break\n            \n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers in ascending order\n    a.sort()\n\n    # Initialize the largest subset size as 1\n    largest_size = 1\n\n    # Initialize a variable to keep track of the current subset size\n    current_size = 1\n\n    # Iterate through the list of numbers\n    for i in range(len(a)):\n        # Check if the current number is divisible by the number at the next index\n        if a[i] % a[i+1] == 0:\n            # If it is divisible, add 1 to the current subset size\n            current_size += 1\n            # Update the largest subset size if necessary\n            if current_size > largest_size:\n                largest_size = current_size\n        else:\n            # If it's not divisible, reset the current subset size to 1 and start a new subset\n            current_size = 1\n\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    subset_sizes = []\n    for i in range(len(a)):\n        subset_size = 1\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                subset_size += 1\n        subset_sizes.append(subset_size)\n    return max(subset_sizes)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize the largest subset to be the length of the list\n    largest_subset_size = len(a)\n    # Initialize variables to keep track of the previous number and the index of the current number\n    prev_num = a[0]\n    prev_index = 0\n    # Loop through the list from the second number to the end\n    for i in range(1, len(a)):\n        # If the current number is not divisible by the previous number, move to the next number\n        if a[i] % prev_num!= 0:\n            continue\n        # Update the largest subset size if the current subset is larger\n        current_subset_size = i - prev_index + 1\n        if current_subset_size > largest_subset_size:\n            largest_subset_size = current_subset_size\n        # Move the previous index to the current index\n        prev_index = i\n        # Update the previous number\n        prev_num = a[i]\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables\n    current = 0\n    max_size = 0\n\n    # Loop through the list\n    for i in range(len(a)):\n        # If the current element is divisible by the next element, update the current size\n        if i > 0 and a[i] % a[i-1] == 0:\n            current += 1\n        # If the current element is not divisible by the next element, update the max size and current size to 0\n        else:\n            max_size = max(max_size, current)\n            current = 1\n\n    # Update the max size with the last current value\n    max_size = max(max_size, current)\n\n    # Return the max size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()  # sort the list in ascending order\n    n = len(a)\n    largest_subset_size = 1  # initialize largest subset size as 1\n    prev_num = a[0]  # initialize previous number as first number of the list\n\n    for i in range(1, n):\n        if a[i] % prev_num == 0:  # if current number is divisible by previous number, then add 1 to the largest subset size\n            largest_subset_size += 1\n        else:  # otherwise, reset the largest subset size to 1\n            largest_subset_size = 1\n        prev_num = a[i]  # update previous number to current number\n\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function finds the size of the largest subset of a list of numbers\n    so that every pair is divisible.\n\n    Parameters:\n    a (list): A list of numbers.\n\n    Returns:\n    int: The size of the largest subset of a that meets the condition.\n    \"\"\"\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize the largest subset size to 0\n    largest = 0\n\n    # Iterate through the sorted list\n    for i in range(len(a)):\n        # Find the largest subset that can be formed by excluding the current number\n        j = i + 1\n        while j < len(a) and a[i] % a[j] == 0:\n            j += 1\n        # Update the largest subset size if the new subset is larger\n        if j - i > largest:\n            largest = j - i\n\n    return largest"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    combined_arr = arr1 + arr2\n    # Sort the combined list\n    combined_arr.sort()\n    # Find the midpoint of the sorted list\n    midpoint = n // 2\n    # If n is odd, return the middle element\n    if n % 2 == 1:\n        return combined_arr[midpoint]\n    # If n is even, return the average of the middle two elements\n    else:\n        return (combined_arr[midpoint - 1] + combined_arr[midpoint]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in three parameters:\n    arr1 - a list of integers\n    arr2 - a list of integers\n    n - the size of both lists\n    \n    The function returns a tuple containing the median of arr1 and arr2.\n    \"\"\"\n    # create a copy of arr1 and arr2\n    arr1_copy = arr1.copy()\n    arr2_copy = arr2.copy()\n    \n    # sort both lists\n    arr1_copy.sort()\n    arr2_copy.sort()\n    \n    # find the median\n    if n % 2 == 0:\n        # if the size of the list is even\n        median = (arr1_copy[n//2-1] + arr2_copy[n//2]) / 2\n    else:\n        # if the size of the list is odd\n        median = arr1_copy[n//2]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two lists\n    merged_list = arr1 + arr2\n    # sort the merged list\n    merged_list.sort()\n\n    # calculate the median based on the length of the list\n    if n % 2 == 0:\n        # if the length of the list is even, return the average of the two middle elements\n        return (merged_list[n//2-1] + merged_list[n//2]) / 2\n    else:\n        # if the length of the list is odd, return the middle element\n        return merged_list[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three lists as input, arr1, arr2, and n. \n    It calculates the median of the two lists by sorting them and then finding the middle element.\n    '''\n    # Sort the two lists\n    arr1.sort()\n    arr2.sort()\n\n    # Find the length of the arrays\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    # Calculate the median\n    if (len1 + len2) % 2 == 0:\n        # If the length of the arrays is even, take the average of the middle two elements\n        mid1 = len1 // 2\n        mid2 = len2 // 2\n        median = (arr1[mid1] + arr2[mid2]) / 2\n    else:\n        # If the length of the arrays is odd, take the middle element\n        mid1 = len1 // 2\n        mid2 = len2 // 2\n        median = arr1[mid1]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate both arrays\n    arr = arr1 + arr2\n    \n    # find the median\n    mid = n // 2\n    arr.sort()\n    if n % 2 == 0:\n        return (arr[mid-1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays into a single sorted array\n    merged_arr = merge_sort(arr1 + arr2)\n    \n    # Find the median index based on the length of the array\n    mid = n // 2\n    \n    # If the length of the array is odd, then the median is the middle element\n    if n % 2 == 1:\n        return merged_arr[mid]\n    \n    # If the length of the array is even, then the median is the average of the two middle elements\n    else:\n        return (merged_arr[mid] + merged_arr[mid - 1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists into a single sorted list\n    merged = sorted(arr1 + arr2)\n\n    # Find the middle element of the merged list\n    middle = n // 2\n\n    # If the length of the merged list is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged[middle]\n    # Otherwise, the median is the average of the middle two elements\n    else:\n        return (merged[middle - 1] + merged[middle]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Combine the two arrays and sort them\n    combined_arr = arr1 + arr2\n    combined_arr.sort()\n    \n    # Find the index of the middle element\n    mid_index = n // 2\n    \n    # If the length of the combined array is odd, the middle element is the median\n    if n % 2 == 1:\n        return combined_arr[mid_index]\n    \n    # If the length of the combined array is even, the median is the average of the two middle elements\n    else:\n        return (combined_arr[mid_index-1] + combined_arr[mid_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    merged_list = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_list.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            merged_list.append(arr2[j])\n            j += 1\n        else:\n            merged_list.append(arr1[i])\n            i += 1\n            j += 1\n    merged_list += arr1[i:]\n    merged_list += arr2[j:]\n    # calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        return (merged_list[mid] + merged_list[mid - 1]) / 2\n    else:\n        return merged_list[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged = merge_sort(arr1 + arr2)\n    # Calculate the median\n    median = merged[n-1]\n    return median\n\ndef merge_sort(arr):\n    '''\n    Write a function to sort the given list using merge sort algorithm.\n    '''\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    '''\n    Write a function to merge two sorted lists using merge sort algorithm.\n    '''\n    merged = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n\n    merged += left[i:]\n    merged += right[j:]\n    return merged"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # create an empty list to store the result\n    result = []\n    # loop through each number in the list\n    for num in nums:\n        # compute the nth power of the number\n        nth_power = num ** n\n        # append the nth power to the result list\n        result.append(nth_power)\n    # return the result list\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and an integer n as input.\n    It computes the n-th power of each number in the list and returns a list of the results.\n    \"\"\"\n    results = []\n    for num in nums:\n        results.append(num ** n)\n    return results"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns the uppercase version of the string.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return \"List should have at least two elements\"\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    # Swapping first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    \n    # find the first and last elements of the list\n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    # interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return the new list with the elements interchanged\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    if length > 0:\n        first = newList[0]\n        last = newList[length-1]\n        newList[0] = last\n        newList[length-1] = first\n        print(\"The new list is:\", newList)\n    else:\n        print(\"The list is empty\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n\n    # Swap the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"The new list is:\", newList)\n    else:\n        print(\"The list is too short to swap the elements.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list is of length 0 or 1\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has only one element\n    if length == 1:\n        return newList\n    # Check if the list has two or more elements\n    elif length > 1:\n        # Get the first and last elements of the list\n        first_element = newList[0]\n        last_element = newList[length-1]\n        # Create a new list with the first and last elements swapped\n        newList = [last_element] + newList[:-1]\n        # Return the new list with the swapped elements\n        return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = math.pi * (r**2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = r*math.sin(math.pi/3) # height of the largest triangle\n    return (h*h)/3 # area of the largest triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the radius of the largest triangle that can be inscribed in the semicircle\n    r_max = r / 2\n    \n    # Calculate the area of the largest triangle\n    A = 2 / 3 * math.pi * r_max ** 2\n    \n    # Return the calculated area\n    return A"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return ((3 * r * r) ** 0.5) * (r ** 2)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # Use Heron's formula to find the area of the largest triangle inscribed in the semicircle\n    a = math.sqrt(3) / 4 * r\n    b = r\n    c = math.sqrt(3) / 4 * r\n    \n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    pi = 3.14159265359\n\n    s = 2 * r * pi\n    a = (4 * r * pi * r * r) / (3 * (1 + (1 / r) ** 2))\n    b = ((1 + (1 / r) ** 2) ** (1 / 3)) * (4 * r * pi * r * r) / (3 * (1 + (1 / r) ** 2))\n    area = max(s, a, b)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area_helper(a, b, c, r):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return area\n\n    def largest_triangle_area(a, b, c, r):\n        max_area = 0\n        for i in range(3):\n            for j in range(i + 1, 3):\n                for k in range(j + 1, 3):\n                    if i!= j and i!= k and j!= k:\n                        area = area_helper(a, b, c, r)\n                        if area > max_area:\n                            max_area = area\n        return max_area\n\n    def inscribed_area(r):\n        pi = 3.14159265359\n        a = r\n        b = 2 * pi * r\n        c = 2 * pi * r * r\n        return largest_triangle_area(a, b, c, r)\n\n    return inscribed_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # calculate the semi-circle's area\n    semi_circle_area = (r ** 2) * 3.14\n\n    # calculate the triangle's area using Heron's formula\n    s = (semi_circle_area / 2) ** (1/2)\n    area = (s * (s - r) * (s + r)) / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a regular triangle given the base and height\n    def triangle_area_base_height(base, height):\n        return 0.5 * base * height\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    def largest_triangle_area(base, height, circumference):\n        area1 = triangle_area_base_height(base, height)\n        area2 = circumference * 0.5\n        return max(area1, area2)\n    \n    # Calculate the circumference of the semicircle\n    circumference = 2 * r\n    \n    # Calculate the base and height of the largest triangle that can be inscribed in the semicircle\n    base = r\n    height = circumference / 2\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = largest_triangle_area(base, height, circumference)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Function to find the semi-circle perimeter\n    def semicircle_perimeter(r):\n        return 2 * pi * r\n    \n    # Function to find the hypotenuse of the largest triangle\n    def hypotenuse(a, b):\n        return sqrt(a**2 + b**2)\n    \n    # Find the semi-circle perimeter\n    perimeter = semicircle_perimeter(r)\n    \n    # Find the smallest area of any triangle using Heron's formula\n    area = (perimeter**2) / 4\n    \n    # Find the largest area possible inscribed in a semicircle with radius r\n    largest_area = 2 * pi * (r**2)\n    \n    # Find the hypotenuse of the largest triangle that can be inscribed in a semicircle with radius r\n    hypotenuse_largest = sqrt(largest_area)\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area_largest = pi * hypotenuse_largest**2\n    \n    return area_largest"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers as input and returns the smallest missing number in the list.\n    If no missing number is found, it returns None.\n    \"\"\"\n\n    # Sort the list of numbers in ascending order\n    array.sort()\n\n    # Initialize variables for starting and ending indexes\n    if end is None:\n        end = len(array) - 1\n\n    # Check if the list contains only one number\n    if end == start:\n        return None\n\n    # Initialize variable to store the missing number\n    missing_number = start\n\n    # Traverse through the list from the start index to the end index\n    for i in range(start, end + 1):\n        # If the current number is missing, update the missing number variable\n        if array[i]!= missing_number:\n            missing_number = array[i]\n            break\n\n    # If the loop completes, the missing number is the last number in the list\n    return missing_number"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # check if array is sorted in ascending order\n    if array == sorted(array):\n        for i in range(start,end+1):\n            if i+1 not in array:\n                return i+1\n        # if we get to here, all numbers in the array are present\n        return end+1\n    # if array is not sorted, use bisect to find first missing number\n    else:\n        return bisect.bisect_left(array,min(array))"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # Check if the input array is sorted\n    if array!= sorted(array):\n        raise ValueError('The input array must be sorted')\n\n    # Find the first element that is greater than start (if start is given)\n    if start:\n        while array[start-1] == start:\n            start += 1\n\n    # Find the last element that is smaller than end (if end is given)\n    if end:\n        while array[-1] == end:\n            end -= 1\n\n    # Find the gap between start and end (if start and end are given)\n    if start and end:\n        gap = end - start\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the array and check if the element is between start and end\n    for i in range(start,end+1):\n        if i in array:\n            count += 1\n\n    # If all elements are between start and end, return start+gap\n    if count == end - start + 1:\n        return start+gap\n\n    # If not, return start+gap+1\n    else:\n        return start+gap+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # check if the list is sorted\n    if len(array)!= len(set(array)):\n        return \"The list is not sorted.\"\n    # check if the start and end index are provided\n    if end is None:\n        end = len(array) - 1\n    # iterate through the array from the start index to the end index\n    for i in range(start,end+1):\n        # check if the current number is present in the array\n        if i not in array:\n            return i\n    # if we reach this point, it means that all numbers in the array are present\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index for the array. Defaults to 0.\n        end (int, optional): The ending index for the array. Defaults to None.\n\n    Returns:\n        int: The smallest missing number from the array.\n    \"\"\"\n\n    # If the end index is not specified, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Iterate through the array from the start index to the end index\n    for i in range(start, end + 1):\n        # If the current element is equal to the next element, the missing number is the next element\n        if array[i] == array[i + 1]:\n            return array[i + 1] + 1\n\n    # If all the elements are not equal to the next element, the missing number is the last element plus one\n    return array[end] + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n\n    for i in range(start,end+1):\n        if array[i]!=i:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i] + 1!= array[i+1]:\n            return array[i] + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for i in range(start, end+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the input list is sorted\n    if all(array[i] <= array[i+1] for i in range(len(array)-1)):\n        # If the list is sorted, start from the second number and check for missing numbers\n        for i in range(start, end):\n            if array[i]!= i+1:\n                return i+1\n    else:\n        raise ValueError('The input list is not sorted.')"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if array[i]!= i+start:\n            return i+start\n\n    return end+start+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers in the same order.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    \n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    '''\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    if x-1 >= 0:\n        sub.append((x-1, y))\n    if x+1 < 2:\n        sub.append((x+1, y))\n    if y-1 >= 0:\n        sub.append((x, y-1))\n    if y+1 < 2:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple) and len(ele) == 2:\n        # if the element is a tuple of size 2, extract the coordinates\n        x, y = ele\n        # define the list of adjacent coordinates\n        adj = []\n        # check the coordinates in all 8 directions\n        for dx, dy in [(0, -1), (-1, 0), (0, 1), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]:\n            # check if the adjacent coordinate is within the grid bounds and not already in the list\n            if 0 <= x+dx < len(sub) and 0 <= y+dy < len(sub[x]):\n                if sub[x][y]!= sub[x+dx][y+dy]:\n                    adj.append((x+dx, y+dy))\n        return adj\n    else:\n        # if the element is not a tuple or its size is not 2, return an empty list\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x - 1, y))\n    sub.append((x + 1, y))\n    sub.append((x, y - 1))\n    sub.append((x, y + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    if isinstance(ele, tuple):\n        for i in range(len(ele)):\n            for j in range(i+1, len(ele)):\n                if i!= j:\n                    sub.append((ele[i], ele[j]))\n        return sub\n    else:\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    # iterate through all the possible directions\n    for i in range(len(sub)):\n        # get the adjacent coordinate\n        dx, dy = sub[i]\n        x1, y1 = x + dx, y + dy\n        # add the adjacent coordinate to the list of adjacent coordinates\n        adj.append((x1, y1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    # add adjacent coordinates to sublist\n    sub += [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x == 0:\n        for i in range(x, y):\n            sub.append((0, i))\n    elif x == y:\n        for i in range(x, 0, -1):\n            sub.append((i, 0))\n    else:\n        for i in range(x, y):\n            sub.append((i, 0))\n            for j in range(y, i, -1):\n                sub.append((j, 0))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple):\n        if len(ele) == 2:\n            x, y = ele\n            return ((x-1, y), (x+1, y), (x, y-1), (x, y+1)) + sub\n        elif len(ele) == 3:\n            x, y, z = ele\n            return ((x-1, y, z), (x+1, y, z), (x, y-1, z), (x, y+1, z), (x, y, z-1), (x, y, z+1)) + sub\n        else:\n            print(\"Invalid coordinate tuple\")\n            return []\n    else:\n        print(\"Invalid input\")\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        sub.extend(adjacent)\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple of two integers (x, y) representing a coordinate, and returns a list of all adjacent coordinates (x', y') such that x' and y' are adjacent to x and y. \n    If sub is not empty, the function recursively extracts all adjacent coordinates of x' and y' and adds them to the result list.\n    '''\n    x, y = ele\n    result = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return result if sub==[] else sub + adjac((x+1, y+1), sub) + adjac((x-1, y-1), sub)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i].isspace():\n            text = text[:i] + \"_\" + text[i+1:]\n        elif text[i] == \"_\":\n            text = text[:i] + \" \" + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_pattern = re.compile(r'\\s+')\n    underscore_pattern = re.compile(r'_+')\n    text = space_pattern.sub('_', text)\n    text = underscore_pattern.sub(' ', text)\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert text to lower case\n    text = text.lower()\n    # replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with whitespaces\n    text = text.replace('_','')\n    # return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n\ndef replace_underscores(text):\n    '''\n    Write a function to replace underscores with whitespaces and vice versa in a given string.\n    '''\n    return text.replace(\"_\", \" \")\n\ntext = \"This is a test string.\"\n\nprint(\"Original String:\", text)\nprint(\"Spaces replaced with underscores:\", replace_spaces(text))\nprint(\"Underscores replaced with spaces:\", replace_underscores(text))"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = text.split()\n    for i in range(len(spaces)):\n        if spaces[i] == \" \":\n            spaces[i] = \"_\"\n        elif spaces[i] == \"_\":\n            spaces[i] = \" \"\n    text = \" \".join(spaces)\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            if zero_count > 0:\n                num_list[len(num_list) - zero_count], num_list[i] = num_list[i], num_list[len(num_list) - zero_count]\n                zero_count -= 1\n            else:\n                num_list[len(num_list) - zero_count], num_list[i] = num_list[i], num_list[len(num_list) - zero_count]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers - one at the beginning of the list and one at the end\n    i = 0\n    j = len(num_list) - 1\n    \n    # Move all non-zero elements to the beginning of the list\n    while i < j:\n        if num_list[i]!= 0:\n            # Move the non-zero element to its correct position in the list\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        else:\n            j -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Traverse through the list from the end to the beginning\n    for i in range(len(num_list)-1, -1, -1):\n\n        # If the current element is zero, swap it with the last element of the list\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]\n    for i in range(len(zero_indices) - 1, -1, -1):\n        num_list.pop(zero_indices[i])\n        num_list.append(0)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Create a new list to store the non-zero values\n    non_zero_list = []\n\n    # Loop through each element in the given list\n    for num in num_list:\n\n        # If the element is non-zero, add it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n\n        # If the element is zero, move it to the end of the list\n        elif num == 0:\n            num_list.remove(num)\n            non_zero_list.append(num)\n\n    # Return the non_zero_list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    for i in range(len(num_list)-1, zero_index-1, -1):\n        num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers, left and right, to the beginning of the list\n    left = 0\n    right = 0\n    \n    # Iterate through the list\n    while right < len(num_list):\n        # If the element at the right pointer is not zero, move the left pointer one step to the right\n        if num_list[right]!= 0:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            left += 1\n        # If the element at the right pointer is zero, move the right pointer one step to the right\n        right += 1\n        \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    index = 0\n    for num in num_list:\n        if num!= 0:\n            num_list[index] = num\n            index += 1\n    while index < len(num_list):\n        num_list.pop(index)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[zero_index], num_list[i] = num_list[i], num_list[zero_index]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n==1:\n        return sum(arr)\n    else:\n        xor_sum = pair_xor_Sum(arr,n-1)\n        xor_sum_sum = sum(arr[:n])\n        return xor_sum^xor_sum_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input and returns the sum of xor of all pairs of integers in the list.\n\n    Args:\n    arr: list of integers\n    n: integer\n\n    Returns:\n    int: sum of xor of all pairs of integers in the list\n    \"\"\"\n\n    # initialize sum variable\n    xor_sum = 0\n\n    # loop through list of integers and calculate xor of all pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            xor_sum ^= arr[i] ^ arr[j] \n    return xor_sum "
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and an integer n as input and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements in the list\n    xor_sum = sum(a^b for a in arr for b in arr)\n    # XOR of all pairs of elements in the list\n    xor_pair_sum = sum(a^b for a in arr for b in arr if a!=b)\n    # Return the XOR sum of all pairs of elements\n    return xor_pair_sum ^ xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    # initialize the sum to zero\n    total_sum = 0\n\n    # loop through the array\n    for i in range(n):\n        # loop through the rest of the array\n        for j in range(i+1, n):\n            # add the xor of the current pair of numbers to the total sum\n            total_sum += arr[i] ^ arr[j]\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list 'arr' and the length 'n' as input parameters.\n    The function returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.merge([int(x) for x in iterable])\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def heap_sort(iterable):\n    '''\n    Sort the given iterable using heap sort algorithm.\n    '''\n    # Convert the iterable to a list first\n    iterable = list(iterable)\n    # Create a max heap from the list using heappush and heappop\n    hq.heapify(iterable)\n    # Sort the list using the max heap using heappushpop\n    while len(iterable) > 1:\n        iterable[-1], iterable[0] = iterable[0], iterable[-1]\n        hq.heapify(iterable)\n    # Return the sorted list\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n\n    # Extract the smallest element from the heap\n    heap = []\n    while iterable:\n        heap.append(heapq.heappop(iterable))\n\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    '''\n    # Convert the list to a min heap\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n\n    # Extract the elements from the heap and append to the list in ascending order\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list into a list of tuples, where each tuple contains a\n    # value and its index.\n    data = [(value, index) for index, value in enumerate(iterable)]\n    # Use the heapq module to create a min-heap of the data.\n    hq.heapify(data)\n    # Extract the elements from the heap in sorted order and append them to a\n    # new list.\n    sorted_list = []\n    while data:\n        sorted_list.append(data[0][0])\n        hq.heappop(data)\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for _ in range(len(iterable)-1, 0, -1):\n        hq.heappop(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount: #if actual cost is greater than or equal to sale amount then it has no profit\n        return True\n    elif actual_cost < sale_amount: #if actual cost is less than sale amount then it has no loss\n        return True\n    else: #if both the conditions are false then it has no profit and no loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit and loss are 0\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost < sale_amount:\n        return True\n    else:\n        return None"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (int) - The actual cost of the sale\n    sale_amount (int) - The amount to be sold\n    \n    Returns:\n    bool - True if the sale has no profit and no loss, else False\n    \n    '''\n    \n    # Check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        return False\n    \n    # Check if the sale amount is greater than the profit margin\n    profit_margin = sale_amount // 10\n    if sale_amount - actual_cost <= profit_margin:\n        return False\n    \n    # If the sale has no profit and no loss, return True\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n\n    if profit > 0:\n        print(\"The sale amount has a profit of $\", profit)\n    elif profit < 0:\n        print(\"The sale amount has a loss of $\", -profit)\n    else:\n        print(\"The sale amount has no profit or loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit > 0:\n        return \"Profit\"\n    elif profit < 0:\n        return \"Loss\"\n    else:\n        return \"No Profit or Loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        print(\"There is no profit and no loss.\")\n    else:\n        print(\"There is a profit and no loss.\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    float: Wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Convert wind speed to m/s\n    v_mps = v * 1.609344\n\n    # Convert temperature to Kelvin\n    t_kelvin = t + 273.15\n\n    # Calculate the ratio of the wind speed to the absolute temperature\n    k = v_mps / (math.sqrt(t_kelvin) + 2.5)\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * k - 35.757 * math.pow(k, 2) + 0.4275 * math.pow(k, 3) - 0.0488 * math.pow(k, 4)\n\n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 0.621371 #convert km/h to m/s\n    return int(math.ceil((23.45 * (t + 273.15)) / (10 * math.log(wind_speed + 1)))) #calculate wind chill index using standard formulae"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # calculate the wind speed in knots\n    wind_speed = v * 1.94384  # convert km/h to knots\n\n    # calculate the heat capacity ratio at constant pressure\n    cp = 1004.6  # J/kg/K\n\n    # calculate the heat capacity at constant pressure\n    cp_at_t = cp * (t + 273.15)  # J/kg\n\n    # calculate the specific heat capacity at constant pressure\n    s_cp = cp / 1000  # kJ/kg/K\n\n    # calculate the latent heat of vaporization at constant pressure\n    latent_heat = latent_heat_vaporization = 2.501  # J/kg\n\n    # calculate the enthalpy of the dry air at constant pressure\n    h_dry = latent_heat_vaporization / (1 - (1 - 0.0065) / (0.0065 + (0.0000225 * t) / (t + 273.15)))  # J/kg\n\n    # calculate the dry air specific enthalpy\n    h_dry_specific = h_dry / (1 - 0.0000000000001 * (t + 273.15))  # J/kg/K\n\n    # calculate the specific enthalpy of water vapor at constant pressure\n    h_vap = (latent_heat_vaporization + h_dry) / 2  # J/kg\n    h_vap_specific = h_vap / (1 - 0.0000000000001 * (t + 273.15))  # J/kg/K\n\n    # calculate the specific enthalpy of the surrounding air at constant pressure\n    h_air_specific = (h_vap_specific + h_dry_specific) / 2  # J/kg/K\n\n    # calculate the mass of the air at constant pressure\n    m_air = 1.225 * (1 - 0.0000000000001 * (t + 273.15))  # kg\n\n    # calculate the enthalpy of the air at constant pressure\n    h_air = h_vap + h_dry - h_air_specific  # J/kg\n\n    # calculate the specific enthalpy of the air at constant pressure\n    h_air_specific = h_vap_specific - h_air_specific  # J/kg/K\n\n    # calculate the mass of the air containing the water vapor\n    m_water = 1.225 * (1 - 0.0000000000001 * (t + 273.15))  # kg\n\n    # calculate the specific volume of the air containing the water vapor\n    v_air = m_water / (cp * t + m_air)  # m^3/kg\n\n    # calculate the specific volume of water vapor\n    v_water = (v * 1.94384) / (cp_at_t - h_vap_specific)  # m^3/kg\n\n    # calculate the specific volume of the air containing the dry air\n    v_air_dry = m_air / (cp * t + m_air)  # m^3/kg\n\n    # calculate the absolute humidity in kg/kg\n    h_water = (h_air - h_dry) * v_water  # J/kg\n\n    # calculate the mass of the air containing the absolute humidity\n    m_hum = 1.225 * h_water / (h_vap + h_air - h_dry)  # kg\n\n    # calculate the mass of the air containing the water vapor and absolute humidity\n    m_air_h = m_water + m_hum  # kg\n\n    # calculate the mass of the air containing the dry air and absolute humidity\n    m_air_dh = m_air - m_air_h  # kg\n\n    # calculate the mass of the water vapor\n    m_vapor = (h_water / h_vap) * m_air_h  # kg\n\n    # calculate the mass of the air containing the water"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes in two parameters: the wind velocity in km/h and the temperature in celsius. \n    The function calculates the wind chill index using the formula:\n    \n    Chill Index = 35.74 + 0.6215*Temperature - 35.75*Temperature**2 + 0.4275*Temperature**3\n    \n    and rounds the result to the nearest integer.\n    \n    Input:\n    v: float, wind velocity in km/h\n    t: float, temperature in celsius\n    \n    Output:\n    chill_index: int, wind chill index rounded to the nearest integer.\n    \n    '''\n    chill_index = round(35.74 + 0.6215*t - 35.75*t**2 + 0.4275*t**3)\n    \n    return chill_index\n`"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t >= 0:\n        t_c = t - 273.15  # convert to celsius\n        if v < 1:\n            w_c = v / 1.15  # convert to wind chill in celsius\n            wc = math.floor((t_c + 16.67 * w_c) / 1.8)  # calculate the wind chill index\n        else:\n            wc = math.floor(t_c / 0.6219)  # calculate the wind chill index\n        return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 0.621371 # convert from km/h to m/s\n    if wind_speed >= 16:\n        return None\n    chill_temperature = 35.74 + 0.621371 * (t - 35.75)\n    return int(math.ceil(chill_temperature))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < 0 or t > 100:\n        return \"Invalid temperature. Please enter a temperature between 0 and 100.\"\n    else:\n        return math.ceil(35.74 + 0.6215*v - 35.75*t + 0.4275*v*t)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature from Celsius to Kelvin\n    k = math.frexp(t)[1] * 2**16\n    # convert wind velocity from km/h to m/s\n    m = v * 1.60934\n    # calculate the wind chill\n    wc = (13.12 + 0.6215 * k - 11.37 * math.exp((17.625 * k) / (k + 243.5)) + 0.3965 * m + 0.2476 * math.exp((17.625 * k) / (k + 243.5))) / (237.3)\n    # round the wind chill to the nearest integer\n    wc_rounded = round(wc)\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer\n    given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n    '''\n    wind_speed = v * 1.60934  # convert km/h to m/s\n    absolute_zero_c = 23.1  # absolute zero in celsius\n    chill_index = (absolute_zero_c - t) * (1 - (math.exp((-1 * (t - absolute_zero_c) / 1.8) * 1.60934)))\n    chill_index_rounded = round(chill_index)\n    return chill_index_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # Calculate the wind chill temperature in celsius\n    wct = 35.74 + 0.6215 * v - 35.75 * math.log(t + 273.15)\n    # Round the wind chill temperature to the nearest integer\n    wct = int(wct + 0.5)\n    return wct"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Function to remove names starting with a lowercase letter\n    def remove_lower(name):\n        if name[0].islower():\n            return False\n        else:\n            return name\n    \n    # Use filter() to apply the remove_lower function to the sample_names list\n    filtered_names = list(filter(remove_lower, sample_names))\n    \n    # Use the sum() function to sum the length of the filtered names list\n    total_length = sum(len(name) for name in filtered_names)\n    \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names with uppercase letters\n    upper_names = []\n    \n    # Loop through the sample_names list and append the names with uppercase letters to the upper_names list\n    for name in sample_names:\n        if name[0].isupper():\n            upper_names.append(name)\n    \n    # Create an empty list to store the names with lowercase letters\n    lower_names = []\n    \n    # Loop through the sample_names list and append the names with lowercase letters to the lower_names list\n    for name in sample_names:\n        if name[0].islower():\n            lower_names.append(name)\n    \n    # Concatenate the upper_names and lower_names lists to get the complete list of names\n    complete_names = upper_names + lower_names\n    \n    # Calculate the sum of the length of each name in the complete_names list\n    name_lengths = [len(name) for name in complete_names]\n    \n    # Return the sum of the length of the names in the complete_names list\n    return sum(name_lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of the lengths of names\n    total_length = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # skip this name and move on to the next one\n            continue\n        # add the length of the name to the sum\n        total_length += len(name)\n    \n    # return the sum of the lengths of names that didn't start with lowercase letters\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for name in sample_names:\n        if name[0].isupper():\n            name_lengths.append(len(name))\n    return sum(name_lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of names' lengths\n    total_length = 0\n    \n    # Iterate over each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next one\n            continue\n        # Otherwise, add the length of the name to the sum\n        total_length += len(name)\n    \n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # Define a list to store the lengths of the names that start with a lowercase letter\n    starts_with_lowercase = []\n    \n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        \n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            \n            # If the name starts with a lowercase letter, append its length to the starts_with_lowercase list\n            starts_with_lowercase.append(len(name))\n    \n    # Return the sum of the lengths of the names that start with a lowercase letter\n    return sum(starts_with_lowercase)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize sum to 0\n    total_length = 0\n    # iterate through each name in the sample_names list\n    for name in sample_names:\n        # check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # if it is, skip the name\n            continue\n        # add the length of the name to the total_length variable\n        total_length += len(name)\n    # return the total_length\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what's inbetween them from a string.\n\n    :param items: The string containing parenthesis.\n    :return: The string without the parenthesis.\n    \"\"\"\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_parenthesis(items):\n    # remove any characters enclosed in parentheses and whitespace\n    items = re.sub(r'\\(.*?\\)', '', items)\n    \n    # remove any characters enclosed in single quotes\n    items = re.sub(r\"\\'(.*?)\\'\", '', items)\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the pattern to find the parenthesis and what is inbetween them\n    pattern = r'\\([^)]*\\)'\n    # Use the re.sub() function to replace the pattern with nothing\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis from the string\n    items = re.sub('[\\(\\)]', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')  # regex pattern to match parenthesis\n    return pattern.sub('', items)  # remove all matched parenthesis"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return None\n    \n    num_rows = n // 2 + 1\n    \n    if n % 2 == 1:\n        return num_rows * (num_rows - 1)\n    \n    return num_rows * (num_rows - 1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first two nonagonal numbers\n    i = 2\n    j = 3\n\n    # Loop through the sequence and find the nth nonagonal number\n    while i <= n:\n        # Check if i and j form an even number\n        if i % 2 == 0 and j % 2 == 0:\n            # Return the nth nonagonal number\n            return i\n        else:\n            # Increment i and j\n            i += 1\n            j += 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n):\n        c = a + b\n        a = b\n        b = c\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"n must be greater than or equal to 1.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n + 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = []\n    for i in range(1, n+1):\n        nonagonal_numbers.append(i * (i + 1))\n    return nonagonal_numbers[-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n * (n - 1)) // 2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # If n is even, return n+1.\n    if n % 2 == 0: \n        return n+1\n    # If n is odd, return n^2.\n    else: \n        return n**2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (is_nonagonal(n-1) + is_nonagonal(n-2))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    nonagonal_num = 1\n    row_num = 1\n    col_num = 1\n    # loop through each row\n    while row_num <= n:\n        # loop through each column of the row\n        while col_num <= n:\n            # add the product of the row and column to the nonagonal number\n            nonagonal_num += (row_num * col_num)\n            # increment the column number\n            col_num += 1\n        # increment the row number and reset the column number\n        row_num += 1\n        col_num = 1\n    # return the nonagonal number\n    return nonagonal_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    i = 1\n    j = 1\n    k = 0\n    sum = 0\n\n    # loop through until the nth nonagonal number is found\n    while i <= n:\n        # calculate the sum of the first k nonagonal numbers\n        sum = k * (k + 1) / 2\n\n        # check if the sum is equal to the nth nonagonal number\n        if sum == n:\n            print(f\"The {n}th nonagonal number is {sum}.\")\n            return\n\n        # increment i and j\n        i += 1\n        j += 1\n\n        # increment k and reset the sum if the sum is greater than n\n        k += 1\n        if sum > n:\n            k = 0\n            sum = 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)\\b[zZ]\\b(?!\\w)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[a-z]{1,}z[a-z]{1,}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"\\b([a-z]+)z\\b\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(?<!\\w)z(?!\\w)\"\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define the pattern to match 'z' except at the start and end of the word\n    pattern = r'(?<=\\b)z(?=\\b)'\n\n    # Use re.search() to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return True\n    if match:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!\\w*\\s)z(?!\\w*\\s)\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regex to find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Loop through each word\n    for word in words:\n        # Check if the first character is not 'z' and the last character is not 'z'\n        if word[0]!= 'z' and word[-1]!= 'z':\n            # If the word contains 'z', return True\n            return True\n    \n    # If no words contain 'z', return False\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k and reverses the array upto the given position.\n    '''\n    if k > len(input):\n        return \"Invalid position\"\n    elif k == 0:\n        return input\n    else:\n        return [input[-k], input[-k-1]] + reverse_Array_Upto_K(input[:-k], k-1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from the starting index to k-1\n    input = input[:k] + input[k:][::-1] + input[:k]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Convert the input array to a list to reverse it\n    lst = list(input)\n\n    # Reverse the list upto the given position k\n    lst[:k] = lst[:k][::-1]\n\n    # Convert the reversed list back to a tuple and return it\n    return tuple(lst)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input)\n    if k > n:\n        return \"Invalid input\"\n    else:\n        temp = input[0:k]\n        input = input[k:]\n        input.reverse()\n        input = input + temp\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Finding the length of the array\n    length = len(input)\n    # Reverse the array from index 0 to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from index k to length-1\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        return input\n    else:\n        start = 0\n        end = k-1\n        while start < end:\n            temp = input[start]\n            input[start] = input[end]\n            input[end] = temp\n            start += 1\n            end -= 1\n        return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes two arguments, input and k. \n    It reverses the array upto k and returns the reversed array.\n    '''\n    reversed_array = input[:k][::-1]\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, -1, -1):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k as input.\n    It reverses the array upto the position k and returns the reversed array.\n    '''\n\n    # Initializing the start and end index of the array\n    start = 0\n    end = len(input) - 1\n\n    # Reversing the array upto position k\n    while start < k:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    # Returning the reversed array\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the key-value pairs from the original tuple and the dictionary\n    new_dict = dict(test_tup)\n    new_dict.update(test_dict)\n    # Convert the new dictionary to a tuple\n    new_tuple = tuple(new_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Combine the two dictionaries\n    combined_dict = {**test_dict, **test_tup[0]}\n    # Convert the combined dictionary to a tuple\n    return tuple(combined_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {}\n    new_dict.update(test_dict)\n    return tuple(test_tup) + tuple(new_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_tuple = test_tup + (new_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Check if test_dict is a dictionary\n    if not isinstance(test_dict, dict):\n        raise TypeError(\"The second argument should be a dictionary\")\n    \n    # Create a new dictionary with the values from test_dict\n    new_dict = {key:value for key, value in test_dict.items()}\n    \n    # Add the new dictionary to the tuple\n    new_tup = (test_tup + (new_dict,),)\n    \n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup.update(test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict['new_key'] = 'new_value'\n    return tuple(test_tup + tuple(test_dict.values()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    N = len(cost)\n    total_cost = 0\n    visited_cells = 0\n    max_avg = 0\n    \n    # Traverse the matrix from top-left to bottom-right\n    for i in range(N):\n        for j in range(i+1, N):\n            # Check if the current cell is part of the path or not\n            if cost[i][j] > cost[i][j-1] and cost[i][j] > cost[i-1][j]:\n                # Check if the current cell is already visited or not\n                if (i, j) not in visited_cells:\n                    # Update the total cost and visited cells\n                    total_cost += cost[i][j]\n                    visited_cells.add((i, j))\n                    # Update the maximum average if the current path has a higher average\n                    if (i, j) not in visited_cells and (i, j) not in visited_cells:\n                        avg = total_cost / visited_cells.__len__()\n                        max_avg = max(max_avg, avg)\n    \n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0.0\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                continue\n            if i == 0 and j == 0:\n                continue\n            # compute the cost of the path starting from current cell\n            path_cost = cost[i][j] + cost[i][j+1] + cost[i+1][j+1] + cost[i+1][j]\n            # update max average if this path has higher average\n            if path_cost / (i+j+2) > max_avg:\n                max_avg = path_cost / (i+j+2)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    # Initialize the dp table with all zeros\n    dp = [[0 for j in range(N)] for i in range(N)]\n    # Initialize the max sum and path variables\n    max_sum = float('-inf')\n    path = []\n    # Iterate through all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if the current cell is the bottom right cell\n            if i == N-1 and j == N-1:\n                # If it is, compute the total cost and check if it is greater than the max sum\n                total_cost = cost[i][j]\n                if total_cost > max_sum:\n                    max_sum = total_cost\n                    path = [str(i)+\",\"+str(j)]\n                continue\n            # Check if the current cell is not the bottom right cell\n            # If it is, check if the cell to its right is already in the path\n            if j < N-1 and dp[i][j+1]!= 0:\n                # If it is, check if the cell to its left is already in the path\n                if i < N-1 and dp[i+1][j]!= 0:\n                    # If both conditions are satisfied, compute the total cost of the current path\n                    total_cost = cost[i][j] + cost[i+1][j] + dp[i][j+1] + dp[i+1][j]\n                    # Check if the current total cost is greater than the max sum\n                    if total_cost > max_sum:\n                        max_sum = total_cost\n                        path = [str(i)+\",\"+str(j)] + path\n    # Compute the average of the max sum\n    average = max_sum/len(path)\n    # Return the average and the path\n    return average, path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    def backtrack(i, j, visited, path_sum, path_count, max_path_sum, max_path_count):\n        if i == N - 1 and j == N - 1:\n            if path_sum > max_path_sum:\n                max_path_sum = path_sum\n                max_path_count = path_count\n            return\n\n        if i < N and j < N:\n            if cost[i][j] > cost[i + 1][j] and cost[i][j] > cost[i][j + 1]:\n                visited[i][j] = 1\n                backtrack(i + 1, j, visited, path_sum + cost[i][j], path_count + 1, max_path_sum, max_path_count)\n                visited[i][j] = 0\n\n            if cost[i][j] > cost[i + 1][j + 1] and cost[i][j] > cost[i + 1][j]:\n                visited[i][j] = 1\n                backtrack(i + 1, j + 1, visited, path_sum + cost[i][j], path_count + 1, max_path_sum, max_path_count)\n                visited[i][j] = 0\n\n            if cost[i][j] > cost[i][j + 1] and cost[i][j] > cost[i + 1][j + 1]:\n                visited[i][j] = 1\n                backtrack(i, j + 1, visited, path_sum + cost[i][j], path_count + 1, max_path_sum, max_path_count)\n                visited[i][j] = 0\n\n    N = len(cost)\n    visited = [[0] * N for _ in range(N)]\n    max_path_sum = float('-inf')\n    max_path_count = 0\n\n    for i in range(N):\n        for j in range(N):\n            backtrack(i, j, visited, cost[i][j], 1, max_path_sum, max_path_count)\n\n    return max_path_sum / max_path_count\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = [[False]*N for _ in range(N)]\n    max_avg = 0\n    \n    for i in range(N):\n        for j in range(N):\n            if not visited[i][j]:\n                visited[i][j] = True\n                total_cost = 0\n                count = 0\n                \n                def dfs(x, y):\n                    nonlocal total_cost, count\n                    if x == N-1 and y == N-1:\n                        avg = total_cost/count\n                        max_avg = max(max_avg, avg)\n                        return\n                    if x < N-1 and not visited[x+1][y]:\n                        visited[x+1][y] = True\n                        count += 1\n                        total_cost += cost[x][y]\n                        dfs(x+1, y)\n                        visited[x+1][y] = False\n                        count -= 1\n                    if y < N-1 and not visited[x][y+1]:\n                        visited[x][y+1] = True\n                        count += 1\n                        total_cost += cost[x][y]\n                        dfs(x, y+1)\n                        visited[x][y+1] = False\n                        count -= 1\n                \n                dfs(i, j)\n                \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n\n    for i in range(N):\n        dp[i][0] = dp[i][1] = cost[i][0]\n        if i > 0:\n            dp[i][0] += dp[i-1][0]\n        if i < N-1:\n            dp[i][1] += dp[i+1][0]\n\n    for j in range(1, N):\n        dp[0][j] = dp[1][j] = cost[0][j]\n        if j > 0:\n            dp[0][j] += dp[0][j-1]\n        if j < N-1:\n            dp[0][j] += dp[0][j+1]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if i > 0 and j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            if i < N-1 and j > 0:\n                dp[i][j] += dp[i+1][j-1]\n            if i > 0 and j < N-1:\n                dp[i][j] += dp[i-1][j+1]\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg / (N*N-1)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the size of the matrix\n    N = len(cost)\n\n    # Initialize variables\n    max_avg = 0\n    path_length = 1\n    path_sum = cost[0][0]\n    path_avg = path_sum\n\n    # Iterate over all possible paths starting from the top-left cell\n    for i in range(1, N):\n        for j in range(1, N):\n            # Check if the current cell can be reached from the previous cell\n            if cost[i-1][j] <= cost[i][j-1]:\n                # If yes, add the cost of the current cell to the path sum and increment the path length\n                path_sum += cost[i][j]\n                path_length += 1\n            else:\n                # If no, subtract the cost of the previous cell from the path sum and decrement the path length\n                path_sum -= cost[i-1][j]\n                path_length -= 1\n\n            # Compute the average of the path\n            path_avg = path_sum / path_length\n\n            # If the average is greater than the maximum average, update the maximum average and the path length and sum\n            if path_avg > max_avg:\n                max_avg = path_avg\n                path_length = 1\n                path_sum = cost[i][j]\n\n            # Check if the path length has exceeded the size of the matrix\n            if path_length == N*N:\n                break\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def maxAverageOfPathHelper(matrix, current_x, current_y, visited, total_cost, path_length, max_avg):\n        # Base case: if we reach the bottom right cell\n        if current_x == len(matrix)-1 and current_y == len(matrix[0])-1:\n            return max_avg\n        \n        # Base case: if we have already visited all cells in the path\n        if visited == len(matrix)*len(matrix[0]):\n            return max_avg\n        \n        # Base case: if the cell is already visited\n        if matrix[current_x][current_y] in visited:\n            return max_avg\n        \n        # Recursive case: try to move right or down in the current cell\n        total_cost += matrix[current_x][current_y]\n        visited.add(matrix[current_x][current_y])\n        avg = total_cost/path_length\n        if avg > max_avg:\n            max_avg = avg\n            \n        # Try to move right\n        max_avg = maxAverageOfPathHelper(matrix, current_x+1, current_y, visited, total_cost, path_length+1, max_avg)\n        visited.remove(matrix[current_x][current_y])\n        \n        # Try to move down\n        max_avg = maxAverageOfPathHelper(matrix, current_x, current_y+1, visited, total_cost, path_length+1, max_avg)\n        visited.remove(matrix[current_x][current_y])\n        \n        return max_avg\n    \n    # Initialize variables\n    max_avg = 0\n    visited = set()\n    total_cost = 0\n    path_length = 1\n    \n    # Call the helper function to find the maximum average of paths\n    max_avg = maxAverageOfPathHelper(cost, 0, 0, visited, total_cost, path_length, max_avg)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    # Initialize the visited cells as false and store their previous cell as well.\n    visited = [[False for j in range(N)] for i in range(N)]\n    # Initialize the maximum average as 0 and the maximum path cost as 0.\n    max_avg = 0\n    max_cost = 0\n    \n    # Initialize the first cell as the current cell and store its previous cell as well.\n    current_cell = (0, 0)\n    prev_cell = (0, 0)\n    visited[0][0] = True\n    path_cost = cost[0][0]\n    path_avg = path_cost\n    \n    # Loop through all other cells in the matrix.\n    for i in range(1, N):\n        for j in range(1, N):\n            \n            # If the current cell is not visited yet, continue to the next iteration.\n            if not visited[i][j]:\n                continue\n            \n            # Calculate the total cost and the number of visited cells in the current path.\n            total_cost = 0\n            num_cells = 0\n            \n            # If the current cell is right, check the next cell to the right.\n            if j+1 < N and not visited[i][j+1]:\n                path_cost += cost[i][j]\n                path_avg += path_cost\n                total_cost += path_cost\n                num_cells += 1\n                visited[i][j+1] = True\n                current_cell = (i, j+1)\n                prev_cell = (i, j)\n            \n            # If the current cell is down, check the next cell below.\n            if i+1 < N and not visited[i+1][j]:\n                path_cost += cost[i][j]\n                path_avg += path_cost\n                total_cost += path_cost\n                num_cells += 1\n                visited[i+1][j] = True\n                current_cell = (i+1, j)\n                prev_cell = (i, j)\n            \n            # Calculate the average of the current path.\n            if num_cells > 0:\n                path_avg = total_cost/num_cells\n            \n            # Update the maximum average and maximum path cost found so far.\n            if path_avg > max_avg:\n                max_avg = path_avg\n                max_cost = path_cost\n    \n    # Return the maximum average of all existing paths.\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_avg = 0\n    total_cost = 0\n    n = len(cost)\n    m = len(cost[0])\n    visited = [[False for j in range(m)] for i in range(n)]\n    path = [(-1, -1)]\n\n    # Check all possible paths and compute their average\n    for i in range(n):\n        for j in range(m):\n            if not visited[i][j] and (i == 0 or not visited[i-1][j]) and (j == 0 or not visited[i][j-1]):\n                path.append((i, j))\n                visited[i][j] = True\n                if i == n-1 and j == m-1:\n                    avg = total_cost / (i+1)\n                    if avg > max_avg:\n                        max_avg = avg\n                else:\n                    avg = maxAverageOfPath(cost)\n                    total_cost += avg\n                    if i == n-1:\n                        if j == m-1:\n                            max_avg = avg\n                    else:\n                        max_avg = max(max_avg, avg)\n                visited[i][j] = False\n                path.pop()\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # iterate over the dictionary and add students that satisfy the condition to a new dictionary\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    # Define an empty list to store the filtered students\n    filtered_students = []\n\n    # Iterate over the students dictionary\n    for name, (height, weight) in students.items():\n        # Check if the height and weight are greater than the given values\n        if height > h and weight > w:\n            # Append the student name to the filtered students list\n            filtered_students.append(name)\n\n    # Return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n    \n    # Loop through each student in the dictionary\n    for student, values in students.items():\n        # Extract the height and weight of the student\n        student_height, student_weight = values\n        \n        # Check if the student's height and weight are above the minimum\n        if student_height > h and student_weight > w:\n            # Add the student to the list of filtered students\n            filtered_students.append(student)\n            \n    # Return the list of filtered students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n    # Loop through the students dictionary\n    for name, (height, weight) in students.items():\n        # Check if the height is above the minimum and the weight is above the minimum\n        if height > h and weight > w:\n            # Append the filtered student to the list\n            filtered_students.append((name, height, weight))\n    # Return the filtered list\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create a dictionary to store the count of elements in each list\n    count1 = {}\n    count2 = {}\n\n    # Loop through each element in the first list\n    for num in nums1:\n        # If the element is already present in the dictionary, increment the count\n        if num in count1:\n            count1[num] += 1\n        # If the element is not present in the dictionary, add it with a count of 1\n        else:\n            count1[num] = 1\n\n    # Loop through each element in the second list\n    for num in nums2:\n        # If the element is already present in the dictionary, increment the count\n        if num in count2:\n            count2[num] += 1\n        # If the element is not present in the dictionary, add it with a count of 1\n        else:\n            count2[num] = 1\n\n    # Create an empty list to store the indices of the same elements\n    indices = []\n\n    # Loop through each key in the dictionary\n    for key in count1:\n        # If the count in the second dictionary is equal to the count in the first dictionary, append the index to the list of indices\n        if key in count2 and count1[key] == count2[key]:\n            indices.append(nums1.index(key))\n\n    # Return the list of indices of the same elements\n    return indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # loop through each pair of elements in the lists\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n\n    # Define a custom equality function to compare two lists\n    def compare_lists(list1, list2):\n        # Compare each element of the lists\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                # If any element is not equal, return False\n                return False\n        # If all elements are equal, return True\n        return True\n\n    # Loop through each element in the first list and check if it is equal to any element in the second list\n    count = 0\n    for i in range(len(nums1)):\n        if compare_lists(nums1, nums2):\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    num = base\n    while power > 0:\n        digit = num % 10\n        sum += digit ** power\n        power -= 1\n        num //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and remove any leading zeros\n    base_str = str(base)\n    while base_str[0] == '0':\n        base_str = base_str[1:]\n\n    # Initialize variables for sum and result\n    sum_digits = 0\n    result = 0\n\n    # Iterate through the digits of the base string\n    for digit in base_str:\n        # Convert each digit to an integer and add it to the sum_digits variable\n        sum_digits += int(digit)\n\n    # Iterate through the specified power and add the sum_digits to the result variable\n    for _ in range(power):\n        result += sum_digits\n\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    while power > 0:\n        digit = base % 10\n        total_sum += digit\n        power -= 1\n        base //= 10\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    if base < 10:\n        return base\n    else:\n        return base % 10 + power_base_sum(base // 10, power)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string to calculate the sum of its digits\n    base_str = str(base)\n    # initialize a variable to store the sum of digits raised to the power\n    result = 0\n    # loop through each digit of the base and add the digit raised to the power to the result variable\n    for digit in base_str:\n        digit_int = int(digit)\n        result += digit_int ** power\n    # return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # calculate the sum of all digits of the base\n    sum_digits = 0\n    while base > 0:\n        digit = base % 10\n        sum_digits += digit\n        base //= 10\n    # calculate the power of the sum of digits\n    power_sum_digits = 1\n    for i in range(power):\n        power_sum_digits *= sum_digits\n    return power_sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable to zero\n    sum = 0\n    # Iterate over each character in the base string\n    for char in base_str:\n        # Convert the character to an integer and add it to the sum\n        sum += int(char)\n    # Multiply the sum by the power\n    result = sum * power\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    digits = [int(digit) for digit in str(base)]\n    total = 0\n    for digit in digits:\n        total += digit ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit) ** power for digit in str(base))"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"' # Match any string between double quotes\n    matches = re.findall(pattern, text) # Find all matches in the string\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    # using the re module, we can match and extract all the values between quotation marks\n    values = re.findall(pattern, text1)\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]+)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the pattern to match quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    # Find all the occurrences of the pattern in the text\n    matches = pattern.findall(text1)\n    # Iterate through the matches and extract the values\n    result = []\n    for match in matches:\n        # Remove any leading or trailing whitespaces\n        match = match.strip()\n        # If the value is not empty, add it to the result list\n        if match:\n            result.append(match)\n    # Return the result list\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns all the values between quotation marks \" \".\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches\n\ntext1 = \"This is a sample string with quotation marks: \" \"This is a value inside a quotation mark. \" \"This is another value inside a quotation mark.\"\n\nprint(extract_quotation(text1))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (t_1 * t_2 for i, t_1 in enumerate(test_tup) for t_2 in test_tup[i+1:])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # initialize the result tuple\n    result = (0,)*len(test_tup)\n    \n    # iterate through the input tuple and multiply elements\n    for i in range(len(test_tup)):\n        result[i] = test_tup[i] * test_tup[i+1]\n        \n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1  # get the length of the input tuple\n    new_tup = ()\n    for i in range(N):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty tuple to hold the result\n    result = ()\n    \n    # iterate over each element in the input tuple\n    for i in range(len(test_tup)-1):\n        # multiply the current element with the next one\n        result += (test_tup[i] * test_tup[i+1],)\n    \n    # add the last element to the result\n    result += (test_tup[-1],)\n    \n    # return the resulting tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    # loop through the input tuple and multiply each element with the next element and append the result to the result tuple\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    # append the last element to the result tuple\n    result_tup += (test_tup[-1],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists and returns their sum.\n    \"\"\"\n    return [x+y for x in lst1 for y in lst2]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Iterate through the input list\n    for key, group in groupby(nums):\n        # If the next value is equal to the first value, remove it\n        if key == next(group):\n            nums.remove(key)\n\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    seen = set()\n    return [num for num in nums if num not in seen and not seen.add(num)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(sorted(nums)) if not (k == g[0] and g[0] == g[1])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by consecutive duplicates\n    grouped = groupby(enumerate(nums), lambda x: x[1] == x[0]-1)\n    \n    # Remove the groups\n    return [num for _, group in grouped if not group]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            for key, group in groupby(nums[i+1:]):\n                if next(group, None) == nums[i]:\n                    continue\n                else:\n                    nums.remove(nums[i])\n                    i -= 1\n                    break\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # group consecutive duplicates\n    grouped = groupby(nums)\n    \n    # filter out non-consecutive duplicates\n    consecutive_nums = [k for k, g in grouped if len(list(g)) == 1]\n    \n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use groupby to group the elements of the list into tuples with consecutive elements\n    # (i.e. tuples of length 2). Then, use a list comprehension to extract the values\n    # from the grouped tuples.\n    return list(set(nums[i] for i, group in groupby(nums) if i == 0 or group[1]!= nums[i-1]))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: len(list(x)) > 1, groupby(nums)))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the area of the cone using the formula: A = pi r^2 h\n    area = math.pi * r**2 * h\n    # calculate the lateral surface area by subtracting the area of the cone from the area of the base\n    lateralsurface = area - r * r\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi*(r**2) + math.pi*(r**2)*h/3\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes two arguments, radius r and height h, and returns the lateral surface area of a cone.\n    '''\n    \n    lateral_surface = math.pi * r * (h/3)\n    return lateral_surface\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula\n    Ls = math.pi * r**2 * h\n    return Ls"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * (r + h) / 2\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the lateral surface area using the formula: S = pi*r^2*h\n    lateral_surface_area = math.pi*r**2*h\n    \n    #Return the value of the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    LSA = math.pi * r**2 * (h/3)\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regular expression to replace all occurrences of spaces, commas, or dots with a colon\n    pattern = re.compile(r'(\\s|\\.|,)')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all occurrences of spaces with colon\n    text = re.sub(r'\\s+', ':', text)\n    # replace all occurrences of commas with colon\n    text = re.sub(r',+', ':', text)\n    # replace all occurrences of dots with colon\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces, commas, or dots with a colon\n    text = re.sub(r'([,.])', r':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+|[,\\.]+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern for spaces, commas, or dots\n    pattern = re.compile(r'[^\\w\\s]|_')\n    # Replace all matches of the pattern with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'[,.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text).replace(' ', '').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s*,\\s*|\\s+|\\.\\s*')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with a colon\n    text = re.sub(r'\\s', ':', text)\n    \n    # Replace commas with a colon\n    text = re.sub(r'\\,', ':', text)\n    \n    # Replace dots with a colon\n    text = re.sub(r'\\.', ':', text)\n    \n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # If the current element is equal to x, return the index of the first occurrence\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            # If the current element is not equal to x but the previous element is, continue searching\n            right = mid - 1\n        elif A[mid] < x:\n            # If the current element is greater than x, search the left half of the array\n            left = mid + 1\n        else:\n            # If the current element is less than x, search the right half of the array\n            right = mid - 1\n    return -1  # If the element is not found, return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    n = len(A)\n\n    # If the array is empty or contains only one element, return -1\n    if n == 0 or n == 1:\n        return -1\n\n    # Initialize left and right pointers\n    left = 0\n    right = n - 1\n\n    # Initialize the result variable\n    result = -1\n\n    # Iterate through the array\n    while left <= right:\n        # Find the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, return the index\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        # If the middle element is greater than x, update the left pointer\n        elif A[mid] < x:\n            left = mid + 1\n        # If the middle element is less than x, update the right pointer\n        else:\n            right = mid - 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of x in A using binary search\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # Iterate through the array until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        middle = (left + right) // 2\n        \n        # If the middle element is equal to x, return the index\n        if A[middle] == x:\n            return middle\n        \n        # If the middle element is less than x, move the left pointer to the right\n        elif A[middle] < x:\n            left = middle + 1\n            \n        # If the middle element is greater than x, move the right pointer to the left\n        else:\n            right = middle - 1\n            \n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize variables to keep track of the first and last occurrence of x\n    first_occurrence = -1\n    last_occurrence = -1\n    \n    # Iterate through the array and keep track of the first and last occurrences of x\n    for i in range(len(A)):\n        if A[i] == x:\n            if first_occurrence == -1:\n                # Initialize first_occurrence to the current index\n                first_occurrence = i\n            else:\n                # Update last_occurrence to the current index\n                last_occurrence = i\n                \n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index to -1\n    index = -1\n    \n    # Iterate through the array using a for loop\n    for i in range(len(A)):\n        # Check if the current element is equal to the search element\n        if A[i] == x:\n            # If it is, set the index to the current index\n            index = i\n            # Break out of the loop since we found the first occurrence\n            break\n    \n    # Return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n    \n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    prefix_prod = [1] * (n + 1)\n\n    # Calculate prefix products of the given array\n    for i in range(1, n + 1):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n\n    # Calculate sum of products of all subarrays\n    sum_of_products = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            subarray_prod = 1\n            for k in range(len(subarray)):\n                subarray_prod *= subarray[k]\n            sum_of_products += subarray_prod\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Finding length of array\n    n = len(arr)\n\n    # Finding maximum length of subarray\n    max_length = max(len(arr), 1)\n\n    # Finding product of all elements in array\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n\n    # Initialize variables for result\n    result = 0\n    prefix_product = prod\n\n    # Looping through all subarrays\n    for length in range(1, max_length + 1):\n        # Finding sum of products of subarrays\n        subarray_sum = 0\n        for i in range(n - length + 1):\n            subarray_sum += prod * arr[i]\n            for j in range(i, i + length):\n                subarray_sum *= arr[j]\n\n        # Adding result to result array\n        result += subarray_sum\n\n        # Updating product of all elements in array\n        prefix_product *= prod\n\n        # Updating product of all elements in subarrays\n        prod *= subarray_sum\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(n):\n        for j in range(i+1,n+1):\n            dp[i][j] = (arr[i]*arr[j]) + dp[i][j-1]\n    return dp[0][n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    # Create a list of all integers from 1 to n\n    nums = list(range(1, n+1))\n    \n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while(p*p<=n):\n        # If prime[p] is not changed, then it is a prime\n        if(prime[p] == True):\n            # Update all multiples of p\n            for i in range(p*2, n+1, p):\n                prime[i] = False\n        p += 1\n    \n    # Create a list \"subsets\" that will store all subsets of arr\n    subsets = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subsets.append(arr[i:j])\n    \n    # Find all subsets of arr that are prime and store them in \"subset_primes\"\n    subset_primes = []\n    for subset in subsets:\n        is_prime = True\n        for num in subset:\n            if prime[num] == False:\n                is_prime = False\n                break\n        if is_prime:\n            subset_primes.append(subset)\n    \n    # Find all subsets of arr that are not prime and store them in \"subset_not_primes\"\n    subset_not_primes = []\n    for subset in subsets:\n        is_prime = True\n        for num in subset:\n            if prime[num] == False:\n                is_prime = False\n                break\n        if is_prime == False:\n            subset_not_primes.append(subset)\n    \n    # Initialize an empty list to store the final answer\n    result = []\n    \n    # For each prime subset of arr, calculate the sum of products of all its elements\n    for prime_subset in subset_primes:\n        products = []\n        for i in range(len(prime_subset)):\n            products.append(prime_subset[i])\n        for j in range(i+1, len(prime_subset)):\n            products.append(prime_subset[j])\n        for k in range(j+1, len(prime_subset)):\n            products.append(prime_subset[k])\n        result.append(1)\n        for product in products:\n            result[-1] *= product\n    \n    # For each not prime subset of arr, calculate the sum of products of all its elements\n    for not_prime_subset in subset_not_primes:\n        products = []\n        for i in range(len(not_prime_subset)):\n            products.append(not_prime_subset[i])\n        for j in range(i+1, len(not_prime_subset)):\n            products.append(not_prime_subset[j])\n        for k in range(j+1, len(not_prime_subset)):\n            products.append(not_prime_subset[k])\n        result.append(1)\n        for product in products:\n            result[-1] *= product\n    \n    # Calculate the sum of all products in the final answer\n    answer = 0\n    for product in result:\n        answer += product\n    \n    return answer"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function calculates the sum of products of all possible sublists of a given list.\n    \n    Args:\n        arr (list): The list of integers.\n    \n    Returns:\n        int: The sum of products of all possible sublists of the given list.\n    \"\"\"\n\n    # Calculate the product of the first element\n    product = 1\n\n    # Initialize the sum of products to 0\n    subarray_product_sum = 0\n\n    # Loop through the list\n    for i in range(len(arr)):\n        # Calculate the product of the current element\n        element_product = product * arr[i]\n\n        # Update the sum of products\n        subarray_product_sum += element_product\n\n        # Update the product for the next iteration\n        product *= arr[i]\n\n    return subarray_product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n\n    # Initialize the prefix sum array\n    prefix_sum = [0] * (n + 1)\n\n    # Fill the prefix sum array\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate over the prefix sum array\n    for i in range(n):\n        # Initialize the current sublist\n        current_sublist = []\n\n        # Iterate over the remaining subarrays in the prefix sum array\n        for j in range(i + 1, n + 1):\n            # Append the prefix sum of the current subarray\n            current_sublist.append(prefix_sum[j])\n\n        # Calculate the product of the current sublist\n        sublist_prod = 1\n        for x in current_sublist:\n            sublist_prod *= x\n\n        # Add the product of the current sublist to the result\n        result += sublist_prod\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Base case: if n is 1, return the product of the element\n    if n == 1:\n        return arr[0]\n    # Recursive case: calculate sum of products of all possible sublists\n    else:\n        # Calculate the sum of products of all possible sublists of arr[0:i]\n        sum_prod = sum_Of_Subarray_Prod(arr[1:])\n        # Calculate the sum of products of all possible sublists of arr[0:i]\n        prod_arr = []\n        for i in range(n-1):\n            # Calculate the product of arr[i] and arr[i+1]\n            prod = arr[i] * arr[i+1]\n            # Append the product to the prod_arr\n            prod_arr.append(prod)\n        # Return the sum of products of all possible sublists\n        return sum_prod + sum(prod_arr)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    res = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(i, j):\n                dp[i][j] = (dp[i][j] + (arr[j] - arr[i]) * dp[i][k] * dp[k+1][j]) % mod\n            res = (res + dp[i][j]) % mod\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] * arr[1]\n    if n == 3:\n        return arr[0] * arr[1] * arr[2]\n    \n    # Initialize sum of products\n    sum_products = [0] * (n + 1)\n    sum_products[0] = arr[0]\n    sum_products[1] = arr[0] * arr[1]\n    sum_products[2] = arr[0] * arr[1] * arr[2]\n    \n    # Fill the rest of the sum_products array\n    for i in range(3, n + 1):\n        sum_products[i] = sum_products[i-1] + arr[i-1] * arr[i-2]\n    \n    return sum_products[n] - sum_products[0] * sum_products[1] * sum_products[2]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize a variable to store the sum of products of subarrays\n    subarray_prod_sum = 0\n\n    # Initialize a variable to store the sum of products of elements\n    element_prod_sum = 1\n\n    # Traverse through the given list\n    for i in range(len(arr)):\n\n        # Calculate the product of the current element and the subarray till i\n        subarray_prod = element_prod_sum * arr[i]\n\n        # Update the sum of products of subarrays\n        subarray_prod_sum += subarray_prod\n\n        # Update the sum of products of elements\n        element_prod_sum *= arr[i]\n\n    return subarray_prod_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    # Initialize variables for first and last bits\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # Toggle middle bits\n    n = n ^ (first_bit ^ last_bit)\n    \n    # Set first and last bits back\n    n = (n & 0xfffffffe) | first_bit | last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert the integer to binary string\n    binary_str = bin(n)[2:]\n    # get the length of the binary string\n    length = len(binary_str)\n    # get the middle index\n    middle_index = length // 2\n    # create a new string with toggled bits except the first and last bit\n    new_binary_str = ''\n    # iterate through the binary string and toggle the middle bit\n    for i in range(length):\n        if i == middle_index:\n            new_binary_str += '0'\n        elif i < middle_index:\n            new_binary_str += str((int(binary_str[i]) ^ 1) ^ (int(binary_str[i-1]) ^ 1))\n        else:\n            new_binary_str += str(int(binary_str[i]) ^ 1)\n    # convert the new binary string to an integer\n    new_n = int(new_binary_str, 2)\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Get the first and last bits of the number\n    first_bit = (n & 1) << 31\n    last_bit = ((n >> 31) & 1) << 30\n\n    # Toggle the middle bits of the number\n    middle_bits = n ^ first_bit ^ last_bit\n\n    # Combine the first and last bits with the middle bits\n    return first_bit | middle_bits | last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # Remove the first and last bits\n    mask = ~(1 << 63)\n    n &= mask\n    \n    # Toggle the middle bits\n    n ^= (1 << 63)\n    \n    # Add the first and last bits back\n    n |= (1 << 63)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bits of the given number\n    first_bit = (n >> 31) & 1\n    last_bit = (n >> 0) & 1\n\n    # To toggle the middle bits, we need to first clear the middle two bits and then set the middle two bits\n    # First, clear the middle two bits\n    n &= ~(1 << 2)\n    # Then, set the middle two bits\n    n |= (1 << 2)\n\n    # If the first bit was originally 0, set it to 1\n    if first_bit == 0:\n        n |= (1 << 31)\n    # If the first bit was originally 1, set it to 0\n    else:\n        n &= ~(1 << 31)\n\n    # If the last bit was originally 0, set it to 1\n    if last_bit == 0:\n        n |= (1 << 0)\n    # If the last bit was originally 1, set it to 0\n    else:\n        n &= ~(1 << 0)\n\n    # Return the new number with toggled middle bits\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # initialize left and right bits to the last two bits of n\n    left_bit = n & 0x03\n    right_bit = (n & 0x0C) >> 2\n    \n    # toggle bits except left and right bits\n    toggled_bit = (left_bit ^ right_bit) & 0x03\n    \n    # combine toggled bit with the first and last bits\n    result = (toggled_bit << 2) | (n & 0x0F)\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Find the index of the last set bit\n    while (n & 1) == 0:\n        n >>= 1\n    last_set_bit = n\n    \n    # Find the index of the first set bit\n    while (n & 1) == 1:\n        n >>= 1\n    first_set_bit = n\n    \n    # Toggle the bits in the middle\n    for i in range(first_set_bit + 1, last_set_bit - 1):\n        n ^= (1 << i)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # initialize variables\n    first_bit = n & (1 << 31)\n    last_bit = n & (1 << 0)\n    n = n ^ (first_bit | last_bit)\n    n = n ^ (first_bit & last_bit)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n    # Convert binary to int\n    n = int(n, 2)\n    \n    # Compute first and last bits\n    first_bit = n & 1\n    last_bit = (n >> (n.bit_length() - 1)) & 1\n    \n    # Toggle middle bits\n    middle_bits = (n & ~(1 << (n.bit_length() - 2))) | (1 << (n.bit_length() - 2))\n    n = n ^ middle_bits\n    \n    # Toggle first and last bits\n    n = n ^ (1 << n.bit_length() - 1)\n    n = n ^ (1 << 0)\n    \n    # Convert int back to binary\n    n = bin(n)[2:].zfill(n.bit_length())\n    \n    # Concatenate first and last bits with middle bits\n    result = str(middle_bits) + str(first_bit) + str(last_bit)\n    \n    return int(result, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # get the length of the binary representation of n\n    length = len(bin(n)[2:])\n    # get the middle position of the number\n    middle = length // 2\n    # get the first and last bits of the number\n    first = n & 1\n    last = n >> middle\n    # toggle all the bits except the first and last\n    n = n ^ ((~first) & (~last) & ((1 << middle) - 1))\n    # return the updated number\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return i\n    elif a[i-1] == x:\n        return i-1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a):\n        return len(a)\n    elif idx!= 0 and a[idx - 1]!= x:\n        return idx\n    else:\n        return idx - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        a (list): A sorted list of elements.\n        x (int): A value to search for.\n\n    Returns:\n        int: The index of the left insertion point.\n\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return len(a)\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        elif a[index] < x:\n            return bisect.bisect_left(a[:index], x)\n        else:\n            return bisect.bisect_left(a[index+1:], x)\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use binary search to find the index of the leftmost element that is greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # If x is less than the leftmost element, return 0 (since insertion points must be at least one position to the right of the leftmost element)\n    if index == 0:\n        return 0\n    # Otherwise, return the index of the leftmost element that is greater than x (i.e., the left insertion point)\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(a) - 1\n\n    # Find the position where the new value should be inserted\n    pos = bisect.bisect_left(a, x)\n\n    # If the position is less than the length of the array, return the position as it is\n    if pos < len(a):\n        return pos\n\n    # If the position is equal to the length of the array, return the position as it is\n    elif pos == len(a):\n        return pos\n\n    # If the position is greater than the length of the array, return the position as it is\n    else:\n        return pos - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use binary search to find the left insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match: \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n\n    def helper(n, p):\n        \"\"\"\n        Helper function for geometric_sum.\n        \"\"\"\n        if n == 1:\n            return p\n        else:\n            return p * helper(n-1, p)\n\n    return helper(n-1, 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    return n * (1 - (1 / n)) * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * (1 - (1 / n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_triangular(n):\n        for i in range(5, int(math.log10(n))+1):\n            tri = int(n**(1/i))\n            if tri**i!= n:\n                return False\n        return True\n    \n    def smallest_triangular(n):\n        triangular_num = 1\n        while True:\n            if is_triangular(triangular_num):\n                return triangular_num\n            triangular_num += 1\n    \n    def smallest_triangular_with_n_digits(n):\n        smallest_triangular_num = smallest_triangular(n)\n        while len(str(smallest_triangular_num)) < n:\n            smallest_triangular_num += 1\n        return smallest_triangular_num\n    \n    return smallest_triangular_with_n_digits(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the index of the smallest triangular number with n digits\n    index = n * (n + 1) // 2 \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Finding the smallest triangular number with n digits\n    triangular_number = (int(math.pow(10, n-1)) * (int(math.pow(10, n-1)) + 1)) // 2\n    # Finding the index of smallest triangular number with n digits\n    for i in range(1, triangular_number+1):\n        triangular_number += 1\n        if triangular_number == (int(math.pow(10, n-1)) * (int(math.pow(10, n-1)) + 1)) // 2:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n\n    # Function to find the smallest triangular number with n digits\n    def find_Smallest(n): \n        if n == 1: \n            return 1\n        else: \n            triangular = [1] \n            for i in range(2, n+1): \n                triangular.append(math.ceil(triangular[-1]/i) * i) \n            return triangular[-1]\n\n    # Finding the smallest triangular number with n digits\n    smallest = find_Smallest(n)\n\n    # Function to find the index of the smallest triangular number with n digits\n    def find_Index(n): \n        if n == 1: \n            return 1\n        else: \n            triangular = [1] \n            for i in range(2, n+1): \n                triangular.append(math.ceil(triangular[-1]/i) * i) \n            index = 0\n            for i in range(n+1): \n                if triangular[i] == smallest: \n                    index = i \n                    break\n            return index\n\n    # Calling the function to find the index of the smallest triangular number with n digits\n    return find_Index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    def is_triangular(num):\n        \"\"\"\n        Check if a number is triangular.\n        \"\"\"\n        tri = 0\n        for i in range(1, int(num**0.5) + 1):\n            tri += int(num/i)\n        return tri == num\n\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_square(num):\n        \"\"\"\n        Check if a number is a square.\n        \"\"\"\n        return num % 4 == 1\n\n    def is_pentagonal(num):\n        \"\"\"\n        Check if a number is a pentagonal.\n        \"\"\"\n        return num % 28 == 1\n\n    def is_hexagonal(num):\n        \"\"\"\n        Check if a number is a hexagonal.\n        \"\"\"\n        return num % 89 == 1\n\n    def is_heptagonal(num):\n        \"\"\"\n        Check if a number is a heptagonal.\n        \"\"\"\n        return num % 225 == 1\n\n    def is_octagonal(num):\n        \"\"\"\n        Check if a number is an octagonal.\n        \"\"\"\n        return num % 513 == 1\n\n    def is_nonagonal(num):\n        \"\"\"\n        Check if a number is a nonagonal.\n        \"\"\"\n        return num % 1319 == 1\n\n    def is_decagonal(num):\n        \"\"\"\n        Check if a number is a decagonal.\n        \"\"\"\n        return num % 3168 == 1\n\n    def is_dodecagonal(num):\n        \"\"\"\n        Check if a number is a dodecagonal.\n        \"\"\"\n        return num % 63681 == 1\n\n    def is_tetradecagonal(num):\n        \"\"\"\n        Check if a number is a tetradecagonal.\n        \"\"\"\n        return num % 1294001 == 1\n\n    def is_trigonal(num):\n        \"\"\"\n        Check if a number is a trigonal.\n        \"\"\"\n        return num % 2048001 == 1\n\n    def is_square_of_any_shape(num):\n        \"\"\"\n        Check if a number is a square of any shape.\n        \"\"\"\n        return is_square(num) or is_pentagonal(num) or is_hexagonal(num) or is_heptagonal(num) or is_octagonal(num) or is_nonagonal(num) or is_decagonal(num) or is_dodecagonal(num) or is_tetradecagonal(num) or is_trigonal(num)\n\n    def is_prime_or_square_of_any_shape(num):\n        \"\"\"\n        Check if a number is prime or a square of any shape.\n        \"\"\"\n        return is_prime(num) or is_square_of_any_shape(num)\n\n    def is_odd_prime_or_square_of_any_shape(num):\n        \"\"\"\n        Check if a number is odd prime or a square of any shape.\n        \"\"\"\n        return is_odd_prime(num) or is_odd_square(num)\n\n    def is_odd_prime(num):\n        \"\"\"\n        Check if a number is odd prime.\n        \"\"\"\n        return is_prime(num) and num % 2 == 1\n\n    def is_odd_square(num):\n        \"\"\"\n        Check if a number is odd square.\n        \"\"\"\n        return is_square(num) and num % 2 == 1\n\n    def is_odd_pentagonal(num):\n        \"\"\"\n        Check if a number is odd pentagonal.\n        \"\"\"\n        return is_pentagonal(num) and num % 2 == 1\n\n    def is_odd_hexagonal(num):\n        \"\"\"\n        Check if a number is odd hexagonal.\n        \"\"\"\n        return is_hexagonal(num) and num % 2 == 1\n\n    def is_odd_heptagonal(num):\n        \"\"\"\n        Check if a number is odd heptagonal.\n        \"\"\"\n        return is_heptagonal(num) and num % 2 == 1\n\n    def is_odd_octagonal(num):\n        \"\"\"\n        Check if a number is odd oct"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # initializing a variable to store the smallest triangular number with n digits\n    smallest_num = 10 ** (n - 1)\n\n    # loop to find the smallest triangular number with n digits\n    for i in range(2, smallest_num + 1):\n        # check if the triangular number has n digits\n        if str(i).length() == n:\n            # if yes, store the index of the number\n            return i - smallest_num\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize a variable to store the smallest triangular number \n    smallest = 0 \n\n    # Iterate n times to find the smallest triangular number with n digits \n    for i in range(n): \n        # Calculate the next triangular number by summing the previous two \n        triangular = (i * (i + 1)) // 2 \n        # Update the smallest variable if the new triangular number is smaller than the current smallest \n        if triangular < smallest: \n            smallest = triangular \n\n    # Return the index of the smallest triangular number with n digits \n    return int(math.log10(smallest)) "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize max_num with smallest positive integer\n    max_num = 1\n\n    # Initialize index with 0\n    index = 0\n\n    # Loop till n digits are added to max_num\n    while len(str(max_num)) < n:\n        max_num *= 10\n        index += 1\n\n    # Return index\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize the result to be the smallest triangular number with n digits\n    smallest_triangular = 10**(n-1)\n\n    # Loop through each digit starting from the last digit and ending with the first digit\n    for i in range(n-1, 0, -1):\n\n        # Calculate the next digit in the triangular number\n        next_digit = smallest_triangular + smallest_triangular - 2 * i\n\n        # Check if the next digit is less than the current smallest triangular number\n        if next_digit < smallest_triangular:\n            smallest_triangular = next_digit\n\n        # Set the next digit to be the current smallest triangular number\n        smallest_triangular = math.ceil(smallest_triangular)\n\n    # Return the index of the smallest triangular number with n digits\n    return math.ceil(smallest_triangular/10**(n-1))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_list = [0] * (2*n+1) \n    triangular_list[0] = 1 \n    triangular_list[1] = 3 \n\n    for i in range(2, len(triangular_list)): \n        triangular_list[i] = triangular_list[i-1] + triangular_list[i-2] \n        if triangular_list[i] % 10**n == 0: \n            return i "
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    i = 0\n    while i < len(test_tup)-1:\n        new_dict[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    # initialize an empty dictionary\n    d = {}\n    # loop through each element in the tuple\n    for i in range(len(test_tup)):\n        # if the index is odd, add the current element as the key\n        if i % 2 == 1:\n            # if the key already exists in the dictionary, add the second element to the existing list\n            if test_tup[i] in d:\n                d[test_tup[i]].append(test_tup[i+1])\n            else:\n                # if the key doesn't exist, create a new list with the second element\n                d[test_tup[i]] = [test_tup[i+1]]\n    # return the final dictionary\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    dict_obj = {}\n    # iterate through the tuple and add the key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    # return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the tuple to a dictionary using adjacent elements\n    test_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Traverse the given tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element and the next element as a key-value pair in the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # Return the final dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    d = {}\n    # loop through the tuple\n    for i in range(0, len(test_tup)-1, 2):\n        # add the current element as a key and the next element as a value to the dictionary\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # converting the string to a set, which automatically removes duplicates\n    set_s = set(s)\n    \n    # checking if the length of the set is 1, which means all the characters are the same\n    if len(set_s) == 1:\n        return True\n    \n    # returning False if the length of the set is greater than 1\n    return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to list\n    s_list = list(s)\n    \n    # Check if all the elements in the list are the same\n    if all(s_list[0] == c for c in s_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Taking input from the user\n    s = input(\"Enter a string: \")\n\n    # Checking if all the characters in the string are same or not\n    if len(set(s)) == 1:\n        print(\"All the characters are same.\")\n    else:\n        print(\"All the characters are not same.\")"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    if s[0]!= s[1]:\n        return False\n    return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate over each character in the string\n    for char in s:\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n            \n    # Check if all the values in the dictionary are 1\n    for count in char_count.values():\n        if count!= 1:\n            return False\n            \n    # If all the values are 1, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and checks if all the characters in the string are the same.\n    '''\n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    area = (2 * s) / (math.sqrt(3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) * (math.sqrt(2) / 2)\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = side * math.sqrt(3) / 4\n    return base ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.25 * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n    \n    :param side: the length of the base of the triangle\n    :type side: float\n    :return: the area of the tetrahedron\n    :rtype: float\n    \"\"\"\n    return (1/6) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2  # side length\n    area = math.sqrt(3) / 4 * s * (s - math.sqrt(6)) ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side**2 * math.sin(math.pi/3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    d = side\n\n    # Use Heron's formula\n    s = (a + b + c + d) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (side ** 2) / 3\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(semi_perimeter * (semi_perimeter - side) * (semi_perimeter - 2 * side) * (semi_perimeter - 3 * side))\n\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    # If the number of items to be rotated is greater than the list length, return the original list.\n    if m > n:\n        return list\n    # Calculate the number of items to be rotated.\n    k = m % n\n    # Reverse the first n-k items and the last k items of the list.\n    list[0:n-k] = list[0:n-k][::-1]\n    list[n-k:] = list[n-k:][::-1]\n    # Reverse the entire list.\n    list = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m == 0 or m == n:\n        return list\n    elif m < 0:\n        m = n + m\n    temp = list[-m:]\n    list = list[:-m]\n    list.extend(temp)\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    \n    # rotate the list\n    list[:] = list[-m:] + list[:-m]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # handle special case where m is greater than n\n    if m > n:\n        m = m % n\n\n    # rotate the list\n    for i in range(m):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m == 0 or m == n:\n        return list\n    elif m < 0:\n        m = n + m\n    # move all elements m steps to the right\n    for i in range(m):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # if m > n then no rotation is required\n    if m > n:\n        return list\n    \n    # reverse first half of the list\n    left = 0\n    right = n - 1\n    while left < right:\n        list[left], list[right] = list[right], list[left]\n        left += 1\n        right -= 1\n    \n    # rotate the second half of the list by m items\n    while m > 0:\n        list[right], list[right - m] = list[right - m], list[right]\n        right -= 1\n        m -= 1\n        \n    # reverse the whole list\n    left = 0\n    right = n - 1\n    while left < right:\n        list[left], list[right] = list[right], list[left]\n        left += 1\n        right -= 1\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotates a given list by n items to the right direction.\n    \"\"\"\n    if n > len(lst) // 2:\n        # If we need to rotate more items than the list length, rotate the entire list.\n        lst = lst[n:] + lst[:n]\n    else:\n        # If we need to rotate fewer items than the list length, rotate the first n items.\n        lst = lst[-n:] + lst[:-n]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n  # To handle negative values of m\n    list[:m], list[n - m:n] = list[n - m:n], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    # Check if m is within the range of the list\n    if m >= n:\n        return list\n    # Create a new list to store the rotated elements\n    rotated_list = []\n    # Iterate over the list\n    for i in range(n-m):\n        rotated_list.append(list[i])\n    for i in range(m, n):\n        rotated_list.append(list[i])\n    # Return the rotated list\n    return rotated_list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if it contains any none value,\n    False otherwise.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits_set = set()\n    for num in range(startnum, endnum+1):\n        for digit in str(num):\n            digits_set.add(int(digit))\n    return [num for num in range(startnum, endnum+1) if all(num % digit == 0 for digit in digits_set)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda num: all(num % int(digit) == 0 for digit in str(num)) and num >= startnum and num <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % i == 0 for i in range(1, 10)), range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(d) % i == 0 for i in range(1, 10)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_valid(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit in its digits\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        return all(digit % 10 == 0 for digit in digits)\n\n    return list(filter(is_valid, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        return all(num % digit == 0 for digit in str(num))\n    \n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digit(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(digit % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r * r * math.sin(math.radians(a/2))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    \n    else:\n        return math.pi * r * r\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is within the range of 0 to 360 degrees\n    if a >= 0 and a <= 360:\n        # Calculate the area of the sector using the formula A = pi * r^2 * sin(a/180*pi)\n        A = math.pi * r**2 * math.sin(math.radians(a/180*math.pi))\n        # Return the area of the sector\n        return A\n    else:\n        # Return None if the angle is larger than 360 degrees\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector using the formula: A = pi * r^2 * sin(angle/180*pi)\n    area = math.pi * r**2 * math.sin(math.radians(a/180*math.pi))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate area of sector\n    area = math.pi*(r**2)*math.sin(math.radians(a/360))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r*r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi*(r**2)\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area=math.pi*(r**2)*a/360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is valid\n    if a > 360:\n        return None\n    else:\n        # Calculate the area using the formula for a sector\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Find lengths of all three strings\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Step 2: Create a table to store lengths of LCS for subproblems\n    dp = [[0]*(p+1) for i in range(m+1)]\n\n    # Step 3: Fill in table using LCS formula\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Step 4: Trace LCS and return result\n    L = dp[m][p]\n    result = []\n    i = m\n    j = p\n    while L!= 0:\n        if X[i-1] == Y[j-1]:\n            result.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(result[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # creating a 3D table to store lengths of longest common subsequences\n    LCS = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # filling the 3D table using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    LCS[i][j][k] = LCS[i-1][j][k]\n                elif Y[j-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i][j-1][k]\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n\n    # backtracking to get the actual longest common subsequence\n    i = m\n    j = n\n    k = o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif Y[j-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n    lcs.reverse()\n\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    # Create a 3D table to store lengths of longest common subsequence for all prefixes of X, Y, and Z\n    dp = [[[0]*(p+1) for j in range(n+1)] for i in range(m+1)]\n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i-1][j-1][k-1])\n    # Initialize the result list with empty strings\n    result = []\n    # Reconstruct the subsequence by tracing the paths in the 3D table\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            result.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i][j-1][k]:\n            i -= 1\n        elif dp[i][j-1][k] == dp[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    # Reverse the result list to get the actual longest common subsequence\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    dp = [[0] * (p+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                    if dp[i][j] > dp[i-1][j]:\n                        dp[i][j] = dp[i-1][j]\n                elif dp[i-1][j] > dp[i][j-1]:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i][j-1]\n\n    LCS = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(LCS[::-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m, n = len(X), len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    lcs = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            if X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1\n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    return p[n][m]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    n, m, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p+1) for i in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    dp[i][j][k] = dp[i-1][j][k]\n                elif X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i][j-1][k]\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i-1][j-1][k-1])\n\n    return dp[n][m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Initialize an empty list to store the length of LCS for all possible subsequences\n    lcs_lengths = []\n    # Loop through all possible subsequences of X, Y and Z\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                # If the current subsequence is empty, then LCS is 0\n                if i == 0 and j == 0 and k == 0:\n                    lcs_lengths.append(0)\n                # If the current subsequence contains a common prefix with X, then append the length of LCS of X and Y\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    lcs_lengths.append(lcs_lengths[i - 1][j - 1] + 1)\n                # If the current subsequence contains a common prefix with Y, then append the length of LCS of Y and Z\n                elif Y[j - 1] == Z[k - 1]:\n                    lcs_lengths.append(lcs_lengths[i][j - 1] + 1)\n                # If the current subsequence contains a common prefix with Z, then append the length of LCS of X and Z\n                elif X[i - 1] == Z[k - 1]:\n                    lcs_lengths.append(lcs_lengths[i - 1][j] + 1)\n\n    # Find the longest common subsequence by backtracking\n    max_length = 0\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                # If the current subsequence is the longest common subsequence, then update the max_length\n                if lcs_lengths[i][j] == max_length and X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    max_length = max_length\n                # If the current subsequence is not the longest common subsequence, then update the max_length\n                elif lcs_lengths[i][j] > max_length:\n                    max_length = lcs_lengths[i][j]\n\n    # Initialize an empty list to store the actual LCS\n    lcs = []\n    # Backtrack through the LCS_lengths and store the characters of X, Y and Z that form the LCS\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                # If the current subsequence is the longest common subsequence, then add the characters of X, Y and Z that form the LCS\n                if lcs_lengths[i][j] == max_length and X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    lcs.append(X[i - 1])\n                    lcs.append(Y[j - 1])\n                    lcs.append(Z[k - 1])\n                    # Remove the characters that have already been added to the LCS from the lengths list\n                    lcs_lengths[i] = lcs_lengths[i][:i - 1] + lcs_lengths[i][i:]\n                    lcs_lengths[j] = lcs_lengths[j][:j - 1] + lcs_lengths[j][j:]\n                    lcs_lengths[k] = lcs_lengths[k][:k - 1] + lcs_lengths[k][k:]\n                    # Remove the characters that have already been added to the LCS from the X, Y and Z strings\n                    X = X[:i - 1] + X[i:]\n                    Y = Y[:j - 1] + Y[j:]\n                    Z = Z[:k - 1] + Z[k:]\n\n    # Remove the extra characters from the LCS\n    lcs = ''.join(lcs)\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Step 1: Convert all the strings into lists of characters \n    X = list(X) \n    Y = list(Y) \n    Z = list(Z) \n\n    # Step 2: Initialize three empty lists to store LCS for each subsequence \n    LCS1 = [] \n    LCS2 = [] \n    LCS3 = [] \n\n    # Step 3: Initialize a variable to store the length of the longest common subsequence \n    max_len = 0 \n\n    # Step 4: Traverse through all possible pairs of subsequences \n    for i in range(len(X)): \n        for j in range(len(Y)): \n            for k in range(len(Z)): \n                # Step 5: Calculate the length of the LCS for the current subsequence \n                len_lcs = 0 \n                for m in range(len(X[i])): \n                    if X[i][m] == Y[j][m]: \n                        len_lcs += 1 \n                    if X[i][m] == Z[k][m]: \n                        len_lcs += 1 \n                # Step 6: Compare the length of LCS with the current maximum and update the LCS lists \n                if len_lcs > max_len: \n                    max_len = len_lcs \n                    LCS1 = [X[i][m] for m in range(len(X[i])) if X[i][m] == Y[j][m]] \n                    LCS2 = [X[i][m] for m in range(len(X[i])) if X[i][m] == Z[k][m]] \n                    LCS3 = [X[i][m] for m in range(len(X[i])) if X[i][m] == X[i][m]] \n\n    # Step 7: Return the LCS lists \n    return LCS1, LCS2, LCS3, max_len "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Function to find the length of the longest common subsequence\n    def lcs_length(X, Y, Z):\n        # Initialize a table to store the length of the longest common subsequence\n        table = [[0 for j in range(len(Z)+1)] for i in range(len(X)+1)]\n\n        # Fill the table in bottom-up manner\n        for i in range(1, len(X)+1):\n            for j in range(1, len(Z)+1):\n                if X[i-1] == Z[j-1]:\n                    table[i][j] = table[i-1][j-1] + 1\n                else:\n                    table[i][j] = max(table[i-1][j], table[i][j-1])\n\n        return table[len(X)][len(Z)]\n\n    # Find the length of the longest common subsequence\n    len_lcs = lcs_length(X, Y, Z)\n\n    # Initialize a matrix to store the common subsequence\n    lcs = [[0 for j in range(len_lcs+1)] for i in range(len_lcs+1)]\n\n    # Fill the matrix in top-down manner\n    i = len(X)\n    j = len(Z)\n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            lcs[i][j] = lcs[i-1][j-1] + 1\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Convert the matrix to a list of characters\n    lcs_str = ''.join([X[i] for i in range(len(X)-1, -1, -1)])\n\n    return lcs_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert all the words in the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Create an empty list to store the words with spaces between them\n    new_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the first character of the word is a capital letter\n        if word[0].isupper():\n            # If it is, add a space before it\n            new_words.append(' '+word)\n        else:\n            # If it's not, simply add it to the list\n            new_words.append(word)\n    # Join the words with spaces between them to form the final string\n    result =''.join(new_words)\n    # Return the final string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def capital_words_spaces(s):\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', s)\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    s =''.join(words)\n    return s"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern for matching capitalized words\n    pattern = re.compile(r'\\b\\w')\n\n    # Find all matches of the pattern in the input string\n    matches = pattern.findall(str1)\n\n    # Iterate over the matches and replace the first letter of each word with a space\n    for i in range(len(matches)):\n        if matches[i][0].isupper():\n            str1 = re.sub(r'\\b' + matches[i],'' + matches[i], str1)\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Join the words with spaces between them\n    capitalized_words =''.join(words)\n\n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # convert all the words to lowercase\n    str1 = str1.lower()\n    \n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # loop through each word and capitalize it if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    \n    # join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\w*')\n    words = re.findall(pattern, str1)\n    words_with_spaces = []\n    for word in words:\n        if len(word) > 1 and word[0].isupper():\n            words_with_spaces.append(word)\n        else:\n            words_with_spaces.append(word)\n            words_with_spaces.append(' ')\n    return ''.join(words_with_spaces).strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(?<!\\w\\.\\w.)(<.*?>|\\w\\.)'\n    words = re.findall(pattern, str1)\n    words = [' '.join(w.split()) for w in words]\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string by whitespace and capitalize each word\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    words = [word.capitalize() for word in words]\n    # Join the words back into a string with spaces between them\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to find all capital letters followed by a space\n    pattern = r'\\b[A-Z][a-z]*\\s'\n    # Replace the matched pattern with a space\n    return re.sub(pattern,'', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n\n    # Capitalizing the first letter of each word\n    words_capitalized = [word.capitalize() for word in words]\n\n    # Joining the words with spaces\n    final_str =''.join(words_capitalized)\n\n    return final_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all string values to float\n    nums_float = [float(num) for num in nums_str]\n    # Sort the list in ascending order\n    nums_float.sort()\n    # Convert the sorted list back to string values\n    nums_str = [str(num) for num in nums_float]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda s: float(s))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to floats\n    nums = [float(num_str) for num_str in nums_str]\n    \n    # Sort the list numerically\n    nums.sort()\n    \n    # Convert back to strings\n    sorted_nums = [str(num) for num in nums]\n    \n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n\n    nums.sort()\n\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert strings of numbers to integers and sort them\n    nums = [int(x) for x in nums_str]\n    nums.sort()\n    # Convert sorted integers back to strings and return the result\n    return [str(x) for x in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda s: [int(c) for c in s if c.isdigit()])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Use the built-in `sorted` function to sort the list of strings\n    sorted_nums_str = sorted(nums_str, key=lambda s: [int(c) for c in s])\n    \n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    # Define a function to convert a string to a numeric value\n    def string_to_num(s):\n        try:\n            return int(s)\n        except ValueError:\n            return float(s)\n\n    # Convert each string in the list to a numeric value\n    nums = [string_to_num(s) for s in nums_str]\n\n    # Sort the list numerically\n    nums.sort()\n\n    # Convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    \"\"\"\n    nums_list = []\n    for num in nums_str:\n        nums_list.append(int(num))\n    nums_list.sort()\n    return nums_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Concatenate the two tuples\n    combined_tup = test_list + test_tup\n\n    # Return the combined tuple\n    return combined_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the list to a set to ensure uniqueness\n    unique_list = set(test_list)\n    \n    # Add the tuple to the unique list\n    unique_list.add(test_tup)\n    \n    # Convert the set back to a list\n    result = list(unique_list)\n    \n    return result"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.remove(item)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # adding the tuple to the list\n    test_list.extend(test_tup)\n    print(\"The new list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, parent(i))\n\ndef parent(i):\n    '''\n    Returns the index of the parent of the given node.\n    '''\n    return (i-1)//2\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_min_heap(arr):\n    '''\n    Returns True if the given array represents a min heap, False otherwise.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i//2]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    if arr[parent] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, parent)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2 == 1:\n        return False\n    for i in range(1, len(arr) // 2 + 1):\n        if arr[i] > arr[2 * i]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    This function checks if the given array represents a min heap or not.\n    \"\"\"\n\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n    \n    # Check if the left child of i is smaller than the root\n    if arr[i] < arr[2 * i]:\n        return False\n    \n    # Recursively check the left and right children of i\n    return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[i] < arr[parent]:\n        return False\n    return check_min_heap_helper(arr, parent)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i > 0:\n        if arr[i] > arr[int(i/2)]:\n            return False\n\n    if i*2 <= len(arr)-1:\n        if arr[i] > arr[i*2]:\n            return False\n\n    if i*2+1 <= len(arr)-1:\n        if arr[i] > arr[i*2+1]:\n            return False\n\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    n = len(arr)\n\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2 * i + 1] and arr[i] < arr[2 * i + 2]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    if arr[i] >= arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    for i in range(2, n+1):\n        j = (j * (i*2 - 1)) // (i - 1)\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initializing variables\n    a = 0\n    b = 1\n    # calculating the nth jacobsthal number\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    jacobsthal_numbers = [0, 1, 1]\n\n    for i in range(3, n+1):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2])\n\n    return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function finds the nth jacobsthal number using the formula:\n        j(n) = n*(3*n^2 - 1) / (2*(n^2 - 1))\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (3*n**2 - 1) // (2*(n**2 - 1))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*jacobsthal_num(n-1) + jacobsthal_num(n-2)) % 21"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative.\")\n    elif n == 0:\n        return 0\n    else:\n        jacobsthal_nums = [0, 1]\n        for _ in range(2, n):\n            jacobsthal_nums.append(jacobsthal_nums[-1] + jacobsthal_nums[-2])\n        return jacobsthal_nums[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = n\n        for i in range(2, n+1):\n            jacob_num = (2*i - 1) * jacob_num\n        return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev_num = jacobsthal_num(n-1)\n        return (prev_num * prev_num) + ((prev_num+1) * jacobsthal_num(n-2))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacobsthal = [1]\n    lucas = [1, 1]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n        jacobsthal.append(jacobsthal[i-1] + 2*lucas[i-1])\n    return jacobsthal[-1]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort()  # sort the list by the first element of each tuple\n    min_list = []  # initialize empty list to store k smallest records\n    for i in range(len(test_list) - K):\n        min_list.append(test_list[i])  # append each k-th smallest record to the list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # Sort the list by the first element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[0])\n    # Initialize minimum count\n    min_count = K\n    # Initialize minimum record\n    min_record = None\n    # Initialize minimum index\n    min_index = None\n    # Iterate over the list\n    for i, record in enumerate(test_list):\n        if min_count == 1:\n            # If we have only one record left, set it as minimum record and return\n            min_record = record\n            min_index = i\n            break\n        if min_count > 1:\n            # If we have more than one record left, decrement the count\n            min_count -= 1\n            # If the current record has lower score than minimum, update minimum\n            if record[0] < min_record[0]:\n                min_record = record\n                min_index = i\n    # If we have less than K records left, return None\n    if min_count < K:\n        return None\n    # Otherwise, return the minimum record and its index\n    else:\n        return min_record, min_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on second element (since we want to find the minimum k records)\n    test_list.sort(key=lambda x: x[1])\n    # Create a list to store the minimum k records\n    min_k_records = []\n    # Initialize variables to keep track of minimum and maximum values\n    min_val = float('inf')\n    max_val = float('-inf')\n    # Iterate through the sorted list and add the minimum k records to the list\n    for i in range(len(test_list)):\n        # If we have reached the minimum k records, break out of the loop\n        if len(min_k_records) == K:\n            break\n        # If the value of the current record is less than the minimum, add it to the list\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_k_records = [test_list[i]]\n        # If the value of the current record is greater than the maximum, update the maximum value and add the minimum k records to the list\n        elif test_list[i][1] > max_val:\n            max_val = test_list[i][1]\n            min_k_records.append(test_list[i])\n        # If the value of the current record is between the minimum and maximum, add it to the list\n        else:\n            min_k_records.append(test_list[i])\n    # Return the list of minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    min_vals = []\n    for i in range(K):\n        min_vals.append(float('inf'))\n\n    for i in range(len(test_list)):\n        min_index = min_vals.index(float('inf'))\n        if min_vals[min_index] > test_list[i][0]:\n            min_vals[min_index] = test_list[i][0]\n        if min_vals[min_index] == test_list[i][0]:\n            if test_list[i][1] < min_vals[min_index]:\n                min_vals[min_index] = test_list[i][1]\n\n    min_val = min_vals[-1]\n    min_index = min_vals.index(min_val)\n    result = [(i[0], i[1]) for i in test_list[min_index+1:K+min_index+1]]\n\n    return min_val, result\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Arguments:\n    test_list -- List of tuples\n    K -- Number of records to be returned\n    \n    Returns:\n    List of tuples containing K records with minimum value\n    '''\n\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize an empty list to store the minimum K records\n    min_records = []\n\n    # Iterate through the sorted list of tuples\n    for i in range(K):\n\n        # Check if the current tuple has a smaller value than the last record added to the min_records list\n        if i == 0 or test_list[i][0] < min_records[-1][0]:\n\n            # If the current tuple is the smallest or the last record in the list, add it to the min_records list\n            min_records.append(test_list[i])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for elem in test_list:\n        if elem[0] in freq:\n            freq[elem[0]] += 1\n        else:\n            freq[elem[0]] = 1\n\n    # Sort the dictionary by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Find the minimum K records and return them as a list\n    min_records = [elem[0] for elem in sorted_freq[:K]]\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list of tuples based on first element in each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # initialize variables to store minimum k records\n    min_k_list = []\n    # loop through the list and find minimum k records\n    for i in range(len(sorted_list)):\n        if len(min_k_list) < K:\n            min_k_list.append(sorted_list[i])\n        else:\n            if sorted_list[i][0] > min_k_list[0][0]:\n                del min_k_list[0]\n                min_k_list.append(sorted_list[i])\n            elif sorted_list[i][0] == min_k_list[0][0]:\n                min_k_list.append(sorted_list[i])\n    # return the minimum k records found\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    minimum_records = sorted_list[:K]\n    return minimum_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n\n    # Sort the list of tuples based on the second element of the tuples\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize the minimum k records list to an empty list\n    min_k_records = []\n\n    # Iterate through the sorted list and add the first K elements to the min_k_records list\n    for i in range(K):\n        min_k_records.append(sorted_list[i])\n\n    # Return the min_k_records list\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    \"\"\"\n    # Creating an empty dictionary to store the count of each element in the tuple list\n    count = {}\n    # Loop through each tuple in the list\n    for t in test_list:\n        # Extracting the element from each tuple\n        elem = t[0]\n        # If the element exists in the dictionary, increment its count by 1\n        if elem in count:\n            count[elem] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            count[elem] = 1\n    # Creating an empty list to store the minimum k records\n    min_records = []\n    # Loop through the elements in the dictionary and check if the count of each element is greater than or equal to k\n    for key, value in count.items():\n        if value >= K:\n            # Add the element to the minimum k records list if its count is greater than or equal to k\n            min_records.append(key)\n    # If there are less than K elements in the dictionary, return an error message\n    if len(min_records) < K:\n        return \"Error: There are less than k elements in the dictionary\"\n    # Otherwise, return the minimum k records list\n    else:\n        return min_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to store the common elements\n    common = []\n    # loop through the first list\n    for i in range(len(l1)):\n        # check if the element is in all the other lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # add the element to the common list\n            common.append(l1[i])\n    # return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Initialize an empty list to store common elements\n    common = []\n    \n    # Iterate over all indices of the first list\n    for i in range(len(l1)):\n        # If the element at the current index is also present in the second list and the third list, add it to the common list\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    \n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # If the element at the current index is in both l1 and l2, and also in l3\n        if l1[i] in l2 and l1[i] in l3:\n            # Append the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # initialize an empty list to store the common elements\n    common_elements = []\n\n    # iterate through the first list\n    for i in range(len(l1)):\n        # check if the element exists in the second and third list\n        if l1[i] in l2 and l1[i] in l3:\n            # if it does, add it to the common elements list\n            common_elements.append(l1[i])\n\n    # return the common elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3 and l2[i] in l1:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2 and l3[i] in l1:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    min_num = max_num = float('inf')\n    for num in numbers:\n        if num < min_num:\n            max_num = min_num\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    \n    if min_num == max_num:\n        return None\n    \n    return min_num"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number.\n    '''\n    numbers.sort() #sort the list in ascending order\n    return numbers[1] #return the second smallest number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element in the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        raise ValueError(\"List does not have a second smallest number.\")\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Check if there are less than 2 numbers in the list\n    if len(numbers) < 2:\n        return None\n    \n    # Sort the list in descending order\n    numbers.sort(reverse=True)\n    \n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return numbers[1]\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest and numbers[i]!= smallest:\n                second_smallest = numbers[i]\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return min(numbers[1:], key=lambda x: x)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'a(b|){0,}')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?:b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_match_zero_one(text):\n    pattern = r'a(?=b*b*b*)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a[b]*')\n    result = pattern.match(text)\n    if result:\n        print('Match found!')\n    else:\n        print('No match found.')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b)*')\n    result = pattern.search(text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return \"No match\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*a'\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - i - 1):\n            if test_list[i][::-1] in test_list[j:j+i+1]:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create an empty dictionary to store the count of reverse pairs\n    reverse_count = {}\n    # loop through the string list\n    for string in test_list:\n        # convert the string to a list of characters\n        string_list = list(string)\n        # sort the list of characters in reverse order\n        string_list.sort(reverse=True)\n        # convert the sorted list of characters back to a string\n        sorted_string = ''.join(string_list)\n        # check if the sorted string is already present in the dictionary\n        if sorted_string in reverse_count:\n            # if it is, increment the count by 1\n            reverse_count[sorted_string] += 1\n        else:\n            # if it is not, add it to the dictionary with a count of 1\n            reverse_count[sorted_string] = 1\n    # return the dictionary of reverse pairs and their counts\n    return reverse_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n\n    Args:\n    test_list (list): A list of strings.\n\n    Returns:\n    int: The number of pairs of reverse strings in the list.\n    \"\"\"\n    # Sort the list of strings alphabetically\n    sorted_list = sorted(test_list)\n\n    # Initialize counters for the pairs of reverse strings\n    pair_counts = [0] * (len(sorted_list) // 2)\n\n    # Iterate over each pair of strings\n    for i in range(len(sorted_list) // 2):\n        # Check if the current string is a reverse of the next string\n        if sorted_list[i] == sorted_list[-i-1]:\n            # Increment the pair count for this pair of strings\n            pair_counts[i] += 1\n\n    # Return the total number of pairs of reverse strings\n    return sum(pair_counts)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                reverse_pairs_count += 1\n    return reverse_pairs_count\n\ndef is_reverse(string):\n    return string == string[::-1]"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert the original list to a set to remove duplicates\n    unique_list = set(list1)\n    # create an empty dictionary to store the count of unique sublists\n    sublist_count = {}\n    # iterate through the unique_list and count its occurrences as tuples\n    for sublist in unique_list:\n        count = list1.count(sublist)\n        sublist_count[sublist] = count\n    # return the sublist_count dictionary\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Define an empty dictionary to store the counts of lists\n    counts = {}\n\n    # Loop through the list of lists\n    for sublist in list1:\n        # Convert the list to a tuple and add it to the dictionary\n        counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    unique_counts = {}\n    \n    # Iterate through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in unique_counts:\n            # Increment the count for that tuple\n            unique_counts[tuple(sublist)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            unique_counts[tuple(sublist)] = 1\n    \n    # Return the dictionary of unique sublist counts\n    return unique_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique tuple\n    count = {}\n    # Loop through each element in the list1\n    for i in range(len(list1)):\n        # Convert the current element to a tuple\n        t = tuple(list1[i])\n        # If the tuple already exists in the dictionary, increment its value\n        if t in count:\n            count[t] += 1\n        # If the tuple does not exist in the dictionary, add it with a value of 1\n        else:\n            count[t] = 1\n    # Return the dictionary containing the count of each unique tuple\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of sublists\n    count_dict = {}\n    # Loop through each element in the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and add its count to the dictionary\n            count_dict[tuple(element)] = count_dict.get(tuple(element), 0) + 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = list(set(list(map(tuple, list1)))) # convert each list to a tuple and remove duplicates using set\n    count = {}\n    for i in range(len(list2)):\n        if list2[i] in count:\n            count[list2[i]] += 1\n        else:\n            count[list2[i]] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    \n    # Iterate through the list of lists\n    for sublist in list1:\n        # Convert the list to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in count_dict:\n            # Increment the count for the tuple in the dictionary\n            count_dict[tuple(sublist)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[tuple(sublist)] = 1\n            \n    # Return the dictionary of count of sublists\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        # Convert each sublist to a tuple and add it to the count_dict if it's not already there\n        if tuple(sorted(sublist)) not in count_dict:\n            count_dict[tuple(sorted(sublist))] = 1\n        else:\n            count_dict[tuple(sorted(sublist))]+=1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through each list in the input list\n    for lst in list1:\n        # Convert the list to a tuple and count its occurrences in the original list\n        count = sum(1 for elem in list1 if elem == tuple(lst))\n        # If the tuple already exists in the dictionary, increment its count\n        if tuple(lst) in count_dict:\n            count_dict[tuple(lst)] += count\n        # Otherwise, add the tuple to the dictionary with its count\n        else:\n            count_dict[tuple(lst)] = count\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Dictionary to store unique sublists and their count\n    result = {}\n    # Convert each list to tuple and check if it is already present in the dictionary\n    for elem in lst:\n        tup = tuple(elem)\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' not in num:\n        return False\n    elif len(num.split('.')[1]) > 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function checks whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if float_num % 1 == 0 and len(str(float_num)) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            num_list = num.split('.')\n            if len(num_list[1]) <= 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    # Check that the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check that the string only contains digits\n    if any(c not in '0123456789' for c in num):\n        return False\n    \n    # Check that the string has at most one decimal point\n    if '.' not in num and '-' not in num:\n        return False\n    \n    # Check that the string has a precision of 2\n    if '.' in num and len(num.split('.')[-1]) > 2:\n        return False\n    \n    # Check that the string contains at least one digit after the decimal point\n    if '.' in num and len(num.split('.')[-1]) < 2:\n        return False\n    \n    # If we got here, the input string is a decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    if num.count('.')!= 1:\n        return False\n    num = num.replace('.', '')\n    if num.count('.')!= 1:\n        return False\n    parts = [int(part) for part in num.split('.')]\n    if len(parts)!= 2:\n        return False\n    if parts[0] < -2**31 or parts[0] > 2**31 - 1:\n        return False\n    if parts[1] < -2**31 or parts[1] > 2**31 - 1:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            parts = num.split('.')\n            if len(parts) > 1 and len(parts[0]) <= 2 and len(parts[1]) <= 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Remove all non-numeric characters from the number string\n    num = ''.join(c for c in num if c.isdigit())\n\n    # Check if the number has a precision of 2\n    if len(num) < 3 or num[-1]!= '.':\n        return False\n\n    # Convert the number string to a float and check if it has a decimal point\n    try:\n        float(num[:-1])\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    if len(num) == 0 or len(num) > 10:\n        return False\n    \n    for digit in num:\n        if digit == '.' or digit == ',':\n            continue\n        \n        if digit < '0' or digit > '9':\n            return False\n        \n        if digit == '0' and num.startswith('0'):\n            continue\n        \n        if num.count(digit) > 1:\n            return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    # check if the number is a string\n    if type(num)!= str:\n        return False\n    # check if the number contains any non-numeric characters\n    if any(char not in '0123456789.' for char in num):\n        return False\n    # check if the number is at least 1 character long\n    if len(num) < 1:\n        return False\n    # check if the number has a precision of 2\n    if '.' not in num or len(num.split('.')[1]) > 2:\n        return False\n    # check if the number is an integer or a float\n    try:\n        int(num)\n        return True\n    except ValueError:\n        float(num)\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the given number is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the number is empty\n    if num == \"\":\n        return False\n    \n    # Split the number by '.'\n    parts = num.split('.')\n    \n    # Check if there is a '.' in the number\n    if len(parts)!= 2:\n        return False\n    \n    # Check if the decimal part is of length 2\n    if len(parts[1])!= 2:\n        return False\n    \n    # Check if the integer part is a valid integer\n    try:\n        int(parts[0])\n    except ValueError:\n        return False\n    \n    # Check if the integer part is less than 10000\n    if int(parts[0]) >= 10000:\n        return False\n    \n    # Check if the integer part contains only digits\n    for digit in parts[0]:\n        if not digit.isdigit():\n            return False\n    \n    # If all the checks pass, the number is a valid decimal number\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Remove duplicates from the list\n    arr = list(set(arr))\n\n    # Check if the length of the list is one or not\n    if len(arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            unique_count += 1\n    \n    if unique_count == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i])!= 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    # convert the list to a set to get rid of duplicates\n    unique_set = set(arr)\n    # check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, False otherwise.\n    '''\n    unique_count = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            unique_count += 1\n    if unique_count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert list to set and then back to list to remove duplicates\n    unique_set = list(set(arr))\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        return days[monthnum3-1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the month number is between 1 and 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    # Check if the month number is divisible by 3 and the year number is divisible by 400\n    elif monthnum3 % 3 == 0 and yearnum % 400 == 0:\n        return True\n    # Check if the month number is divisible by 3 and the year number is divisible by 100\n    elif monthnum3 % 3 == 0 and yearnum % 100 == 0:\n        return False\n    # Check if the month number is divisible by 3 and the year number is divisible by 4\n    elif monthnum3 % 3 == 0 and yearnum % 4 == 0:\n        return True\n    # If none of the above conditions are true, return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    \n    # Check if the month number contains 30 days\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 == 2:\n        return True if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0) else False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"The given month number contains 30 days.\")\n    elif monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10:\n        print(\"The given month number contains 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        print(\"The given month number is divisible by 3.\")\n        if monthnum3 % 2 == 0:\n            print(\"The given month number is also divisible by 2.\")\n            return True\n        else:\n            return False\n    else:\n        print(\"The given month number is not divisible by 3.\")\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in non-descending order \n    arr.sort() \n    # Initialize minimum difference to positive infinity \n    min_diff = float('inf') \n    # Initialize two pointers \n    left = 0 \n    right = n-1 \n    # Iterate through the array using two pointers \n    while left < right: \n        # Calculate the difference between current elements \n        diff = arr[right] - arr[left] \n        # Update minimum difference \n        if diff < min_diff: \n            min_diff = diff \n        # Move the right pointer towards the end of the array \n        right -= 1 \n        # Move the left pointer towards the beginning of the array \n        left += 1 \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize min_diff and min_diff_index to infinity\n    min_diff = float('inf')\n    min_diff_index = -1\n\n    # Traverse through the sorted array\n    for i in range(n):\n        # Calculate the difference between current element and next element\n        diff = arr[i+1] - arr[i]\n\n        # If the difference is smaller than the current min_diff, update min_diff and min_diff_index\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    # Return the minimum difference and its index\n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n): \n    # Find the minimum element in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # Initialize two pointers - left and right\n    left = 0\n    right = n - 1\n\n    # Initialize minimum difference\n    min_diff = float('inf')\n\n    # Iterate through the array while left < right\n    while left < right:\n        # Calculate the difference between the elements at left and right\n        diff = abs(arr[left] - arr[right])\n\n        # If the difference is smaller than the current minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # If the difference between the elements at left and right is negative, increment left\n        elif diff < 0:\n            left += 1\n\n        # If the difference between the elements at left and right is positive, decrement right\n        else:\n            right -= 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length n, and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # If the array has only one element, its difference is zero\n    if n == 1:\n        return 0\n\n    # Initialize minimum difference to the maximum integer value\n    min_diff = float('inf')\n\n    # Iterate through the array using binary search\n    for i in range(n):\n        left, right = i, n - 1\n\n        # While left pointer is less than right pointer\n        while left < right:\n            mid = left + (right - left) // 2\n\n            # If difference between mid and first element is less than minimum difference, update minimum difference\n            if arr[mid] - arr[i] < min_diff:\n                min_diff = arr[mid] - arr[i]\n\n            # If difference between mid and last element is less than minimum difference, update minimum difference\n            if arr[right] - arr[mid] < min_diff:\n                min_diff = arr[right] - arr[mid]\n\n            # If difference between mid and current element is less than minimum difference, update left pointer to mid + 1\n            if arr[mid] - arr[i] < arr[mid] - arr[right]:\n                left = mid + 1\n\n            # If difference between mid and current element is greater than minimum difference, update right pointer to mid - 1\n            else:\n                right = mid - 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n    \n    # Initialize two variables to keep track of the minimum and maximum difference found so far\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[-1] - arr[-2]\n    \n    # Iterate over the array from the second element to the last element\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n        \n        # Update the minimum difference and maximum difference if the current difference is smaller than the minimum\n        if diff < min_diff:\n            min_diff = diff\n            \n        # Update the maximum difference if the current difference is larger than the maximum\n        if diff > max_diff:\n            max_diff = diff\n            \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    if n <= 1:\n        return 0\n    \n    mid = n // 2\n    diff1 = find_min_diff(arr[:mid], mid)\n    diff2 = find_min_diff(arr[mid:], n-mid)\n    \n    if arr[mid-1] < arr[mid]:\n        return min(diff1, diff2)\n    else:\n        return min(diff1, diff2) + abs(arr[mid-1] - arr[mid])"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference to positive infinity\n    min_diff = float('inf')\n\n    # Traverse through the sorted array\n    for i in range(n-1):\n        # Calculate the difference between current element and previous element\n        diff = arr[i+1] - arr[i]\n\n        # Update minimum difference if the current difference is smaller than current minimum\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and the size of the array and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n\n    Args:\n    arr (list): The array containing elements to be compared.\n    n (int): The length of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Initialize the minimum difference to be the maximum possible value\n    min_diff = float('inf')\n\n    # Iterate over all possible pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the difference between the current pair of elements\n            diff = arr[j] - arr[i]\n\n            # Update the minimum difference if the current difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function checks if a given number is a polite number or not.\n    '''\n    if n == 1:\n        return True\n    \n    if n % 2 == 0:\n        return is_polite(n//2) and is_polite((n//2)+1)\n    else:\n        return is_polite(n-1) and is_polite((n-1)+1)\n\nn = 10\nif is_polite(n):\n    print(n, 'is a polite number.')\nelse:\n    print(n, 'is not a polite number.')"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize variables\n    i = 0\n    a = 1\n    b = 1\n\n    # loop through until n-th polite number is found\n    while i < n:\n        # update variables\n        a, b = b, a + b\n        i += 1\n\n    # return a\n    return a"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. \n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    else:\n        return 15 + math.ceil(n/2)*5\n\nprint(is_polite(10)) # Output: 25"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        count = 0\n        i = 1\n        while count < n:\n            if is_prime(i):\n                count += 1\n            i += 1\n        return i - 1\n\n    return nth_prime(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        if n == 1:\n            return 1\n        else:\n            p = 2\n            while is_prime(p):\n                p += 1\n            return p\n\n    if n == 1:\n        return 1\n    else:\n        return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the first polite number\n    polite_number = 1\n    \n    # Initialize the counter\n    count = 0\n    \n    # Loop till we reach n-1 polite numbers\n    while count < n-1:\n        # Calculate the next polite number\n        polite_number += 1\n        \n        # Check if the next polite number is a palindrome\n        if str(polite_number) == str(polite_number)[::-1]:\n            # Increment the counter\n            count += 1\n    \n    # Return the nth polite number\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the nth polite number.\n\n    This function takes an integer n as input and returns the nth polite number.\n\n    A polite number is a number greater than or equal to 10, that is, a number that is written in the form of \"10 times x\" (e.g. 12 times 2 is a polite number).\n\n    The nth polite number is the number that is written in the form of \"10 times x\", where x is a positive integer, and x is the smallest positive integer such that x^n + 1 is greater than or equal to 10.\n\n    For example, if n = 1, the function should return 10 times 1 (which is 10). If n = 2, the function should return 10 times 4 (which is 40).\n\n    If n is less than 1, the function should return None. If n is greater than 100, the function should raise a ValueError.\n\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    if n < 1:\n        return None\n    elif n > 100:\n        raise ValueError(\"n must be less than or equal to 100\")\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def gcd(a, b):\n        \"\"\"\n        Returns the greatest common divisor of two numbers.\n        \"\"\"\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    def lcm(a, b):\n        \"\"\"\n        Returns the lowest common multiple of two numbers.\n        \"\"\"\n        return (a * b) // gcd(a, b)\n\n    def prime_lcm_product(n):\n        \"\"\"\n        Returns the lowest common multiple of n and the smallest prime number greater than or equal to sqrt(n).\n        \"\"\"\n        if is_prime(n):\n            return n * n\n        else:\n            return lcm(n, prime_lcm_product(n + 1))\n\n    polite_num = 10 * prime_lcm_product(2)\n    for _ in range(2, n):\n        polite_num = 10 * (polite_num - 1)\n        if is_prime(polite_num):\n            break\n\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_next_prime(num):\n        \"\"\"\n        Find the next prime number after the given number.\n        \"\"\"\n        i = num + 1\n        while not is_prime(i):\n            i += 1\n        return i\n\n    def get_nth_polite_number(n):\n        \"\"\"\n        Find the nth polite number.\n        \"\"\"\n        if n == 1:\n            return 2\n        else:\n            primes = [2]\n            for i in range(3, 1000001):\n                if is_prime(i):\n                    primes.append(i)\n            index = n - 1\n            while index < len(primes):\n                primes.append(find_next_prime(primes[index]))\n                index += 1\n            return primes[-1]\n\n    return get_nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the nth polite number.\n    \"\"\"\n    # initialize the polite number to 1\n    polite_number = 1\n\n    # iterate through the range from 1 to n\n    for i in range(2, n + 1):\n        # if i is not a multiple of 3, 5, or 7, add i to the polite number\n        if i % 3!= 0 and i % 5!= 0 and i % 7!= 0:\n            polite_number += i\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        count = 0\n        prime = 2\n        while count < n:\n            if is_prime(prime):\n                count += 1\n            prime += 1\n        return prime\n\n    def nth_polite_number(n):\n        if n < 2:\n            return \"Invalid input\"\n        if n == 2:\n            return 1\n        if n == 3:\n            return 7\n        if n == 4:\n            return 13\n        polite_number = 1\n        count = 0\n        while count < n - 1:\n            polite_number = nth_prime(count)\n            count += 1\n        return polite_number\n\n    return nth_polite_number(n)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list `l1` and returns a list of all pairs of consecutive items in `l1`.\n    \"\"\"\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            result.append((l1[i], l1[j]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the list of elements that are present in the first list but not in the second list.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements of the first list that are not present in the second list.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Using set() to remove duplicates from the list and then convert it back to a list\n    diff_set = set(li1) ^ set(li2)\n    diff_list = list(diff_set)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create an empty list to store the difference\n    diff = []\n    # loop through the first list\n    for i in li1:\n        # if the element is not in the second list, add it to the difference list\n        if i not in li2:\n            diff.append(i)\n    # return the difference list\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            fourth_power = i ** 4\n            sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer 'n' and returns the sum of the fourth power of the first 'n' odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    odd_numbers = []\n    for i in range(2, n+1, 2):\n        odd_numbers.append(i)\n\n    sum = 0\n    for num in odd_numbers:\n        sum += num ** 4\n\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_fourth_pow = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_fourth_pow += i ** 4\n    return sum_fourth_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i*i*i\n        i += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        num = 1\n        for j in range(i):\n            num += 2\n        sum += num ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        num = i + 1\n        sum += num ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Create an empty stack\n    stack = []\n    # Initialize a flag to check if the expression is balanced or not\n    is_balanced = True\n    # Iterate through each character of the expression\n    for char in exp:\n        # If the character is an opening parenthesis\n        if char == '(':\n            # Push it to the stack\n            stack.append(char)\n        # If the character is a closing parenthesis\n        elif char == ')':\n            # If the stack is empty\n            if not stack:\n                # Set the flag to False\n                is_balanced = False\n                break\n            # Pop the top element from the stack and check if it is an opening parenthesis\n            elif stack.pop()!= '(':\n                # Set the flag to False\n                is_balanced = False\n                break\n    # If the stack is not empty at the end of the loop\n    if stack:\n        # Set the flag to False\n        is_balanced = False\n    # Return the flag\n    return is_balanced"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in '([{':\n                if char!= top_char:\n                    return False\n            elif char in ')]':\n                if char!= ')' and char!= '}':\n                    return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Define a stack to keep track of opening and closing parentheses\n    stack = deque()\n    \n    # Iterate through the expression characters\n    for c in exp:\n        # Check for opening parentheses\n        if c == '(':\n            stack.append('(')\n        # Check for closing parentheses\n        elif c == ')':\n            # If stack is empty, return False\n            if not stack:\n                return False\n            # Otherwise, pop the last opening parenthesis from the stack\n            else:\n                stack.pop()\n    \n    # If the stack is not empty, there are more opening parentheses than closing parentheses in the expression\n    if stack:\n        return False\n    \n    # Otherwise, the expression is balanced and the function returns True\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if last_char!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Define the stack to keep track of the opening parentheses\n    stack = deque()\n\n    # Iterate over the characters in the expression\n    for c in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if c == '(':\n            stack.append(c)\n        # If the character is a closing parenthesis, pop off the last opening parenthesis\n        elif c == ')':\n            if not stack:\n                return False  # The expression is not balanced because there are more closing parentheses than opening parentheses\n            if stack.pop()!= '(':\n                return False  # The expression is not balanced because the opening parentheses do not match\n\n    # If the stack is not empty, it means that the expression is not balanced because there are more opening parentheses than closing parentheses\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the given string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words without k length\n    filtered_words = []\n\n    # Loop through the words and check if the length of each word is less than or equal to K\n    for word in words:\n        if len(word) <= K:\n            # If the length of the word is less than or equal to K, append it to the filtered_words list\n            filtered_words.append(word)\n\n    # Join the filtered words back into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the length of the word is equal to K, remove it from the list\n        if len(words[i]) == K:\n            del words[i]\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    return''.join([word for word in words if len(word)!= K])"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is less than K\n        if len(word) < K:\n            # If it is, append it to the filtered list\n            filtered_words.append(word)\n    \n    # Join the filtered list of words back into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty list to store the non-length-k words\n    non_length_k_words = []\n    # loop through the words and check if their length is less than K\n    for word in words:\n        if len(word) >= K:\n            # if the word is not length K, add it to the non-length-K list\n            non_length_k_words.append(word)\n    # join the non-length-K words into a single string and return it\n    return''.join(non_length_k_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Create a new list to store words without k length\n    new_words = []\n    # Iterate over each word\n    for word in words:\n        # If the length of the word is not equal to K, append it to the new list\n        if len(word)!= K:\n            new_words.append(word)\n    # Join the new list into a single string\n    result =''.join(new_words)\n    # Return the final string\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Remove all words with k length from the string\n    test_str =''.join([word for word in test_str.split() if len(word)!= K])\n\n    return test_str"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function finds the occurrence and position of the substrings within a string. It returns None if there is no match.\n    \"\"\"\n    try:\n        match = re.search(pattern, text)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except re.error:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            result.append((match[0], text.find(match[0])))\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. \n    Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Match found: {match.group()} at position: {match.start()}\")\n        return matches\n    else:\n        print(\"No match found\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return (match.start(), match.end(), match.group())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(\"Match found at position:\", text.find(match))\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    return matches, [match.start() for match in matches]"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if any(x % 2!= 0 for x in nums[i-1:i+1]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n\n    Parameters:\n    nums (list): a list of integers\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if len(set([x for x in nums if x % 2 == 1 and i in x]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if any(nums[i] % 2 == 0 for j in range(0, i, 2)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if len(set([x for x in nums if x % 2!= 0]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2!= 0:\n                count += 1\n                if count > 1:\n                    return False\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                odd_count += 1\n    return odd_count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            count += 1\n        if count!= 0 and count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(1, len(test_str)-1):\n        if test_str[i] in vowels and (test_str[i-1] in vowels or test_str[i+1] in vowels):\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set of the elements in the list\n    unique_elements = set(arr)\n\n    # Find the sum of the unique elements\n    sum_unique = sum(unique_elements)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the elements and their count in the array\n    freq = {} \n    for i in arr: \n        if i in freq: \n            freq[i] += 1 \n        else: \n            freq[i] = 1 \n    \n    # Initialize a variable to store the sum of non-repeated elements\n    sum = 0\n    \n    # Iterate over the dictionary and add the frequency of each element to the sum\n    for i in freq: \n        if freq[i] == 1: \n            sum += i\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n\n    # calculate the sum of unique elements\n    sum_unique_elements = sum(unique_elements)\n\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store the non-repeated elements\n    unique_elements = set(arr)\n    \n    # calculate the sum of the unique elements\n    sum_unique = sum(unique_elements)\n    \n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # calculate the sum of unique elements\n    sum_unique = sum(unique_set)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store the elements of the array\n    unique_elements = set(arr)\n    # initialize the sum to zero\n    sum = 0\n    # iterate through the set and add the sum of each element to the sum variable\n    for element in unique_elements:\n        sum += element\n    # return the final sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # convert the set to a list and calculate the sum\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n\n    # Convert the set to a list and calculate the sum\n    total_sum = sum(list(unique_set))\n\n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    packed_list = []\n    for item in groupby(list1):\n        if len(list(item)) == 1:\n            continue\n        else:\n            packed_list.append(list(item))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(g) for k, g in groupby(lst) if k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list of elements, pack consecutive duplicates of the same element into sublists.\n\n    :param lst: list\n    :return: list\n    \"\"\"\n    # Group the list by the element they share\n    grouped_lst = [(k, list(g)) for k, g in groupby(lst)]\n\n    # Use list comprehension to pack consecutive duplicates into sublists\n    packed_lst = [sublist for k, sublist in grouped_lst if len(sublist) > 1]\n\n    return packed_lst"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    packed_list = []\n    for key, group in grouped_list:\n        packed_list.append(list(group))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for group in groupby(list1):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use the groupby() function to group the list based on its elements.\n    grouped_list = groupby(list1)\n\n    # Use a list comprehension to pack the consecutive duplicates into sublists.\n    packed_list = [list(subgroup) for subgroup in grouped_list if len(list(subgroup)) > 1]\n\n    # Return the packed list.\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1)\n    consecutive = []\n    for key, group in grouped:\n        if len(list(group)) > 1:\n            consecutive.append(list(group))\n    return consecutive"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # use groupby() function to group consecutive elements of the list\n    grouped = groupby(list1)\n    # create a sublist for each group of consecutive duplicates\n    packed_list = [list(group) for key, group in grouped]\n    # return the packed list\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [''.join(list(g)) for k, g in groupby(list1) if k == ''.join(list(g))]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Define an empty dictionary to store consecutive duplicates\n    consecutive_duplicates = {}\n    # Iterate through the list\n    for i, item in enumerate(list1):\n        # If the current item is the same as the previous item, add it to the consecutive duplicates dictionary\n        if i > 0 and item == list1[i-1]:\n            if item in consecutive_duplicates:\n                consecutive_duplicates[item].append(item)\n            else:\n                consecutive_duplicates[item] = [item]\n        # If the current item is different from the previous item, add it to the main list and reset the consecutive duplicates dictionary\n        else:\n            # If the dictionary is not empty, add the key-value pairs to the main list\n            if consecutive_duplicates:\n                for key, value in consecutive_duplicates.items():\n                    list1[i:i+len(value)] = value\n            # Reset the consecutive duplicates dictionary\n            consecutive_duplicates = {}\n    # If the dictionary is not empty, add the last key-value pairs to the main list\n    if consecutive_duplicates:\n        for key, value in consecutive_duplicates.items():\n            list1[i:i+len(value)] = value\n    # Return the modified list\n    return list1"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            sub_lst_tuple = tuple(sub_lst)\n            if sub_lst_tuple not in count:\n                count[sub_lst_tuple] = 0\n            count[sub_lst_tuple] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate through each element of the list\n    for elem in list1:\n        # If the element is a list, turn it to a tuple and count its occurrences in the dictionary\n        if isinstance(elem, list):\n            tup = tuple(elem)\n            if tup in counts:\n                counts[tup] += 1\n            else:\n                counts[tup] = 1\n\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    list1 = set(list1)\n\n    # Create an empty dictionary to store the counts of each list\n    counts = {}\n\n    # Iterate through the set of lists\n    for sublist in list1:\n        # Turn the sublist into a tuple and check if it is already in the dictionary\n        if sublist in counts:\n            # Increment the count for the existing tuple\n            counts[sublist] += 1\n        else:\n            # Create a new tuple and add it to the dictionary\n            counts[sublist] = 1\n\n    # Return the dictionary of counts of unique sublists\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    \n    # loop through each list in the list1\n    for item in list1:\n        # convert the list to a tuple\n        tup = tuple(item)\n        \n        # check if the tuple is already in the dictionary\n        if tup in counts:\n            # if it is, increment the count for that tuple\n            counts[tup] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            counts[tup] = 1\n            \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create a dictionary to store the count of unique sublists\n    sublist_count = {}\n    \n    # Loop through each list in the input list\n    for item in list1:\n        # Convert the list to a tuple to check for uniqueness\n        tuple_item = tuple(item)\n        \n        # If the tuple is not in the dictionary, add it with a count of 1\n        if tuple_item not in sublist_count:\n            sublist_count[tuple_item] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            sublist_count[tuple_item] += 1\n    \n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the number of occurrences of each sublist\n    count = {}\n    # Loop through each element in the list1\n    for i in list1:\n        # Check if the element is a list\n        if isinstance(i, list):\n            # Turn the list into a tuple and check if it is in the dictionary\n            if tuple(i) in count:\n                # If it is, increment the count of that tuple by 1\n                count[tuple(i)] += 1\n            else:\n                # If it's not, add it to the dictionary with a count of 1\n                count[tuple(i)] = 1\n    # Return the dictionary containing the number of occurrences of each sublist\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary to store the number of occurrences for each sublist\n    count = {}\n    \n    # Loop through each sublist in the input list\n    for sublist in list1:\n        # Turn the sublist into a tuple and check if it exists in the dictionary\n        if sublist in count:\n            # Increment the count for the sublist\n            count[sublist] += 1\n        else:\n            # If the sublist is not in the dictionary, add it with a count of 1\n            count[sublist] = 1\n            \n    # Return the dictionary of counts\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    # iterate over the lists in the input list\n    for item in list1:\n        # turn the list to a tuple, and check if it's already in the dictionary\n        if item not in counts:\n            # if it's not, add it with a count of 1\n            counts[item] = 1\n        else:\n            # if it is, increment the count by 1\n            counts[item] += 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            for k in range(j+1,len(test_list)):\n                for l in range(k+1,len(test_list)):\n                    if (test_list[i] + test_list[j] + test_list[k] + test_list[l]) == sum(test_list):\n                        combination = (test_list[i],test_list[j],test_list[k],test_list[l])\n                        combinations_list.append(combination)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the list of tuples in ascending order\n    test_list.sort()\n\n    # Create a set to store the unique tuples\n    unique_tuples = set()\n\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Loop through the remaining elements of the tuple list\n        for j in range(i+1, len(test_list)):\n            # If the sum of the current and remaining tuple is present in the set of unique tuples, then add the combination to the output list\n            if (test_list[i][0] + test_list[j][1]) in unique_tuples:\n                print(tuple(sorted([test_list[i][0], test_list[j][1]])))\n            # Add the current and remaining tuple to the set of unique tuples\n            unique_tuples.add(test_list[i])\n            unique_tuples.add(test_list[j])\n\n    # Return the list of combinations\n    return list(unique_tuples)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def find_combinations_helper(index, current_sum, current_combination):\n        if current_sum == target_sum:\n            result.append(current_combination)\n            return\n\n        if index == len(arr):\n            return\n\n        for i in range(index, len(arr)):\n            if i > index and arr[i] == arr[i - 1]:\n                continue\n\n            current_combination.append(arr[i])\n            find_combinations_helper(i + 1, current_sum + arr[i], current_combination)\n            current_combination.pop()\n\n    arr = sorted(test_list)\n    target_sum = sum(arr) // 2\n\n    result = []\n    find_combinations_helper(0, 0, [])\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                print(tuple(comb))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty set to store all the combinations\n    combinations_set = set()\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Generate all the combinations of the two tuples\n            for k in combinations(test_list[i], 2):\n                # Check if the sum of the first tuple and the second tuple is equal to the third tuple\n                if k[1] == test_list[j][1]:\n                    # Add the combination to the set of combinations\n                    combinations_set.add(tuple(k))\n\n    # Return the set of combinations\n    return combinations_set"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    for m in range(l + 1, n):\n                        if sum((test_list[i], test_list[j], test_list[k], test_list[l], test_list[m])) == 0:\n                            print(tuple(sorted((test_list[i], test_list[j], test_list[k], test_list[l], test_list[m]))))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(test_list[i]) == sum(test_list[j]) and tuple(test_list[i]) not in result:\n                result.append(tuple(test_list[i]))\n                result.append(tuple(test_list[j]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and returns the combinations of sums with tuples in the list.\n    The function uses the itertools.combinations() function to generate all combinations of sums from the input list.\n    The function then checks if the sum of all combinations is greater than or equal to the target sum and returns the combination(s).\n    '''\n\n    target_sum = sum(test_list)\n\n    for combination in combinations(test_list, r=2):\n        if sum(combination) == target_sum:\n            print(combination)\n            return\n\n    return"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of all combinations of sums.\n    \"\"\"\n    # initialize an empty list to store the combinations\n    comb_list = []\n\n    # iterate over all possible pairs of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n\n            # calculate the sum of the two tuples\n            sum_of_tuple = sum(test_list[i] + test_list[j])\n\n            # check if the sum is present in the given list\n            if sum_of_tuple in test_list:\n\n                # if the sum is present, append the combination to the list of combinations\n                comb_list.append(test_list[i] + test_list[j])\n\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # convert the given list to set to remove duplicates\n    test_set = set(test_list)\n\n    # find all pairs of tuples in the set\n    pairs = combinations(test_set, 2)\n\n    # find the sums of the pairs\n    sums = []\n    for pair in pairs:\n        sum_pair = sum(pair)\n        sums.append(sum_pair)\n\n    # create a dictionary to store the combinations of sums and their indices in the given list\n    combinations_dict = {}\n\n    # iterate over the sums and find the indices of the tuples in the given list\n    for index, sum_pair in enumerate(sums):\n        for test_tuple in test_list:\n            if sum_pair == sum(test_tuple) and tuple(test_tuple) in combinations_dict:\n                combinations_dict[tuple(test_tuple)].append(index)\n            elif sum_pair == sum(test_tuple):\n                combinations_dict[tuple(test_tuple)] = [index]\n\n    # return the combinations of sums and their indices in the given list\n    return combinations_dict"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    count = len(divisors)\n    even_count = count % 2\n    \n    if even_count == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")\n        \n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1): \n        if n % i == 0: \n            count += 1\n    if count % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n            if count == 2: \n                return True\n\n    if count == 0: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_count += 2\n    if n > 1:\n        divisor_count += 1\n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(f\"{n} is divisible by even number of divisors.\")\n    else:\n        print(f\"{n} is not divisible by even number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if i == n//i:\n                count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Counts the number of divisors of a given number. \n    \"\"\"\n    divisors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            divisors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n\n    if n > 1:\n        divisors.append(n)\n\n    divisors_count = len(divisors)\n    print(\"The count of divisors of\", n, \"is\", divisors_count)\n\n    if divisors_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if count > 0:\n        return False\n    return True\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_odd += arr[i]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            sum_odd_length += arr[j]\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_odd += arr[j-1]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    # Initialize sum variable\n    sum = 0\n\n    # Loop through all possible subarrays of the input array\n    for i in range(len(arr)):\n        for j in range(i+2, len(arr)+1, 2):\n            # Append the subarray to a list\n            subarray = arr[i:j]\n            # Add the subarray's sum to the overall sum\n            sum += sum(subarray)\n\n    # Return the overall sum of odd length subarrays\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum_ = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:  # if subarray length is odd\n                sum_ += sum(arr[i:j+1])  # add the elements of the subarray to the sum\n    return sum_"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    total = 0\n    for i in range(n):\n        if i == 0:\n            total += arr[i]\n            count += 1\n        elif i > 0 and i < n-1:\n            if count > 0:\n                total -= arr[i-1]\n            else:\n                total += arr[i-1]\n            count -= 1\n            total += arr[i]\n            count += 1\n        elif i == n-1:\n            total += arr[i]\n            count += 1\n    \n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray_sum += arr[j]\n    return subarray_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j-i+1 % 2 == 1:\n                sum += arr[j] - arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i+1)%2 == 1:\n                sum += sum_subarray(arr, i, j)\n\n    return sum\n\ndef sum_subarray(arr, start, end):\n    return sum(arr[start:end+1])"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    # Convert the RGB values to floats\n    r, g, b = map(float, (r, g, b))\n\n    # Find the minimum and maximum values in the RGB tuple\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the Hue value\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / delta)\n    elif max_val == g:\n        hue = 60 * ((b - r) / delta + 2)\n    else:\n        hue = 60 * ((r - g) / delta + 4)\n\n    # Calculate the Saturation value\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Calculate the Value value\n    value = max_val\n\n    # Convert the Hue, Saturation and Value values to percentages\n    hue = int(hue / 60 * 100)\n    saturation = int(saturation * 100)\n    value = int(value * 100)\n\n    # Return the HSV tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    hue = None\n    saturation = None\n    value = max_value\n    \n    if max_value == r:\n        hue = 60 * ((g - b) / delta) + (g < b) * 0\n    elif max_value == g:\n        hue = 60 * ((b - r) / delta) + 2\n    else:\n        hue = 60 * ((r - g) / delta) + 4\n    \n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n    \n    if value == 0:\n        hue = None\n        saturation = None\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function converts an RGB color to HSV color model.\n    \n    Parameters:\n    r, g, b (int): The red, green, and blue values of the RGB color\n    \n    Returns:\n    h, s, v (float): The hue, saturation, and value of the HSV color\n    '''\n\n    # Convert RGB to HSV\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n    v = max_rgb / 255.0\n\n    if max_rgb == min_rgb:\n        h = 0.0\n    elif max_rgb == r:\n        h = (g - b) / delta_rgb\n    elif max_rgb == g:\n        h = 2.0 + (b - r) / delta_rgb\n    else:\n        h = 4.0 + (r - g) / delta_rgb\n\n    h = h / 6.0\n    if h < 0:\n        h += 1.0\n\n    # Convert HSV to HSV\n    s = delta_rgb / (1 - abs(2 * max_rgb - 1))\n    if s == 0:\n        return h, 0.0, v\n    if delta_rgb == 0:\n        return 0.0, 0.0, 0.0\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    h = 0\n    s = 0\n    v = max_value\n    \n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        d = max_value - min_value\n        s = (max_value == r) * d / (max_value + min_value)\n        if max_value == g:\n            h = (b - r) / d\n        elif max_value == b:\n            h = 2 + (r - g) / d\n        h = h / 60 if h < 0 else h / 60\n        if h < 0:\n            h += 1\n    \n    return [int(h * 255), int(s * 255), int(v * 255)]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    h = 0\n    s = 0\n\n    if max_val == min_val:\n        h = 0\n    else:\n        delta = max_val - min_val\n        s = delta / max_val\n\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n\n    return (h, s, max_val)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts the given RGB color to HSV color model.\n    :param r: red component of the RGB color (0-255)\n    :param g: green component of the RGB color (0-255)\n    :param b: blue component of the RGB color (0-255)\n    :return: (h, s, v) tuple where h is the hue, s is the saturation, v is the value.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    h = None\n    s = None\n    v = max_color\n    if max_color == min_color:\n        h = 0\n    else:\n        if max_color == r:\n            h = (g - b) / delta\n        elif max_color == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n        s = delta / (1 - abs(2 * min_color - 1))\n    return (int(h), int(s * 255), int(v * 255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0\n    s = 0\n    v = max_value / 255.0\n    \n    if max_value == min_value:\n        h = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h / 6\n        \n        if h < 0:\n            h += 1\n            \n        s = delta / (1 - abs(2 * h - 1))\n    \n    hsv = (h, s, v)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r, g, b to floats\n    r = float(r) / 255\n    g = float(g) / 255\n    b = float(b) / 255\n    \n    # Find the max and min values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find the delta between max and min values\n    delta = max_val - min_val\n    \n    # If delta is 0, hue and saturation are 0 or 360 degrees\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        # Find the hue and saturation values\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        elif max_val == b:\n            h = 4 + (r - g) / delta\n        h *= 60\n        \n        # If h is negative, add 360 to it\n        if h < 0:\n            h += 360\n        \n        # Find the saturation value\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_val\n        \n        # If s is negative, set it to 0\n        if s < 0:\n            s = 0\n    \n    # Return the hsv values as a tuple\n    return (h, s, max_val)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert r, g, b to float\n    r, g, b = map(float, [r, g, b])\n\n    # Find the maximum and minimum values in rgb color space\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the value difference and sum of absolute differences\n    delta = max_val - min_val\n    sum_val = r + g + b\n\n    # Calculate the hue, saturation, and value\n    if delta == 0:\n        hue = 0\n        saturation = 0\n    else:\n        if max_val == r:\n            hue = ((g - b) / delta) % 6\n        elif max_val == g:\n            hue = (b - r) / delta + 2\n        else:\n            hue = (r - g) / delta + 4\n\n        hue = hue / 6\n\n        if sum_val / 3 > 0.5:\n            saturation = delta / (sum_val / 2)\n        else:\n            saturation = delta / (3 - sum_val / 2)\n\n    value = max_val\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    '''\n    # Convert the given rgb value to integer\n    r = int(r)\n    g = int(g)\n    b = int(b)\n    \n    # Calculate the minimum and maximum value of the RGB color components\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Calculate the delta value\n    delta = max_val - min_val\n    \n    # Calculate the hsv values\n    if max_val == 0:\n        h = 0\n    else:\n        if delta == 0:\n            h = 0\n        elif max_val == r:\n            h = (60 * ((g - b) / delta)) % 360\n        elif max_val == g:\n            h = (60 * ((b - r) / delta)) + 120\n        else:\n            h = (60 * ((r - g) / delta)) + 240\n    \n    # Calculate the saturation value\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    # Calculate the value value\n    v = max_val\n    \n    # Convert the values to hsv values\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n            even_product *= i\n        else:\n            odd_count += 1\n            odd_product *= i\n    if even_count == 0:\n        return odd_product\n    elif odd_count == 0:\n        return even_product\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of first even and odd number of a given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n        else:\n            count += 1\n            break\n    return count * 2"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n            even_count += 1\n        else:\n            odd_product *= num\n            odd_count += 1\n    \n    if even_count == 0 or odd_count == 0:\n        return None\n    \n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            count += 1\n            if count == 1:\n                product *= i\n        else:\n            count = 0\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n\n    # iterate through the list to find the sum of even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    # return the product of even and odd sum\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    result = even_num * odd_num\n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n\n    Args:\n        list1 (list): A list of integers.\n\n    Returns:\n        int: The product of the first even and first odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an input and returns the product of the first even and odd numbers.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a tuple string to test\n    test_tuple = ('1', '2', '3')\n    \n    # Convert tuple string to integer tuple using list comprehension\n    test_int = [int(x) for x in test_tuple]\n    \n    # Return the integer tuple\n    return tuple(test_int)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # create a list to store the integers\n    int_list = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a digit, add it to the list\n        if char.isdigit():\n            int_list.append(int(char))\n        # if the character is not a digit, return an error message\n        else:\n            return 'Error: String contains non-integer characters'\n    # return the integer tuple\n    return tuple(int_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Split the string by ','\n        str_list = test_str.split(',')\n        # Create an empty list to hold the integer values\n        int_list = []\n        # Loop through each element in the string list\n        for str_elem in str_list:\n            # Convert the element to integer\n            int_elem = int(str_elem)\n            # Add the integer value to the list\n            int_list.append(int_elem)\n        # Return the integer list\n        return tuple(int_list)\n    except ValueError:\n        # If the string cannot be converted to an integer, raise a ValueError\n        raise ValueError(\"String cannot be converted to an integer.\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    tuple_str = test_str.split(', ')\n\n    # Convert each string to integer and append to a new list\n    int_list = []\n    for item in tuple_str:\n        int_list.append(int(item))\n\n    # Convert the list to tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = []\n    for char in test_str:\n        if char.isdigit():\n            int_list.append(int(char))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of characters\n    chars = list(test_str)\n    # Initialize an empty list to store integers\n    int_list = []\n    # Loop through the characters in the list\n    for char in chars:\n        # If the character is a digit, convert it to an integer and append it to the int_list\n        if char.isdigit():\n            int_list.append(int(char))\n    # Return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    int_tuple = ()\n    for i in test_str:\n        try:\n            int_tuple += (int(i),)\n        except ValueError:\n            pass\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by commas\n    test_list = test_str.split(',')\n    # Convert each string element to integer\n    int_list = [int(x.strip()) for x in test_list]\n    # Convert the list to tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Create an empty list to store the integer tuples\n    int_tuple_list = []\n\n    # Loop through each string in the list\n    for str_item in str_list:\n\n        # Remove any spaces from the string\n        str_item = str_item.strip()\n\n        # Check if the string is a valid integer\n        try:\n            int_value = int(str_item)\n            int_tuple_list.append(int_value)\n        except ValueError:\n            # If the string is not a valid integer, add it to the list of invalid strings\n            invalid_str_list.append(str_item)\n\n    # Return the list of integer tuples\n    return int_tuple_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for i in range(len(test_str)):\n        try:\n            int_tuple += (int(test_str[i]),)\n        except ValueError:\n            pass\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return right_insertion(a[index:], x)\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_right to locate the right insertion point for x in a\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if index == 0 or a[index-1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the index where to insert x\n    index = bisect.bisect_right(a, x)\n    # If x is already present in the list, return its index\n    if index < len(a) and a[index] == x:\n        return index\n    # If x is greater than all the elements in the list, return the length of the list\n    elif index == len(a):\n        return len(a)\n    # Otherwise, return the index of the next element to the right of the insertion point\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list a and a value x and returns the index of the right insertion point for x.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx == len(a):\n        return len(a)\n    elif a[idx] == x:\n        return idx\n    else:\n        return idx + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i if i!= len(a) and a[i] == x else i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the right insertion point\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If the value is greater than the last element in the array, insert it at the end\n    if high == len(a) - 1 and a[high] < x:\n        return high + 1\n    \n    # If the value is greater than the first element in the array, insert it at the beginning\n    if high == 0 and a[high] > x:\n        return 0\n    \n    # If the value is not found in the array, insert it at the position where it would be in ascending order\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\w{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1,3}b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"The string matches the pattern: {match.group()}\")\n    else:\n        print(\"The string doesn't match the pattern\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba\\w{3}b\\w{1}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=.{3}b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\1b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list of items to be included in the new tuple.\n    test_str (str): A string to be included in the new tuple.\n\n    Returns:\n    A new tuple containing the given list and string.\n    \"\"\"\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + str(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create a new empty tuple\n    new_tup = ()\n    \n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the new tuple\n        if char.isdigit():\n            new_tup = new_tup + (int(char),)\n            \n    # loop through each item in the list\n    for item in test_list:\n        # if the item is a number, add it to the new tuple\n        if isinstance(item, int):\n            new_tup = new_tup + (item,)\n            \n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Join the given list with the given string and split it into a new list\n    new_list = test_str.join(test_list)\n    # Convert the new list into a tuple and return it\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a string and concatenate it with the string.\n    concatenated_list = str(test_list) + test_str\n    \n    # Convert the string to a tuple and return it.\n    return tuple(concatenated_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return tuple(test_str + str(x) for x in test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string into a single string\n    result = test_str + ''.join(test_list)\n\n    # Convert the concatenated string into a list of characters\n    new_list = list(result)\n\n    # Convert the list of characters into a tuple\n    new_tuple = tuple(new_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split()) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2]))!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if i + 1 < len(nums):\n            if nums[i] % 2 == 0 and nums[i+1] % 2 == 0:\n                return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    count += 1\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True if even_count == len(nums) else False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                even_count += 1\n            if even_count > 0:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    \n    if even_count == len(nums)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Initialize a variable to store the count of even numbers in each index of the list\n    even_count = [0] * len(nums)\n\n    # Loop through the list of numbers\n    for num in nums:\n        # If the current number is even, increment the count in the corresponding index of the even_count list\n        if num % 2 == 0:\n            even_count[num//2] += 1\n\n    # Check if every even index contains even numbers\n    for i in range(0, len(even_count), 2):\n        if even_count[i] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Remove nested tuples from the input tuple\n    while isinstance(test_tup, tuple):\n        test_tup = tuple(test_tup)\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    while isinstance(test_tup, tuple):\n        test_tup = test_tup[0]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Check if the input is a tuple\n    if isinstance(test_tup, tuple):\n        # Remove nested tuples from the tuple recursively\n        new_tup = []\n        for item in test_tup:\n            if isinstance(item, tuple):\n                new_item = remove_nested(item)\n            else:\n                new_item = item\n            new_tup.append(new_item)\n        # Return the new tuple\n        return tuple(new_tup)\n    else:\n        # Return the input unchanged\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(sub_tup) for sub_tup in test_tup)\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create a new list to store the flattened tuple\n    flattened_list = []\n    # loop through each element in the input tuple\n    for element in test_tup:\n        # if the element is a tuple, recursively call the function on it\n        if isinstance(element, tuple):\n            flattened_list.extend(remove_nested(element))\n        # if the element is not a tuple, append it to the flattened list\n        else:\n            flattened_list.append(element)\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    nested_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            nested_tup.extend(remove_nested(item))\n        else:\n            nested_tup.append(item)\n    return nested_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for sublist in input_list: \n        if isinstance(sublist, list): \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    This function counts the number of lists in a given number of lists.\n    '''\n\n    count = 0\n\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x in the array.\n    \"\"\"\n    # Initialize left and right pointers to the first and last indices of the array respectively\n    left = 0\n    right = len(arr) - 1\n\n    # Loop through the array until the left pointer is greater than or equal to the right pointer\n    while left < right:\n        # If the element at the left pointer is equal to x, move the left pointer to the next index\n        if arr[left] == x:\n            left += 1\n        # If the element at the right pointer is equal to x, move the right pointer to the previous index\n        elif arr[right] == x:\n            right -= 1\n        # If the elements at the left and right pointers are not equal to x, the element must be in the middle of the array\n        else:\n            return -1\n\n    # If the element was not found in the array, return -1\n    if left == right and arr[left]!= x:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n\n    if arr[0] == x:\n        return 0\n\n    if arr[len(arr)-1] == x:\n        return len(arr)-1\n\n    i = 1\n    while i < len(arr):\n        if arr[i] == x:\n            return i\n        i += 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and a target element as input and returns the index of the last occurrence of the target element in the array.\n    \"\"\"\n    # Find the leftmost element greater than or equal to x\n    left = bisect_left(arr, x)\n\n    # If x is not present in the array, return -1\n    if left == len(arr):\n        return -1\n\n    # Find the last occurrence of x\n    while left > 0 and arr[left-1] == x:\n        left -= 1\n\n    return left - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the last index of x in arr\n    i = bisect_left(arr, x)\n    \n    # If x is not found, return -1\n    if i == len(arr) or arr[i]!= x:\n        return -1\n    \n    # Find the last index of the first occurrence of x\n    i -= 1\n    while i >= 0 and arr[i] == x:\n        i -= 1\n        \n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the index of the first element greater than x in the array\n    index = bisect.bisect_left(arr, x)\n    if index == len(arr) or arr[index]!= x:\n        return -1  # element not found\n    else:\n        return index  # return the last index of the element"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments - an array (arr) and an element (x) and returns the last position of an element in the array where the element appears last.\n    \"\"\"\n    # Initialize the left and right pointers to the beginning and end of the array respectively\n    left = 0\n    right = len(arr) - 1\n    \n    # Initialize the result variable to -1\n    result = -1\n    \n    # Iterate through the array\n    while left <= right:\n        # Calculate the midpoint of the array\n        mid = (left + right) // 2\n        \n        # If the element is at the midpoint, return the midpoint\n        if arr[mid] == x:\n            result = mid\n        # If the element is greater than the midpoint, search in the left half of the array\n        elif arr[mid] > x:\n            right = mid - 1\n        # If the element is smaller than the midpoint, search in the right half of the array\n        else:\n            left = mid + 1\n    \n    # Return the last position of the element if it was found\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid - 1 >= 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables\n    low, high = 0, len(arr) - 1\n    \n    # Find the first position where x is greater than or equal to arr[low]\n    while low <= high and arr[low] < x:\n        low += 1\n    \n    # If x is not found, return -1\n    if low > high:\n        return -1\n    \n    # Find the last position where x is less than or equal to arr[high]\n    while low <= high and arr[high] >= x:\n        high -= 1\n    \n    # Return the position of x in the array\n    return high + 1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    \"\"\"\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\s.+\\sb'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a(.)*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)([^\\s]+)b(?=[^\\s]+)'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<![ab])a.*b(?![ab])'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    '''\n    total = 0\n    for item in dictionary.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range [0, n].\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum_ = 0\n    for i in range(l, r):\n        if i % 2!= 0:\n            sum_ += i\n    return sum_"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 0:\n        return 0\n    else:\n        s = 0\n        for i in range(2, n+1, 2):\n            s += i\n        return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # define the lower and upper limits of the range\n    l = 1\n    r = n\n    \n    # initialize a variable to store the sum\n    sum = 0\n    \n    # loop through the range of odd numbers from l to r\n    while l % 2 == 1 and l <= r:\n        # add the current odd number to the sum\n        sum += l\n        \n        # increment the lower limit of the range by 2 (since we're skipping an even number)\n        l += 2\n        \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_of_odds = 0\n    for i in range(l, r+1, 2):\n        sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize the sum variable to zero\n    total = 0\n\n    # Iterate through the array and add each element to the total\n    for num in arr:\n        total += num\n\n    # Return the final sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n\nprint(_sum([1, 2, 3, 4, 5]))  # Output: 15\nprint(_sum([0, 1, 2, 3, 4]))  # Output: 10\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xFFFFFFFF\n    result = 0\n\n    for i in range(d):\n        bit_shift = (n & 1) << 31\n        n = n >> 1\n        result |= bit_shift\n    \n    return result & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Extract the last d bits from the number\n    shifted_bits = n >> d\n    # Shift the bits to the left by d bits\n    result = n << (32 - d)\n    # Combine the shifted bits with the original bits\n    result |= shifted_bits\n    # Return the result\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF  # 32-bit unsigned integer mask\n    d &= 31  # d should be between 0 and 31\n    d %= 32  # d should be between 0 and 31\n    \n    # Extract the bits we want to rotate\n    bits = n >> d\n    \n    # Shift the bits left by d and OR them with the bits we want to rotate\n    n = (n & (mask >> d)) | (bits << (32 - d))\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the input number to binary and pad it with zeros if necessary\n    binary = bin(n)[2:]\n    padding = \"0\" * (32 - len(binary))\n    binary = padding + binary\n\n    # Rotate the bits by d bits\n    rotated = binary[-d:] + binary[:-d]\n\n    # Convert the rotated binary string to decimal\n    rotated = int(rotated, 2)\n\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    d &= 31   # To rotate d bits, we need to make sure that d is less than 32. If it is greater than 31, it will be reduced to 31.\n    if d == 0:\n        return n\n    else:\n        n = (n << d) | (n & mask)\n        return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    if d >= 32:\n        return n\n    else:\n        return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d %= 32\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    # Get the number of bits in the number\n    num_bits = 32\n\n    # Calculate the number of rotations\n    rotations = d % num_bits\n\n    # If rotations is negative, make it positive\n    if rotations < 0:\n        rotations += num_bits\n\n    # Extract the upper and lower halves of the number\n    upper = (n >> rotations) & ((1 << (num_bits - rotations)) - 1)\n    lower = n & ((1 << rotations) - 1)\n\n    # Combine the upper and lower halves\n    result = upper | lower\n\n    # Return the result\n    return result"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    # use regex to find all whitespaces and replace them with an empty string\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal numbers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    # check if the three integers are equal\n    if x == y == z:\n        # if they are, return 1\n        return 1\n    # if they're not equal, check if they have the same parity\n    elif (x & 1) == (y & 1) == (z & 1):\n        # if they have the same parity, return 3\n        return 3\n    # if they don't have the same parity, return 2\n    else:\n        return 2"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    count = 0\n    for i in range(x,y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    count = 0\n    \n    if x == y and x == z:\n        count += 1\n        \n    if y == x and y == z:\n        count += 1\n        \n    if z == x and z == y:\n        count += 1\n        \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if y == x!= z:\n        count += 1\n    if z == x!= y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    for i in range(3):\n        for j in range(3):\n            if i == j:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function counts the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        j = i\n        while j < n - 1 and arr[j] > arr[j + 1]:\n            j += 1\n\n        if j < n - 1:\n            arr[i], arr[j] = arr[j], arr[i]\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    n = len(arr)   \n    count = 0   \n    for i in range(n):   \n        j = i   \n        while j < n-1 and arr[j] > arr[j+1]:   \n            j += 1   \n        if j < n-1:   \n            arr[i], arr[j] = arr[j], arr[i]   \n            count += 1   \n        else:   \n            break   \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted then no rotation is required\n    if arr == sorted(arr):\n        return 0\n    # Sort the array\n    arr = sorted(arr)\n    # Initialize a variable to store the count of rotations\n    count = 0\n    # Initialize a variable to store the maximum element of the array\n    max_element = arr[0]\n    # Traverse the array from the second element\n    for i in range(1, n):\n        # If the current element is greater than the maximum element, then there is a rotation\n        if arr[i] > max_element:\n            count += 1\n            # Update the maximum element\n            max_element = arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # initialize the count variable\n    count = 0\n    # loop through the array\n    for i in range(n):\n        # check if the element at i is smaller than the element at i+1\n        if arr[i] > arr[i+1]:\n            # increment the count variable\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            # swap elements\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            # rotate the array\n            j = i\n            while j < n-1:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                j += 1\n            return 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # count the number of rotations required to sort the array\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Given an array, returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    # Initialize two pointers, one at the beginning and one at the end\n    left, right = 0, len(arr) - 1\n    \n    # Initialize the count of rotations to 0\n    count = 0\n    \n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    \n    # Loop until the pointers meet in the middle\n    while left < right:\n        \n        # Find the mid-point of the array\n        mid = left + (right - left) // 2\n        \n        # If the mid-point is greater than the right pointer, the array is sorted to the right of mid\n        if arr[mid] > arr[right]:\n            count += right - mid\n            right = mid\n        else:\n            left = mid + 1\n    \n    # If the array is sorted from the beginning to the mid-point, return the count of rotations\n    if left == right and arr[left] <= arr[right]:\n        return count\n    \n    # If the array is sorted from the mid-point to the end, return the count of rotations\n    if left == right and arr[left] > arr[right]:\n        return count + 1\n    \n    # If the array is sorted from the end to the beginning, return the count of rotations\n    if left == right and arr[left] < arr[right]:\n        return count\n    \n    # If the array is not sorted, return -1 (indicating an error)\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n    \"\"\"\n    \n    # Initialize variables to keep track of number of rotations and current index\n    num_rot = 0\n    i = 0\n    \n    # Loop through the array and check if each element is greater than the next element\n    while i < len(arr) - 1:\n        if arr[i] > arr[i+1]:\n            num_rot += 1\n            i += 1\n        else:\n            i += 1\n    \n    # If the array is already sorted, no rotation is required and the count is 0\n    if i == len(arr) - 1:\n        return 0\n    \n    # Otherwise, the count of rotations required is one more than the number of rotations\n    return num_rot + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[i+n//2]:\n            return i\n    return n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if a number is a perfect square or not.\n    \"\"\"\n    if n < 2:\n        return False\n    i = n\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the input number is a perfect square, False otherwise.\n    \"\"\"\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Initialize the square root of the input number to the largest possible integer value\n    sqrt_n = int(n ** 0.5)\n    \n    # Iterate over the range from 1 to the square root of the input number\n    for i in range(1, sqrt_n + 1):\n        # Check if the current value is less than or equal to the square root of the input number divided by the current value\n        if i * i <= n // i:\n            return False\n    \n    # If the loop completes without finding a value less than or equal to the square root of the input number, the input number is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # base case\n    if n <= 1:\n        return True\n    # iterate from 2 to n-1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes an integer `n` as input and returns True if it is a perfect square else False.\n    A number is a perfect square if and only if it is equal to the square root of its square.\n    '''\n    # Convert the number to a float and calculate its square root\n    square_root = round(n ** 0.5)\n    # If the square of the square root is equal to n, then the number is a perfect square\n    return square_root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Function to check if a number is a perfect square\n    def isPerfectSquare(num):\n        # Check if the square root of num is an integer\n        sqrt_num = int(num ** 0.5)\n        return sqrt_num * sqrt_num == num\n\n    # Check if n is a perfect square\n    if isPerfectSquare(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if the given number is a perfect square or not.\n\n    :param n: The number to be checked\n    :return: True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    else:\n        # Using the binary search algorithm to find the square root\n        low = 0\n        high = n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == n:\n                return True\n            elif mid * mid < n:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        if n == i * i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    It returns True if the number is a perfect square and False otherwise.\n    \"\"\"\n    # check if the number is less than 0\n    if n < 0:\n        return False\n    \n    # check if the number is equal to 0 or 1\n    if n == 0 or n == 1:\n        return True\n    \n    # find the square root of the number\n    root = int(n ** 0.5) + 1\n    \n    # check if the square root is equal to the number itself\n    if root ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while i <= n//2:\n        square = i*i\n        if square == n:\n            return True\n        elif square < n:\n            i += 1\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        low = 0\n        high = n\n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == n:\n                return True\n            elif mid * mid < n:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    # Initialize product variable to zero\n    product = 1\n\n    # Iterate through the list and multiply each element with the product\n    for num in arr:\n        product *= num\n\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max_sum and max_list to the first list in the lists list\n    max_sum = max(lists[0])\n    max_list = lists[0]\n    \n    # Loop through each subsequent list in the lists list\n    for i in range(1, len(lists)):\n        # Initialize current_sum and current_list to the first element in the current list\n        current_sum = lists[i][0]\n        current_list = [lists[i][0]]\n        \n        # Loop through each subsequent element in the current list\n        for j in range(1, len(lists[i])):\n            # Add the current element to the current_sum\n            current_sum += lists[i][j]\n            \n            # If the current_sum is greater than the max_sum, update both max_sum and max_list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = current_list\n            \n            # If the current_sum is equal to the max_sum, add the current element to max_list if it's not already there\n            elif current_sum == max_sum and current_list not in max_list:\n                max_list.append(lists[i][j])\n    \n    # Return the max_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the list with that sum\n    max_sum = float('-inf')\n    max_list = []\n    # Loop through each list in the input list\n    for lst in lists:\n        # Initialize variables to store the current sum and the list of elements that make up the current sum\n        current_sum = 0\n        current_list = []\n        # Loop through each element in the list and add it to the current sum and the list of elements\n        for elem in lst:\n            current_sum += elem\n            current_list.append(elem)\n        # If the current sum is greater than the maximum sum so far, update both variables\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = current_list\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    # initialize variables to keep track of the maximum sum and the list with that sum\n    max_sum = float('-inf')\n    max_list = []\n    \n    # loop over all possible sublists of the input lists\n    for i in range(1, len(lists)):\n        for j in range(i+1, len(lists[0])+1):\n            sublist = [lists[k][l] for k in range(len(lists)) for l in range(len(lists[0])) if k < i and l < j]\n            sublist.sort()\n            subsum = sum(sublist)\n            if subsum > max_sum:\n                max_sum = subsum\n                max_list = sublist\n    \n    # return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        sum_list = []\n        for j in range(len(lists[i])):\n            sum_list.append(lists[i][j] + lists[j][i])\n        if sum(sum_list) > max_sum:\n            max_sum = sum(sum_list)\n            max_list = sum_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    else:\n        sub_max = max_sum_list(lists[1:])\n        current_list = lists[0]\n        for item in current_list:\n            if item < sub_max:\n                sub_max = item\n        return current_list + [sub_max]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    else:\n        max_list = max_sum_list(lists[1:])\n        return [max(max_list[i], max_list[i] + lists[0][i]) for i in range(len(max_list))]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in the input list of lists whose sum of elements is the highest.\n    '''\n    # initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n    # loop through each list in the input list of lists\n    for lst in lists:\n        # initialize a variable to store the current sum\n        current_sum = 0\n        # loop through each element in the list\n        for num in lst:\n            # add the element to the current sum\n            current_sum += num\n        # if the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # create a new list that contains the elements of the input list of lists\n    result = []\n    # loop through each list in the input list of lists and add the elements to the new list if they meet the maximum sum criterion\n    for lst in lists:\n        for num in lst:\n            if current_sum == max_sum:\n                result.append(num)\n                break\n    # return the new list\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Calculate the sum of each sublist\n    sublist_sums = [sum(sublist) for sublist in lists]\n\n    # Calculate the maximum sum of all sublist sums\n    max_sum = max(sublist_sums)\n\n    # Find the list in the original list that has the maximum sum\n    max_list = [sublist for sublist in lists if sum(sublist) == max_sum][0]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    # initialize variables\n    max_sum = 0\n    max_list = []\n\n    # loop through each list of the input list\n    for lst in lists:\n        # calculate the sum of the elements in the list\n        current_sum = sum(lst)\n\n        # update the maximum sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    # return the maximum list of the input lists\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_start = 0\n    run_end = 0\n    max_run_length = 0\n    \n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, update the run start and run end indices\n        if test_str[i].isupper():\n            run_start = i\n            run_end = i\n        # If the current character is not uppercase, update the run end index\n        else:\n            run_end += 1\n        \n        # If the current run is longer than the current maximum run, update the maximum run length\n        if run_end - run_start > max_run_length:\n            max_run_length = run_end - run_start\n            \n    # Return the maximum run length\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables to store the maximum run of uppercase characters\n    max_run = 0\n    current_run = 0\n    \n    # loop through each character in the string\n    for char in test_str:\n        # if the current character is uppercase and the previous character was not, increment the current run\n        if char.isupper() and not test_str[current_run - 1].isupper():\n            current_run += 1\n        # if the current character is not uppercase, reset the current run\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i].upper():\n            count += 1\n            if count > max_run:\n                max_run = count\n                start = i\n        else:\n            count = 0\n    return test_str[start:start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    run_start = 0\n    run_end = 0\n    max_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i] =='' and i - run_start > max_run:\n            max_run = i - run_start\n        elif test_str[i].isupper():\n            run_start = i\n            if i - run_end > max_run:\n                max_run = i - run_end\n        else:\n            run_end = i\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # create a list to store the run length of each uppercase character\n    run_lengths = []\n\n    # iterate through the string\n    for i in range(len(test_str)):\n        # if the current character is uppercase, add 1 to the run length list\n        if test_str[i].isupper():\n            run_lengths.append(1)\n        # if the current character is not uppercase, reset the run length to 0\n        else:\n            run_lengths = [0] * len(run_lengths)\n            break\n\n    # find the maximum run length\n    max_run = 0\n    for i in range(len(run_lengths)):\n        if run_lengths[i] > max_run:\n            max_run = run_lengths[i]\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    return max(max_run, current_run)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n\n    # Iterate through the string\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            # If the current character is uppercase, increment the current run\n            current_run += 1\n        else:\n            # If the current character is not uppercase, reset the current run\n            current_run = 0\n\n        # If the current run is greater than the previous max_run, update max_run\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    run_start = 0\n    run_end = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            run_end = i\n        else:\n            if uppercase_count > 0:\n                if run_end - run_start > 0:\n                    if run_end - run_start > max_run:\n                        max_run = run_end - run_start\n                        max_run_start = run_start\n                        max_run_end = run_end\n    \n    if max_run > 0:\n        return test_str[max_run_start:max_run_end+1]\n    else:\n        return \"No uppercase run found in the given string.\""
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    max_run = 0\n    curr_run = 0\n    for i in range(n):\n        if test_str[i].isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            curr_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize variables\n    max_run = 0\n    current_run = 0\n    start = -1\n    end = -1\n    \n    # iterate through the string and update the max_run and current_run variables\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            # if the current character is uppercase and there is a new run of uppercase characters\n            if i - start > current_run:\n                max_run = current_run\n                current_run = 1\n                start = i\n            else:\n                current_run += 1\n        else:\n            # if the current character is not uppercase and there is a run of uppercase characters\n            if current_run > 0:\n                max_run = max(max_run, current_run)\n                current_run = 0\n    \n    # if there is a run of uppercase characters at the end of the string, update max_run and current_run variables\n    if current_run > 0:\n        max_run = max(max_run, current_run)\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # initialize a variable to store the first odd number\n    first_odd_num = None\n    \n    # loop through each number in the list\n    for num in nums:\n        # if the number is odd, set first_odd_num to that number and break out of the loop\n        if num % 2!= 0:\n            first_odd_num = num\n            break\n    \n    # return the first odd number\n    return first_odd_num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    # If no odd numbers are found in the list, return None.\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it is, return the number\n            return num\n    # If no odd number was found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # iterate over the list of numbers\n    for num in nums:\n        # if the number is odd, return it\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple `test_tup` and a number `K` as input, and returns True if `test_tup` contains `K` and False otherwise.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    elif len(test_tup) == K:\n        return True\n    else:\n        for i in range(len(test_tup)-1):\n            if test_tup[i] == test_tup[i+1]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return all(num in test_tup for num in range(K))"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]