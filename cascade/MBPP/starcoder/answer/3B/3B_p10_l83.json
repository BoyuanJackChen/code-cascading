[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the shared elements between two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            return True\n    return False"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            if i not in shared_elements:\n                shared_elements.append(i)\n    return shared_elements\n\ntest_list1 = [1, 2, 3, 4, 5]\ntest_list2 = [2, 3, 4, 5, 6]\n\nshared_elements = similar_elements(test_list1, test_list2)\n\nprint(\"Shared elements:\", shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # create a set from list1 and a set from list2\n    set1 = set(list1)\n    set2 = set(list2)\n    # find the intersection of the sets and store it in a list\n    intersection = list(set1.intersection(set2))\n    # return the list of shared elements\n    return intersection"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem1 in test_tup1:\n        if elem1 in test_tup2:\n            shared_elements.append(elem1)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Define a set to store the shared elements\n    shared_elements = set()\n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # Check if the element is also in the second tuple\n        if element in test_tup2:\n            # If it is, add it to the shared elements set\n            shared_elements.add(element)\n    # Return the shared elements as a list\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Iterate through the elements of the first tuple\n    for element in test_tup1:\n        # If the element exists in the second tuple, add it to the common_elements set\n        if element in test_tup2:\n            common_elements.add(element)\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if n is less than 2 (not prime)\n    if n < 2:\n        return True\n    # Check if n is divisible by any number from 2 to n-1 (not prime)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    # If we reach this point, n is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not prime,\n    and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap from the first n elements\n    max_heap = nums[:n]\n    heapq.heapify(max_heap)\n\n    # Pop the largest elements from the heap\n    largest_numbers = []\n    while len(max_heap) > 0:\n        largest_numbers.append(heapq.heappop(max_heap))\n        if len(max_heap) > 0:\n            heapq.heappush(max_heap, -max_heap[0])\n\n    return largest_numbers"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -nums[i])\n        \n    # build the max heap from the remaining n-1 numbers\n    for i in range(n-1, len(nums)):\n        if nums[i] > -max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -nums[i])\n        \n    # return the max heap\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    for i in nums[n:]:\n        if i > heap[0]:\n            hq.heapreplace(heap,i)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max-heap from the first n elements of the list\n    hq.heapify(nums[:n])\n    # for the remaining (n-1) elements, extract the maximum element and add it to the end of the list\n    for i in range(n, len(nums)):\n        hq.heappush(nums, hq.heappop(nums))\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    min_heap = hq.nsmallest(n, nums)\n    # Iterate over the given list and add each element to the min-heap\n    for num in nums:\n        if num > min_heap[0]:\n            # Remove the smallest element from the min-heap\n            hq.heappop(min_heap)\n            # Add the new element to the min-heap\n            hq.heappush(min_heap, num)\n        # If the new element is smaller than the smallest element in the min-heap,\n        # ignore it and continue iterating over the list\n    # Return the n largest elements from the min-heap in descending order\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert list to heap\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n\n    # Extract and return the n largest integers\n    largest_nums = []\n    while len(largest_nums) < n:\n        largest_num = heapq.heappop(heap)\n        largest_nums.append(largest_num)\n\n    return largest_nums[::-1]  # Reverse the list to get the n largest integers in descending order"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    \n    # Adding the elements of the list to the heap\n    for num in nums:\n        hq.heappush(heap, -num)\n    \n    # Removing and returning the n largest integers from the heap\n    for _ in range(n):\n        largest = -hq.heappop(heap)\n    \n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Create a min-heap from the input list\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # Extract the n largest integers from the heap and append them to the output list\n    while n < len(nums):\n        largest = hq.heappop(heap)\n        nums.append(largest)\n        n += 1\n\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Initialize a max heap with the first n numbers\n    hq.heapify(nums[:n])\n\n    # Iterate through the remaining numbers\n    for num in nums[n:]:\n        # Remove the maximum number from the heap\n        hq.heappop(nums)\n\n        # Add the new number to the heap\n        hq.heappush(nums, num)\n\n    # Return the first n largest numbers from the heap\n    return nums[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert x to binary representation\n    binary_x = bin(x)[2:]\n\n    # Find the position of the first difference\n    for i in range(len(binary_x)):\n        if binary_x[i]!= binary_x[i+1]:\n            return False\n\n    # If no difference is found, x is a power of two\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    else:\n        while x > 1:\n            if x & 1 == 0:\n                x = x >> 1\n            else:\n                x = (x >> 1) + 2\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1: \n        if x & 1 == 1: \n            return False \n        x >>= 1 \n    return True "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Initialize a variable to store the count of bits that are different at one bit position only\n    count = 0\n\n    # Loop through all the bits of x and check if they differ at one bit position only\n    while x:\n        if x & 1 == 1:\n            count += 1\n        x >>= 1\n\n    # If the count is 0, then all bits are the same at one bit position only\n    return count == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        if x & (x-1) == 0:\n            return True\n    else:\n        if x & (x+1) == 0:\n            return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(n):\n    \"\"\"\n    Check if the given number is a power of two or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n & (n-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x: \n        count += 1\n        x &= (x - 1)\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Check if x is even\n    if x % 2 == 0:\n        # Check if x has only one bit set to 1\n        if bin(x).count('1') == 1:\n            return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x//2)\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if x is a power of two\n    while x % 2 == 0:\n        x = x // 2\n    # check if x is a power of two\n    while x % 2 == 1:\n        x = x // 2\n        if x == 1:\n            return True\n    # if we have made it here, then x is not a power of two\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the string\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    This function takes a string as input and returns a list of all words which are at least 4 characters long.\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b[a-zA-Z]{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the regular expression pattern to find all non-overlapping matches in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1 if str[0] == str[1] else 0\n    else:\n        max_rotations = 0\n        for i in range(1, n):\n            for j in range(n-i):\n                if str[j:j+i] == str[i:i+j] and str[i+j:i+j+i] == str[j+i:j+i+j]:\n                    max_rotations = max(max_rotations, 1 + find_Rotations(str[:i] + str[j+i:] + str[i+j+i:]))\n        return max_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n\n    # Find the minimum number of rotations required to get the string in reverse\n    for i in range(n // 2):\n        if str[i]!= str[n - i - 1]:\n            min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Check if the string is empty\n    if len(str) <= 1:\n        return 0\n    \n    # Check if the first two characters are equal\n    if str[0] == str[1]:\n        return 0\n    \n    # Create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Create a list of characters to rotate\n    rotate_chars = []\n    for char, count in freq.items():\n        for i in range(count):\n            rotate_chars.append(char)\n    \n    # Check for rotations by comparing the first two characters of the original string and the rotated string\n    min_rotations = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[(i+1)%len(str)] and str[i] == rotate_chars[i]:\n            min_rotations += 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n\n    # Create a frequency dictionary for the given string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Sort the frequency dictionary by the frequency of the characters\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1])\n\n    # Initialize variables to keep track of the minimum number of rotations and the current rotation\n    min_rot = float('inf')\n    current_rot = 1\n\n    # Iterate through the sorted frequency dictionary and check if the current rotation satisfies the condition\n    for char, count in sorted_freq:\n        if count <= current_rot:\n            min_rot = min(min_rot, current_rot)\n            current_rot += 1\n        else:\n            current_rot = 1\n\n    # If there is no rotation that satisfies the condition, then there is no rotation\n    if min_rot == float('inf'):\n        return 0\n\n    # Otherwise, return the minimum number of rotations\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 2:\n        return 0\n    \n    # Initialize the variables for the string and its length\n    string = str\n    n = len(str)\n    \n    # Initialize the variables for the number of rotations and the current rotation count\n    rotations = 0\n    current_rotations = 0\n    \n    # Loop until the string is equal to its original state\n    while string!= str.lower():\n        # Find the index of the first character that is different\n        index = string.find(str[0])\n        \n        # Rotate the string by the length of the substring to the left\n        string = string[index:] + string[:index]\n        \n        # Increment the number of rotations\n        rotations += 1\n        \n        # Update the current rotation count\n        current_rotations += 1\n        \n        # Check if the number of rotations exceeds the maximum allowed rotations\n        if current_rotations > rotations:\n            return -1\n    \n    # Return the minimum number of rotations\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    # Initialize the minimum number of rotations required to get the same string\n    min_rotations = 0\n    \n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        # Find the length of the rotated string\n        rotated_length = len(str) - i\n        # Check if the rotated string is equal to the original string\n        if str[i:i+rotated_length] == str:\n            # Update the minimum number of rotations required\n            min_rotations = max(min_rotations, rotated_length)\n    \n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    # Find all possible rotations of the string \n    rotations = set() \n    for i in range(n): \n        for j in range(i, n): \n            rotations.add(str[i:j+1]) \n\n    # Find the minimum number of rotations required to get the same string \n    min_rotations = n \n    for rotation in rotations: \n        if rotation == str: \n            min_rotations = min(min_rotations, n-1) \n\n    return min_rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the frequency of the last character in the string\n    last_char = max(freq, key=freq.get)\n    freq[last_char] -= 1\n\n    # Find the minimum number of rotations required\n    count = 0\n    while any(freq[char] > 0 for char in freq):\n        count += 1\n        for char in freq:\n            if freq[char] > 0:\n                freq[char] -= 1\n                break\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    dp = [[float('inf')] * (n+1) for _ in range(n+1)]\n\n    for i in range(n): \n        dp[i][i] = 0\n\n    for length in range(2, n+1): \n        for i in range(n-length+1): \n            j = i + length - 1 \n            if str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1]\n            else: \n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n\n    return dp[0][n-1]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # sort the dictionary by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n\n    # initialize the minimum number of rotations to 0\n    min_rotations = 0\n\n    # iterate through the sorted dictionary\n    for char, count in sorted_freq:\n        # if the frequency of a character is greater than 1, then we need to rotate the string\n        if count > 1:\n            min_rotations += 1\n\n    # return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize the first and last index of the character\n    first_index = -1\n    last_index = -1\n    # loop through the string and find the first and last index of the character\n    for i in range(len(s)):\n        if s[i] == ch:\n            if first_index == -1:\n                first_index = i\n            last_index = i\n    # if the character is not present in the string, return the original string\n    if first_index == -1:\n        return s\n    # remove the first and last occurrence of the character\n    return s[:first_index] + s[last_index+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        # remove first occurrence\n        s = s.replace(ch, '', 1)\n        # remove last occurrence\n        s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Remove first occurrence of the character\n    while s.startswith(ch):\n        s = s[1:]\n    # Remove last occurrence of the character\n    while s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    if len(s) == 0 or len(ch) == 0 or len(ch) > len(s):\n        return s\n    elif s[0] == ch:\n        return s[1:]\n    elif s[-1] == ch:\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip() # Remove any leading or trailing whitespaces\n    n = s.count(ch) # Count the number of occurrences of the character in the string\n    \n    # If the character is not found, return the original string\n    if n == 0:\n        return s\n    \n    # If the character is found only once, remove the first and last occurrence\n    if n == 1:\n        if s.find(ch) == 0:\n            return s[1:]\n        elif s.rfind(ch) == len(s)-1:\n            return s[:len(s)-1]\n        else:\n            return s\n    \n    # If the character is found more than once, remove all the occurrences\n    else:\n        i = s.find(ch)\n        j = s.rfind(ch)\n        return s[:i] + s[j+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    return s[1:-1]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize a list to store the indices of the rows to be sorted\n    row_indices = []\n    # Iterate over all rows\n    for i in range(n):\n        # Initialize a variable to store the current row's sum\n        current_sum = 0\n        # Iterate over all columns of the current row\n        for j in range(n):\n            # Add the value of the j-th column to the current sum\n            current_sum += M[i][j]\n        # Append the index of the current row to the row_indices list\n        row_indices.append(i)\n    # Sort the row_indices list in ascending order using the bubble sort algorithm\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if M[row_indices[j]][j] > M[row_indices[j+1]][j]:\n                row_indices[j], row_indices[j+1] = row_indices[j+1], row_indices[j]\n    # Update the values of the matrix by swapping the rows in the sorted order\n    for i in range(n):\n        for j in range(n):\n            M[i][j] = M[row_indices[i]][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element of the current row\n        for j in range(len(M[i])):\n            # initialize the sum of the row to the first element\n            row_sum = M[i][j]\n            # loop through the remaining elements of the current row\n            for k in range(j+1, len(M[i])):\n                # add the current element to the sum of the row\n                row_sum += M[i][k]\n                # swap the current element with the element with the smallest sum of the row\n                if row_sum < M[i][j]:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n                    row_sum = M[i][j]\n            # set the first element of the current row to the row_sum\n            M[i][j] = row_sum"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize variables\n    n = len(M)\n    sorted_rows = []\n    \n    # Iterate through each row in the matrix\n    for i in range(n):\n        # Initialize variables\n        curr_row = []\n        row_sum = 0\n        \n        # Iterate through each element in the current row\n        for j in range(n):\n            # Add the element to the current row and calculate the row sum\n            curr_row.append(M[i][j])\n            row_sum += M[i][j]\n        \n        # Append the current row with its row sum to the sorted rows list\n        sorted_rows.append((curr_row, row_sum))\n    \n    # Sort the rows in ascending order of row sum\n    sorted_rows.sort(key=lambda x: x[1])\n    \n    # Iterate through the sorted rows and assign the sorted rows to the original matrix\n    for i in range(n):\n        M[i] = sorted_rows[i][0]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize a new matrix to hold the sorted matrix\n    sorted_M = []\n    \n    # loop through each row of the original matrix\n    for row in M:\n        # initialize variables to hold the current row's sum and the index of the minimum element\n        current_sum = sum(row)\n        min_idx = 0\n        \n        # loop through each element of the row and check if it is the minimum element so far\n        for i in range(1, len(row)):\n            if row[i] < row[min_idx]:\n                min_idx = i\n                current_sum = row[min_idx]\n        \n        # add the minimum element to the new matrix and remove it from the current row\n        sorted_row = row[:min_idx] + [row[min_idx]] + row[min_idx+1:]\n        sorted_M.append(sorted_row)\n    \n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n\n    # Iterate through each row of the matrix\n    for row in M:\n        # Initialize a variable to store the current row's sum\n        current_row_sum = sum(row)\n\n        # Find the index of the first element in the current row that is smaller than the current row's sum\n        index = row.index(current_row_sum)\n\n        # Append the first element of the current row to the sorted matrix and remove it from the current row\n        sorted_M.append(row.pop(index))\n\n        # Append the remaining elements of the current row to the sorted matrix\n        sorted_M.extend(row)\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(i+1, len(M)):\n                if sum(M[i]) > sum(M[k]):\n                    M[i], M[k] = M[k], M[i]\n                    break\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    # Initialize variables for the number of rows and columns\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Initialize variables for the row sums and the column sums\n    row_sums = [sum(row) for row in M]\n    col_sums = [sum(col) for col in zip(*M)]\n    \n    # Initialize variables for the temporary row and column sums\n    temp_row_sum = 0\n    temp_col_sum = 0\n    \n    # Sort the matrix based on the row sums\n    M.sort(key=lambda x: row_sums.index(temp_row_sum))\n    \n    # Iterate through the sorted matrix and check if the row sum is greater than the current maximum\n    max_row_sum = 0\n    for row in M:\n        temp_row_sum = sum(row)\n        if temp_row_sum > max_row_sum:\n            max_row_sum = temp_row_sum\n            \n    # Sort the matrix based on the column sums\n    M.sort(key=lambda x: col_sums.index(temp_col_sum))\n    \n    # Iterate through the sorted matrix and check if the column sum is greater than the current maximum\n    max_col_sum = 0\n    for col in M:\n        temp_col_sum = sum(col)\n        if temp_col_sum > max_col_sum:\n            max_col_sum = temp_col_sum\n    \n    # Determine the minimum value in the matrix and assign it to the diagonal element\n    min_val = min(max_row_sum, max_col_sum)\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                M[i][j] = min_val\n    \n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Check if the matrix is square\n    if len(M[0])!= len(M):\n        print(\"The matrix is not square!\")\n        return\n    \n    # Calculate the sum of each row of the matrix\n    sums = []\n    for row in M:\n        sum = sum(row)\n        sums.append(sum)\n    \n    # Sort the matrix based on the sum of each row\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            for k in range(len(sums)-1):\n                if sums[k] > sums[k+1]:\n                    sums[k], sums[k+1] = sums[k+1], sums[k]\n                    \n    # Print the sorted matrix\n    print(\"Sorted Matrix:\")\n    for row in M:\n        print(row)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M[i])):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the volume of the prism using Heron's formula\n    volume = (1/3) * l * b * h\n\n    # Return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 6  # formula to find volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    #Calculate the volume of the triangular prism\n    V = (l*b*h)/3\n\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the length of the three sides of the triangular prism, and returns the volume of the triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l * b * h\n    print(\"The Volume of the triangular prism is:\", Volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function finds the volume of a triangular prism.\n\n    Parameters:\n        l (float): Length of the base of the prism\n        b (float): Length of the height of the prism\n        h (float): Length of the side of the prism\n\n    Returns:\n        (float): Volume of the prism\n    '''\n\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (l*b*h) / 2\n    volume = (area * l) / 3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is:\",V)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<![a-z])([a-z]+)(?![a-z])\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+)_+([a-z]+)')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    if not text:\n        return False\n\n    underscore_pattern = r'[a-z]+_+'\n\n    if re.match(underscore_pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?:_[a-z])*_[a-z]'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = re.compile(r'(?<=[a-z])(?=[A-Z])')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+)')\n    match = pattern.findall(text)\n    if len(match) > 0:\n        for item in match:\n            if item[0].islower() and item[1:].isupper():\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    # calculate the perimeter of the square\n    perimeter = 4 * a\n    \n    # return the perimeter\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Define two strings\n    first_string = 'abcdefghijklmnopqrstuvwxyz'\n    second_string = 'bcdefghijklmnopqrstuvwxyz'\n\n    # Convert the first string to a list of characters\n    first_list = list(first_string)\n\n    # Convert the second string to a set of characters\n    second_set = set(second_string)\n\n    # Loop through the characters in the first string\n    for char in string:\n        # If the character is not in the second set, add it to the result list\n        if char not in second_set:\n            first_list.remove(char)\n\n    # Convert the result list back to a string and return it\n    result_string = ''.join(first_list)\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a list of characters present in the second string\n    second_list = [chr(i) for i in range(NO_OF_CHARS) if chr(i) in string]\n    # Create a list of characters present in the first string which are not present in the second string\n    first_list = [chr(i) for i in range(NO_OF_CHARS) if chr(i) not in second_list]\n    # Create a new string from the new list of characters from both strings\n    new_string = \"\".join(first_list)\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    char_set = set(char_list)\n    first_string = string.lower()\n    second_string = ''.join(set(string)).lower()\n    common_chars = char_set.intersection(set(second_string))\n    result = ''.join(char for char in first_string if char not in common_chars)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = [chr(i) for i in range(NO_OF_CHARS)] # create a list of all the characters in the alphabet\n    string_list = list(string) # convert the input string into a list of characters\n\n    for char in string_list: # iterate over each character in the input string\n        if char in list_of_chars: # check if the character is present in the list of all characters\n            index = list_of_chars.index(char) # get the index of the character in the list of all characters\n            del string_list[index] # remove the character from the input string list\n\n    return ''.join(string_list) # convert the list of characters back into a string and return it"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of characters to remove from the first string\n    characters_to_remove = set(string)\n    # Create a list of characters in the first string\n    first_string_list = list(string)\n    # Remove characters from the first string which are present in the second string\n    for i in range(len(first_string_list)):\n        if first_string_list[i] in characters_to_remove:\n            first_string_list.remove(first_string_list[i])\n    # Convert the list of characters back to a string\n    first_string = ''.join(first_string_list)\n    # Return the modified string\n    return first_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_set = set(string)  # convert string to set of characters\n    for char in string:\n        if char in char_set:  # if character is present in char_set, remove it from string\n            string = string.replace(char, \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Converting the string to a list of characters\n    char_list = list(string)\n\n    # Creating a set of characters present in the second string\n    char_set = set(string)\n\n    # Iterating over the characters in the first string\n    for i in range(NO_OF_CHARS):\n        # If the character is present in the second string\n        if chr(i) in char_set:\n            # Removing the character from the list of characters\n            char_list.remove(chr(i))\n\n    # Converting the list of characters back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert string to a list of characters\n    char_list = list(string)\n\n    # remove characters from char_list which are present in the second string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n\n    # convert char_list back to a string\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    \"\"\"\n    This function removes all the characters from the first string which are present in the second string.\n\n    Parameters:\n    string (str): The string from which we want to remove characters.\n\n    Returns:\n    list: A list of characters which are present in the first string but not present in the second string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Create an empty list to store the characters which are present in the second string but not present in the first string\n    result_list = []\n\n    # Iterate through the characters in the first string\n    for char in char_list:\n        # If the character is not present in the second string, add it to the result list\n        if char not in string:\n            result_list.append(char)\n\n    # Convert the result list to a string and return it\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:\\'\",<.>/?')\n    for char in string:\n        if char in remove_chars:\n            remove_chars.remove(char)\n    return ''.join(remove_chars)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the indices of the elements\n    index_dict = {}\n    \n    # iterate over the array and check if the current element is already in the dictionary\n    for index, num in enumerate(arraynums):\n        if num in index_dict:\n            # if the element is already in the dictionary, return True\n            return True\n        else:\n            # if the element is not in the dictionary, add it to the dictionary and continue\n            index_dict[num] = index\n    \n    # if we reach this point, the loop has iterated over the entire array and all elements are unique\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = set()\n    for num in arraynums:\n        if num in duplicates:\n            return True\n        duplicates.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store the unique values in the array\n    unique_values = set(arraynums)\n\n    # check if the length of the set is equal to the length of the array\n    if len(unique_values) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Check whether there are any elements in the dictionary that have a count greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = set(arraynums)\n    if len(nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arraynums:\n        # Check if the element exists in the dictionary\n        if num in freq:\n            # If it does, increase its frequency by 1\n            freq[num] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a frequency of 1\n            freq[num] = 1\n\n    # Iterate through the dictionary and check if any element has a frequency greater than 1\n    for key, value in freq.items():\n        if value > 1:\n            # If it does, return True\n            return True\n\n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty set to store unique elements\n    unique_nums = set()\n\n    # iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_nums.add(num)\n\n    # check if the set has any duplicate elements\n    if len(unique_nums) == len(arraynums):\n        print(\"The array contains no duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns a boolean value indicating whether\n    the array contains any duplicate elements or not.\n    '''\n    # Initialize an empty dictionary to store the indices of the elements already encountered\n    indices = {}\n\n    # Loop through the array\n    for i, num in enumerate(arraynums):\n        # Check if the current element is already present in the dictionary\n        if num in indices:\n            # If it is, return True indicating that the array contains a duplicate element\n            return True\n        # If the element is not present, add it to the dictionary with the current index\n        else:\n            indices[num] = i\n\n    # If the loop completes without finding any duplicate elements, return False indicating that the array\n    # does not contain any duplicates\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x == 13:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # create a list of possible woodall numbers\n    woodalls = [1, 2, 3, 5, 10, 20, 50, 100, 500, 1000]\n\n    # iterate through the list and check if x is a woodall number\n    for woodall in woodalls:\n        if x % woodall == 0:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # define a list of allowed values for x\n    woodall_values = [0, 1, 10, 11, 12, 20, 21, 22, 30, 31, 32, 40, 41, 42, 50, 51, 52, 60, 61, 62, 70, 71, 72, 80, 81, 82, 90, 91, 92]\n\n    # check if x is in the list of allowed values\n    if x in woodall_values:\n        # if x is a woodall, return True\n        return True\n    else:\n        # if x is not a woodall, return False\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # list of valid woodall numbers\n    valid_woodalls = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # check if the number is in the list of valid woodalls\n    return x in valid_woodalls"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in range(1, 6):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 2 and x < 10:\n        print(\"Woodball\")\n    else:\n        print(\"Not a Woodball\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 5:\n        return True\n    elif x >= 5 and x <= 10:\n        return False\n    else:\n        return x % 2 == 0"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n\nInput: An integer x. \n\nOutput: Returns True if x is a woodball, False otherwise. \n\nExamples: \n\nis_woodall(12) \u279e True\n\nis_woodall(100) \u279e False \n\nis_woodall(1024) \u279e True \n\nis_woodall(10) \u279e False\n\nIn this problem, we need to check if the given number is a woodball or not. A woodball is defined as a number whose digits are all distinct. The digits in a number are the set of the individual digits. For example, the digits of 12 are 1, 2, and 2. If a number has all distinct digits, it is a woodball. \n\nTo solve this problem, we can iterate over the digits of the given number and check if all of them are distinct. If all of them are distinct, then it is a woodball and we can return True. If not, we can return False. Here is the implementation of the function: \n\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Initialize an empty set to store the digits of the given number\n    digits = set() \n\n    # Iterate over the digits of the given number\n    for i in str(x): \n        # Convert the digit to an integer and add it to the set of digits\n        digits.add(int(i)) \n\n    # If all of the digits in the set are distinct, then it is a woodball\n    if len(digits) == len(set(str(x))): \n        return True \n\n    # If not, then it is not a woodball\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    # Convert the number to a string\n    str_num = str(num)\n    # Reverse the string\n    rev_str = str_num[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the original number is one less than twice its reverse\n    if num == rev_num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    rev_num = str(num)[::-1]\n    \n    # Check if the reversed number is one less than twice the original number\n    if int(rev_num) < int(num) * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the reversed number is one less than twice the original number\n    if rev_num < 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num % 10\n        num //= 10\n    if reverse == 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = (rev_num * 10) + digit\n        temp //= 10\n    if num == (rev_num + 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num >= 2 * int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    \n    while temp > 0:\n        rev_num = rev_num*10 + temp%10\n        temp //= 10\n    \n    return rev_num == 2*(num-1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    temp = num\n    while temp > 0:\n        reverse_num = reverse_num * 10 + temp % 10\n        temp //= 10\n    if reverse_num == num + 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num < (num + 1) * (num + 1) // 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if num == reverse:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    # Initialize the max number as the first number in the list\n    max_num = arr[0]\n\n    # Traverse through the list and update the max number if a digit is greater than max number\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(1,10):\n        for j in range(i,10):\n            for k in range(j,10):\n                for l in range(k,10):\n                    for m in range(l,10):\n                        for x in range(m,10):\n                            for y in range(x,10):\n                                for z in range(y,10):\n                                    if (i,j,k,l,m,x,y,z) in arr:\n                                        num = int(str(i)+str(j)+str(k)+str(l)+str(m)+str(x)+str(y)+str(z))\n                                        if num > max_num:\n                                            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed using those digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    current_num = 0\n    for num in arr:\n        current_num = current_num * 10 + num\n        if current_num > max_num:\n            max_num = current_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] > max_num:\n                max_num = arr[i] + arr[j]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 0\n\n    for i in range(2, n + 1):\n        dp[i] = max(arr[i - 1] + dp[i - 2], arr[i - 2] + dp[i - 1])\n\n    return dp[n]"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with those digits.\n    \"\"\"\n    if len(arr) == 0:  # base case: empty list\n        return 0\n    else:\n        max_num = 0  # initialize largest number to 0\n        for num in arr:  # loop through each digit in the list\n            if num > max_num:  # if the digit is larger than the current largest number\n                max_num = num  # update the largest number\n        return max_num + find_Max_Num(arr[1:])  # add the current largest number to the sum of all the remaining digits"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    # Sort the given array in decreasing order\n    arr.sort(reverse=True)\n    # Initialize the maximum number as the sum of the smallest digit\n    max_num = sum(arr[0])\n    # Iterate through the array and add up the digits\n    for i in range(1, len(arr)):\n        temp = arr[i]\n        for j in range(len(temp)):\n            max_num += temp[j]\n        # Check if the maximum number is greater than the current maximum number\n        if max_num > arr[i]:\n            max_num = arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    # Sort the given array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables to store the largest number formed\n    max_num = 0\n    max_num_len = 0\n\n    # Iterate through each digit in the sorted array\n    for digit in arr:\n        # Convert the digit to an integer and add it to the largest number formed\n        digit_num = int(digit)\n        max_num += digit_num\n\n        # Check if the length of the current number is greater than the maximum length found so far\n        if len(str(max_num)) > max_num_len:\n            max_num_len = len(str(max_num))\n\n    # Return the maximum number formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in arr:\n        max_num = max(max_num, i)\n    return max_num\n\narr = [1, 2, 3, 4, 5]\nprint(find_Max_Num(arr)) # Output: 9"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0): \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs and False otherwise.\n    \"\"\"\n    if x * y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: # if both x and y are positive \n        return False\n    elif x < 0 and y < 0: # if both x and y are negative \n        return False\n    elif x > 0 and y < 0: # if x is positive and y is negative \n        return True\n    elif x < 0 and y > 0: # if x is negative and y is positive \n        return True\n    else: # if both x and y are zero \n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x > 0 and y < 0) or (x < 0 and y > 0): \n        print(x,\" and \",y,\" have opposite signs.\") \n    else: \n        print(x,\" and \",y,\" don't have opposite signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and checks whether the two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return True\n    elif x <= 0 and y <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    if x == 0 or y == 0:\n        return False\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function will check whether the given two integers have opposite signs or not.\n    \"\"\"\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and checks whether they have opposite signs or not.\n    '''\n\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    for i in range(1, n+1):\n        octagonal = octagonal * 3\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 27\n    d = 64\n\n    for i in range(n):\n        if i % 2 == 0:\n            print(a)\n            a += 2 * b\n        else:\n            print(c)\n            c += 2 * d\n        b *= 2\n        d *= 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        octagonal_number = 0\n        i = 1\n        while i <= n:\n            octagonal_number += i * (i - 1)\n            i += 1\n        return octagonal_number\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than 0.\"\n    elif n == 1:\n        return 1\n    else:\n        return (10**n - 1) * 10**n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the formula for nth octagonal number\n    formula = (2 * n * n + 1) ** 0.5\n\n    # Calculate the octagonal number\n    octagonal = int(formula)\n\n    # Check if the octagonal number is equal to n\n    if octagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    while a**2 < n:\n        a += 1\n    return a * (a+1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 'Please enter a positive integer'\n    if n == 1:\n        return 1\n    else:\n        return (4 * (n * n) + 6) // 7"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Calculate the square of the input number\n    num = n ** 2\n    # Find the largest possible octagonal number less than or equal to the input number\n    max_oct = (num ** 0.5) ** 2\n    # Check if the input number is an octagonal number\n    if num < 2 * max_oct:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Get the maximum number of rows and columns\n    max_rows = int(n**0.5)\n    max_cols = int(n**0.5)\n\n    # Initialize the count of octagonal numbers\n    count = 0\n\n    # Iterate over the rows and columns of the grid\n    for i in range(1, max_rows + 1):\n        for j in range(1, max_cols + 1):\n            # Get the square of the current number\n            square = i * i + j * j\n\n            # Check if the square is equal to the current number\n            if square == n:\n                # Increment the count of octagonal numbers\n                count += 1\n\n                # Exit the inner loop once we have found the nth octagonal number\n                break\n\n    # Return the count of octagonal numbers\n    return count"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 8\n    elif n == 2:\n        return 24\n    elif n == 3:\n        return 40\n    elif n == 4:\n        return 56\n    elif n == 5:\n        return 72\n    elif n == 6:\n        return 88\n    elif n == 7:\n        return 104\n    elif n == 8:\n        return 120\n    elif n == 9:\n        return 136\n    elif n == 10:\n        return 152\n    elif n == 11:\n        return 168\n    elif n == 12:\n        return 184\n    elif n == 13:\n        return 200\n    elif n == 14:\n        return 216\n    elif n == 15:\n        return 232\n    elif n == 16:\n        return 248\n    elif n == 17:\n        return 264\n    elif n == 18:\n        return 280\n    elif n == 19:\n        return 296\n    elif n == 20:\n        return 312\n    elif n == 21:\n        return 328\n    elif n == 22:\n        return 344\n    elif n == 23:\n        return 360\n    elif n == 24:\n        return 376\n    elif n == 25:\n        return 392\n    elif n == 26:\n        return 408\n    elif n == 27:\n        return 424\n    elif n == 28:\n        return 440\n    elif n == 29:\n        return 456\n    elif n == 30:\n        return 472\n    elif n == 31:\n        return 488\n    elif n == 32:\n        return 504\n    elif n == 33:\n        return 520\n    elif n == 34:\n        return 536\n    elif n == 35:\n        return 552\n    elif n == 36:\n        return 568\n    elif n == 37:\n        return 584\n    elif n == 38:\n        return 600\n    elif n == 39:\n        return 616\n    elif n == 40:\n        return 632\n    elif n == 41:\n        return 648\n    elif n == 42:\n        return 664\n    elif n == 43:\n        return 680\n    elif n == 44:\n        return 696\n    elif n == 45:\n        return 712\n    elif n == 46:\n        return 728\n    elif n == 47:\n        return 744\n    elif n == 48:\n        return 760\n    elif n == 49:\n        return 776\n    elif n == 50:\n        return 792\n    elif n == 51:\n        return 808\n    elif n == 52:\n        return 824\n    elif n == 53:\n        return 840\n    elif n == 54:\n        return 856\n    elif n == 55:\n        return 872\n    elif n == 56:\n        return 888\n    elif n == 57:\n        return 904\n    elif n == 58:\n        return 920\n    elif n == 59:\n        return 936\n    elif n == 60:\n        return 952\n    elif n == 61:\n        return 968\n    elif n == 62:\n        return 984\n    elif n == 63:\n        return 1000\n    elif n == 64:\n        return 1016\n    elif n == 65:\n        return 1032\n    elif n == 66:\n        return 1048\n    elif n == 67:\n        return 1064\n    elif n == 68:\n        return 1080\n    elif n == 69:\n        return 1096\n    elif n == 70:\n        return 1112\n   "
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the frequency of each digit in the given string\n    digit_freq = defaultdict(int)\n    for char in s:\n        digit_freq[char] += 1\n\n    # Calculate the sum of digits for each substring\n    total_sum = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            if sum([digit_freq[digit] for digit in substring]) == len(substring):\n                total_sum += 1\n\n    # Return the total number of substrings with the sum of digits equal to their length\n    return total_sum"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the frequency of characters in the string\n    freq = defaultdict(int)\n    for char in s:\n        freq[char] += 1\n\n    # Count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Calculate the sum of digits in the substring\n            substring = int(s[i:j+1])\n            # Check if the sum of digits is equal to the length of the substring\n            if substring == len(str(substring)):\n                count += j - i + 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(d) for d in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    digit_count = defaultdict(int)\n    for i in range(n):\n        digit_count[s[i]] += 1\n        for j in range(i+1, n+1):\n            if sum(int(d) for d in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with given sum\n    count_dict = defaultdict(int)\n\n    # Loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the digits from the substring and calculate their sum\n            digits_sum = sum(int(digit) for digit in s[i:j])\n\n            # If the sum of digits is equal to the length of the substring, increment the count\n            if digits_sum == len(s[i:j]):\n                count_dict[digits_sum] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count_dict[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[s[i]] += 1\n        for j in range(i + 1, len(s) + 1):\n            if sum(int(digit) for digit in s[i:j]) == j - i:\n                count[s[i:j]] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n\n    for i in range(n):\n        if s[i].isdigit():\n            dp[i+1] += dp[i]\n\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            if dp[j] - dp[i] == len(s):\n                result += 1\n\n    return result"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    char_count = defaultdict(int)\n    for c in s:\n        char_count[c] += 1\n    \n    result = 0\n    for length in range(1, len(s)+1):\n        digit_sum = 0\n        for substring in s:\n            if len(substring) == length:\n                for i, c in enumerate(substring):\n                    digit_sum += int(c)\n        if digit_sum == length:\n            result += 1\n    \n    return result"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substr = s[i:j]\n            digits = [int(digit) for digit in substr]\n            if sum(digits) == len(digits):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Using a defaultdict to store the count of substrings with the given length\n    count = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Initialize the count of digits in the substring\n        sub_count = 0\n\n        # Loop through each digit in the substring\n        for j in range(i, len(s)):\n            # If the current digit is a digit, add 1 to the count of digits\n            if s[j].isdigit():\n                sub_count += 1\n            # If the current digit is not a digit, break out of the loop\n            else:\n                break\n\n        # Check if the current substring has the sum of digits equal to its length\n        if sub_count == len(s):\n            count[sub_count] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number to the first number in the list\n    smallest = xs[0]\n    # loop through the rest of the numbers in the list\n    for x in xs[1:]:\n        # check if the current number is smaller than the smallest number\n        if x < smallest:\n            # update the smallest number to the current number\n            smallest = x\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]  # initialize smallest to first element of list\n    for num in xs[1:]:  # iterate through rest of list\n        if num < smallest:  # check if current number is smaller\n            smallest = num  # update smallest if new number is smaller\n    return smallest  # return smallest number"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number as the first element of the list\n    smallest = xs[0]\n\n    # loop through the rest of the list and compare each element with the smallest\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables for storing the minimum and maximum values seen so far\n    min_value = float('inf')\n    max_value = float('-inf')\n    # Loop through the list of tuples and update the min and max values\n    for i, j in test_list:\n        if i < min_value:\n            min_value = i\n        if j > max_value:\n            max_value = j\n    # Return the maximum difference between the minimum and maximum values\n    return max_value - min_value"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = float('-inf')\n    min_diff = float('inf')\n    prev_pair = None\n    \n    # Iterate through the list and find the maximum and minimum differences\n    for pair in test_list:\n        # If the current pair is None, set prev_pair to the first pair\n        if pair is None:\n            prev_pair = pair\n            continue\n        \n        # If the current pair is not None, calculate the difference and update max_diff and min_diff accordingly\n        diff = pair[1] - prev_pair[0]\n        if diff > max_diff:\n            max_diff = diff\n        elif diff < min_diff:\n            min_diff = diff\n        \n        # Update prev_pair to the current pair\n        prev_pair = pair\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the given tuple list in ascending order\n    test_list.sort()\n    \n    # Initialize maximum difference to be equal to the first element of the list\n    max_diff = test_list[0]\n    \n    # Iterate through the list and check for pairs of elements that differ by more than the maximum difference\n    for i in range(1, len(test_list)):\n        if test_list[i][0] - test_list[i-1][0] > max_diff:\n            max_diff = test_list[i][0] - test_list[i-1][0]\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # initialize max_diff to the smallest possible value\n    max_diff = float('inf')\n\n    # iterate through the list and for each pair, calculate the absolute difference\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the given list in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference as 0\n    max_diff = 0\n\n    # Iterate through the sorted list and compare adjacent elements\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1] - test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    pairs = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.add(tuple(sorted((test_list[i], test_list[j]))))\n            pairs.add(tuple(sorted((test_list[j], test_list[i]))))\n\n    for pair in pairs:\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples using the second value as the key\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_list = []\n    for mark in subjectmarks:\n        subject_list.append(mark[1])\n    subject_list.sort()\n    return subject_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of tuples with subject names and marks\n    marks_list = list(subjectmarks)\n    \n    # sort the list of tuples in descending order of marks\n    marks_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # return the sorted list of tuples\n    return marks_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case\n    if len(data_list) == 0:\n        return 0\n    \n    # Recursive case\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # recursive case: add the head of the list to the sum of the tail recursively\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten_list(item)\n        else:\n            yield data_list\n\n    flattened_list = list(flatten_list(data_list))\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        \"\"\"\n        Flatten a list recursively.\n        \"\"\"\n        if not lst:\n            return []\n        return flatten(lst[1:]) + [lst[0]]\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Define the recursive function\n    def flatten_and_sum(data_list):\n        # Base case: If the list is empty, return 0\n        if not data_list:\n            return 0\n        \n        # Recursive case: Add the first element to the sum of the flattened list, recursively calling the function on the rest of the list\n        else:\n            return flatten_and_sum(data_list[1:]) + data_list[0]\n    \n    # Call the recursive function and return the result\n    return flatten_and_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list, level=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum([item for sublist in data_list for item in sublist], level+1)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    if not isinstance(data_list, list):\n        return data_list\n    \n    return recursive_list_sum(data_list[0]) + data_list[1] + recursive_list_sum(data_list[2:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if isinstance(data_list, list):\n            return sum(data_list) + flatten_list(sum(data_list, []))\n        else:\n            return data_list\n\n    result = flatten_list(data_list)\n    return result"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        flat_list = []\n        for item in data_list:\n            flat_list.extend(recursive_list_sum(item))\n        return flat_list"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and counts the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers present in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    def partition(n, k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            if n % 2 == 0:\n                return partition(n//2, k-1) + partition(n//2, k)\n            else:\n                return partition(n//2, k) + partition(n//2, k-1)\n    \n    return partition(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Bell numbers are arranged in a triangular form, so we can use the formula to find the number of ways to partition the first n Bell numbers\n    return (n * (n - 1)) // 2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    # Create a 2D list to store the number of ways to partition a set of Bell numbers\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Base cases:\n    # - The only way to partition a set of 0 Bell numbers is to select 0 Bell numbers\n    # - The only way to partition a set of 1 Bell numbers is to select all 1 Bell numbers\n    for i in range(2, n + 1):\n        dp[i][0] = 1\n        dp[i][1] = i\n\n    # Fill the rest of the table using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(2, n + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    # Return the number of ways to partition a set of Bell numbers\n    return dp[n][n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 ** n) - bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition to 1\n    ways = 1\n\n    # Loop through all possible partition sizes\n    for i in range(2, n+1):\n        # Calculate the number of ways to partition a set of i Bell numbers\n        ways *= i\n\n    # Return the final result\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, k, p):\n        if n == 1:\n            return 1\n        elif k == 0:\n            return 1\n        elif k == n:\n            return p[n-1]\n        else:\n            return partition(n-1, k, p) + partition(n-1, k-1, p)\n\n    p = [1] * (n+1)\n    return partition(n, n, p)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return bell_number(n//2) * bell_number(n//2)\n    else:\n        return bell_number(n-1) * bell_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return (n*(n+1))//2"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            if A[i+1] > A[i]:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array has at least one element\n    if len(A) <= 1:\n        return True\n    \n    # check if the array is monotonic increasing or decreasing\n    if A[0] <= A[1] < A[2]:\n        return True\n    elif A[0] >= A[1] > A[2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array is empty or has only one element \n    if len(A) <= 1: \n        return True\n\n    # iterate through the array \n    for i in range(len(A)-1): \n        # check if the current element is greater than the next element \n        if A[i] > A[i+1]: \n            return False\n        # check if the current element is less than the next element \n        elif A[i] < A[i+1]:\n            return True\n    # if all elements are either less than or greater than the next element, it is a monotonic array \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n    # Check if the array is monotonic in increasing order\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            return False\n    # Check if the array is monotonic in decreasing order\n    for i in range(len(A)-1):\n        if A[i] <= A[i+1]:\n            return False\n    # If both conditions are true, then the array is monotonic\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, n-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n        return True\n\n    else:\n        for i in range(1, n-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] < A[1]\n    elif A[1] > A[0]:\n        for i in range(2, n):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(2, n):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Returns True if the given array A is monotonic (increasing or decreasing)\n    and False otherwise.\n    \"\"\"\n    if len(A) < 2:\n        return False\n    if A[0] == A[-1]:\n        return True\n    if A[0] < A[-1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n\n    if len(A) <= 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n\n    if A[len(A)-1] >= A[len(A)-2]:\n        for i in range(len(A)-2, -1, -1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not. \n    It returns True if the array is monotonic, False otherwise.\n    The array can be either increasing or decreasing.\n    '''\n    if len(A) <= 1: \n        return True\n    elif A[1] > A[0]: # If the second element is greater than the first\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]: # If the i-th element is less than the (i-1)-th element\n                return False\n        return True\n    else: # If the second element is less than the first\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]: # If the i-th element is greater than the (i-1)-th element\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two lists, l and s, as input and returns True if s is a sublist of l, otherwise returns False.\n    '''\n    # Check if the length of l is greater than or equal to the length of s\n    if len(l) >= len(s):\n        # If yes, then check if the sublist s is present in l\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        # If the sublist s is not present in l, return False\n        return False\n    else:\n        # If no, then return False\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] in l:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!=len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple1 in Input:\n        if len(tuple1)!= len(tuple(Input)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Convert the list of tuples to a list of lists of tuples\n    tuples_list = list(map(list, Input))\n    # Check if all the lists have the same length\n    length = len(tuples_list[0])\n    for i in range(1, len(tuples_list)):\n        if len(tuples_list[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Check if the list of tuples is not empty\n    if len(Input) == 0:\n        return True\n    # Check if all the tuples have the same length\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length,\n    else False.\n    \"\"\"\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n\n    # Initialize a dictionary to keep track of the lengths of each tuple\n    lengths = {}\n\n    # Iterate over the input tuples\n    for tup in Input:\n        # If the tuple is already in the dictionary, increment its length\n        if tup in lengths:\n            lengths[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a length of 1\n        else:\n            lengths[tup] = 1\n\n    # Iterate over the dictionary to check if all tuples have the same length\n    for key in lengths:\n        # If any tuple has a different length, return False\n        if lengths[key]!= len(Input):\n            return False\n\n    # If all tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        if swapped:\n            swapped = False\n            for i in range(gap):\n                if nums[i] > nums[i+gap]:\n                    nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                    swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        # calculate the gap between adjacent elements\n        gap = int(gap / 1.3)\n        # iterate through the list, comparing adjacent elements\n        for i in range(gap, n):\n            # swap the elements if they are in the wrong order\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        # shrink the gap until it becomes 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define the number of iterations\n    MAX_ITERATIONS = 100\n\n    # define the gap sequence\n    gaps = [7, 3, 1]\n\n    # initialize the sorted list\n    sorted_nums = nums[:]\n\n    # iterate the MAX_ITERATIONS times\n    for i in range(MAX_ITERATIONS):\n\n        # check if the list is already sorted\n        if sorted_nums == sorted(sorted_nums):\n            break\n\n        # iterate through the gaps\n        for j in range(len(gaps)):\n\n            # initialize the gap size\n            gap_size = gaps[j]\n\n            # initialize the start and end indexes\n            start = 0\n            end = len(sorted_nums) - 1\n\n            # iterate through the gap size\n            while start < end:\n\n                # calculate the middle index\n                middle = (start + end) // 2\n\n                # check if the middle element is greater than the pivot element\n                if sorted_nums[middle] > sorted_nums[start]:\n\n                    # if it is, swap it with the start index\n                    sorted_nums[middle], sorted_nums[start] = sorted_nums[start], sorted_nums[middle]\n\n                    # update the start index\n                    start += 1\n\n                elif sorted_nums[middle] < sorted_nums[end]:\n\n                    # if it's smaller, swap it with the end index\n                    sorted_nums[middle], sorted_nums[end] = sorted_nums[end], sorted_nums[middle]\n\n                    # update the end index\n                    end -= 1\n\n                else:\n\n                    # if it's equal, move the start index to the right\n                    start += 1\n\n        # print the sorted list\n        print(sorted_nums)\n\n    # return the sorted list\n    return sorted_nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = max(gap // 1.3, 1)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n\n    The Comb sort algorithm is a simple sorting algorithm that repeatedly\n    steps through the list, comparing adjacent elements and swapping them if\n    they are in the wrong order. The pass/fail principle is used to make the\n    algorithm very efficient, and it has a time complexity of O(n^2).\n\n    Example:\n        nums = [3, 5, 8, 1, 7, 2, 4, 6, 9]\n        comb_sort(nums)\n        print(nums)  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n        gap = gap // 10\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    for i in range(n - 1):\n        swapped = False\n        for j in range(n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                swapped = True\n        if not swapped:\n            break\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n\n    The Comb sort algorithm is an efficient in-place comparison-based sorting algorithm.\n\n    Time complexity: O(n^2)\n    '''\n    n = len(nums)\n    max_swaps = 0\n    gap = n\n    while gap > 1:\n        max_swaps = 0\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                max_swaps += 1\n        if not max_swaps:\n            break\n        gap = int(gap/1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(1, n):\n            if nums[i] < nums[i-1]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = nums[i]\n            j = i\n            while j >= gap and nums[j - gap] > temp:\n                nums[j] = nums[j - gap]\n                j -= gap\n            nums[j] = temp\n        gap //= 2\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i*i+j*j == n:\n                return True\n            elif i*i+j*j < n:\n                return False\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # initializing variables\n    count = 0 # number of pairs of squares\n    i = 1 # starting from 1\n    j = n # starting from the given number\n\n    # loop to find pairs of squares\n    while i < n:\n        j = n # starting from the given number\n        while i <= j:\n            if (i ** 2) + (j ** 2) == n:\n                count += 1\n                i += 1\n                j -= 1\n            elif (i ** 2) + (j ** 2) < n:\n                j -= 1\n            else:\n                i += 1\n\n    # checking if there are any pairs of squares\n    if count == 0:\n        print(n, \"cannot be represented as the difference of two squares\")\n    else:\n        print(n, \"can be represented as the difference of two squares\", count, \"times\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    while n >= i**2:\n        if n == i**2 + i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n * n\n    b = n // 2\n    c = b * b\n    \n    if a - c == n or a - c == n + 1 or a - c == n - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        return \"Input must be an integer.\"\n\n    # Check if the input is within the range of [-10^5, 10^5]\n    if n < -10**5 or n > 10**5:\n        return \"Input must be within the range of [-10^5, 10^5] (inclusive).\"\n\n    # Calculate the square of the input\n    square = n**2\n\n    # Check if the input is a perfect square\n    for i in range(2, int(square**0.5)+1):\n        if square % i == 0:\n            return \"Input cannot be represented as the difference of two squares.\"\n\n    # Check if the input is the sum of two squares\n    for i in range(1, n//2+1):\n        square1 = i**2\n        square2 = (n-i)**2\n        if square1 == square2:\n            return \"Input can be represented as the difference of two squares.\"\n\n    # If all the checks pass, the input can be represented as the difference of two squares\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is divisible by 4\n    if n % 4!= 0: \n        return False\n    # Calculate the square of the number\n    square = n ** 2\n    # Calculate the difference between the square and its square root\n    diff = square - int(square ** 0.5)\n    # Check if the given number is equal to the difference of the square and its square root\n    if n == diff: \n        return True\n    else: \n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # function to check if the number is divisible by 4 or not\n    def div_by_4(num):\n        if num % 4 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 9 or not\n    def div_by_9(num):\n        if num % 9 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 16 or not\n    def div_by_16(num):\n        if num % 16 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 25 or not\n    def div_by_25(num):\n        if num % 25 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 36 or not\n    def div_by_36(num):\n        if num % 36 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 49 or not\n    def div_by_49(num):\n        if num % 49 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 64 or not\n    def div_by_64(num):\n        if num % 64 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 81 or not\n    def div_by_81(num):\n        if num % 81 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 100 or not\n    def div_by_100(num):\n        if num % 100 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 121 or not\n    def div_by_121(num):\n        if num % 121 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 144 or not\n    def div_by_144(num):\n        if num % 144 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 169 or not\n    def div_by_169(num):\n        if num % 169 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 196 or not\n    def div_by_196(num):\n        if num % 196 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 225 or not\n    def div_by_225(num):\n        if num % 225 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 256 or not\n    def div_by_256(num):\n        if num % 256 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 289 or not\n    def div_by_289(num):\n        if num % 289 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 324 or not\n    def div_by_324(num):\n        if num % 324 == 0:\n            return True\n        else:\n            return False\n\n    # function to check if the number is divisible by 3"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # initialize variables\n    is_square = True\n    square_count = 0\n    square_sum = 0\n    \n    # calculate the square of the given number\n    square = n ** 0.5\n    \n    # check if the square is a perfect square or not\n    if int(square) ** 2 == square:\n        square_count += 1\n        square_sum += square\n    \n    # check for any other divisors of the square\n    for i in range(2, int(square) + 1):\n        if square % i == 0:\n            square_count += 1\n            square_sum += i\n    \n    # check if the square can be represented as the difference of two squares or not\n    if square_count == 1 and square_sum >= 0 and square_sum <= square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 1\n    for i in range(len(patterns)-1):\n        if patterns[i] == patterns[i+1]:\n            count += 1\n        else:\n            if count > 1:\n                return False\n            count = 1\n    return count > 1"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the length of colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize a counter for the number of patterns that match the colors\n    count = 0\n\n    # Loop through the patterns array and check if each pattern matches the colors\n    for pattern in patterns:\n        # Check if the length of the current pattern is equal to the length of colors\n        if len(pattern)!= len(colors):\n            return False\n\n        # Check if each character of the pattern matches a color in colors\n        for color in pattern:\n            if color not in colors:\n                return False\n\n        # If the pattern matches the colors, increment the counter\n        count += 1\n\n    # If all patterns match the colors, return True\n    return count == len(patterns)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the number of patterns is equal to the number of colors\n    if len(patterns)!= len(colors):\n        return False\n\n    # Initialize variables for tracking the current pattern and the number of patterns matched\n    current_pattern = patterns[0]\n    count = 0\n\n    # Loop through the colors and compare the current pattern to each color\n    for color in colors:\n        # If the current color matches the current pattern\n        if color == current_pattern:\n            # Increment the count of patterns matched\n            count += 1\n\n            # If the number of patterns matched is equal to the number of patterns, check for a full cycle\n            if count == len(patterns):\n                current_pattern = patterns[0]\n                count = 0\n        # If the current color does not match the current pattern, reset the count\n        else:\n            current_pattern = patterns[0]\n            count = 0\n\n    # If the number of patterns matched is equal to the number of patterns, check for a full cycle\n    if count == len(patterns):\n        current_pattern = patterns[0]\n        count = 0\n\n    # If the number of patterns matched is less than the number of patterns, the colors do not follow the sequence\n    if count < len(patterns):\n        return False\n    # If the number of patterns matched is equal to the number of patterns, the colors follow the sequence\n    else:\n        return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    # Initialize variables\n    sequence = []\n    i = 0\n    # Loop through colors and patterns\n    while i < len(colors) and i < len(patterns):\n        # If the colors and patterns match, add the color and pattern to the sequence\n        if colors[i] == patterns[i]:\n            sequence.append(colors[i])\n            i += 1\n        # If the colors do not match, skip the colors until they do match\n        else:\n            i += 1\n    # Check if the sequence follows the given patterns\n    if sequence == patterns:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Initialize variables\n    count = 0\n    n = len(colors)\n\n    # Loop through all patterns\n    for pattern in patterns:\n\n        # Initialize variables\n        pattern_count = 0\n        pattern_index = 0\n\n        # Loop through all colors\n        for color in colors:\n\n            # Check if the pattern matches the color at the current index\n            if pattern[pattern_index] == color:\n                pattern_count += 1\n\n            # Update the pattern index\n            pattern_index = (pattern_index + 1) % n\n\n            # If the pattern count matches the length of the pattern, the pattern is valid\n            if pattern_count == len(pattern):\n                count += 1\n                break\n\n        # If the pattern is invalid, break out of the loop\n        if count == len(patterns):\n            return False\n\n    # If all patterns are valid, the function returns True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Get the length of the colors array\n    n = len(colors)\n    \n    # Check if the number of colors in the patterns array is equal to the length of the colors array\n    if len(patterns)!= n:\n        return False\n    \n    # Create a dictionary to store the count of each color in the colors array\n    color_count = {}\n    \n    # Loop through the colors array\n    for color in colors:\n        # If the color is not already in the color_count dictionary, add it with a count of 1\n        if color not in color_count:\n            color_count[color] = 1\n        # Otherwise, increment the count of the color in the color_count dictionary\n        else:\n            color_count[color] += 1\n    \n    # Loop through the patterns array\n    for pattern in patterns:\n        # Split the pattern into a list of colors\n        pattern_colors = pattern.split()\n        \n        # Check if the pattern has the same number of colors as the colors array\n        if len(pattern_colors)!= n:\n            return False\n        \n        # Loop through the pattern colors\n        for pattern_color in pattern_colors:\n            # If the pattern color is not in the color_count dictionary, return False\n            if pattern_color not in color_count:\n                return False\n            \n            # Otherwise, decrement the count of the pattern color in the color_count dictionary\n            else:\n                color_count[pattern_color] -= 1\n                \n        # Check if the pattern colors are all decreasing\n        for i in range(1, len(pattern_colors)):\n            if pattern_colors[i] <= pattern_colors[i-1]:\n                return False\n    \n    # If the loop completes without returning False, it means the patterns are the same\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K == 0:\n                count += 1\n            if count == len(tup):\n                result.append(tup)\n                break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as inputs. \n    It returns a list of tuples that have all elements divisible by K from the input list of tuples.\n    '''\n\n    # Initialize an empty list to store the tuples that meet the condition\n    result = []\n\n    # Loop through each tuple in the input list\n    for t in test_list:\n\n        # Check if all elements in the tuple are divisible by K\n        if all(i % K == 0 for i in t):\n\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(t)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(test_list[i][k] % K == 0 for k in range(len(test_list[i]))):\n                result.append(test_list[i])\n                result.append(test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as inputs,\n    and returns a list of all tuples that have all elements divisible by K from the input list.\n    \"\"\"\n\n    # Creating a list of all possible tuples from the input list\n    all_tuples = [(x, y) for x in test_list[0] for y in test_list[1]]\n\n    # Creating a list to store the tuples that meet the condition\n    result = []\n\n    # Iterating over the all_tuples and checking if each tuple has all elements divisible by K\n    for tup in all_tuples:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initialize an empty set to store the unique tuples\n    unique_tuples = set()\n    \n    # iterate through the list of tuples\n    for tup in test_list:\n        # check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # if all elements are divisible by K, add the tuple to the set\n            unique_tuples.add(tup)\n    \n    # return the set of unique tuples\n    return unique_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for elem in tup:\n            if elem % K!= 0:\n                count += 1\n                if count == len(tup):\n                    break\n        else:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_tuples = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            filtered_tuples.append(tuple)\n    return filtered_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    filtered_list = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            filtered_list.append(tup)\n    return filtered_list"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s.split())\n    if length % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    \n    # iterate through each word\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2!= 0:\n            # if the length is odd, return True\n            return True\n    \n    # if no odd word was found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is even.\")\n        else:\n            print(word, \"is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into words\n    for word in words:  # iterate over the words\n        if len(word) % 2!= 0:  # check if the length of the word is odd\n            print(word, \"is odd\")  # print if odd\n        else:\n            print(word, \"is even\")  # print if even"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    word_len_list = [] # create an empty list to store word lengths\n    \n    for word in words:\n        word_len_list.append(len(word)) # append the length of each word to the list\n        \n    for word_len in word_len_list:\n        if word_len % 2!= 0: # check if the length of each word is odd or even\n            return False # return False if any word has an odd length\n            \n    return True # return True if all words have even length"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string by spaces and store in list\n    words = s.split()\n    # Check if each word has an odd length\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n    # If no odd length word is found, return True (word length is even)\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 4*n*n - 6*n + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    else:\n        return 10 * tetrahedral_number(n - 1) + 4 * tetrahedral_number(n - 2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n <= 1:\n        return n\n\n    # Define the sequence of tetrahedral numbers\n    tetrahedral = [0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 4"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function calculates the nth tetrahedral number.\n\n    Args:\n    n (int): The index of the tetrahedral number to find.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    TypeError: If n is not an integer.\n    '''\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer.')\n\n    # Initialize the first tetrahedral number\n    t = 0\n\n    # Calculate the nth tetrahedral number\n    for i in range(1, n+1):\n        t += (i*(i-1)*(i-2))//6\n\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the variables\n    c = 0\n    a = 0\n    b = 1\n    s = 0\n\n    # Loop until the nth tetrahedral number is found\n    while s < n:\n        a += 1\n        b += 1\n        c = 0\n\n        # Calculate the sum of cubes of cubes of cubes of a, b and c\n        while c ** 3 < a ** 3 + b ** 3:\n            c += 1\n\n        # Check if the sum is less than or equal to n and greater than s\n        if s <= n <= c ** 3:\n            s += c ** 3\n\n        # Check if the sum is greater than the nth tetrahedral number\n        elif s > n:\n            s -= a ** 3 + b ** 3\n\n    # Return the nth tetrahedral number\n    return s"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function calculates the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (8 * (n - 1)) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def triangular_number(n):\n        '''\n        Write a function to find the nth triangular number.\n        '''\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 3\n        else:\n            return 3 * triangular_number(n-1) - 1\n\n    return triangular_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n-1) * (n-2) * (n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 1\n    while num <= n:\n        num = num * 4\n    return num"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # formula for volume of sphere\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for i in range(len(strr)):\n        sum_ascii += ord(strr[i])\n    char_ascii = sum_ascii % 26\n    char = chr(char_ascii + ord('A'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = sum([ord(char) for char in strr]) % 26\n    return chr(ascii_val + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the variable to store the character\n    char = \"\"\n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the variable\n        char_int = ord(char)\n        char = chr((char_int + 1) % 26 + 97)\n        # Append the character to the result string\n        char_str = char_str + char\n    # Return the result string\n    return char_str"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    char_sum = 0  \n    for char in strr:  \n        char_sum += ord(char)  \n    return char_sum % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the sum of ASCII values of the characters to 0\n    sum_of_ASCII = 0\n    \n    # loop through each character of the string\n    for char in strr:\n        # add the ASCII value of the current character to the sum\n        sum_of_ASCII += ord(char)\n    \n    # return the character made by adding the ASCII value of all the characters of the string modulo 26\n    return chr((sum_of_ASCII % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the sum of ASCII values to 0\n    sum_ascii = 0\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum_ascii += ord(char)\n    \n    # Convert the sum of ASCII values modulo 26 to the corresponding letter\n    char_val = sum_ascii % 26\n    \n    # Convert the ASCII value of the character to a letter\n    char_letter = chr(char_val + 65)\n    \n    # Return the character as a string\n    return char_letter"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize an empty list to store the ASCII values of characters of the string\n    char_list = []\n\n    # Loop through each character of the string\n    for char in strr:\n        # Convert the character to its ASCII value and append it to the list\n        char_list.append(ord(char))\n\n    # Calculate the sum of the ASCII values and convert it to a character\n    char_value = sum(char_list) % 26\n\n    # Convert the ASCII value to a character and return it\n    if char_value < 10:\n        return chr(char_value + 48)\n    else:\n        return chr(char_value + 55)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    char_val = ascii_val % 26\n    return chr(char_val)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_code = (ascii_sum % 26) + ord('A')\n    return chr(char_code)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    for i in range(1, n+1):\n        sequence.append(2*sequence[i-1] + 1)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman conway sequence.\n    '''\n    # initialize the sequence with the first number\n    sequence = [1]\n    # loop through the sequence n times\n    for i in range(2, n+1):\n        # create a new list to store the next n numbers in the sequence\n        next_sequence = []\n        # loop through the current sequence\n        for j in range(len(sequence)):\n            # check if the current number is even\n            if sequence[j] % 2 == 0:\n                # add the current number and 2 to the next sequence list\n                next_sequence.append(sequence[j] + 2)\n            else:\n                # add the current number and 3 to the next sequence list\n                next_sequence.append(sequence[j] + 3)\n        # update the sequence with the new list\n        sequence = next_sequence\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n-1):\n        sequence.append(sum(sequence[-1:]))\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a = 1\n    b = 0\n    c = 0\n    \n    for i in range(n):\n        if i == 0:\n            print(a, end=\"\")\n        elif i % 2 == 0:\n            print(a, end=\"\")\n            c += 1\n            a = (a + b) % 1000\n        else:\n            print(b, end=\"\")\n            c += 1\n            b = (a + b) % 1000"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for i in range(n): \n        a, b = b, 4*a + b \n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    count = 1\n    \n    while count < n:\n        sequence.append(sequence[-1] + sequence[-2] + 2)\n        count += 1\n    \n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * (n + 1)\n    sequence[1] = 1\n    sequence[2] = 1\n\n    for i in range(3, n + 1):\n        sequence[i] = 4 * sequence[i - 1] + sequence[i - 3]\n\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence as a list\n    sequence = [0]\n\n    # loop through each element in the sequence\n    for i in range(1, n+1):\n        # check if the element is even or odd\n        if i % 2 == 0:\n            # if it is even, add 2 to it\n            sequence.append(i+2)\n        else:\n            # if it is odd, multiply it by 3 and add 1\n            sequence.append(i*3+1)\n\n    # return the nth element in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere\n    '''\n    area = (4/3) * math.pi * (r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes a radius of a sphere and calculates its surface area.\n\n    Parameters:\n    r: float\n        The radius of the sphere.\n\n    Returns:\n    surface_area: float\n        The surface area of the sphere.\n    \"\"\"\n\n    # Calculate the surface area of the sphere using the formula:\n    # surface_area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r ** 2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate surface area using the formula:\n    # s = 4 * pi * r^2\n    s = 4 * math.pi * r**2\n    return s"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    surface_area = (4 / 3) * math.pi * r * r * r\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the formula for centered hexagonal numbers\n    chex_formula = (3 * n * n - 1) // 2\n    return chex_formula"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the first centered hexagonal number\n    centered_hexagonal = 1\n    # Loop n times to get the nth centered hexagonal number\n    for i in range(1, n+1):\n        # Get the number of digits in the centered hexagonal number\n        num_digits = len(str(centered_hexagonal))\n        # Check if the number of digits is odd or even\n        if num_digits % 2 == 0:\n            # If even, add 1 to centered hexagonal\n            centered_hexagonal += 1\n        else:\n            # If odd, subtract 1 from centered hexagonal\n            centered_hexagonal -= 1\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 8\n    if n == 2:\n        return 28\n    if n == 3:\n        return 65\n    if n == 4:\n        return 137\n    if n == 5:\n        return 259\n    if n == 6:\n        return 437\n    if n == 7:\n        return 689\n    if n == 8:\n        return 1024\n    if n == 9:\n        return 1465\n    if n == 10:\n        return 2033"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    def centered_hexagonal_number_helper(n, m=0, a=0):\n        if n == 0:\n            return a\n        else:\n            return centered_hexagonal_number_helper(n - 1, m + a, -1)\n    \n    return centered_hexagonal_number_helper(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (5 * n * n * n - 6 * n * n + 2 * n) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = 0\n    a = 0\n    b = 1\n    while k < n:\n        k += 1\n        print(a, end=' ')\n        a, b = b, 2*a+1\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3*n - 1) // 2) + (n - 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hex_numbers = [0, 6, 18, 36, 60, 90, 126]\n    return hex_numbers[n - 1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n\n    # Calculate and return the nth centered hexagonal number\n    for i in range(1, n + 1):\n        print(a, end=' ')\n        a, b, c = b, c, 3*b - a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = ct.defaultdict(lambda:0)\n\n    for key in dict1.keys():\n        merged_dict[key] += dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] += dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] += dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    \n    # iterate over keys in the first dictionary\n    for key in dict1:\n        # add the value of the key to the merged dictionary\n        merged[key] = dict1[key]\n    \n    # iterate over keys in the second dictionary\n    for key in dict2:\n        # if the key is not already in the merged dictionary, add it with its value\n        if key not in merged:\n            merged[key] = dict2[key]\n    \n    # iterate over keys in the third dictionary\n    for key in dict3:\n        # if the key is not already in the merged dictionary, add it with its value\n        if key not in merged:\n            merged[key] = dict3[key]\n    \n    return merged"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys() and key in dict3.keys():\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n        elif key in dict2.keys():\n            merged_dict[key] = dict1[key] + dict2[key]\n        elif key in dict3.keys():\n            merged_dict[key] = dict1[key] + dict3[key]\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes in three dictionaries and merges them into a single dictionary.\n    The keys in the dictionaries will be the same, and the values will be lists that contain the corresponding values from the dictionaries.\n    '''\n\n    merged_dict = {}\n\n    # Loop through each key in the dictionaries\n    for key in dict1.keys():\n        # If the key is already in the merged dictionary, append the value to the list\n        if key in merged_dict:\n            merged_dict[key].append(dict1[key])\n        # If the key is not in the merged dictionary, add the key and value to the dictionary\n        else:\n            merged_dict[key] = [dict1[key]]\n\n    for key in dict2.keys():\n        if key in merged_dict:\n            merged_dict[key].append(dict2[key])\n        else:\n            merged_dict[key] = [dict2[key]]\n\n    for key in dict3.keys():\n        if key in merged_dict:\n            merged_dict[key].append(dict3[key])\n        else:\n            merged_dict[key] = [dict3[key]]\n\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency\n    freq_dict = {}\n    # Loop through the list and count the frequency of each element\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # Return the dictionary of frequency\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Use a dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter(lst)\n    # Return the frequency dictionary\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the frequency of all the elements in the list.\n    The frequency of each element is calculated using a dictionary and the collections.Counter() function.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Loop through the list and update the frequency of each element in the dictionary\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    # Return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return -1\n    \n    # Initialize variables\n    smallest_num = N\n    diff = abs(N)\n    closest_num = -1\n    \n    # Loop through all the numbers from 1 to N\n    for i in range(1, N+1):\n        # Calculate the difference between i and N\n        current_diff = abs(N-i)\n        \n        # If the current difference is less than the current smallest difference, update the smallest difference and closest number\n        if current_diff < diff:\n            diff = current_diff\n            closest_num = i\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    min_diff = float('inf')\n    closest_num = 0\n    \n    # loop through all numbers from 1 to N\n    for num in range(1, N+1):\n        # calculate the absolute difference between the current number and N\n        diff = abs(num - N)\n        \n        # update the minimum difference if the current number is closer to N\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n    \n    # return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(1, N+1))\n    closest = nums[0]\n    for num in nums[1:]:\n        if num < closest:\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        for i in range(1, 1000000):\n            if i*i > N:\n                return i-1\n            elif i*i == N:\n                return i\n            elif i*i < N:\n                return i"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = list(range(N+1))\n    min_diff = float('inf')\n    closest = float('inf')\n    for num in n_list:\n        diff = abs(num - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(N-1, 0, -1):\n        if abs(i - N) < abs(closest - N):\n            closest = i\n            \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        if n > 0:\n            n -= 1\n        elif n < 0:\n            n += 1\n        else:\n            return n\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    elif N % 2 == 0:\n        return closest_num(N//2) + 2\n    else:\n        return closest_num((N+1)//2) - 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = int(N)\n    min_n = n\n    max_n = n\n    \n    for i in range(1, n):\n        if i < min_n:\n            min_n = i\n        elif i > max_n:\n            max_n = i\n    \n    if min_n < max_n:\n        return min_n\n    else:\n        return max_n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = N + 1\n    closest = N\n    for i in range(1, int(N/2)+1):\n        num = N - i\n        if abs(num - N) < abs(closest - N):\n            closest = num\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables to store max length of words and the longest word\n    max_length = 0\n    longest_word = \"\"\n    \n    # loop through each word in the list\n    for word in list1:\n        # find the length of the current word\n        length = len(word)\n        \n        # check if the current word is longer than the current max length\n        if length > max_length:\n            # update max length and longest word\n            max_length = length\n            longest_word = word\n            \n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    # Define a list to store the lengths of each word in the list\n    word_lengths = []\n\n    # Iterate through each word in the list\n    for word in list1:\n        # Split the word into a list of characters\n        word_chars = list(word)\n        # Find the length of the longest character in the word\n        longest_char = max(word_chars, key=len)\n        # Add the length of the longest character to the list of word lengths\n        word_lengths.append(len(longest_char))\n\n    # Find the length of the longest word in the list\n    longest_word_length = max(word_lengths)\n\n    return longest_word_length"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        return \"Error: Input should be a list of strings.\"\n    if type(sub_str)!= str:\n        return \"Error: Substring should be a string.\"\n    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Parameters:\n    str1 (str): A given string to search for substring in a list of string values.\n    sub_str (str): A substring to search for in the given string.\n\n    Returns:\n    bool: True if the substring is found in the given string, else False.\n    '''\n\n    # Check if the given string contains the substring\n    if str1.find(sub_str)!= -1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if type(str1)!= list or type(sub_str)!= str:\n        raise TypeError(\"Both the input should be lists and the substring should be a string.\")\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # convert the string to a set to remove duplicates\n    str1 = set(str1)\n    # loop through the list and check if the substring is present in the string\n    for s in str1:\n        if s.startswith(sub_str):\n            return True\n    # if the substring is not found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, list) or not isinstance(sub_str, str):\n        return False\n    for item in str1:\n        if item.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Check if the substring is present in the string\n    if sub_str in str1:\n        # Print the substring is present in the string\n        print(f\"{sub_str} is present in the given string.\")\n    else:\n        # Print that the substring is not present in the string\n        print(f\"{sub_str} is not present in the given string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes in two parameters: the first string value and the second substring value to search for.\n    It then returns True if the first string value contains the substring and False otherwise.\n    '''\n    for s in str1:\n        if s.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    It returns True if the number is undulating, else False.\n    \"\"\"\n\n    # define the number of steps required to reach an undulating number\n    step_count = 0\n    current_num = n\n\n    while current_num!= 1:\n        step_count += 1\n\n        # find the next number in the sequence\n        next_num = (current_num * 3) + 1\n\n        # check if the next number is undulating\n        if next_num == current_num:\n            return False\n\n        current_num = next_num\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer input, n, and returns True if it is undulating, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n    \n    for i in range(2, n//2+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    \"\"\"\n    This function takes an integer as input and returns True if the integer is \n    undulating and False otherwise. An undulating number is a number whose \n    sum of digits is equal to the integer itself. \n    \"\"\"\n\n    # get the sum of digits of the input number\n    sum_of_digits = sum([int(digit) for digit in str(n)])\n\n    # check if the sum of digits is equal to the input number\n    if sum_of_digits == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is even or odd\n    if n % 2 == 0: \n        # If the number is even, check if it's divisible by 4\n        if n % 4 == 0: \n            # If it's divisible by 4, it's undulating\n            return True\n        else: \n            # If it's not divisible by 4, it's not undulating\n            return False\n    else: \n        # If the number is odd, check if it's divisible by 4\n        if n % 4 == 0: \n            # If it's divisible by 4, it's undulating\n            return True\n        else: \n            # If it's not divisible by 4, it's not undulating\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer n as input and returns True if n is undulating, and False otherwise.\n    An undulating number is a number that is divisible by both 2 and 7, and is also a multiple of 3.\n    For example, 9 is undulating because it is divisible by both 2 and 7, but not by 3, and 21 is not undulating.\n    '''\n\n    if n % 2 == 0 and n % 7 == 0 and n % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        # If even, check if it is a prime number\n        if is_prime(n):\n            return True\n        else:\n            return False\n    else:\n        # If odd, check if it is a perfect square\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return not is_undulating((n - 1) // 2)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    This function takes two parameters: 'a' and 'b'. It calculates the value of 'a' to the power 'b' and returns the result.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list by the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple in the list with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value\n    test_list.sort(key=itemgetter(1))\n\n    # Return the index of the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = -1\n    min_value = float('inf')\n    for index, value in enumerate(test_list):\n        if value[1] < min_value:\n            min_index = index\n            min_value = value[1]\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = None\n    for i, item in enumerate(test_list):\n        if min_index is None or item[1] < min_value:\n            min_index = i\n            min_value = item[1]\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, returns the index of the first tuple with the smallest second value.\n    \"\"\"\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = 999999\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize variables\n    min_length = float('inf')\n    smallest_list = None\n    \n    # Iterate through the list of lists\n    for sublist in lst:\n        # Check if the length of the sublist is less than the current minimum\n        if len(sublist) < min_length:\n            # If so, update the minimum and the list of smallest sublists\n            min_length = len(sublist)\n            smallest_list = sublist\n    \n    # Return the length of the smallest list\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if min_length > len(lst[i][j]):\n                min_length = len(lst[i][j])\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for i in lst:\n        if min_length is None or len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize the minimum length to infinity\n    min_length = float('inf')\n\n    # Loop through each list in the list\n    for lst in lst:\n\n        # Check if the length of the list is smaller than the current minimum length\n        if len(lst) < min_length:\n            min_length = len(lst)\n\n    # Return the minimum length\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # create a boolean list of size n+1 to store the prime numbers\n    is_prime = [True] * (n+1)\n\n    # mark the first n prime numbers\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n\n    # count the number of prime divisors\n    count = 0\n    for i in range(2, n+1):\n        if is_prime[i]:\n            count += 1\n\n    # return the count of prime divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Convert the list to a single list of elements\n    flat_list = [x for sublist in list1 for x in sublist]\n\n    # Create a dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Iterate through the flattened list and update the frequency dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    \n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        flattened_list.extend(sublist)\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flat_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if isinstance(element, list):\n            for sub_element in element:\n                if sub_element in freq_dict:\n                    freq_dict[sub_element] += 1\n                else:\n                    freq_dict[sub_element] = 1\n        else:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for element in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n\n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # loop through each element in the list\n    for item in list1:\n        # if the item is a list, recursively call the function to find its frequency\n        if isinstance(item, list):\n            sub_frequency = frequency_lists(item)\n            # merge the sub-frequency dictionary with the main dictionary\n            frequency.update(sub_frequency)\n        # if the item is not a list, check if it's already in the dictionary\n        elif item in frequency:\n            # if it's already in the dictionary, increment its frequency by 1\n            frequency[item] += 1\n        # if the item is not in the dictionary, add it to the dictionary with a frequency of 1\n        else:\n            frequency[item] = 1\n    \n    # return the final dictionary with the frequency of each element\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # initialize empty dictionary\n    freq_dict = {}\n\n    # loop through each element in the list\n    for elem in list1:\n        # check if element is a list\n        if isinstance(elem, list):\n            # recursively call function to find frequency of each element in the list\n            freq_dict.update(frequency_lists(elem))\n        # if element is a string, convert it to lowercase and add to dictionary\n        elif isinstance(elem, str):\n            freq_dict[elem.lower()] = freq_dict.get(elem.lower(), 0) + 1\n\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    total /= len(numbers)\n    return total"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Initialize an empty list to hold the binary equivalent of the decimal number\n    binary = []\n\n    # Convert the decimal number to a string\n    decimal = str(n)\n\n    # Iterate through the digits of the decimal number in reverse order\n    for i in range(len(decimal)-1, -1, -1):\n\n        # Convert each digit to its binary equivalent and append it to the list\n        binary.append(str(bin(int(decimal[i]))[2:]))\n\n    # Join the binary numbers in the list into a string and return it\n    return ''.join(binary)\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize the empty binary string\n    binary = ''\n    # Convert the decimal number to binary using recursion\n    def helper(num, length):\n        # Base case: when the number becomes zero, append a zero to the binary string\n        if num == 0:\n            binary = binary + '0'\n            return\n        # Recursive case: divide the number by 2 and convert the remainder to binary\n        if num % 2 == 0:\n            helper(num/2, length)\n        else:\n            helper((num/2)+1, length)\n        # Append a 1 or 0 to the binary string based on whether the remainder is even or odd\n        if num % 2 == 0:\n            binary = binary + '0'\n        else:\n            binary = binary + '1'\n    helper(n, 0)\n    # Return the binary string with no leading zeros\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        rem = n % 2 \n        binary = str(rem) + binary \n        n = n // 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input! Please enter a positive integer.\"\n    # initialize an empty list to store the binary equivalent\n    binary_equivalent = []\n    # loop through each digit of n\n    while n > 0:\n        # calculate the remainder of n divided by 2 and append it to the list\n        remainder = n % 2\n        binary_equivalent.append(remainder)\n        # remove the last digit of n\n        n //= 2\n    # reverse the list and convert it to a string with no leading zeros\n    return bin(int(''.join(map(str, binary_equivalent[::-1]))))[2:]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    largest_num = 10**num_len\n\n    while largest_num >= num:\n        new_num = 0\n        for i in range(num_len):\n            new_num += int(num_str[i]) * (10**(num_len-i-1))\n        if new_num < largest_num:\n            largest_num = new_num\n\n    return largest_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    prev_smallest = -sys.maxsize - 1\n    \n    while True:\n        next_num = prev_smallest * 10 + 1\n        if is_palindrome(next_num) and next_num < num:\n            prev_smallest = next_num\n        else:\n            break\n    \n    return prev_smallest + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Convert the string to a list of characters\n    num_list = list(num_str)\n\n    # Reverse the list of characters\n    num_list.reverse()\n\n    # Convert the list of characters back to a string\n    num_str = ''.join(num_list)\n\n    # Convert the string back to an integer\n    num_int = int(num_str)\n\n    # Check if the original number is odd\n    if num_int % 2!= 0:\n        num_int += 1\n\n    # Check if the number is already a palindrome\n    if str(num_int) == str(num_int)[::-1]:\n        # If the number is already a palindrome, return it\n        return num_int\n\n    # Find the smallest palindrome greater than the input number\n    for i in range(10**9, 0, -1):\n        if str(i)[::-1] > str(num_int):\n            return i\n\n    # If no palindrome greater than the input number was found, return the smallest number greater than the input number\n    return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    # Convert the number to a string and reverse it\n    num_str = str(num)\n    num_str = num_str[::-1]\n\n    # Compare the original string to its reversed string\n    return num_str == num_str[::-1]\n\n\ndef next_smallest_palindrome(num):\n    # Initialize variables\n    prev_num = 0\n    next_num = num\n\n    # Loop until the next number is a palindrome\n    while not is_palindrome(next_num):\n        # Check if the next number is smaller than the previous number\n        if next_num < prev_num:\n            # If it is, return the next number\n            return next_num\n        else:\n            # Otherwise, update the previous number and update the next number\n            prev_num = next_num\n            next_num = num + 1\n\n    # If the loop exits without finding a palindrome, return the largest number\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Remove leading zeros from the number\n    while num == 0:\n        num = input(\"Enter a positive integer: \")\n\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Initialize the variables for the next smallest palindrome\n    next_num = int(num_str[::-1])\n    next_num_str = str(next_num)\n\n    # Compare the numbers\n    if int(num_str) < int(next_num_str):\n        return next_num\n    else:\n        return next_smallest_palindrome(num+1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # find the length of the input number\n    num_len = len(str(num))\n\n    # loop through all possible digits from 0 to 9\n    for digit in range(10):\n        # if the input number has that digit, skip to the next digit\n        if str(digit) in str(num):\n            continue\n\n        # convert the input number to a string and add the digit\n        num_str = str(num) + str(digit)\n\n        # check if the resulting number is a palindrome\n        if num_str == num_str[::-1]:\n            # convert the resulting number back to an integer\n            result = int(num_str)\n\n            # check if the result is greater than the input number\n            if result > num:\n                # return the result\n                return result\n\n    # if no palindrome was found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    while True:\n        if is_palindrome(num):\n            return num\n\n        next_num = num + 1\n        if next_num > sys.maxsize or is_palindrome(next_num):\n            return None\n\n        num = next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize variables to store the current and next smallest palindromes\n    current_palindrome = 0\n    next_palindrome = 0\n\n    # Iterate until the next palindrome is greater than or equal to num\n    while True:\n        current_palindrome += 1\n        if is_palindrome(current_palindrome):\n            next_palindrome = current_palindrome\n            break\n\n    # Iterate until the next smallest palindrome is greater than or equal to num\n    while True:\n        next_palindrome += 1\n        if is_palindrome(next_palindrome):\n            break\n\n    # Check if the next smallest palindrome is greater than the specified integer\n    if next_palindrome >= num:\n        return next_palindrome\n    else:\n        return None\n\ndef is_palindrome(num):\n    '''\n    Check if a given number is a palindrome.\n    '''\n    # Convert the number to a string and reverse it\n    string_num = str(num)\n    reversed_string_num = string_num[::-1]\n\n    # Compare the original string with its reversed counterpart\n    if string_num == reversed_string_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the input number is even\n    if num % 2 == 0:\n        # increment the number by 1 and check if it is odd\n        return next_smallest_palindrome(num + 1)\n    # if the number is odd, multiply it by 2 and check if it is palindrome\n    else:\n        num *= 2\n        while num >= 10:\n            num /= 10\n        if num % 10 == num // 10:\n            num += 1\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given number is a palindrome.\n    '''\n    # Convert the integer to a string and reverse it\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n\n    # Compare the original and reversed numbers\n    if num_str == reversed_num_str:\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the given number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n\n    # Iterate until a palindrome is found\n    while True:\n        # Find the next smallest palindrome\n        new_num = num + 1\n        while not is_palindrome(new_num):\n            new_num += 1\n\n        # Check if the new number is smaller than the given number\n        if new_num < num:\n            return new_num\n\n        # If the new number is greater than the given number, reset the iteration counter\n        num = new_num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is within range of array size\n    if k < 1 or k > len(arr):\n        return None\n    # Initialize variables for the current and previous elements\n    current = arr[0]\n    prev = None\n    # Iterate through the array and find the kth element\n    for i in range(1, len(arr)):\n        if i == k-1:\n            return current\n        elif arr[i] > current:\n            current = arr[i]\n        else:\n            if prev is not None:\n                prev = prev\n            else:\n                return None\n    # If kth element is not found, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid Input\"\n    elif k == 1:\n        return arr[0]\n    else:\n        i = 0\n        j = n - 1\n        while i < j:\n            m = (i + j) // 2\n            if arr[m] < arr[k-1]:\n                i = m + 1\n            else:\n                j = m\n        return arr[i-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n\n    # Check if k is valid\n    if k < 1 or k > len(arr):\n        raise ValueError('Invalid k value')\n\n    # Find the sum of all elements in the array\n    total_sum = sum(arr)\n\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 1\n    right = len(arr)\n\n    # Loop while the pointers are within the bounds of the array\n    while left <= right:\n\n        # Calculate the midpoint of the array\n        mid = (left + right) // 2\n\n        # If the sum of the elements at the left and right pointers is less than or equal to k,\n        # then the midpoint is the kth element\n        if (left + mid) * (mid + right) <= k * total_sum:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # Return the kth element\n    return arr[right]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    n = len(arr)\n    if k > n:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k <= 0:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) == 1:\n        return arr[0]\n    # Find the middle element of the array\n    middle = len(arr) // 2\n    # Recursively call the function for the left and right subarrays\n    if k < middle + 1:\n        return kth_element(arr[:middle], k)\n    else:\n        return kth_element(arr[middle+1:], k - middle - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    if k == 1:\n        return arr[0]\n    if k == n:\n        return arr[n-1]\n    left = 1\n    right = n-1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid-1] < arr[mid]:\n            right = mid - 1\n        elif arr[mid] < arr[mid+1]:\n            left = mid + 1\n        else:\n            return arr[mid]\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n\n    left, right = 1, n\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid == k:\n            return arr[k-1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word\n    camel_case_words = [word.capitalize() for word in words]\n    \n    # Join the camel case words into a single string\n    camel_case_string = ''.join(camel_case_words)\n    \n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            if i!= 0:\n                camel_word += \"_\"\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char == \"_\":\n            camel_case += char\n        else:\n            camel_case += char.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # split the word into a list of words\n    words = word.split('_')\n    # capitalize the first letter of each word and join the words\n    camel_case_word = ''.join([w.capitalize() for w in words])\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_str = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case_str += word[i].lower()\n        else:\n            camel_case_str += word[i].upper()\n    return camel_case_str"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0 or char.isupper():\n            camel_case += char.lower()\n        else:\n            camel_case += '_' + char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_word += word[i]\n        elif word[i].islower() and i > 0 and not word[i-1].isupper():\n            camel_word += word[i].upper()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Splitting the word into a list of words\n    word_list = word.split('_')\n\n    # Converting the first word to capital letter\n    first_word = word_list[0]\n    first_word = first_word.capitalize()\n\n    # Converting the rest of the words to camel case\n    rest_of_words = ''.join(word.capitalize() for word in word_list[1:])\n\n    # Returning the final camel case string\n    return first_word + rest_of_words"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize variables for the Eulerian number and the number of connected components in the graph\n    a = 0\n    components = 0\n    \n    # Create a dictionary to store the adjacency list of the graph\n    graph = {}\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i!= j:\n                if (i, j) not in graph:\n                    graph[(i, j)] = []\n                graph[(i, j)].append((j, i))\n                \n    # BFS to find the Eulerian number\n    visited = set()\n    queue = [(1, 1)]\n    while queue:\n        x, y = queue.pop(0)\n        visited.add((x, y))\n        for neighbor in graph.get((x, y), []):\n            if neighbor not in visited:\n                queue.append(neighbor)\n                \n    # Count the number of connected components in the graph\n    for x, y in visited:\n        components += 1\n        for neighbor in graph.get((x, y), []):\n            if neighbor not in visited:\n                components -= 1\n                break\n    \n    # Calculate the Eulerian number\n    a = n * m - components\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a += 1/(i+j)**2\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if m == 0:\n        return n\n    else:\n        return eulerian_num(n + 1, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import itertools\n\ndef eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Generate all possible permutations of the vertices\n    perms = list(itertools.permutations(range(n)))\n    \n    # Initialize the Eulerian number to 0\n    eulerian = 0\n    \n    # Iterate through all possible permutations\n    for perm in perms:\n        \n        # Calculate the number of cycles in this permutation\n        cycles = sum(1 for i in range(n-1) for j in range(i+1, n))\n        \n        # Add the number of cycles to the Eulerian number\n        eulerian += cycles\n        \n        # If we reach the maximum number of cycles, we are done\n        if eulerian == m:\n            return eulerian\n    \n    # If we reach here, there is no Eulerian path for the given graph\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        n, m = m, n\n    \n    if n == 0:\n        return 0\n    else:\n        return 1 + eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    # a(n, m) = 2 * n * (n-1) + 2 * m * (m-1) - n * m\n    return 2 * n * (n-1) + 2 * m * (m-1) - n * m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    for k in range(n, m):\n        if k % n == 0:\n            return k\n    return None"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a += (m * i) ** 2\n    a = a / n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    elif m == 0:\n        return 1\n    else:\n        a = eulerian_num(n-1, m)\n        b = eulerian_num(n, m-1)\n        return (a + b) % 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i**2 + j**2 == n**2:\n                return i*j\n    return \"There is no Eulerian number for the given input.\""
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup += tuple(test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n\n    # converting list to tuple\n    test_tup = tuple(test_list)\n\n    # appending list to tuple\n    test_tup = test_tup + test_list\n\n    # printing the modified tuple\n    print(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append list to tuple\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_list + test_tup\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        num1 (list): A list of integers.\n        num2 (list): A list of integers.\n        num3 (list): A list of integers.\n\n    Returns:\n        list: A list of integers that is the sorted merge of the three input lists.\n    \"\"\"\n    # Initialize an empty list to store the sorted merge\n    merged_list = []\n    \n    # Merge the three lists using heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    # Iterate through the three lists and add their elements to the merged list\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    # Add any remaining elements from the non-empty lists to the merged list\n    while len(num1) > 0:\n        merged_list.append(heapq.heappop(num1))\n    while len(num2) > 0:\n        merged_list.append(heapq.heappop(num2))\n    while len(num3) > 0:\n        merged_list.append(heapq.heappop(num3))\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n\n    Args:\n        num1 (list): A sorted list of integers.\n        num2 (list): A sorted list of integers.\n        num3 (list): A sorted list of integers.\n\n    Returns:\n        list: The merged sorted list.\n    \"\"\"\n\n    # Combine all three lists into a single list\n    combined_list = num1 + num2 + num3\n\n    # Use a min heap to maintain the sorted order of the combined list\n    heap = []\n    for num in combined_list:\n        heapq.heappush(heap, num)\n\n    # Extract the sorted elements from the heap and return as a list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function merges three sorted lists into a single sorted list.\n    \"\"\"\n    # Create an empty list to store the merged sorted list\n    merged_list = []\n\n    # Add the elements of the first list to the merged list\n    heapq.heappush(merged_list, num1[0])\n    for i in range(1, len(num1)):\n        heapq.heappush(merged_list, num1[i])\n\n    # Add the elements of the second list to the merged list\n    heapq.heappush(merged_list, num2[0])\n    for i in range(1, len(num2)):\n        heapq.heappush(merged_list, num2[i])\n\n    # Add the elements of the third list to the merged list\n    heapq.heappush(merged_list, num3[0])\n    for i in range(1, len(num3)):\n        heapq.heappush(merged_list, num3[i])\n\n    # Convert the merged list back to a regular list and return it\n    return list(heapq.merge(*merged_list))"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # First, we concatenate the three lists into one list.\n    combined_list = num1 + num2 + num3\n\n    # Then, we use heapq to sort the combined list.\n    sorted_list = heapq.merge(num1, num2, num3)\n\n    # Finally, we return the sorted list.\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # create a list of lists to hold the sorted elements of the input lists\n    list_of_lists = [num1, num2, num3]\n\n    # use heapify to create a min heap from the list of lists\n    heapq.heapify(list_of_lists)\n\n    # create an empty result list\n    result = []\n\n    # use heappop to extract the elements of the list of lists from the heap and append to the result list\n    while list_of_lists:\n        result.append(heapq.heappop(list_of_lists)[-1])\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a max heap from the merged list\n    max_heap = []\n    for num in merged_list:\n        heapq.heappush(max_heap, num)\n    \n    # Extract the sorted list from the max heap\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(heapq.heappop(max_heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list.\n    '''\n    # Initialize an empty list to store the merged list\n    merged_list = []\n    # Initialize two pointers for each list\n    i = j = k = 0\n    \n    # Loop through each list until one of them becomes empty\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        # If the elements at the first pointers of both lists are less than the element at the third pointer,\n        # add the smaller element to the merged list and move both pointers forward\n        if num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n            j += 1\n        # If the element at the second pointer of both lists is less than the element at the third pointer,\n        # add the smaller element to the merged list and move both pointers forward\n        elif num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        # If the element at the third pointer is less than the element at the second pointer,\n        # add the element to the merged list and move only the third pointer forward\n        else:\n            merged_list.append(num3[k])\n            k += 1\n            \n    # Add any remaining elements of the first or second list to the merged list\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n        \n    # Add any remaining elements of the third list to the merged list\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n            \n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list.\n    '''\n    # Merge the two sorted lists\n    merged_list = sorted(num1+num2)\n    \n    # Merge the merged list with the third sorted list\n    merged_list = heapq.merge(merged_list,num3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the lists\n    combined_list = num1 + num2 + num3\n    \n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n    s (str): The binary string to be rotated.\n    n (int): The number of times to rotate the binary string.\n\n    Returns:\n    int: The number of odd equivalent numbers in the binary string after rotating it n times.\n    \"\"\"\n    # Convert the string to a list of integers\n    s_list = [int(i) for i in s]\n\n    # Calculate the length of the binary string\n    length = len(s_list)\n\n    # Calculate the odd equivalent numbers\n    odd_equivalent = 0\n    for i in range(n):\n        # Reverse the binary string\n        s_list = s_list[::-1]\n\n        # Count the odd numbers in the reversed string\n        for j in s_list:\n            if j % 2!= 0:\n                odd_equivalent += 1\n\n    # Return the number of odd equivalent numbers\n    return odd_equivalent"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    This function takes in a binary string \"s\" and a positive integer \"n\" as input and returns the number of odd numbers in the string after rotating it n number of times.\n    '''\n    # Initialize a variable to store the number of odd numbers in the string\n    count = 0\n\n    # Initialize a variable to store the current position of the string\n    pos = 0\n\n    # Loop n times\n    for i in range(n):\n        # Check if the current position is odd\n        if int(s[pos]) % 2 == 1:\n            count += 1\n\n        # Move the position of the string to the next position\n        pos = (pos + 1) % len(s)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize the count to zero\n    count = 0\n    # Loop through each character in the string\n    for char in s:\n        # Convert the character to an integer\n        int_char = int(char)\n        # Check if the integer is odd\n        if int_char % 2!= 0:\n            # Increment the count\n            count += 1\n    # Multiply the count by the given number of times\n    count *= n\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Initialize variables to store count of odd numbers and count of even numbers\n    count_odd = 0\n    count_even = 0\n\n    # Convert binary string to list of binary digits\n    binary_list = list(s)\n\n    # Iterate through the list of binary digits n times and count the odd and even numbers\n    for i in range(n):\n\n        # Reverse the list of binary digits\n        binary_list = binary_list[::-1]\n\n        # Count the number of odd digits in the reversed list\n        count_odd += sum([1 for digit in binary_list if digit == '1'])\n\n        # Count the number of even digits in the reversed list\n        count_even += sum([1 for digit in binary_list if digit == '0'])\n\n    # Return the count of odd numbers\n    return count_odd"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Check if the input string is a binary string\n    if not s.replace(' ', '').replace('0', '').replace('1', '').isalnum():\n        print(\"Invalid input\")\n        return\n\n    # Initialize variables to keep track of the current value and the number of times it appears\n    current_value = 0\n    count = 0\n\n    # Loop through the binary string n times\n    for i in range(n):\n        # Convert the binary string to a list of integers\n        s_list = [int(i) for i in s]\n\n        # Loop through the list of integers\n        for j in range(len(s_list)):\n            # Check if the current value is odd\n            if current_value % 2!= 0:\n                count += 1\n\n            # Update the current value\n            if s_list[j] == 1:\n                current_value = 1\n            else:\n                current_value = 0\n\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables to store the count and rotated string\n    count = 0\n    rotated = ''\n\n    # Convert the given binary string to a binary list\n    binary_list = [int(char) for char in s]\n\n    # Rotate the binary list the given number of times\n    for i in range(n):\n        rotated_list = [0] * len(binary_list)\n        for j in range(len(binary_list)):\n            rotated_list[j] = binary_list[(j + len(binary_list) - i) % len(binary_list)]\n        rotated = ''.join(map(str, rotated_list))\n\n    # Count the number of odd numbers in the rotated list\n    for num in rotated:\n        if int(num) % 2!= 0:\n            count += 1\n\n    # Return the count of odd numbers in the rotated list\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Convert the input string into a list of binary digits\n    lst = [int(i) for i in s]\n    # Initialize the carry variable to 0\n    carry = 0\n    # Iterate n times and rotate the binary string by one position at a time\n    for i in range(n):\n        # Calculate the XOR of the current bit and the carry\n        temp = lst[0] ^ carry\n        # Calculate the new carry\n        carry = lst[0] & carry\n        # Assign the new bit to the first position of the list\n        lst[0] = temp\n    # Iterate through the list and count the number of odd values\n    for i in range(1, len(lst)):\n        if lst[i] % 2!= 0:\n            count += 1\n    # Add the carry to the count if there is one\n    if carry!= 0:\n        count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize the count of odd numbers to zero\n    count = 0\n    # initialize a variable to keep track of the current position in the binary string\n    current = 0\n    # initialize a variable to keep track of the rotation count\n    rotation = 1\n    # loop through the rotation count\n    while rotation <= n:\n        # iterate through the binary string from left to right\n        for bit in s:\n            # if the current bit is odd, increment the count and move to the next position in the string\n            if bit == '1':\n                count += 1\n                current = (current + 1) % len(s)\n        # if the count is odd, add one to the count\n        if count % 2!= 0:\n            count += 1\n        # rotate the binary string to the right\n        s = s[1:] + s[0]\n        # increment the rotation count\n        rotation += 1\n    # return the final count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Create a binary string with n rotations of the given binary string\n    rotated_s = (s * (2 ** n)) % 2\n    \n    # Initialize the count of odd numbers\n    count = 0\n    \n    # Iterate through the binary string\n    for i in range(len(rotated_s)):\n        # If the current digit is odd, increment the count\n        if rotated_s[i] == '1':\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes two arguments, s which is the binary string to be rotated and n which is the number of times it needs to be rotated.\n    It then calculates the number of odd numbers in the rotated string and returns the result.\n    '''\n    # Check if the binary string is of even length\n    if len(s) % 2!= 0:\n        s = \"0\" + s\n\n    # Initialize count variable\n    count = 0\n\n    # Iterate over the given number of times\n    for i in range(n):\n        # Initialize variables for counting odd numbers and shift count by 1\n        odd_count = 0\n        temp_count = 0\n\n        # Iterate over each character of the binary string and check if it's odd\n        for j in range(len(s)):\n            temp_count = s[j] + temp_count\n\n            # If the character is odd, count it and shift the shift count by 1\n            if temp_count % 2!= 0:\n                odd_count += 1\n                temp_count = 0\n\n        # Add the count of odd numbers to the total count\n        count += odd_count\n\n    # Return the total count of odd numbers\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append((nestedlist[i], nestedlist[j]))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Iterate through each nested list\n    for sublist in nestedlist:\n        # Check if sublist contains any elements that are not in the first sublist\n        for item in sublist:\n            if item not in nestedlist[0]:\n                return False\n    # If no common elements are found, return True\n    return True"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty list to store the common elements\n    common_elements = []\n    # loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # loop through each element in the sublist\n        for element in sublist:\n            # check if the element is not already in the common elements list\n            if element not in common_elements:\n                # add the element to the common elements list\n                common_elements.append(element)\n    # return the common elements list\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set()\n    set2 = set()\n    for i in nestedlist:\n        set1.update(i)\n    for j in nestedlist:\n        set2.update(j)\n    return set1.intersection(set2)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                continue\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Get the first list and remove duplicates\n    list1 = list(set(nestedlist[0]))\n    # Loop through the rest of the nested lists\n    for list2 in nestedlist[1:]:\n        # Get the first list and remove duplicates\n        list2 = list(set(list2))\n        # Loop through the first list\n        for element in list1:\n            # If the element is in both lists, add it to the result list\n            if element in list2:\n                result.append(element)\n                # Remove it from the second list (to avoid duplicates)\n                list2.remove(element)\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Convert the nested lists into sets so that we can find common elements\n    set1 = set(sum(nestedlist, []))\n    set2 = set(sum(nestedlist, []))\n\n    # Find common elements in both sets\n    common = set1.intersection(set2)\n\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lst in nestedlist:\n        for x in lst:\n            if x not in common and x not in lst:\n                common.append(x)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common.update(set(nestedlist[i]).intersection(set(nestedlist[j])))\n    return list(common)\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        if num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        if num.isdigit():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n    It returns True if the string represents an integer, and False otherwise.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dit in list1:\n        if dit:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Check if all dictionaries in the list are empty\n    for dic in list1:\n        if not dic:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    all_empty = True\n    for i in list1:\n        if not i:\n            all_empty = False\n            break\n    return all_empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    This function takes a list of dictionaries as input and returns True if all dictionaries in the list are empty, else False.\n    '''\n\n    for d in list1:\n        if not d:\n            return True\n    \n    return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple to a list\n    nums_list = list(nums)\n    # convert the list to a string\n    string_num = ''.join(map(str, nums_list))\n    # convert the string to an integer\n    int_num = int(string_num)\n    # return the integer\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n        nums (tuple): A tuple of positive integers.\n\n    Returns:\n        int: A single integer that represents the sum of all the elements in the input tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n        ValueError: If the input tuple is empty.\n    \"\"\"\n    if not isinstance(nums, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    if len(nums) == 0:\n        raise ValueError(\"Input tuple must not be empty\")\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the sum to 0\n    sum_list = []\n    # Iterate over the list and add the elements to the sum\n    for num in nums_list:\n        sum_list.append(num)\n    # Return the sum as an integer\n    return int(''.join(map(str, sum_list)))"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n                item = float(item)\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float)):\n                continue\n            elif isinstance(element, str):\n                try:\n                    float_element = float(element)\n                    sublist[sublist.index(element)] = float_element\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n\n    :param test_list: A list of lists.\n    :type test_list: list of lists\n    :return: The list of lists with all possible convertible elements converted to floats.\n    :rtype: list of lists\n    \"\"\"\n    for i, row in enumerate(test_list):\n        for j, element in enumerate(row):\n            try:\n                test_list[i][j] = float(element)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                if isinstance(element, str):\n                    element = float(element.strip())\n                elif isinstance(element, int):\n                    element = float(element)\n                elif isinstance(element, float):\n                    pass\n                else:\n                    print(f\"Element {element} is not convertible to float.\")\n                    continue\n                test_list[sublist.index(element)][test_list[sublist.index(element)].index(element)] = element\n                print(f\"Element {element} converted to float.\")\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        converted_row = []\n        for element in row:\n            try:\n                converted_element = float(element)\n                converted_row.append(converted_element)\n            except ValueError:\n                pass\n        result.append(converted_row)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist.remove(element)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, str)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # split the string on the space character and convert each substring to a string\n    return [str(item) for item in string.split()]"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to keep track of the frequency of each element\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the array again and check if each element appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for element in arr:\n        # Check if the element is already in the dictionary\n        if element in freq:\n            # If it is, increment the frequency of the element by 1\n            freq[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[element] = 1\n    \n    # Find the element that appears only once in the array\n    for key, value in freq.items():\n        if value == 1:\n            return key\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Traverse through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Traverse through the dictionary and return the first key with frequency of 1\n    for key in freq:\n        if freq[key] == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 1\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            count += 1\n        else:\n            count = 1\n    return arr[n-count]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Traverse through the array and update the count of each element in the dictionary\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # Traverse through the dictionary and find the element that appears only once\n    for key in count_dict:\n        if count_dict[key] == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the frequency of each element in the array\n    freq = [0] * (arr[-1] + 1)\n    for i in arr:\n        freq[i] += 1\n\n    # Iterate over the array and check if the frequency of each element is 1\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Traverse through the array and update the frequency of each element in the dictionary\n    for i in range(len(arr)):\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        else:\n            freq[arr[i]] += 1\n\n    # Traverse through the dictionary and return the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i][0] * list1[j][1])\n            if pair_product > max_product:\n                max_product = pair_product\n                max_pair = (list1[i], list1[j])\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for tup in list1:\n        current_product *= abs(tup[0]) * abs(tup[1])\n        max_product = max(max_product, current_product)\n        current_product = 1\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = float('-inf')\n    max_pair = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_pair = [list1[i][0], list1[j][1]]\n\n    return max_pair, max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = abs(list1[i] * list1[j])\n            if prod > max_product:\n                max_product = prod\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = -float('inf')\n    current_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i]*list1[j])\n            if current_product > max_abs_product:\n                max_abs_product = current_product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize maximum product as negative infinity\n    max_product = float('-inf')\n\n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Calculate the absolute product of the numbers in the tuple\n            product = abs(list1[i] * list1[j])\n            # Update the maximum product if the current product is greater than the current maximum product\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list as input and returns the maximum absolute product of numbers in pairs of tuples within the list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i][0]) * abs(lst[j][0]) > max_product:\n                max_product = abs(lst[i][0]) * abs(lst[j][0])\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i!= 1 and i!= 2:\n            if is_amicable(i):\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0 and i!= num//i:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    def is_amicable(num):\n        \"\"\"\n        Determines if a number is amicable to a given number.\n        \"\"\"\n        for i in range(2, num):\n            if num % i == 0 and num / i!= i:\n                return False\n        return True\n\n    def sum_amicable_pairs(limit):\n        \"\"\"\n        Finds the sum of all amicable numbers and their pairs.\n        \"\"\"\n        sum_amicable = 0\n        for num in range(1, limit + 1):\n            if is_amicable(num) and is_amicable(num + 2):\n                sum_amicable += num + 2\n        return sum_amicable\n\n    return sum_amicable_pairs(limit)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable_pair(num):\n    \"\"\"\n    Check if a number is an amicable pair.\n\n    Parameters:\n    num (int): the number to check\n\n    Returns:\n    bool: True if the number is an amicable pair, False otherwise\n    \"\"\"\n    a, b = 0, 1\n    limit = int(num ** 0.5)\n    while b <= limit:\n        if num % b == 0:\n            a, b = b, num // b\n            if a == b:\n                return True\n        b += 1\n    return False\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n\n    Parameters:\n    limit (int): the upper limit of the range to check\n\n    Returns:\n    int: the sum of all amicable numbers\n    \"\"\"\n    sum_amicable = 0\n    for num in range(1, limit + 1):\n        if is_amicable_pair(num):\n            sum_amicable += num\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_prime(i) and is_prime(limit-i):\n            amicable_sum += i + limit-i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    a = []\n    for i in range(1, limit+1):\n        if sum(int(j) for j in str(i)) == i:\n            a.append(i)\n    return sum(a)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Function to check if two numbers are amicable\n    def is_amicable(num1, num2):\n        if num1 == num2:\n            return False\n        elif num1 < num2:\n            for i in range(num1 + 1, num2):\n                if num2 % i == 0 and num1 % i == 0:\n                    return True\n            return False\n        else:\n            for i in range(num2 + 1, num1):\n                if num1 % i == 0 and num2 % i == 0:\n                    return True\n            return False\n\n    # Initialize sum of amicable numbers to 0\n    amicable_sum = 0\n\n    # Iterate through numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # Check if number is amicable and add to sum if it is\n        if i == 1 or i == 2:\n            amicable_sum += i\n        elif is_amicable(i, 1):\n            amicable_sum += i\n        elif is_amicable(i, 2):\n            amicable_sum += i\n        elif is_amicable(i, 3):\n            amicable_sum += i\n        elif is_amicable(i, 4):\n            amicable_sum += i\n        elif is_amicable(i, 5):\n            amicable_sum += i\n\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num!= 1 and is_amicable(num):\n            amicable_sum += num\n    return amicable_sum\n\n\ndef is_amicable(num):\n    \"\"\"\n    Helper function to check if a number is amicable to 1.\n    \"\"\"\n    return is_prime(num) and num!= 1\n\n\ndef is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize a dictionary to store all pairs of numbers and their sum\n    amicable_dict = {}\n    \n    # loop through all numbers from 1 to the specified limit\n    for num in range(1, limit + 1):\n        \n        # calculate the sum of the squares of all the divisors of the number\n        # except for the number itself\n        sum_of_squares = sum([x**2 for x in range(1, num) if num % x == 0])\n        \n        # check if the sum of the squares is equal to the original number\n        if sum_of_squares == num:\n            \n            # if it is, add the number and its sum to the dictionary\n            amicable_dict[num] = sum_of_squares\n            \n    # return the sum of all numbers in the dictionary\n    return sum(amicable_dict.values())"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize a list to store amicable numbers\n    amicable_numbers = []\n    \n    # check if the number is not divisible by any number other than 1 and itself\n    for number in range(2, limit):\n        # if the number is divisible by 2, it cannot be an amicable number\n        if number % 2 == 0:\n            continue\n        \n        # check if the number is divisible by any number between 3 and the square root of the number\n        for divisor in range(3, int(number**0.5) + 1):\n            if number % divisor == 0:\n                break\n        else:\n            # if the number is not divisible by any number between 3 and the square root of the number, it is an amicable number\n            amicable_numbers.append(number)\n    \n    # return the sum of all amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit as an input and returns the sum of all amicable numbers from 1 to that limit.\n    \"\"\"\n\n    # initialize two variables to keep track of the sum and the current number\n    total_sum = 0\n    current_num = 1\n\n    # loop through all numbers up to the limit and check if they are amicable\n    while current_num <= limit:\n        if current_num in amicable_numbers:\n            total_sum += current_num\n        current_num += 1\n\n    return total_sum\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = cmath.angle(angle)\n    angle = cmath.phase(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev = string.find('0')\n    for i in range(len(string)-1):\n        if string[i] == '0' and string[i+1] == '1':\n            diff = i - prev\n            max_diff = max(diff, max_diff)\n            prev = i + 1\n        elif string[i] == '1' and string[i+1] == '0':\n            diff = prev - i\n            max_diff = max(diff, max_diff)\n            prev = i + 1\n    diff = len(string) - prev\n    max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count = [0] * 2\n    max_diff = 0\n    \n    # Count the number of 0s and 1s in the given string\n    for char in string:\n        if char == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n    \n    # Initialize the maximum difference to 0\n    max_diff = 0\n    \n    # Find the maximum difference between the number of 0s and 1s in any sub-string\n    for i in range(n):\n        # If the current character is 0 and the next character is 1, increment the count of 0s\n        if string[i] == '0' and string[i+1] == '1':\n            count[0] += 1\n        # If the current character is 1 and the next character is 0, decrement the count of 1s\n        elif string[i] == '1' and string[i+1] == '0':\n            count[1] -= 1\n            \n        # Update the maximum difference if the count of 0s and 1s changes\n        if count[0] > count[1]:\n            max_diff = max(max_diff, i - count[1])\n        elif count[1] > count[0]:\n            max_diff = max(max_diff, i - count[0])\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n    max_diff = 0\n    for i in range(1, n):\n        for j in range(i):\n            if string[i] == '0' and string[j] == '1':\n                dp[i][j] = dp[i-1][j] + 1\n                max_diff = max(max_diff, dp[i][j])\n            elif string[i] == '1' and string[j] == '0':\n                dp[i][j] = dp[i-1][j] + 1\n                max_diff = max(max_diff, dp[i][j])\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n            else:\n                break\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    count_zeros = 0\n    count_ones = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            count_zeros += 1\n        elif char == '1':\n            count_ones += 1\n\n        if count_zeros > count_ones:\n            max_diff = max(max_diff, count_zeros - count_ones)\n            count_zeros = 0\n            count_ones = 0\n        elif count_ones > count_zeros:\n            max_diff = max(max_diff, count_ones - count_zeros)\n            count_zeros = 0\n            count_ones = 0\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [0] * n\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i - 1):\n            if string[i] == string[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        count0 = string[:i].count('0')\n        count1 = string[:i].count('1')\n        if count1 > count0:\n            max_diff = max(max_diff, count1 - count0)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        diff = i - count + 1\n        max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables\n    max_diff = 0\n    max_count = 0\n\n    # Loop through each sub-string of the binary string\n    for i in range(len(string)):\n        # Initialize variables for the current sub-string\n        current_count = 0\n        current_diff = 0\n\n        # Loop through each character in the sub-string\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                current_count += 1\n            else:\n                current_count -= 1\n\n            # Calculate the difference between the current count and the maximum count seen so far\n            current_diff = max(current_diff, abs(current_count))\n\n        # Update the maximum difference if necessary\n        max_diff = max(max_diff, current_diff)\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n            \n        diff = abs(count_zero - count_one)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    # function to find common divisors of two numbers\n    def common_divisors(n1, n2):\n        # find all the factors of n1 and n2\n        factors_n1 = set(range(1, n1 + 1))\n        factors_n2 = set(range(1, n2 + 1))\n        # find the intersection of the two sets\n        factors = factors_n1.intersection(factors_n2)\n        # find the common divisors\n        return sorted(set(factors) - {1})\n\n    # find the sum of common divisors of a and b\n    return sum(common_divisors(a, b))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= a and divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    \n    sum_divisors = 0\n    for i in divisors:\n        sum_divisors += i\n    \n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Function to check if a number is divisible by b\n    def is_divisible(num):\n        return num % b == 0\n\n    # Helper function to check if a number is divisible by all numbers from 1 to b-1\n    def is_divisible_by_all(num):\n        for i in range(1, b):\n            if num % i!= 0:\n                return False\n        return True\n\n    # Find all common divisors of a and b\n    common_divisors = []\n    for i in range(1, b+1):\n        if is_divisible(i) and is_divisible_by_all(a//i):\n            common_divisors.append(i)\n\n    # Find the sum of common divisors\n    total_sum = 0\n    for num in common_divisors:\n        total_sum += num\n\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return i"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initialize a set to store the divisors of a and b\n    divisors = set()\n    \n    # loop through the range of numbers from 1 to the smaller of the two numbers\n    for i in range(1, min(a, b) + 1):\n        # if the number is a divisor of both a and b, add it to the set of divisors\n        if i % a == 0 and i % b == 0:\n            divisors.add(i)\n    \n    # return the sum of the divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Create a list of all numbers from 1 to the maximum number\n    numbers = list(range(1, max(a, b) + 1))\n\n    # Initialize a boolean list to mark whether each number is prime or not\n    is_prime = [True] * (max(a, b) + 1)\n\n    # Mark all the multiples of 2 as non-prime\n    for i in range(3, int(max(a, b)**0.5) + 1, 2):\n        if is_prime[i]:\n            for j in range(i*i, max(a, b) + 1, i):\n                is_prime[j] = False\n\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in numbers:\n        if is_prime[i]:\n            if i % a == 0 and i % b == 0:\n                common_divisors.append(i)\n\n    # Calculate the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Finding the set of common divisors of two numbers using the Euclidean algorithm\n    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    # Finding the set of divisors of a given number using the Sieve of Eratosthenes algorithm\n    def sieve(n):\n        primes = [True] * (n+1)\n        primes[0] = primes[1] = False\n        p = 2\n        while p * p <= n:\n            if primes[p]:\n                for i in range(p*p, n+1, p):\n                    primes[i] = False\n            p += 1\n        return [i for i in range(n+1) if primes[i]]\n\n    # Finding the set of divisors of the sum of two numbers\n    def sum_divisors(n, m):\n        divisors = []\n        for d in sieve(max(n, m)):\n            if d <= n and d <= m:\n                divisors.append(d)\n        return divisors\n\n    # Finding the sum of common divisors of two given numbers\n    def common_divisors(n, m):\n        divisors1 = sum_divisors(n, n)\n        divisors2 = sum_divisors(m, m)\n        divisors = set(divisors1) & set(divisors2)\n        return sum(divisors)\n\n    # Testing the function\n    print(common_divisors(12, 24))  # Output: 4"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers a and b as input and returns their sum of common divisors.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        This function finds the greatest common divisor of two given numbers using Euclidean algorithm.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def common_divisors(a, b):\n        \"\"\"\n        This function finds the common divisors of two given numbers.\n        \"\"\"\n        common = []\n        for i in range(min(a, b) + 1, max(a, b)):\n            if gcd(a, i) == 1 and gcd(b, i) == 1:\n                common.append(i)\n        return common\n\n    def sum_of_common_divisors(a, b):\n        \"\"\"\n        This function finds the sum of common divisors of two given numbers.\n        \"\"\"\n        return sum(common_divisors(a, b))\n\n    return sum_of_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Calculate the sum of the common divisors of two given numbers using a simple algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of the common divisors of a and b.\n\n    \"\"\"\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Check if a and b are positive integers\n    if a <= 0 or b <= 0:\n        return \"Error: Both numbers must be positive integers.\"\n\n    # Initialize variables to store the sum of common divisors of a and b\n    common_divisor_sum = 0\n    divisor_sum = 0\n\n    # Find the sum of common divisors of a and b\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisor_sum += i\n            divisor_sum += i\n\n    # Calculate the sum of common divisors of a and b using the formula\n    # sum(k, l) = (k^2 + l^2) / 4, where k and l are common divisors\n    sum_of_common_divisors = ((common_divisor_sum**2 + divisor_sum**2) / 4)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"The result is:\", result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n\nprint(multiply_int(5, 10)) # Output: 50"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        x = x << 1\n        y = carry << 1\n    result = x if x > 0 else -x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Returns a list of words from the input list that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n            \n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has a size of 3 x 3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Initialize the sum of each row and column\n    row_sum = [0] * 3\n    col_sum = [0] * 3\n    \n    # Check the row sums and column sums for each element of the matrix\n    for row in my_matrix:\n        for elem in row:\n            row_sum[row.index(elem)] += elem\n            col_sum[my_matrix.index(row)].append(elem)\n            \n            # Check if the sum of a row or column equals the size of the matrix\n            if row_sum[row.index(elem)] == 15 or col_sum[my_matrix.index(row)].count(elem) > 1:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    total = rows * cols\n    # check if the matrix has the correct number of rows and columns\n    if rows!= cols or rows!= 3 or cols!= 3:\n        return False\n    # check if the matrix contains non-numeric values\n    for row in my_matrix:\n        for value in row:\n            if not isinstance(value, int):\n                return False\n    # check if the matrix is symmetric\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    # check if the matrix has the sum of its rows equal to the total\n    for row in my_matrix:\n        row_sum = sum(row)\n        if row_sum!= total:\n            return False\n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    # check if the matrix is rectangular\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # check if all rows and columns have the same length\n    row_lengths = [len(row) for row in my_matrix]\n    if len(set(row_lengths))!= 1:\n        return False\n    \n    # check if the matrix is a magic square\n    for row in my_matrix:\n        for i in range(len(row)):\n            # check if the current number is equal to its diagonals\n            if row[i] == row[i] + sum(row[:i]) + sum(row[i+1:]) or row[i] == row[i] - sum(row[:i]) - sum(row[i+1:]) or row[i] == row[i] - sum(row[:i+1]) - sum(row[i+1:]) + sum(row[i:]) + sum(row[:i+1]) + sum(row[i+1:]):\n                continue\n            else:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is 3x3\n    if len(my_matrix)!= 3:\n        return False\n    \n    # check if each row, column, and diagonal contains the same elements\n    for row in my_matrix:\n        if len(row)!= 3:\n            return False\n        for i in range(3):\n            if row[i]!= my_matrix[i][i] or row[i]!= my_matrix[i][2-i] or row[i]!= my_matrix[1-i][i]:\n                return False\n    \n    # check if the matrix has no repeated elements\n    for row in my_matrix:\n        for i in range(len(row)):\n            for j in range(i+1, len(row)):\n                if row[i] == row[j]:\n                    return False\n                if row[j] == row[i]:\n                    return False\n    \n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    # create a set of all possible numbers in the matrix\n    numbers = set(sum(my_matrix, []))\n    # check if there are duplicate numbers in the matrix\n    if len(numbers)!= len(my_matrix) ** 2:\n        return False\n    # check if each row and column sums to the same value\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(len(my_matrix))])\n        if row_sum!= col_sum:\n            return False\n    # check if there is a sub-square that sums to the same value as the main square\n    sub_square_sum = my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] + my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] + my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2]\n    if sub_square_sum!= my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] or sub_square_sum!= my_matrix[0][0] + my_matrix[1][2] + my_matrix[2][1] or sub_square_sum!= my_matrix[0][1] + my_matrix[1][0] + my_matrix[2][2] or sub_square_sum!= my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0] or sub_square_sum!= my_matrix[1][0] + my_matrix[2][1] + my_matrix[2][2] or sub_square_sum!= my_matrix[1][1] + my_matrix[2][0] + my_matrix[2][2] or sub_square_sum!= my_matrix[2][0] + my_matrix[1][1] + my_matrix[2][1]:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the dimension of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if all rows have the same number of columns\n    for row in my_matrix:\n        if len(row)!= cols:\n            return False\n\n    # Check if all columns have the same number of rows\n    for col in range(cols):\n        col_sum = 0\n        for row in my_matrix:\n            if row[col]!= 0:\n                col_sum += row[col]\n        if col_sum!= cols:\n            return False\n\n    # Check if the sum of all elements in the matrix is equal to the product of the rows and columns\n    matrix_sum = 0\n    for row in my_matrix:\n        for elem in row:\n            matrix_sum += elem\n    if matrix_sum!= rows * cols:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has the correct dimensions\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonals\n    diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        diagonal_sum += my_matrix[i][i]\n    \n    # Check if the sum of the diagonals is equal to the sum of the elements in the matrix\n    if diagonal_sum == sum([sum(row) for row in my_matrix]):\n        return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix has the right number of rows and columns\n    if rows!= cols or rows!= 3 or cols!= 3:\n        return False\n\n    # Check if each row, column and the main diagonal add up to the same value\n    for i in range(rows):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(rows))\n        if my_matrix[i]!= my_matrix[i][::-1] or my_matrix[i]!= my_matrix[::-1][i] or row_sum!= col_sum:\n            return False\n\n    # Check if each row, column and the minor diagonal add up to the same value\n    for i in range(rows):\n        for j in range(rows):\n            if i!= j:\n                row_sum = sum(my_matrix[i][k] for k in range(j+1, cols))\n                col_sum = sum(my_matrix[j][k] for k in range(i+1, rows))\n                if my_matrix[i][j]!= my_matrix[j][i] or row_sum!= col_sum:\n                    return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is a square matrix\n    if n**2!= sum(sum(row) for row in my_matrix):\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            # Check if the element at [i][j] is equal to the sum of the elements in its row and column\n            if my_matrix[i][j]!= (i+j) % n:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all elements are distinct\n    if len(set(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix[0]))))!= 1:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= i + j + 1:\n                return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n        \n    max_freq = max(freq_dict.values())\n    max_item = None\n    \n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each number\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency and return it\n    max_freq = max(freq_dict.values())\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num\n\n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq_count in freq.items():\n        if freq_count > max_freq:\n            max_item = item\n            max_freq = freq_count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # Count the frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with maximum frequency\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_item = num\n            max_freq = freq[num]\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [num for num, count in freq.items() if count == max_freq]\n    return max_items[0]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(char)\n    result.reverse()\n    return \"\".join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    \n    while i < j:\n        while str1[i] not in vowels:\n            i += 1\n        while str1[j] not in vowels:\n            j -= 1\n        \n        str1[i], str1[j] = str1[j], str1[i]\n        i += 1\n        j -= 1\n    \n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_index = []\n\n    # Find all the vowels in the string and store their index in a list\n    for i, char in enumerate(str1):\n        if char.lower() in vowels:\n            vowel_index.append(i)\n\n    # Reverse the vowels and join the string\n    str2 = ''.join([str1[i] for i in reversed(vowel_index)])\n\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for char in str1:\n        if char not in vowels:\n            str2 += char\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in string:\n        if char.lower() not in vowels:\n            new_string = char + new_string\n    return new_string[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = \"\"\n\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_str += char\n\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_list = []\n    for item in tup1:\n        string_list.append(str(item))\n    return ','.join(string_list)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join([str(x) for x in tup1])"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 1\n    count = 0\n    while count < n:\n        hexagonal += 6\n        count += 1\n    return hexagonal - 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (n + 1) * 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n * (3 * n - 1)) // 2) + n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((n*(3*n-1))//2) + n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the first hexagon\n    hexagon = [1]\n    # Initialize the next three hexagons\n    next_hexagon = [2, 3, 4]\n    \n    # Loop through the remaining hexagons\n    for i in range(3, n + 1):\n        # Get the current hexagon's ith side length\n        side_length = hexagon[i - 1]\n        \n        # Append the next side length to the current hexagon\n        hexagon.append(side_length + next_hexagon[i - 4])\n        \n        # Calculate the next side length for the next iteration\n        next_side_length = (side_length + next_hexagon[i - 4]) // 2\n        \n        # Append the next side length to the next hexagon\n        next_hexagon.append(next_side_length)\n    \n    # Return the nth hexagon\n    return hexagon[n - 1]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 1 + 6*n - 6*(n-1)**2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Count the number of zeros and ones\n    zeros = 0\n    ones = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            ones += 1\n    \n    # Calculate the ratio of zeros to non-zeroes\n    non_zero_count = len(nums)\n    ratio = zeros / non_zero_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(0)] += 1\n    non_zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num!= 0:\n            non_zero_count[non_zero_count.index(0)] += 1\n    return sum(zero_count) / sum(non_zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    ratio = non_zeros / zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    if zeroes == 0:\n        return 0\n    else:\n        return non_zeroes / zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    non_zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[non_zero_count.index(num)] += 1\n        else:\n            non_zero_count[non_zero_count.index(num)] += 1\n    ratio = non_zero_count[0] / (non_zero_count[0] + zero_count[0])\n    print(f\"The ratio of zeroes to non-zeroes is {ratio:.2f}\")"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i')\n    non_zero_count = array('i')\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            non_zero_count.append(1)\n    zero_count_sum = sum(zero_count)\n    non_zero_count_sum = sum(non_zero_count)\n    if zero_count_sum == 0:\n        return 0\n    else:\n        return non_zero_count_sum / zero_count_sum"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zeros = 0\n    non_zeros = 0\n    for num in arr:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    if zeros == 0:\n        return 0\n    else:\n        return non_zeros/zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            zero_count.append(0)\n    non_zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num!= 0:\n            non_zero_count.append(1)\n        else:\n            non_zero_count.append(0)\n    zero_ratio = zero_count[0]/non_zero_count[0]\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = 0\n    zeroes = 0\n    for num in nums:\n        if num!= 0:\n            non_zeroes += 1\n        else:\n            zeroes += 1\n    return non_zeroes / zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list of integers\n    nums = list(nums)\n    # Initialize the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    # Iterate through the list of integers\n    for num in nums:\n        # If the integer is zero, increment the count of zeroes\n        if num == 0:\n            zero_count += 1\n        # Otherwise, increment the count of non-zeroes\n        else:\n            non_zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n    # Return the ratio as a float\n    return float(ratio)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is even or odd\n    if n%2 == 0:\n        # Initialize sum variable to 0\n        sum = 0\n        # Iterate from 1 to n/2\n        for i in range(1, n//2+1):\n            # Check if i^2 is a power of 2\n            if (1<<i) == 1<<i:\n                # If yes, add i to the sum\n                sum += i\n        # Check if the sum is equal to n\n        if sum == n:\n            return True\n        else:\n            return False\n    else:\n        # If the number is odd, return False\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def is_power_of_two(num):\n        \"\"\"\n        A helper function to check if the given number is a power of 2 or not.\n        \"\"\"\n        if num <= 0:\n            return False\n        if num == 1:\n            return True\n        if num % 2 == 0:\n            return is_power_of_two(num // 2)\n        return False\n\n    def is_sum_of_powers_of_two(num):\n        \"\"\"\n        A helper function to check if the given number can be represented as sum of non-zero powers of 2 or not.\n        \"\"\"\n        if is_power_of_two(num):\n            return True\n        if num == 0:\n            return False\n\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                if is_power_of_two(i) and is_power_of_two(num // i):\n                    return True\n\n        return False\n\n    return is_sum_of_powers_of_two(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #initialize a variable to store the result\n    result = True\n    #loop through all the bits of the number\n    for i in range(32): \n        #if the i-th bit is 0, continue to the next bit\n        if (n & (1<<i)) == 0: \n            continue \n        #if the i-th bit is 1, check whether it can be expressed as sum of non-zero powers of 2 or not\n        else: \n            #loop through all the powers of 2 from 1 to the i-th bit\n            for j in range(1, (1<<i)+1): \n                #if the j-th power of 2 is equal to the i-th bit, continue to the next power of 2\n                if j == (1<<i): \n                    continue \n                #if the j-th power of 2 is not equal to the i-th bit, check whether the number is equal to j^i or not\n                else: \n                    if n == j**i: \n                        #if the number is equal to j^i, check whether the j-th power of 2 is equal to the i-th bit or not\n                        if j == (1<<i): \n                            continue \n                        else: \n                            #if the j-th power of 2 is not equal to the i-th bit, set the result to False and break the loop\n                            result = False\n                            break \n                    #if the number is not equal to j^i, break the loop\n                    else: \n                        break \n    #return the result\n    return result"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is less than 0 or greater than 2^31 - 1\n    if n < 0 or n > 2**31 - 1:\n        return False\n    \n    # find the sum of powers of 2\n    power_sum = 0\n    while n > 0:\n        power_sum += n & 1\n        n >>= 1\n    \n    # check if the sum of powers of 2 is greater than or equal to n\n    return power_sum >= n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    \n    # check if n can be represented as sum of powers of 2\n    count = 0\n    while n > 0:\n        n //= 2\n        count += 1\n        \n    if n == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # function to check if a number can be represented as sum of non-zero powers of 2 or not\n    def is_sum_of_powers_of_two(num): \n        # convert the number to binary string\n        bin_str = bin(num)[2:]\n\n        # check if there is only one bit in the binary string\n        if bin_str.count('1') == 1: \n            # check if the binary string has only zeros in it\n            if bin_str == '0': \n                return True\n            else: \n                return False\n        else: \n            return False\n\n    # check if the given number can be represented as sum of non-zero powers of 2 or not\n    if is_sum_of_powers_of_two(n): \n        print(n, 'can be represented as sum of non-zero powers of 2')\n    else: \n        print(n, 'cannot be represented as sum of non-zero powers of 2')"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 1:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    \n    return count == 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Initialize the sum of powers of 2 to 0\n    power_sum = 0\n    \n    # Iterate through the bits of the given number\n    while n > 0:\n        # Check if the current bit is 1\n        if n % 2 == 1:\n            # If the bit is 1, add it to the power sum\n            power_sum += 1\n            \n        # Shift the number to the right by 1 bit\n        n //= 2\n        \n    # Check if the power sum is equal to n\n    if power_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Loop through all the powers of 2 and check if the sum of them is equal to n\n    for i in range(1, 32):\n        if (2**i) <= n:\n            if n % (2**i) == 0:\n                # If n is divisible by 2^i, then we have found a power of 2 that is equal to n/2^i, so n must be a sum of powers of 2\n                return True\n        else:\n            break\n\n    # If we reach this point, n cannot be represented as sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # To check whether the number can be represented as sum of non-zero powers of 2 or not\n    # We need to check the number of 0s in binary representation of the number\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n            n //= 2\n        else:\n            n -= 1\n    if count > 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # using formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for item in test_list:\n        for subitem in item:\n            result.add(subitem)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for item in test_list:\n        for nested_item in item:\n            flattened_list.append(nested_item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # initialize an empty set to store the flattened numbers\n    flattened_set = set()\n    \n    # loop through each sublist in the test_list\n    for sublist in test_list:\n        # loop through each number in the sublist\n        for number in sublist:\n            # add the number to the flattened_set\n            flattened_set.add(number)\n    \n    # convert the flattened_set to a list and return it\n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([num for sublist in test_list for num in sublist])"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list += extract_singly(item)\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the remaining unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the maximum element with the first element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # reverse the unsorted part of the list\n        for j in range(i+1, n):\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Create a copy of the list so that we don't modify the original one\n    nums = list(nums)\n\n    # Sort the list using the insertion sort algorithm\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a list to keep track of swaps made during each iteration\n    swaps = []\n    # loop through each element in the list\n    for i in range(len(nums)-1, 0, -1):\n        # find the index of the largest element in the unsorted portion of the list\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # if the largest element is not at the beginning of the unsorted portion, swap them\n        if max_index!= i:\n            swaps.append((i, max_index))\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n        # start again with the unsorted portion from the next element up\n        i -= 1\n    # return the sorted list and the list of swaps made during each iteration\n    return nums, swaps"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # get the length of the list\n    n = len(nums)\n    \n    # loop through the list\n    for i in range(n):\n        # find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        \n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the maximum element with the last element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    \n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sorting algorithm.\n\n    Input:\n        nums: A list of elements to be sorted.\n\n    Output:\n        The sorted list.\n\n    '''\n\n    def helper(nums, i):\n        '''\n        Helper function to recursively sort the list.\n        '''\n        # Base case: if i is the last element, return the current index\n        if i == len(nums) - 1:\n            return i\n\n        # Get the largest index j such that nums[j] < nums[i]\n        j = i\n        for k in range(i + 1, len(nums)):\n            if nums[k] > nums[j]:\n                j = k\n\n        # Swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n\n        # Recursively sort the left half of the list\n        helper(nums, i)\n\n        # Recursively sort the right half of the list\n        helper(nums, j + 1)\n\n        # Return the index of the element we just sorted\n        return j\n\n    # Sort the list using the pancake sorting algorithm\n    helper(nums, 0)\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def pancake_sort_helper(nums, start, end):\n        if start >= end:\n            return\n\n        max_index = start\n\n        for i in range(start, end + 1):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        swap(nums, start, max_index)\n        pancake_sort_helper(nums, start + 1, end)\n        pancake_sort_helper(nums, end, start)\n\n    pancake_sort_helper(nums, 0, len(nums) - 1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # Starting from the last element, move towards the first element\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the current pancake\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the current element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the first i elements\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element\n        nums[max_idx], nums[0] = nums[0], nums[max_idx]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    def sort_list(nums):\n        def heapify(nums, heap_size, root):\n            largest = root\n            left = 2 * root + 1\n            right = 2 * root + 2\n\n            if left < heap_size and nums[left] > nums[largest]:\n                largest = left\n\n            if right < heap_size and nums[right] > nums[largest]:\n                largest = right\n\n            if largest!= root:\n                nums[root], nums[largest] = nums[largest], nums[root]\n                heapify(nums, heap_size, largest)\n\n        def build_max_heap(nums):\n            for i in range(len(nums) // 2 - 1, -1, -1):\n                heapify(nums, len(nums), i)\n\n        build_max_heap(nums)\n\n        for i in range(len(nums) - 1, 0, -1):\n            nums[i], nums[0] = nums[0], nums[i]\n            heapify(nums, i, 0)\n\n    sort_list(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result.extend(left[i:])\n        result.extend(right[j:])\n\n        return result\n\n    sorted_nums = merge_sort(nums)\n    return sorted_nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): List 1.\n        list2 (list): List 2.\n        list3 (list): List 3.\n\n    Returns:\n        int: Number of identical items in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    common_items = []\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            common_items.append(list1[i])\n    return len(common_items)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if type(item) == list: \n            count += 1 \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n    return count "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the maximum absolute difference between any two elements.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Find the maximum absolute value of the array\n    max_val = max(abs(i) for i in arr)\n    # Find the minimum absolute value of the array\n    min_val = min(abs(i) for i in arr)\n    # Calculate the maximum difference between any two elements in the array\n    max_diff = max_val - min_val\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0 \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr)-1):\n        if abs(arr[i]-arr[i+1]) > max_diff:\n            max_diff = abs(arr[i]-arr[i+1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf') # initialize the maximum difference to negative infinity\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i]-arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n\n    Args:\n    arr (list): a list of integers.\n\n    Returns:\n    int: the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    # calculate the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n\n    # calculate the maximum absolute difference between any two elements\n    max_diff = 0\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n\n    # return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple (x, y) such that ax + by = n, or None if no such solution exists.\n    \"\"\"\n\n    # Check if a, b are invertible (i.e. if they have a non-zero determinant)\n    if a == 0 or b == 0:\n        return None\n\n    # Check if a is a factor of n (i.e. if n is divisible by a)\n    if a * a % n!= 0:\n        return None\n\n    # Check if b is a factor of n (i.e. if n is divisible by b)\n    if b * b % n!= 0:\n        return None\n\n    # Compute the discriminant\n    d = b * b - 4 * a * n\n\n    # If d is negative (i.e. if there is no real solution), return None\n    if d < 0:\n        return None\n\n    # Compute the two solutions (x1, x2) and (y1, y2)\n    x1 = (-b + d ** 0.5) / (2 * a)\n    x2 = (-b - d ** 0.5) / (2 * a)\n    y1 = x1 / b\n    y2 = x2 / b\n\n    # Return the solutions as a tuple\n    return (x1, y1, x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Initialize variables to store the solution\n    x = None\n    y = None\n    \n    # Calculate the determinant\n    det = a*b - n*a*b\n    \n    # If the determinant is 0, there is no solution\n    if det == 0:\n        return None\n    \n    # Calculate the two solutions\n    x1 = (-b + (b**2 - 4*n*a)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*n*a)**0.5) / (2*a)\n    \n    # If the first solution is negative, swap it with the second solution\n    if x1 < 0:\n        x1, x2 = x2, x1\n        y1 = (-b + x1*a) / b\n        y2 = (-b + x2*a) / b\n    else:\n        y1 = (-b + x1*a) / b\n        y2 = (-b + x2*a) / b\n    \n    # Return the solution as a tuple\n    return (x1, y1, x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find x and y that satisfy ax + by = n\n    x = n // b\n    y = n % b\n    # check if there exists a solution\n    if x * b + y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n\n    # find the two solutions using a standard form of quadratic equation\n    discriminant = b**2 - 4*a*n\n    \n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        x2 = x1\n    else:\n        return None\n    \n    # check if the solutions satisfy the constraints\n    if a*x1**2 + b*x1 + n >= 0:\n        if a*x2**2 + b*x2 + n >= 0:\n            return (int(x1), int(x2))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if (a*i*i + b*i + n) % i == 0:\n            x = i\n            y = (n - i*i) // i\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = -b/a\n    x2 = (n + b/a*a)/a\n    if x1.is_integer() and x2.is_integer():\n        return (int(x1), int(x2))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n\n    x1 = (-b // a)\n    x2 = (-n // a)\n\n    if x1 == x2:\n        return (x1, x1)\n\n    if x1!= x2:\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for i in range(1, n+1):\n        x = i\n        y = n - x\n        if a * x + b * y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n//a):\n        if a*x + b*n//a == n:\n            return (x, n//a)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the equation has a solution\n    d = b ** 2 - 4 * a * n\n    \n    if d < 0:\n        return None\n    \n    # find the two solutions\n    x1 = (-b + d ** 0.5) / (2 * a)\n    x2 = (-b - d ** 0.5) / (2 * a)\n    \n    return (int(x1), int(x2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # loop through each element in list1\n    for i in range(len(list1)):\n        # check if the element is present in list2\n        if list1[i] in list2:\n            # if it is, remove it from list1\n            list1.pop(i)\n            i -= 1  # decrement i to avoid index error\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the result\n    result = []\n    # loop through the elements of the first list\n    for element in list1:\n        # check if the element is not present in the second list\n        if element not in list2:\n            # add the element to the result list\n            result.append(element)\n    # return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += (n - 2 * i)\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize sum to 0\n    sum_series = 0\n    # loop through each value from i=0 to n//2\n    for i in range(n//2+1):\n        # calculate the sum of the series up to n-i\n        sum_series += (n-2*i)\n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        result = 0\n    else:\n        result = n // 2\n    for i in range(1, n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize a variable sum to 0\n    sum = 0\n    # loop through the range of values from 0 to n // 2\n    for i in range(n // 2):\n        # add (n-2*i) to sum\n        sum += n - 2*i\n    # return the sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through all possible values of x\n    for x in range(1, n // 2 + 1):\n        # Calculate the sum of (n - 2*i) for each value of x\n        sum += n - 2 * x\n    \n    # Return the final sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total_sum = 0\n    for i in range(n//2):\n        total_sum += (n - 2*i)\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n-2*i)\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of each triangle by using the Heron's formula\n    area = 0\n    for i in range(l):\n        # base of the triangle\n        h = s * (1 / tan(2 * pi / l))\n        area += h\n        # calculate the hypotenuse\n        # (s^2 * (1/tan(2*pi/l))^2)\n        # (s^2 * (1/tan(pi/l))^2) = s^2 * (1/tan(pi/2))^2\n        # (s^2 * (1/tan(pi/2))^2) = s^2 * (1/2)^2\n        # (s^2 * (1/2)^2) = s^2\n        # s^2 = h^2 * tan(pi/2)\n        # s^2 = h^2 * 2\n        # s^2 = 2h^2 * tan(pi/2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(i*2*pi/l)\n    return area * s/2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (4 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Convert length and number of sides to radians and sides to the polygon\n    sides = [s]\n    for i in range(l - 1):\n        sides.append(s * tan(2 * pi / l))\n\n    # Calculate the area of the polygon using Heron's formula\n    area = 0.5 * s * (sides[0] + sides[-1])\n    for i in range(l):\n        area += sides[i] * sides[i + 1]\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the side length of the polygon\n    side_length = s / l\n    \n    # Calculate the area of the polygon using Heron's formula\n    area = (1/2) * s * side_length * math.tan(math.pi / l)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n\n    for i in range(l):\n        area += (s / 2) * math.sin(math.pi / 2 - (i * 2 * math.pi) / l)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l * (1/2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the area of the polygon\n    area = (s**2) * pi / (4 * l)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the area of a regular polygon using Heron's formula\n    h = (s * l) / (4 * tan(pi/l))\n    return h"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Get the list of divisors of n\n    divs = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    \n    # Get the sum of the divisors\n    sum_divs = sum(divs)\n    \n    # Check if the sum of the divisors is equal to n\n    if sum_divs == n:\n        print(\"Yes, the sum of the divisors is equal to n.\")\n    else:\n        print(\"No, the sum of the divisors is not equal to n.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Determine if the number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Calculate the sum of the divisors\n    def sum_of_divisors(num):\n        div_sum = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n\n    # Check if the sum of the divisors of n and n-1 are the same\n    if sum_of_divisors(n) == sum_of_divisors(n - 1):\n        print(f\"{n} and {n - 1} have the same sum of divisors\")\n    else:\n        print(f\"{n} and {n - 1} do not have the same sum of divisors\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # check if the input is an integer \n    if not isinstance(n, int): \n        raise TypeError(\"Input must be an integer\")\n\n    # calculate the sum of the divisors \n    divisor_sum = sum(set(math.factorize(n)))\n\n    # check if the sum of divisors is the same as n \n    if divisor_sum == n: \n        print(f\"The sum of the divisors of {n} is the same as {n}.\")\n    else: \n        print(f\"The sum of the divisors of {n} is not the same as {n}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = math.ceil(math.sqrt(n))\n    div2 = math.floor(math.sqrt(n))\n\n    if div1 * div1!= n:\n        div1 -= 1\n\n    if div2 * div2!= n:\n        div2 += 1\n\n    if div1 * div2!= n:\n        return False\n\n    sum1 = 0\n    for i in range(1, div1+1):\n        if n % i == 0:\n            sum1 += i\n\n    sum2 = 0\n    for i in range(div2, 1, -1):\n        if n % i == 0:\n            sum2 += i\n\n    return sum1 == sum2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Calculate the sum of the divisors of n using a loop\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n // i!= i:\n                div_sum += n // i\n                \n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum(range(1, int(math.sqrt(n))+1))\n    # check if the sum of the divisors of n and n are equal\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = []\n    div2 = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1.append(i)\n            if n // i!= i:\n                div1.append(n // i)\n    div1.sort()\n    return div1\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1 \n    while i * i <= n: \n        if n % i == 0: \n            sum_of_divisors = 0 \n            for j in range(i, int(math.sqrt(n))+1): \n                if n % j == 0: \n                    sum_of_divisors += j \n            if sum_of_divisors == n: \n                return True \n        i += 1 \n    return False \n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(divisor for divisor in range(1, int(math.sqrt(n))+1) if n % divisor == 0)\n    # Calculate the sum of the divisors of n-1\n    div_sum_minus_1 = sum(divisor for divisor in range(1, int(math.sqrt(n-1))+1) if n-1 % divisor == 0)\n    # Check if the sums are equal\n    if div_sum == div_sum_minus_1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Initialize a dictionary to store the count of each character in the English alphabet\n    alphabet_count = {chr(i): 0 for i in range(97, 123)}\n\n    # Convert the input string to lowercase to make it case insensitive\n    str1 = str1.lower()\n\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is in the English alphabet, increment its count in the dictionary\n        if char in alphabet_count:\n            alphabet_count[char] += 1\n\n    # Return the dictionary containing the count of each character in the English alphabet\n    return alphabet_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # Convert string to lowercase\n    str1 = str1.lower()\n    # Initialize empty dictionary\n    char_count = {}\n    # Iterate through the string\n    for i in range(26):\n        # If the current character is a letter, add it to the dictionary with value 1\n        if chr(65+i) in str1:\n            char_count[chr(65+i)] = 1\n    # Return the dictionary\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # create a dictionary to store the count of characters at each position in the English alphabet (case insensitive)\n    position_counts = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n\n    # loop through each character in the string\n    for char in str1:\n        \n        # check if the character is in the dictionary (case insensitive)\n        if char.lower() in position_counts:\n            \n            # increment the count of the character at the current position in the dictionary\n            position_counts[char.lower()] += 1\n    \n    # return the dictionary containing the count of characters at each position in the English alphabet (case insensitive)\n    return position_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize the count dictionary\n    count_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a letter and not a space\n        if char.isalpha() and char!='':\n            # If the character is a letter, add it to the count dictionary\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in alphabet:\n        if char.lower() == str1[count].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert all characters to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Create a dictionary to store the character and its position\n    char_pos_dict = {}\n\n    # Loop through each character in the string\n    for i, char in enumerate(str1):\n        # If the character is not already in the dictionary, add it with its position\n        if char not in char_pos_dict:\n            char_pos_dict[char] = i\n        # If the character is already in the dictionary, update its position\n        else:\n            char_pos_dict[char] = i\n\n    # Count the number of characters in the string that occur at the same position in the English alphabet\n    count = 0\n    for char, pos in char_pos_dict.items():\n        if char.isalpha():\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(ord('a'), ord('z')+1):\n        if str1.count(chr(i)) > 0:\n            count += str1.count(chr(i))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the character positions and their counts\n    char_positions = {}\n    # Iterate through the string and count the positions of each character\n    for i, char in enumerate(str1):\n        if char in char_positions:\n            char_positions[char] += 1\n        else:\n            char_positions[char] = 1\n    # Return the count of characters that occur at the same position in the string as in the English alphabet\n    return sum(char_positions.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(i+97))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabets = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char in alphabets:\n            if alphabets.index(char) == alphabets.index(char.lower()):\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] & A[j]) == 0 and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0 \n    for i in range(len(A)): \n        for j in range(i+1,len(A)): \n            if A[i] ^ A[j] == 0: \n                even_pair_count += 1\n    return even_pair_count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i]!= A[j]:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 that is greater than or equal to the input integer.\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The smallest power of 2 that is greater than or equal to the input integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    n = n - 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n\n    if n < 0:\n        n = 0\n\n    return n + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer `n` and returns the smallest power of 2 greater than or equal to `n`.\n    '''\n    \n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # Find the least significant bit set in n\n    bit = n & -(n & 1)\n    \n    # Double the power of 2 represented by the least significant bit\n    power = 1 << bit\n    \n    # Check if the result is greater than or equal to n\n    if power >= n:\n        return power\n    \n    # Double the power of 2 and repeat until we find the smallest power of 2 greater than or equal to n\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # find the smallest power of 2 greater than or equal to n \n    p = 1\n    while p < n:\n        p <<= 1\n\n    return p"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length() + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 as 2^0\n    power_of_2 = 1\n    \n    # Loop until power_of_2 is greater than or equal to n\n    while power_of_2 < n:\n        # Increment the power of 2 by 2\n        power_of_2 *= 2\n        \n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize power to 1\n    power = 1\n    \n    # While power is less than or equal to n\n    while power <= n:\n        power <<= 1\n    \n    # Return power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    n |= (n >> 1)\n    n |= (n >> 2)\n    n |= (n >> 4)\n    n |= (n >> 8)\n    n |= (n >> 16)\n    n += 1\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    This function finds the smallest power of 2 greater than or equal to the input number n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n\n    # calculate the binary representation of n\n    binary = bin(n)[2:]\n\n    # get the position of the least significant 1 bit\n    least_significant_bit_position = binary.find('1')\n\n    # calculate the power of 2 to the power of the least significant 1 bit\n    power_of_2 = 1\n    for i in range(least_significant_bit_position):\n        power_of_2 *= 2\n\n    # return the power of 2\n    return power_of_2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x): \n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a: \n        if num == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a: \n        if num == x: \n            count += 1\n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, x):\n    '''\n    This function takes a list and a number as input and returns the count of the number in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if the input list is valid\n    if not isinstance(list1, list) or len(list1) == 0:\n        print(\"Invalid input list.\")\n        return None\n    \n    # Check if the input indices are valid\n    if not isinstance(m, int) or not isinstance(n, int) or m >= len(list1) or n >= len(list1):\n        print(\"Invalid input indices.\")\n        return None\n    \n    # Calculate the sum of the numbers in the range\n    sum_range = sum(list1[m:n+1])\n    \n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m > len(list1) - 1:\n        raise ValueError(\"Invalid index for first element of the range.\")\n    if n < 0 or n > len(list1) - 1:\n        raise ValueError(\"Invalid index for second element of the range.\")\n    if n < m:\n        raise ValueError(\"The second index should be greater than or equal to the first index.\")\n    sum_range = sum(list1[m:n+1])\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Finding the length of the list\n    length = len(list1)\n\n    # Initializing the sum variable to 0\n    sum = 0\n\n    # Looping through the list and adding the numbers in the range to the sum variable\n    for i in range(m, n+1):\n        if i < length:\n            sum += list1[i]\n\n    # Returning the sum of numbers in the range\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        list1 (list): the list of numbers\n        m (int): the starting index\n        n (int): the ending index\n\n    Returns:\n        int: the sum of the numbers in the specified range\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list and two indices m and n and returns the sum of numbers within the given range.\n    \"\"\"\n    # initialize the sum to 0\n    total_sum = 0\n    # loop through the list starting from index m and ending at index n (not including n)\n    for i in range(m, n):\n        # add the element at index i to the total sum\n        total_sum += lst[i]\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i >= 0 and i < len(list1):\n            sum += list1[i]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\na = float(input(\"Enter the length of the side of the pentagon: \"))\nperimeter = perimeter_pentagon(a)\nprint(\"The perimeter of the pentagon is\", perimeter)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # find the semi-perimeter of the pentagon\n    semi_perimeter = 5 * a\n\n    # use the formula for the circumference of a circle\n    circumference = 2 * math.pi * a\n\n    # calculate the perimeter using the formula for a regular polygon\n    perimeter = 5 * math.pi * a\n\n    # return the perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5*a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the area of the pentagon using Heron's formula\n    s = (3 * a ** 2) / math.sqrt(5)\n    # multiply by 5 to get the perimeter\n    p = 5 * s\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of occurrences of the string'std' in the string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple[1:]:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Get the data type of first element in tuple\n    data_type = type(test_tuple[0])\n    # Loop through all the elements in tuple\n    for item in test_tuple:\n        # Check if current element data type is same as the data type of first element in tuple\n        if type(item)!= data_type:\n            return False\n    # If all elements have same data type, then return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for i in test_tuple:\n        data_types.append(type(i))\n    return all(i == data_types[0] for i in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(isinstance(i, type(test_tuple[0])) for i in test_tuple[1:])"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Create a dictionary to keep track of the count of each element in the array\n    count_dict = {}\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n\n    # Iterate through the count_dict and check if the element x is the majority element\n    for key in count_dict:\n        if count_dict[key] > n/2:\n            return True\n\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Determine whether the element x is a majority element in the sorted array arr.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Determine the count of x in the array\n    count = 0\n    for num in freq:\n        if num == x:\n            count += 1\n    \n    # Check if the count is equal to n/2\n    return count == n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    i = 0\n\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        i += 1\n\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count == n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    return count > n // 2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n\n    :param n: The integer for which we need to count the number of set bits.\n    :return: The count of set bits in the given number.\n    \"\"\"\n\n    # Initialize a variable to keep track of the count of set bits\n    count = 0\n\n    # Loop through each bit of the number and count the number of set bits\n    while n:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n\n    while n > 0: \n        count += n & 1 \n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    odd_index_chars = []\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            odd_index_chars.append(char)\n    return ''.join(odd_index_chars)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:  # if i is even, add the character to the result\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    # initialize an empty string to store the result\n    result = \"\"\n    # iterate over the characters in the input string\n    for i in range(len(str)):\n        # if the index is odd, append the character to the result string\n        if i % 2!= 0:\n            result += str[i]\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and returns a new string where the odd characters have been removed.\n    \"\"\"\n    # Initialize an empty string to store the new string\n    new_string = \"\"\n    # Loop through each character in the input string\n    for char in string:\n        # Check if the index of the character is odd\n        if len(new_string) % 2!= 0:\n            # If it is, add the character to the new string\n            new_string += char\n        # If the index is even, move on to the next character\n        else:\n            pass\n    # Return the new string\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    # create a list of characters from the string\n    char_list = list(str)\n\n    # create an empty string to store the odd characters\n    odd_string = \"\"\n\n    # iterate over the list of characters\n    for i in range(len(char_list)):\n        # if the index value is odd, add the character to the odd_string\n        if i % 2 == 1:\n            odd_string += char_list[i]\n\n    # return the resulting string\n    return odd_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    return ''.join(filter(lambda c: c.isalnum(), str))"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    # initializing the minimum value as the first number\n    min_val = a\n\n    # checking if the second number is smaller than the minimum value\n    if b < min_val:\n        min_val = b\n\n    # checking if the third number is smaller than the minimum value\n    if c < min_val:\n        min_val = c\n\n    # returning the minimum value\n    return min_val"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of these numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # if a is smaller than b and c then return a\n    if a < b and a < c:\n        return a\n    # if b is smaller than a and c then return b\n    elif b < a and b < c:\n        return b\n    # if c is smaller than a and b then return c\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, min(b, c))"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Calculate the mask for the range\n    mask = ((1 << (r - l + 1)) - 1) << l\n\n    # Check if all bits in the range are set\n    return (n & mask) == mask"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n)[2:].zfill(i)!= '0' * i:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert n from binary to decimal\n    n = int(n, 2)\n    # Convert l and r from binary to decimal\n    l = int(l, 2)\n    r = int(r, 2)\n    # Check all bits are unset\n    for i in range(l, r+1):\n        if (n & (1 << i))!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 1 << r\n    all_unset = n & mask == 0\n    all_set = n & mask == mask\n    return all_unset and all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a variable to keep track of unset bits\n    unset_bits = 0\n    # Iterate over the range of numbers from l to r (inclusive)\n    for i in range(l, r+1):\n        # Check if all the bits in the current number are set to 1\n        if bin(i).count('1')!= len(bin(i)):\n            # If any bit is unset, increment unset_bits\n            unset_bits += 1\n            # Break out of the loop if all unset bits have been found\n            if unset_bits == len(bin(n)):\n                break\n    # Return True if all unset bits have been found, otherwise return False\n    return unset_bits == len(bin(n))"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments:\n    n: An integer representing the number of bits in the given range.\n    l: An integer representing the starting position of the range.\n    r: An integer representing the ending position of the range.\n\n    This function returns True if all the bits in the given range are set and False otherwise.\n\n    For example, if n=4, l=0 and r=3, then the function will return True because all the bits in the range [0,3] are set to 1.\n    If n=4, l=1 and r=3, then the function will return False because some of the bits in the range [1,3] are not set to 1.\n    '''\n\n    # Check if n is greater than or equal to 0\n    if n < 0:\n        return False\n\n    # Check if l is greater than or equal to 0 and less than or equal to n\n    if l < 0 or l > n:\n        return False\n\n    # Check if r is greater than or equal to 0 and less than or equal to n\n    if r < 0 or r > n:\n        return False\n\n    # Check if l is less than or equal to r\n    if l > r:\n        return False\n\n    # Initialize a boolean variable to keep track of whether all the bits in the given range are set or not\n    all_set = True\n\n    # Iterate through the bits in the given range and check if all the bits are set or not\n    for i in range(l, r + 1):\n        # If a bit is unset in the given range, set all_set to False\n        if n & (1 << i)!= (1 << i):\n            all_set = False\n            break\n\n    # Return the value of all_set\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range into a binary string and count the number of set bits\n    count = sum([int(i) for i in bin(r)[2:] if i == '1'])\n    # Check if the number of set bits is equal to the number of bits in the binary representation of n\n    return count == bin(n)[2:].count('1')"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a boolean variable to keep track of whether all the bits are set or not\n    all_bits_set = True\n\n    # Loop through all the bits in the range [l, r]\n    for i in range(l, r + 1):\n        # Check if the i-th bit is set or not\n        if n & (1 << (i - l)):\n            # If the i-th bit is set, set all_bits_set to False and break the loop\n            all_bits_set = False\n            break\n\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n >= 1 and n <= 64:\n        # Convert the given range from binary to decimal\n        decimal_range = int(l, 2) + (int(r, 2) - int(l, 2) + 1) * 2**n - 1\n        # Check if all bits are set or not\n        if n == 1:\n            if (decimal_range ^ (2**n - 1))!= 0:\n                return True\n            else:\n                return False\n        else:\n            # Get the least significant bit set in the given range\n            least_significant_bit_set = 2**n - 1\n            while least_significant_bit_set >= 2:\n                if decimal_range & (least_significant_bit_set - 1) == 0:\n                    return True\n                least_significant_bit_set -= 1\n            return False\n    else:\n        print(\"Invalid input.\")\n        return None"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize the count of set bits\n    count = 0\n\n    # Iterate through the range of bits from l to r (inclusive)\n    for i in range(l, r + 1):\n        # Check if the bit at the current index is set or not\n        if n & (1 << i):\n            # If the bit is set, increment the count of set bits\n            count += 1\n\n    # Return True if all the bits are unset in the given range else False\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create a list to store the negative and positive elements\n    neg_arr = []\n    pos_arr = []\n\n    # Iterate through the array and add negative and positive elements to the respective lists\n    for num in arr:\n        if num < 0:\n            neg_arr.append(num)\n        else:\n            pos_arr.append(num)\n\n    # Sort the negative and positive lists\n    neg_arr.sort()\n    pos_arr.sort()\n\n    # Combine the sorted negative and positive lists\n    arr = neg_arr + pos_arr\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Iterate through the array and count the number of negative elements\n    neg_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n    \n    # Iterate through the array again and move negative elements to the beginning of the array\n    for i in range(n):\n        if arr[i] < 0:\n            for j in range(neg_count):\n                arr.insert(i, arr.pop(i-neg_count+j))\n                neg_count -= 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two pointers for negative and positive elements\n    neg = 0\n    pos = n - 1\n\n    # iterate through the array\n    for i in range(n):\n        # if the current element is negative\n        if arr[i] < 0:\n            # shift the negative elements to the right\n            while neg < i and arr[neg] < 0:\n                neg += 1\n            arr[i], arr[neg] = arr[neg], arr[i]\n\n            # increment the negative pointer\n            neg += 1\n\n        # if the current element is positive\n        else:\n            # shift the positive elements to the left\n            while pos > i and arr[pos] >= 0:\n                pos -= 1\n            arr[i], arr[pos] = arr[pos], arr[i]\n\n            # decrement the positive pointer\n            pos -= 1\n\n    # print the updated array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Create a dictionary to store the index of each element in the array\n    index_dict = {}\n    for i, elem in enumerate(arr):\n        index_dict[elem] = i\n\n    # Sort the array in reverse order of the absolute value of its elements\n    sorted_arr = sorted(arr, key=lambda x: abs(x), reverse=True)\n\n    # Create a new array to store the re-arranged elements\n    rearranged_arr = []\n\n    # Iterate through the sorted array and add the negative elements to the beginning of the rearranged array,\n    # and the positive elements to the end of the rearranged array.\n    for elem in sorted_arr:\n        if elem >= 0:\n            # Add the positive element to the end of the rearranged array\n            rearranged_arr.append(elem)\n        else:\n            # Add the negative element to the beginning of the rearranged array\n            rearranged_arr.insert(index_dict[elem], elem)\n\n    # Return the rearranged array\n    return rearranged_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store positive and negative elements\n    pos_list = []\n    neg_list = []\n    \n    # Loop through the input array and add elements to their respective lists\n    for num in arr:\n        if num > 0:\n            pos_list.append(num)\n        else:\n            neg_list.append(num)\n    \n    # Check if there are more than n elements in the input array\n    if len(arr) > n:\n        # Loop through the first n elements of the input array and append them to the empty list\n        for i in range(n):\n            pos_list.append(arr[i])\n    \n    # Check if there are less than n elements in the input array and add the remaining elements to their respective lists\n    if len(arr) < n:\n        for num in arr[n:]:\n            if num > 0:\n                pos_list.append(num)\n            else:\n                neg_list.append(num)\n    \n    # Combine the positive and negative lists and sort them in ascending order\n    combined_list = neg_list + pos_list\n    combined_list.sort()\n    \n    # Loop through the combined list and assign elements to the input array\n    for i in range(n):\n        arr[i] = combined_list[i]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Helper function to swap two elements in the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    \n    # Initialize the result array and its indices\n    result = []\n    negative_index = n\n    positive_index = 0\n    \n    # Iterate over the input array and re-arrange the elements\n    for i in range(n):\n        if arr[i] >= 0:\n            # Move positive elements to the beginning of the array\n            if i < positive_index:\n                swap(result, negative_index, positive_index)\n            result.append(arr[i])\n            positive_index += 1\n        elif arr[i] < 0:\n            # Move negative elements to the end of the array\n            if i > negative_index:\n                swap(result, positive_index - 1, negative_index)\n            result.append(arr[i])\n            negative_index -= 1\n    \n    # Pad the result array with zeros if necessary\n    while len(result) < n:\n        result.append(0)\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize variables\n    positive = 0\n    negative = 0\n    pos_index = 0\n    neg_index = n\n\n    # loop through the array\n    for i in range(n):\n\n        # if the element is negative\n        if arr[i] < 0:\n\n            # increment negative index\n            neg_index += 1\n\n            # swap elements at current index and negative index\n            arr[i], arr[neg_index - 1] = arr[neg_index - 1], arr[i]\n\n        # if the element is positive\n        else:\n\n            # increment positive index\n            positive += 1\n\n            # swap elements at current index and positive index\n            arr[i], arr[pos_index] = arr[pos_index], arr[i]\n\n            # increment position index\n            pos_index += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initializing two empty lists to store negative and positive elements respectively\n    negative_list = []\n    positive_list = []\n    \n    # Iterating through the given array\n    for i in range(n):\n        # Checking if the current element is negative or positive\n        if arr[i] < 0:\n            negative_list.append(arr[i])\n        else:\n            positive_list.append(arr[i])\n            \n    # Iterating through the given array again to add the negative elements to the array in the required order\n    for i in range(n):\n        arr[i] = negative_list.pop(0)\n    \n    # Iterating through the given array again to add the positive elements to the array in the required order\n    for i in range(n):\n        arr[i] = positive_list.pop(0)\n    \n    # Returning the final array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_arr = [x for x in arr[:n] if x < 0]\n    pos_arr = [x for x in arr[n:] if x >= 0]\n    pos_arr.sort(reverse=True)\n    return neg_arr + pos_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = n\n    temp = 0\n    \n    while i < j:\n        if arr[i] >= 0:\n            i += 1\n        elif arr[j] >= 0:\n            j -= 1\n        else:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i += 1\n            j -= 1\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Remove blank spaces from the string\n    str1 = str1.replace(\" \", \"\")\n    \n    # Replace the blank spaces with the character\n    str1 = str1.replace(\"\", char)\n    \n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and a character, replaces all blank spaces in the string with the given character, and returns the modified string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i!='':\n            new_str += i\n        elif i =='':\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','%s'%char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sort the list in descending order\n    list1.sort(reverse=True)\n    # return the n largest items\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return \"Error: n is greater than the length of the list\"\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        # create a min heap of size n\n        heap = []\n        for i in range(n):\n            heapq.heappush(heap, -list1[i])\n        # push the remaining elements into the heap\n        for i in range(n, len(list1)):\n            heapq.heappush(heap, -list1[i])\n        # extract and return the n largest elements from the heap\n        return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [x for x in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a set so we can easily find the n largest items\n    items = set(list1)\n    # Use a heap to store the n largest items\n    heap = []\n    # Loop through the set and add the n largest items to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the heap back to a list and return it\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    # create a min heap of size n to store the largest n elements in the list\n    heap = list1[:n]\n    heapq.heapify(heap)\n\n    # iterate through the remaining elements in the list\n    for i in range(n, len(list1)):\n        # if the current element is greater than the smallest element in the heap, replace the smallest element with the current element\n        if list1[i] > heap[0]:\n            heapq.heappushpop(heap, list1[i])\n\n    # return the heap as a list\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Define the formula for the lateral surface area of a cylinder\n    lateral_surface_area = (2*r*h + h*h) / 3\n    \n    # Return the result\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159265358979*r**2 + 2*3.14159265358979*r*h + 2*3.14159265358979*h**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * pi * r * (r + h)\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area\n    lateral_surface_area = 2 * r * h\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r**2 + 2*3.14*r*h + 2*3.14*h**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    :param r: radius of the cylinder\n    :type r: float\n    :param h: height of the cylinder\n    :type h: float\n    :return: the lateral surface area of the cylinder\n    :rtype: float\n    \"\"\"\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Using formula for lateral surface area of a cylinder\n    # Lateral surface area = 2 * pi * r * h\n    lateral_surface_area = 2 * 3.14159 * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n\n    # calculate the volume\n    v = l**3\n\n    # return the volume\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the number with even bits set\n    even_bits_set = 0\n    \n    # Iterate over all bits in the given number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) % 2 == 0:\n            even_bits_set |= 1 << (int(bit) - 2)\n    \n    return even_bits_set"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the new number\n    new_number = []\n    # Iterate over each bit in the number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, append 1 to the new number\n        if int(bit) % 2 == 0:\n            new_number.append(1)\n        else:\n            new_number.append(0)\n    # Convert the new number from a list to an integer and return it\n    return int(''.join(str(bit) for bit in new_number), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of n\n    even_bits = 0\n    \n    # Loop through each bit of n\n    for i in range(32):\n        # If the bit is an even bit\n        if (n >> i) & 1 == 0:\n            # Set the bit to 1\n            even_bits |= (1 << i)\n    \n    # Return the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Find the number of bits in n\n    num_bits = 0\n    while n > 0:\n        num_bits += 1\n        n >>= 1\n    \n    # Set all even bits of n\n    for i in range(num_bits - 1, -1, -2):\n        n = n | (1 << i)\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1 and add it to the result\n        if int(bit) == 0:\n            result += 2**int(bit)\n        else:\n            result += 2**int(bit) - 2**int(bit)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize a variable to store the result\n    result = 0\n    \n    # iterate over each bit of the number\n    for i in range(32):\n        # if the current bit is even, set the corresponding bit in the result\n        if n & (1 << i):\n            result |= (1 << i)\n    \n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to keep track of the number of even bits set\n    even_count = 0\n\n    # Iterate through each bit of the number\n    for i in range(32):\n        # If the current bit is even, set it to 1 and increment the even_count\n        if (n >> i) & 1 == 0:\n            n |= (1 << i)\n            even_count += 1\n\n    # Return the number of even bits set\n    return even_count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for i in range(32):\n        if (n >> i) & 1:\n            even_bits |= 1 << i\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the bits of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) % 2 == 0:\n            result.append('1')\n        # Otherwise, set it to 0\n        else:\n            result.append('0')\n    # Convert the list to an integer and return it\n    return int(''.join(result), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the set even bits\n    even_bits = []\n    # Iterate over each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, add it to the list\n        if int(bit) == 0:\n            even_bits.append(0)\n        else:\n            even_bits.append(1)\n    # Convert the list to a number and return it\n    return int(''.join(str(bit) for bit in even_bits), 2)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Initialize an empty dictionary\n    counts = {}\n    \n    # Iterate through the list of tuples\n    for tup in test_list:\n        \n        # If the tuple is already in the dictionary, increment its count\n        if tup in counts:\n            counts[tup] += 1\n        \n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[tup] = 1\n            \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create a dictionary to store the count of each unique tuple\n    counter = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in counter:\n            counter[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            counter[tup] += 1\n\n    # Return the dictionary of unique tuple counts\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # loop through each tuple in the list\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item not in count_dict:\n            count_dict[item] = 0\n        count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary\n    unique_occurrences = {}\n\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment the count\n        if tup in unique_occurrences:\n            unique_occurrences[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            unique_occurrences[tup] = 1\n\n    # Return the dictionary of unique occurrences\n    return unique_occurrences"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple\n    count_dict = Counter(test_list)\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Initialize a dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the count_dict, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the count_dict with a count of 1\n        else:\n            count_dict[tup] = 1\n    \n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Initialize an empty dictionary\n    count_dict = {}\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it and set its count to 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[tup] += 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set of tuples to avoid duplicates\n    unique_tuples = set(test_list)\n    # Create a dictionary to store the number of occurrences of each tuple\n    count_dict = {}\n    # Loop through the unique tuples and update the count dictionary\n    for tup in unique_tuples:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n    \"\"\"\n    if not str:\n        return 0\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Convert the string to lowercase\n    str = str.lower()\n\n    # Initialize variables to keep track of the start and end indices of non-empty substrings\n    start = 0\n    end = 0\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate over the string\n    while end < len(str):\n\n        # If the current character is not a letter, increment the count and move on to the next character\n        if not str[end].isalpha():\n            count += 1\n            end += 1\n            start = end\n            continue\n\n        # If we reach the end of the string, increment the count and move on\n        if end == len(str) - 1:\n            count += 1\n\n        # Move on to the next non-letter character\n        end += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    # Initialize the count to 0\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each possible starting point for the substring\n        for j in range(i+1, len(str)+1):\n            # Check if the substring is non-empty and add to count\n            if str[i:j]!= \"\":\n                count += 1\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Loop through each possible starting position for the substring\n        for j in range(i, len(string)):\n            # Check if the substring is non-empty (i.e. has at least one character)\n            if len(string[i:j+1]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(2, m+1):\n        if i >= 2*i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    sequence_length = n\n    count = 0\n\n    for i in range(1, m+1):\n        if i >= 2 * (i-1) <= m:\n            count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a variable to store the number of possible sequences\n    count = 0\n    \n    # Initialize a variable to store the previous element of the sequence\n    prev_element = 0\n    \n    # Initialize a variable to store the current element of the sequence\n    current_element = 0\n    \n    # Initialize a variable to store the sum of the elements in the sequence\n    sequence_sum = 0\n    \n    # Loop through the range of elements from 1 to m\n    for i in range(1, m+1):\n        # If the current element is less than twice the previous element and less than or equal to m\n        if current_element < (2*prev_element) and current_element <= m:\n            # Increment the count of possible sequences\n            count += 1\n            \n            # Add the current element to the sequence sum\n            sequence_sum += current_element\n            \n            # Update the previous element and current element\n            prev_element = current_element\n            current_element = 0\n            \n        # If the current element is greater than twice the previous element\n        else:\n            # Set the current element to 0\n            current_element = 0\n    \n    # Return the total number of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    sequence = [2]\n    prev_num = 0\n    \n    while len(sequence) < n:\n        new_num = prev_num + 1\n        \n        if new_num <= m:\n            sequence.append(new_num)\n            prev_num = new_num\n        else:\n            break\n            \n        total_sequences += 1\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(1, m // n + 1):\n        seq = [0] * n\n        seq[0] = 1\n        for j in range(1, n):\n            if seq[j - 1] + 2 <= m:\n                seq[j] = seq[j - 1] + 1\n            else:\n                seq[j] = 0\n        count += sum(seq)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    seq = [0]\n\n    # initialize the first element\n    seq[0] = 0\n\n    # check if the first element is greater than or equal to twice the previous element but less than or equal to m\n    if seq[0] >= 2 * m and seq[0] <= m:\n        count += 1\n        seq[0] += 1\n\n    # check for other elements in the sequence\n    for i in range(1, n):\n        # check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if seq[i - 1] >= 2 * seq[i - 1] and seq[i - 1] <= m:\n            count += 1\n            seq[i] = seq[i - 1] + 1\n        else:\n            # if the current element is not within the required range, try a different element\n            if seq[i - 1] < 2 * seq[i - 1]:\n                seq[i] = seq[i - 1] + 1\n            else:\n                seq[i] = seq[i - 1] - 1\n\n                # check if the next element is greater than or equal to twice the previous element but less than or equal to m\n                if seq[i] >= 2 * seq[i - 1] and seq[i] <= m:\n                    count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable to 0\n    count = 0\n    # Initialize the first element of the sequence to 2\n    first_element = 2\n    # Loop through all possible values of the first element\n    for i in range(2, m):\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n        if i >= 2 * first_element and i <= m:\n            # If the current element is within the valid range, increment the count variable\n            count += 1\n            # Update the first element of the next sequence\n            first_element = i\n    # Return the count of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(m, 2*m, m):\n        if i % 2 == 0:\n            total_sequences += (n//2) * (m//2) + (i//2) * (m//2)\n        else:\n            total_sequences += n//2 + (i//2) * (m//2)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    def count_sequences(m, n, prev_element):\n        if n == 1:\n            return 1\n        count = 0\n        for i in range(m, 0, -1):\n            if i >= prev_element*2 and i <= m:\n                count += count_sequences(m, n-1, i)\n        return count\n\n    return count_sequences(m, n, 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Calculate the sum of the first m positive integers\n    total_sum = sum(range(1, m + 1))\n\n    # Initialize the variable to store the result\n    result = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(1, total_sum + 1):\n        # Calculate the current sum of the sequence\n        current_sum = sum(range(i, min(i + n, m + 1) + 1))\n\n        # Check if the current sum is greater than or equal to the current result\n        if current_sum >= result:\n            result = current_sum\n\n    return result"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the lengths of the lists are the same\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2[-1]\n    \n    # Return the modified list1\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    last_element = list1.pop()\n    list1.extend(list2)\n    list1.append(last_element)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list2) > 0:\n        for i in range(len(list1)-1, -1, -1):\n            list1[i] = list2.pop(0)\n    else:\n        print(\"Error: list2 is empty\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the second list is not empty\n    if not list2:\n        raise ValueError(\"The second list cannot be empty.\")\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # find the last index of the first list\n    last_index = len(list1) - 1\n    \n    # replace the last element of the first list with the elements of the second list\n    list1[last_index] = list2[0:len(list2)]\n    \n    # return the updated list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Take the length of the second list\n    n = len(list2)\n    # Loop through the first list\n    for i in range(len(list1)-1,-1,-1):\n        # If the current element is a list, recursively call the function\n        if isinstance(list1[i],list):\n            replace_list(list1[i], list2)\n        # Replace the last element with the elements of the second list\n        elif i == len(list1)-1 and isinstance(list2,list):\n            list1[i] = list2\n        # If the current element is neither a list, append the element of the second list to it\n        elif i == len(list1)-1 and not isinstance(list2,list):\n            list1[i] += list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) > len(list1):\n        list2 = list2[:len(list1)]\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2.pop()\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > 0 and len(list2) > 0:\n        last_element = list1.pop()\n        list1.extend(list2)\n        list1.append(last_element)\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_characters(string):\n    \"\"\"\n    This function counts the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # Round down to the nearest integer\n    sqrt_N = int(sqrt_N)\n    \n    # Check if the square root is odd or even\n    if sqrt_N % 2 == 1:\n        # If odd, increment it\n        sqrt_N += 1\n    else:\n        # If even, decrement it\n        sqrt_N -= 1\n        \n    # Calculate the next perfect square\n    next_sqrt = sqrt_N**2\n    \n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    while True:\n        x += 1\n        y = (x * x)\n        if y > N:\n            break\n    return x\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    def next_sqrt(num):\n        sqrt_num = math.sqrt(num)\n        return int(math.ceil(sqrt_num))\n\n    def next_square(num):\n        next_sqrt_num = next_sqrt(num)\n        return next_sqrt_num * next_sqrt_num\n\n    next_square_greater_than_N = next_prime(N)\n    return next_square_greater_than_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(num):\n        return math.isqrt(num) ** 2 == num\n\n    def is_greater_than_sqrt(num):\n        return math.sqrt(num) > num\n\n    def next_greater_perfect_square(num):\n        root = math.sqrt(num)\n        if root % 1 == 0:\n            root -= 1\n        else:\n            root += 1\n        while not is_perfect_square(root) and not is_greater_than_sqrt(root):\n            root += 1\n        return root\n\n    next_num = N\n    while True:\n        next_num = next_greater_perfect_square(next_num)\n        if next_num > N:\n            break\n        N = next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a positive integer N as input and returns the next \n    perfect square greater than N.\n    '''\n    # Initialize variables\n    prev_square = N\n    curr_square = N\n    is_square = False\n    is_prime = True\n    count = 0\n\n    # Check if N is a prime number\n    while curr_square > 1 and is_prime:\n        if curr_square % 2 == 0:\n            curr_square //= 2\n        else:\n            is_prime = False\n            break\n\n    # If N is not a prime number, return N\n    if not is_prime:\n        return N\n\n    # Loop to find the next perfect square\n    while not is_square:\n        # Increment count\n        count += 1\n\n        # Calculate next square\n        next_square = curr_square * curr_square\n\n        # Check if next square is greater than N\n        if next_square > N:\n            return next_square\n\n        # If next square is less than N, check if next square is prime\n        while not is_prime:\n            # Increment count\n            count += 1\n\n            # Calculate next square\n            next_square = curr_square * curr_square\n\n            # Check if next square is greater than N\n            if next_square > N:\n                return next_square\n\n            # Check if next square is prime\n            if next_square % 2 == 0:\n                next_square //= 2\n            else:\n                is_prime = False\n                break\n\n        # If next square is greater than N, check if current square is prime\n        if curr_square % 2 == 0:\n            curr_square //= 2\n        else:\n            is_prime = False\n            break\n\n    # If count is greater than 100, return N\n    if count > 100:\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Convert given number to integer\n    N = int(N)\n    # Initialize variables\n    current_square = N\n    next_square = int(math.sqrt(current_square))\n    # If the square is a perfect square, return the square\n    while current_square == next_square ** 2:\n        next_square += 1\n    # If the square is less than the given number, return the square\n    while current_square < N:\n        current_square = next_square ** 2\n        next_square += 1\n    # If the square is greater than the given number, return the square\n    while current_square > N:\n        current_square = next_square ** 2\n        next_square -= 1\n    return current_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        sqrt_N += 1\n        next_sqrt_N = int(math.sqrt(sqrt_N))\n        if (sqrt_N**2 - N) < (next_sqrt_N**2 - sqrt_N):\n            return next_sqrt_N**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # Initialize the lower and upper bounds\n    lower = 1\n    upper = N\n\n    # While loop to find the next perfect square greater than the upper bound\n    while upper <= N:\n        mid = (lower + upper) // 2\n\n        # Check if mid is a perfect square\n        if math.isqrt(mid) ** 2 == mid:\n            if mid > N:\n                return mid\n            else:\n                lower = mid + 1\n        else:\n            upper = mid - 1\n\n    # If no perfect square greater than the upper bound is found, return the upper bound\n    return upper"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    '''\n\n    # Function to check whether a given number is a perfect square or not\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        sqrt_num = int(math.sqrt(num))\n        return num == int(sqrt_num ** 2)\n\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # Check whether N is a perfect square or not\n    if is_perfect_square(N):\n        sqrt_N += 1\n\n    # Check for the next perfect square greater than N\n    while True:\n        next_sqrt_N = (sqrt_N + N) // 2\n        if is_perfect_square(next_sqrt_N):\n            return next_sqrt_N\n        else:\n            sqrt_N = next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N): \n    '''\n    This function takes a number as input and returns the next perfect square greater than the input number.\n    The next perfect square is the next integer greater than the square root of the given number.\n    If the given number is a perfect square, then its next perfect square will be the square of its square root.\n    '''\n    # Check if the given number is a perfect square\n    isPerfectSquare = math.sqrt(N) ** 2 == N\n    if isPerfectSquare:\n        return N ** 2\n    else:\n        # Find the next integer greater than the square root of the given number\n        sqrtN = math.sqrt(N)\n        sqrtN_int = int(sqrtN)\n        next_int = sqrtN_int + 1\n        # Find the next perfect square greater than the next integer\n        while next_int ** 2 > N:\n            next_int += 1\n        return next_int ** 2"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    # Initialize variables\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n    \n    # Calculate the maximum sum of a subsequence of increasing and decreasing elements\n    max_sum_increasing = max_sum_decreasing = float('-inf')\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_sum_increasing = max(max_sum_increasing + arr[i], arr[i])\n        else:\n            max_sum_decreasing = max(max_sum_decreasing + arr[i], arr[i])\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Calculate the cumulative sum of the array\n    cum_sum = [0] * len(arr)\n    cum_sum[0] = arr[0]\n    for i in range(1, len(arr)):\n        cum_sum[i] = cum_sum[i-1] + arr[i]\n    \n    # Initialize variables to store the maximum subsequence sum and its ending index\n    max_sum = float('-inf')\n    max_start = -1\n    max_end = -1\n    \n    # Loop through the cumulative sum of the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing or decreasing\n        if cum_sum[i] > cum_sum[i-1] and cum_sum[i] > cum_sum[i+1]:\n            # Calculate the current subsequence sum\n            sub_sum = cum_sum[i] - cum_sum[i-1] + cum_sum[i+1]\n            # Update the maximum subsequence sum and its ending index if the current subsequence sum is greater\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n                max_start = i-1\n                max_end = i+1\n    \n    # Return the maximum subsequence sum and its ending index\n    return max_sum, max_start, max_end"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Check if the array is bitonic\n    if arr[0] <= arr[1] and arr[1] >= arr[2] or arr[n-1] <= arr[n-2] and arr[n-2] >= arr[n-3]:\n        # If the array is bitonic, return the maximum sum\n        return max(arr[1] + arr[2], arr[n-2] + arr[n-3])\n    else:\n        # If the array is not bitonic, find the maximum sum of increasing subsequences\n        left = 1\n        right = n-2\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\n                # If the mid element is a peak, find the maximum sum of increasing subsequences to the left and right of the peak\n                left_sum = max_sum(arr[:mid])\n                right_sum = max_sum(arr[mid+1:])\n                return max(left_sum, right_sum)\n            elif arr[mid] < arr[mid-1]:\n                # If the mid element is smaller than its predecessor, move the left endpoint to the right\n                left = mid + 1\n            else:\n                # If the mid element is greater than its successor, move the right endpoint to the left\n                right = mid - 1\n        # If the array is not bitonic and no peak is found, return None\n        return None"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize two variables to store the maximum sum of increasing and decreasing subsequences\n    max_inc = float('-inf')\n    max_dec = float('-inf')\n    \n    # Initialize two variables to store the current maximum sum of increasing and decreasing subsequences\n    curr_inc = float('-inf')\n    curr_dec = float('-inf')\n    \n    # Loop through the array and calculate the maximum sum of increasing and decreasing subsequences\n    for num in arr:\n        if num > curr_inc:\n            curr_inc = curr_inc + num\n        else:\n            curr_dec = curr_dec + num\n            \n        if num < curr_dec:\n            curr_dec = curr_dec - num\n        else:\n            curr_inc = curr_inc - num\n            \n        # Update the maximum sum of increasing and decreasing subsequences if the current maximum sum is greater than the previous maximum sum\n        if curr_inc > max_inc:\n            max_inc = curr_inc\n        if curr_dec > max_dec:\n            max_dec = curr_dec\n            \n    # Return the maximum sum of increasing and decreasing subsequences\n    return max_inc + max_dec"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # create a new array to store the max sum subsequence for each index\n    max_sum_subseq = [0] * n\n    # initialize the max sum to be the first element of the array\n    max_sum = arr[0]\n    # loop through the array and update max_sum_subseq and max_sum for each index\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            # if the current element is less than the previous element, then the current subsequence is increasing and the sum of the current subsequence is greater than the current max sum\n            if arr[i] + max_sum_subseq[i - 1] > max_sum:\n                max_sum = arr[i] + max_sum_subseq[i - 1]\n            # if the current element is greater than the previous element, then the current subsequence is decreasing and the sum of the current subsequence is greater than the previous max sum\n            else:\n                max_sum = max_sum + arr[i]\n        else:\n            # if the current element is greater than the previous element, then the current subsequence is decreasing and the sum of the current subsequence is greater than the current max sum\n            if arr[i] + max_sum_subseq[i - 1] > max_sum:\n                max_sum = arr[i] + max_sum_subseq[i - 1]\n            # if the current element is less than the previous element, then the current subsequence is increasing and the sum of the current subsequence is greater than the previous max sum\n            else:\n                max_sum = max_sum + arr[i]\n        max_sum_subseq[i] = max_sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Initialize two pointers at the beginning of the array\n    i = 0\n    j = len(arr) - 1\n\n    # Initialize the maximum sum to the first element of the array\n    max_sum = arr[i]\n\n    # Initialize the sum to 0\n    current_sum = 0\n\n    # Traverse the array from both ends\n    while i < j:\n        # Calculate the sum of the current subarray\n        current_sum += arr[i] + arr[j]\n\n        # If the current sum is greater than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is negative, move the right pointer to the left\n        if current_sum < 0:\n            j -= 1\n\n        # If the current sum is positive, move the left pointer to the right\n        else:\n            i += 1\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Check if the array is empty\n    if not arr:\n        return 0\n\n    # Initialize variables for the maximum sum and the current subsequence sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Traverse through the array\n    for num in arr:\n        # Update the current subsequence sum\n        curr_sum += num\n\n        # If the current subsequence is increasing, check if it is greater than the maximum sum\n        if num > curr_sum:\n            max_sum = curr_sum\n        # If the current subsequence is decreasing, check if it is less than the maximum sum\n        elif num < curr_sum:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the maximum sum of increasing subsequence\n    max_sum_inc = max(arr)\n    i = arr.index(max_sum_inc)\n    max_sum_inc = 0\n    for j in range(i, len(arr)):\n        if arr[j] < arr[j-1]:\n            max_sum_inc += arr[j]\n    # Find the maximum sum of decreasing subsequence\n    max_sum_dec = max(arr[::-1])\n    j = arr.index(max_sum_dec)\n    max_sum_dec = 0\n    for k in range(j, len(arr)-1, -1):\n        if arr[k] > arr[k+1]:\n            max_sum_dec += arr[k]\n    # Calculate the maximum sum of the bitonic subsequence\n    max_sum_bit = max(max_sum_inc, max_sum_dec)\n    return max_sum_bit"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n\n    n = len(arr)\n    max_sum = float('-inf')\n\n    for i in range(n):\n        # If the current element is increasing, add it to the sum\n        if i == 0 or arr[i] > arr[i-1]:\n            if i == 0:\n                max_sum = arr[0]\n            else:\n                max_sum = max(max_sum, arr[i])\n        # If the current element is decreasing, add it to the sum\n        else:\n            if i == n-1:\n                max_sum = arr[i]\n            else:\n                max_sum = max(max_sum, arr[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return 0\n    \n    left, right = 0, len(arr) - 1\n    max_sum = float('-inf')\n    prev_max_sum = float('-inf')\n\n    while left < right:\n        if arr[left] < arr[right]:\n            current_max_sum = arr[left] + arr[right]\n            if current_max_sum > max_sum:\n                max_sum = current_max_sum\n                prev_max_sum = arr[left]\n        else:\n            current_max_sum = arr[left] + arr[right]\n            if current_max_sum > max_sum:\n                max_sum = current_max_sum\n                prev_max_sum = arr[right]\n\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    a, b = 1, 1\n    epsilon = 0.00001\n    \n    while True:\n        if abs(b**2 - number) < epsilon:\n            return b\n        a, b = b, b - (b**2 - number)/(2*b)\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the initial approximation and the number of iterations\n    x = number\n    i = 0\n    # Use the babylonian method to compute the square root\n    while x**2 > number:\n        x = (number/x) + (number/x**2)\n        i += 1\n    return x, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initial guess for square root\n    guess = 1\n\n    # Loop until the difference between the guess and the square of the guess is less than a small tolerance\n    while abs(guess**2 - number) >= 0.0001:\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number / x\n    while abs(x - y) > 0.00001:\n        x = y\n        y = 0.5 * (x + number / x)\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    n = int(number)  # convert input to an integer\n    a = 0  # initialize the first guess as 0\n    b = n  # initialize the second guess as the input number\n    while b ** 2 > n:  # keep iterating until the square of the last guess is less than the input number\n        c = (a + b) // 2  # calculate the midpoint of the current guess interval\n        if c ** 2 == n:  # if the square of the midpoint is equal to the input number, return the midpoint\n            return c\n        elif c ** 2 < n:  # if the square of the midpoint is greater than the input number, update the lower bound\n            a = c\n        else:  # if the square of the midpoint is less than the input number, update the upper bound\n            b = c\n    return None  # if the algorithm reaches this point, it means the input number is a perfect square"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    :param number: A non-negative real number.\n    :return: The square root of the input number.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The input number must be non-negative.\")\n\n    x0 = 1.0\n    x1 = (x0 + number / x0) / 2.0\n    x2 = (x1 + number / x1) / 2.0\n\n    while abs(x1 - x0) > 1e-6:\n        x0 = x1\n        x1 = x2\n        x2 = (x1 + number / x1) / 2.0\n\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-15\n    x = number\n    while abs(x*x - number) > epsilon:\n        x = (x + number/x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        approx = (guess + number / guess) / 2\n        if abs(approx - guess) < 0.00001:\n            return approx\n        guess = approx"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2  # initial guess\n\n    while guess * guess > number:  # loop until square of guess is less than number\n        guess = (number / guess) + guess / 2  # calculate new guess\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = guess - (guess * guess - number) / (2 * guess)\n        if abs(next_guess - guess) < 0.0001:\n            return next_guess\n        guess = next_guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub_str = s[i:j+1]\n            if sub_str == sub_str[::-1]:\n                max_len = max(max_len, len(sub_str))\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize variables\n    n = len(str)\n    max_length = 1\n    start = 0\n\n    # Find the longest palindromic subsequence\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            length = 2\n            while i+length < n and str[i+length] == str[i-length]:\n                length += 1\n            if length > max_length:\n                max_length = length\n                start = i-length+1\n        else:\n            length = 1\n            while i+length < n and str[i+length] == str[i]:\n                length += 1\n            if length > max_length:\n                max_length = length\n                start = i-length+1\n\n    # Return the result\n    return max_length, str[start:start+max_length]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(string):\n    n = len(string)\n    if n == 0:\n        return 0\n    # create a 2D array to store the length of the longest palindromic subsequence ending at each position\n    # initialize the first and last character as a subsequence of length 1\n    longest_palindrome = [[1, 0], [0, 0]]\n    # iterate over the characters of the string and update the longest_palindrome array\n    for i in range(1, n):\n        # check if the previous character is a palindrome\n        if string[i] == string[i-1]:\n            longest_palindrome[i] = [longest_palindrome[i-1][0] + 2, longest_palindrome[i-1][1]]\n        else:\n            # check if the substring ending at the previous character is a palindrome\n            if longest_palindrome[i-1][1] >= longest_palindrome[i-2][0]:\n                longest_palindrome[i] = [longest_palindrome[i-1][0], longest_palindrome[i-2][1]]\n            else:\n                longest_palindrome[i] = [longest_palindrome[i-1][0], longest_palindrome[i-1][1]]\n    # return the length of the longest palindromic subsequence\n    return longest_palindrome[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # create a dictionary to store length of longest palindromic subsequence for each character in the string\n    dp = {}\n    for i in range(len(str)): \n        dp[str[i]] = 1\n\n    # check for subsequences of length 2 starting from each character in the string\n    for i in range(len(str)): \n        if str[i] == str[i+1]: \n            dp[str[i]] = 2\n            if str[i] in dp: \n                dp[str[i]] += dp[str[i]]\n\n    # find the maximum value in the dictionary and its corresponding character in the string\n    max_len = max(dp.values())\n    for key in dp: \n        if dp[key] == max_len: \n            return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(n):\n        dp[i][i] = 1\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n            if max_len < 2:\n                max_len = 2\n                start = i\n\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = i\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(str):\n    i = 0\n    j = len(str) - 1\n    while i < j:\n        if str[i]!= str[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef longest_palindrome(s):\n    longest_length = 1\n    longest_start = 0\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i, n):\n            if is_palindrome(s[i:j+1]):\n                if j - i + 1 > longest_length:\n                    longest_length = j - i + 1\n                    longest_start = i\n    return s[longest_start:longest_start+longest_length]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of LPS ending at i and j\n    lps_table = [[0] * n for _ in range(n)]\n\n    # Find LPS ending at i and j of the substring str[i:j+1]\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i+1][j-1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j-1])\n\n    # Return the length of LPS ending at index 0\n    return lps_table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_palindrome(s, start, end):\n    while start < end:\n        if s[start]!= s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\ndef longest_palindrome_subseq(s):\n    n = len(s)\n    if n == 1:\n        return 1\n\n    max_length = 1\n    for i in range(n):\n        if i == 0 or i == n-1:\n            max_length = 2\n        else:\n            max_length = max(max_length, 2)\n\n        for j in range(i+2, n+1):\n            if is_palindrome(s, i, j-1):\n                max_length = max(max_length, j-i)\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Create a 2D table to store the length of longest palindromic subsequence ending at each position\n    # in the input string\n    table = [[0] * len(str) for _ in range(len(str))]\n    \n    # Initialize the first row and column with 1, as the longest palindromic subsequence of a\n    # single character is always itself\n    for i in range(len(str)):\n        table[i][i] = 1\n    \n    # Iterate over the remaining rows and columns of the table\n    for gap in range(2, len(str)):\n        for i in range(len(str) - gap):\n            j = i + gap\n            # Check if the current substring is a palindrome and update the table accordingly\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            # Check if the current substring is a palindrome but centered around a sub-palindrome and update the table accordingly\n            elif str[i] == str[j-1] and str[j] == str[i+1]:\n                table[i][j] = table[i+1][j-1] + 4\n            # Check if the current substring is not a palindrome and update the table accordingly\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    \n    # Return the length of the longest palindromic subsequence found in the input string\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(n):\n        dp[i][i] = 1\n\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n            start = i + 2\n            max_len = 2\n        else:\n            for j in range(i + 2, n):\n                if s[i] == s[j] and is_palindrome(s[i:j + 1]):\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                    start = i\n                    max_len = dp[i][j]\n                elif s[i] == s[j] and not is_palindrome(s[i:j + 1]):\n                    dp[i][j] = dp[i + 1][j]\n                    start = i + 1\n                else:\n                    dp[i][j] = dp[i][j - 1]\n\n    return s[start:start + max_len]\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # Calculate the harmonic sum of n-1\n    harmonic_sum_n = (1/n + 1/n**2 + 1/n**3 +... + 1/n**(n-1))\n    return harmonic_sum_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes an integer n as input and calculates the harmonic sum of n-1.\n    '''\n    # initialize a variable to store the harmonic sum\n    harmonic_sum = 0\n    # iterate from 1 to n-1\n    for i in range(1, n):\n        # calculate the harmonic sum of the current value of i\n        harmonic_sum += 1/i\n    # return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n\n    harmonic = 0\n    for i in range(1, n):\n        harmonic += 1 / i\n\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n + harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_harmonic_numbers = 0\n    for i in range(1, n):\n        sum_of_harmonic_numbers += 1 / i\n    return sum_of_harmonic_numbers"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum += 1.0 / i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays as input and returns their intersection.\n    \"\"\"\n    # Create a set to store unique elements from both arrays\n    unique_set = set(array_nums1).intersection(set(array_nums2))\n    \n    # Convert set to list and return it as the intersection\n    return list(unique_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store the count of each element in each array\n    dict1 = {}\n    dict2 = {}\n\n    # Iterate through the first array and update the count of each element\n    for num in array_nums1:\n        if num in dict1:\n            dict1[num] += 1\n        else:\n            dict1[num] = 1\n\n    # Iterate through the second array and update the count of each element\n    for num in array_nums2:\n        if num in dict2:\n            dict2[num] += 1\n        else:\n            dict2[num] = 1\n\n    # Create a new list to store the intersection of the two arrays\n    intersection = []\n\n    # Iterate through the dictionaries and find the elements that have the same count in both arrays\n    for key, value in dict1.items():\n        if key in dict2 and dict1[key] == dict2[key]:\n            intersection.append(key)\n\n    # Return the intersection of the two arrays\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set of elements in array_nums1 to be able to find the intersection easily\n    set_nums1 = set(array_nums1)\n    \n    # Iterate over each element in array_nums2 and check if it exists in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            # If it does, add it to the intersection list\n            intersection.append(num)\n    \n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create two empty lists to store the intersection\n    intersection = []\n    # create two sets to store the unique elements from the two arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # iterate through each element in set1 and check if it is in set2\n    for num in set1:\n        if num in set2:\n            # if it is, add it to the intersection list\n            intersection.append(num)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # creating a set of unique elements of array_nums2\n    set_nums2 = set(array_nums2)\n    \n    # creating a set of intersection of array_nums1 and set_nums2\n    intersection = set(array_nums1).intersection(set_nums2)\n    \n    # converting the intersection set to a list\n    intersection_list = list(intersection)\n    \n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    This function takes in two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Args:\n        array_nums1 (list[int]): An array of integers.\n        array_nums2 (list[int]): An array of integers.\n\n    Returns:\n        list[int]: The intersection of the two arrays.\n    \"\"\"\n    # Create a set for the first array, and a set for the second array\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of them.\n    \"\"\"\n    # Create sets to store unique elements of the two arrays\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    intersect = list(set_nums1.intersection(set_nums2))\n\n    # Return the intersection\n    return intersect"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n\n    count = 0  # initialize count variable\n    for elem in tup:  # iterate over each element in the tuple\n        if elem == x:  # check if the current element is equal to the target element\n            count += 1  # increment the count if the condition is true\n\n    return count  # return the final count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    return [elem] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n            result.append(list[i])\n        else:\n            result.append(list[i])\n            result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(item)\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert the element before each element in the list and return the resulting list.\n    \"\"\"\n    result = []\n    for i, item in enumerate(lst):\n        result.append(elem)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(0, list[i])\n    new_list.insert(0, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(0, element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print(f\"({real}, {imag}) = ({magnitude}, {angle})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        # convert complex number to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        phi = cmath.phase(number)\n        polar_number = (r, phi)\n        polar_numbers.append(polar_number)\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath  \n\n\ndef convert(numbers):  \n    '''\n    This function takes a list of complex numbers and returns a list of their polar coordinates.\n    '''  \n    polar_coords = []  \n    for num in numbers:  \n        r = abs(num)  \n        theta = cmath.phase(num)  \n        polar_coords.append((r, theta))  \n    return polar_coords  \n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        complex_num = complex(num)\n        polar_num = cmath.polar(complex_num)\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates\n        print(f\"{num} ({r:.2f} + {theta:.2f}i)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        polar = cmath.polar(complex(real, imag))\n        print(f'The polar coordinates of {num} are {polar[0]} + {polar[1]}j')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            r = cmath.sqrt(num.real ** 2 + num.imag ** 2)\n            theta = cmath.phase(num)\n            result.append((r, theta))\n        else:\n            raise TypeError(\"Input must be complex number.\")\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = cmath.sqrt(num.real ** 2 + num.imag ** 2)\n        theta = cmath.phase(num)\n        polar_coords.append((r, theta))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        try:\n            r = abs(num)\n            theta = cmath.phase(num)\n            print(f\"{r:.2f} + {theta:.2f}i\")\n        except:\n            print(\"Invalid input.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n\n        # Print the polar coordinates of the complex number\n        print(f\"r={r:.2f} theta={theta:.2f}\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if len(set(l[i:j])) == n:\n                result.append(tuple(l[i:j]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[:i] + l[i+1:], n-1):\n            combinations.append(tuple(j + [l[i]]))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Use itertools.combinations_with_replacement to generate all combinations of length n\n    combs = combinations_with_replacement(l, n)\n    \n    # Convert the generator object to a list of tuples and return it\n    return list(combs)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations with repetition of length n\n    comb = combinations_with_replacement(l, n)\n    # Convert each combination into a tuple\n    comb_list = [tuple(c) for c in comb]\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Check if the input number is non-negative\n    if n < 0:\n        return \"Invalid Input! Please enter a non-negative number.\"\n    \n    # Initialize count variable to zero\n    count = 0\n    \n    # Loop through all numbers from 2 to n-1\n    for num in range(2, n):\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        # If the number is prime, increment the count\n        if is_prime:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    \n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n            \n    if n > 1:\n        count += 1\n        \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    \n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Convert the tuples to lists and sort them in descending order\n    list1 = sorted(list(test_tup1), reverse=True)\n    list2 = sorted(list(test_tup2), reverse=True)\n\n    # Compare the elements of the two lists and return the maximum\n    max_list = []\n    for i in range(min(len(list1), len(list2))):\n        if list1[i] > list2[i]:\n            max_list.append(list1[i])\n        else:\n            max_list.append(list2[i])\n\n    # If one of the lists has fewer elements than the other, fill the missing elements with the first list's elements\n    for i in range(len(max_list), len(list1)):\n        max_list.append(list1[i])\n    for i in range(len(max_list), len(list2)):\n        max_list.append(list2[i])\n\n    # Convert the list back to a tuple and return it\n    return tuple(max_list)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n\n    # Convert the tuples to lists to perform max() operation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Perform the max() operation on the lists and return the result as a tuple\n    return tuple(max(list1, list2))"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must be of the same length.\")\n        return\n    \n    # Loop through the tuples and compare their elements\n    max_tup = test_tup1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n        elif test_tup2[i] > test_tup1[i]:\n            max_tup = test_tup2\n    \n    # Print the maximum tuple\n    print(\"The maximum tuple is:\", max_tup)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the first tuple has more elements than the second tuple\n    if len(test_tup1) > len(test_tup2):\n        # maximize the first tuple\n        return max(test_tup1)\n    else:\n        # maximize the second tuple\n        return max(test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements\")\n\n    # Get the maximum value from each tuple\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n\n    # Compare the maximum values and return the tuple with the maximum value\n    if max_val1 > max_val2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # If they are equal, compare the elements\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return test_tup1\n            elif test_tup1[i] < test_tup2[i]:\n                return test_tup2\n    else:\n        # If they are not equal, compare the lengths\n        if len(test_tup1) > len(test_tup2):\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple with the \n    elements of the first tuple which have the maximum value in common with \n    the elements of the second tuple.\n    \"\"\"\n    common_elements = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] == test_tup2[i]:\n            common_elements.append(test_tup1[i])\n    return tuple(common_elements)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # first check which tuple has the greater value\n    if test_tup1 > test_tup2:\n        # if test_tup1 is greater, then maximize it\n        max_tup = test_tup1\n    else:\n        # if test_tup2 is greater, then maximize it\n        max_tup = test_tup2\n    # return the max_tup\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    j = 3\n    count = 0\n    while count < n:\n        if is_newman_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_newman_prime(n):\n    '''\n    Check if a number is a newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 3:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a variable to store the index of the current prime number\n    i = 0\n    # Initialize a variable to store the count of prime numbers found so far\n    count = 0\n    # Initialize a variable to store the prime number\n    current_prime = 2\n    # Loop until we have found the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        # Check if the current prime number is divisible by any of the numbers from 2 to its square root\n        for j in range(2, int(current_prime**0.5) + 1):\n            if current_prime % j == 0:\n                # If the current prime number is divisible by any of the numbers from 2 to its square root,\n                # skip to the next iteration of the loop\n                break\n        else:\n            # If the loop completes without finding a divisor, the current prime number is a newman\u2013shanks\u2013williams prime number\n            count += 1\n        # Increment the index of the current prime number and reset the variable to the next prime number\n        i += 1\n        current_prime = i * (i + 1)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list to store prime numbers\n    prime_list = []\n\n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n+1):\n\n        # Check if i is prime using the prime number function\n        if is_prime(i):\n\n            # Check if the next number i+1 is prime using the prime number function\n            if is_prime(i+1):\n\n                # Check if the sum of i and i+1 is prime using the prime number function\n                if is_prime(i+i+1):\n\n                    # If all checks pass, add i and i+1 to the prime_list\n                    prime_list.append(i)\n                    prime_list.append(i+1)\n\n    # Return the nth prime number in the prime_list\n    return prime_list[n-2]\n\n\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is equal to 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # Loop through all numbers from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n\n        # If the number is divisible by i, it is not prime\n        if num % i == 0:\n            return False\n\n    # If we made it through the loop without finding a divisor, the number is prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n\n    newman_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    if n <= len(newman_primes):\n        return newman_primes[n-1]\n    else:\n        return \"The maximum number of newman-shanks-williams primes is 100.\""
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a list to store the prime numbers\n    primes = []\n\n    # Check for 2 as the first prime number\n    primes.append(2)\n\n    # Check for odd numbers as the first prime number\n    for i in range(3, n+1, 2):\n        primes.append(i)\n\n    # Check for even numbers as the first prime number\n    for i in range(4, n+1, 2):\n        primes.append(i)\n\n    # Use a loop to find the rest of the prime numbers\n    i = 7\n    while i <= n:\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n\n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(n):\n        count = 0\n        num = 1\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    return newman_shanks_williams(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a, b = 0, 1\n    while True:\n        if b == 0:\n            a += 1\n            b = a\n        elif b == 1:\n            break\n        else:\n            a += 1\n            b = 0\n    \n    i = 0\n    while i < n:\n        if is_prime(b):\n            i += 1\n            if i == n:\n                return b\n    \n    return None\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Function to check if a number is a prime number using the trial division method\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize the counter variable\n    count = 0\n\n    # Check if the given number is a prime number\n    if is_prime(n):\n        return n\n\n    # Loop through numbers from 2 to n-1\n    for i in range(2, n):\n        # Check if the current number is a newman-shanks-williams prime number\n        if is_prime(i) and is_prime(i+2) and i+2 == i**2:\n            count += 1\n            # If the count reaches n, return the nth newman-shanks-williams prime number\n            if count == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Base case: n is already a prime number\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n\n    # Initialize a list to store the prime numbers found so far\n    prime_list = [2, 3]\n\n    # Loop through the remaining numbers from 4 to n\n    for i in range(4, n+1):\n        # Check if i is a newman\u2013shanks\u2013williams prime number\n        is_prime = True\n        for j in prime_list:\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is a newman\u2013shanks\u2013williams prime number, add it to the list\n        if is_prime:\n            prime_list.append(i)\n\n    # Return the nth prime number in the list\n    return prime_list[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        i = 2\n        while i <= n:\n            if is_prime(i):\n                prime_factors = factorize(i)\n                if len(prime_factors) == 1:\n                    return i\n            i += 1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length!\")\n        return\n    \n    # Initialize an empty tuple to store the result\n    result_tup = ()\n    \n    # Perform element-wise division and append the result to the result_tup\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    # Return the result_tup\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # perform the division operation element-wise\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    # return the modified tuples\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length!\")\n    # Initialize a new tuple of length len(test_tup1)\n    result_tup = [0] * len(test_tup1)\n    # Perform element-wise division on the tuples and store the result in the result_tup\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] / test_tup2[i]\n    # Return the result_tup\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += ((test_tup1[i] / test_tup2[i],),)\n        except ZeroDivisionError:\n            result_tup += ((float('nan'),),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] / test_tup2[i],),)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Perform element-wise division\n    result_tup = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_len = len(list1)\n    num_parts = list_len // L\n    last_part_len = list_len % L\n    \n    if last_part_len == 0:\n        last_part_len = L\n    \n    part1 = list1[:num_parts*L]\n    part2 = list1[num_parts*L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts, where the length of the first part is L, and return the resulting lists in a tuple.\n    \"\"\"\n    n = len(lst)\n    if n < L:\n        raise ValueError(\"The length of the list must be greater than or equal to L.\")\n    elif L == 0:\n        return (lst, [])\n    else:\n        mid = n // 2\n        return (lst[:mid], lst[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid = len(list1)//2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    mid = L // 2\n    first_part = list1[:mid]\n    second_part = list1[mid:]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    half = len(list1) // 2\n    first_part = list1[:half]\n    second_part = list1[half:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        first_part = list1[:L]\n        second_part = list1[L:]\n    else:\n        first_part = list1[:(L+1)]\n        second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if n < L:\n        raise ValueError(\"List is too short\")\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError(\"Length of first part should be less than or equal to the length of the original list\")\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    list1_length = len(list1)\n    if list1_length < L:\n        raise ValueError(\"The length of the input list must be at least L.\")\n    \n    list1_first_part = list1[:L]\n    list1_second_part = list1[L:]\n    \n    return (list1_first_part, list1_second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Calculate the length of the first part\n    n = len(list1) // 2\n    \n    # Split the list into two parts\n    part1 = list1[:n]\n    part2 = list1[n:]\n    \n    return part1, part2"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (21 - h_age) * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age / 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = (2022 - h_age) * 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 - h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_age = 7 * h_age\n    return dogs_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    age = (2 * 365) - h_age\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(height):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert height to meters\n    height_meters = height * 0.0254\n    \n    # calculate dog's age in dog's years\n    dog_age = 7 * height_meters\n    \n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n\n    # Calculate dog's age in years\n    years = h_age * 7\n\n    # Return the dog's age in years\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Create an empty list to store the split lists\n    result = []\n    # Use a loop to iterate through the input list\n    for i in range(0, len(S), step):\n        # Create a new list containing only the i-th, i+n-th, i+2n-th, etc. elements\n        part = S[i:i+step]\n        # Add the new list to the result list\n        result.append(part)\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # Use a list comprehension to split the list into chunks of size step\n    result = [S[i:i+step] for i in range(0, len(S), step)]\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 1:\n        return [S]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    n = step * len(S)\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # create an empty list to hold the resulting lists\n    result = []\n    # loop through the list until we have split the entire list into the desired number of sublists\n    for i in range(0, len(S), step):\n        # create a new list that contains the i-th element and every n-th element until the end of the list\n        sublist = S[i:i+step]\n        # add the new sublist to the result list\n        result.append(sublist)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = S[:]  # make a copy of the original list to avoid modifying it\n    \n    # create an empty list to hold the resulting lists\n    result = []\n    \n    # split the original list into n-sized chunks\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    \n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Find the lateral surface area of a cube\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l  # Formula for lateral surface area of a cube\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n    "
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = (6 * l * l) + (12 * l) + (8 * l) + (12 * l * l)\n    return surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum variable\n        sum += i*i\n    \n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    else:\n        sum_of_squares = 0\n        for i in range(1, n+1, 2):\n            sum_of_squares += i*i\n        return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    num = 1\n    while num <= n:\n        sum += num*num\n        num += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    total_sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the odd number to the total sum\n        total_sum += i*i\n        \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the count variable\n    count = 1\n    \n    # Loop through the number of stars to find\n    for i in range(1, n+1):\n        # Add 2 to the count variable to get the number of spaces to add\n        spaces = (n//i) + 2\n        \n        # Add the appropriate number of spaces to the output string\n        output_str = \" \"*(spaces - 1) + \"*\"\n        \n        # Print the output string\n        print(output_str)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    result = \"\"\n    for i in range(1, n+1):\n        result += \"*\"\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (find_star_num(n-1) + 1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variable\n    star_num = 1\n\n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # multiply the current number by 2\n        star_num *= 2\n\n    # return the final value of star_num\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the counter variable\n    count = 1\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Add the counter to the current number\n        current_number = count + i\n\n        # If the current number is divisible by 3, print a star\n        if current_number % 3 == 0:\n            print(\"*\", end=\"\")\n        else:\n            print(\" \", end=\"\")\n\n        # Increment the counter\n        count += 1\n\n    # Print a newline character to move to the next line\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    for i in range(n):\n        print(\"*\" * num)\n        num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        print(\"*\" * count)\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    elif n == 2:\n        return '**'\n    elif n == 3:\n        return '***'\n    elif n == 4:\n        return '****'\n    elif n == 5:\n        return '*****'\n    else:\n        return 'Not a valid input.'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input: n should be a positive integer.\"\n\n    # initialize the value of the star number to 1\n    star_num = 1\n\n    # loop from 1 to n\n    for i in range(1, n + 1):\n        # add the value of the current iteration to the star number\n        star_num += i\n\n    # return the final value of the star number\n    return star_num"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_map = {\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72,\n        'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80,\n        'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88,\n        'Y': 89, 'Z': 90, 'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102,\n        'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110,\n        'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118,\n        'w': 119, 'x': 120, 'y': 121, 'z': 122, '0': 48, '1': 49, '2': 50, '3': 51,\n        '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57\n    }\n    return ascii_map.get(k, -1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_map = {\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73,\n        'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83,\n        'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90, 'a': 97, 'b': 98, 'c': 99,\n        'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,\n       'm': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117,\n        'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122\n    }\n    return ascii_map[k.upper()]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = -1\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            even_sum += num\n            even_index = i\n            if even_sum > 1000000000:\n                break\n    \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input, and returns the sum of all the even numbers at even positions.\n    \"\"\"\n    # Initialize a variable to store the sum of even numbers at even positions.\n    even_sum = 0\n    \n    # Loop through each element of the list.\n    for i in range(len(arr)):\n        # If the current element is even and its position is even, add it to the even_sum variable.\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    \n    # Return the sum of even numbers at even positions.\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            even_sum += num\n            even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        # Calculate the sum of i raised to the fifth power\n        power_sum = i**5\n\n        # Add the power_sum to the sum\n        sum += power_sum\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers\n\nn = int(input(\"Enter the value of n: \"))\nresult = even_Power_Sum(n)\nprint(\"The sum of the first {} even natural numbers that are raised to the fifth power is {}\".format(n, result))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i%2 == 0:\n            sum += i**(5)\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_power_sum = 0\n    for i in range(2, n+1, 2):\n        even_power_sum += i ** 5\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize a variable to store the sum of even numbers raised to the fifth power\n    power_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        # Calculate the sum of the i-th even natural number raised to the fifth power\n        power_sum += i**5\n\n    # Return the final sum of the even numbers raised to the fifth power\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tuple_obj in test_list:\n        rear_list.append(tuple_obj[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n\n    # loop through the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        # check if the indices match\n        if i in test_tup2:\n            test_tup1[i] -= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # If the index is within the bounds of the second tuple\n        if i < len(test_tup2):\n            # Subtract the two elements and append the result to the result_list\n            result_list.append(test_tup1[i] - test_tup2[i])\n        # If the index is out of bounds, append None to the result_list\n        else:\n            result_list.append(None)\n    # Return the result_list\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtraction = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            subtraction.append(test_tup1[i] - test_tup2[i])\n        else:\n            subtraction.append(0)\n    return subtraction"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the element of the first tuple by the element of the second tuple with the same index\n        test_tup1[i] -= test_tup2[i]\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_binomial_Coeff_Sum( n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        sum_even += math.comb(n, i-1)\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n + 1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return \"Error: n must be a positive integer.\"\n    if n == 1:\n        return 1\n    else:\n        n_half = int(n/2)\n        coeff_sum = 0\n        for i in range(n_half+1):\n            coeff_sum += math.comb(n, i) * 2**i\n        return coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(2, i+1):\n            if j%2 == 0:\n                sum += (binomial(i,j))\n    return sum\n\ndef binomial(n, k):\n    '''\n    Write a python function that takes in two positive integers n and k and returns the k-th term of the binomial coefficient C(n, k).\n    '''\n    num = 1\n    den = 1\n    for i in range(1, k+1):\n        num *= (n-i+1)\n        den *= i\n    return num // den\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of even index binomial coefficients is:\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables for sum of even index binomial coefficients and current coefficient\n    even_sum = 0\n    curr_coeff = 1\n    \n    # loop through the range of indices\n    for i in range(1, n+1):\n        # check if the current coefficient is even\n        if curr_coeff % 2 == 0:\n            # add the current coefficient to the sum of even index binomial coefficients\n            even_sum += curr_coeff\n        # multiply the current coefficient by the previous coefficient\n        prev_coeff = curr_coeff\n        curr_coeff = prev_coeff * i\n    \n    # return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(1, n+1):\n        even_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_coeffs += even_coeff\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            total += math.comb(n, i)\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        sum = 0\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                sum += math.comb(n, i)\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to 0\n    sum_even_binomial = 0\n\n    # Loop through the range from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of even index binomial coefficients for each i\n        sum_even_binomial += math.comb(n, i) * 2 * i\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_binomial"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    pi = 3.14159\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (r**3) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h  # Formula for volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * r * r * h / 3.0  # formula for volume of a cylinder\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r * r * h / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume of the cylinder using the formula: V = (1/3) * pi * r^2 * h\n    V = (1/3) * 3.14 * r**2 * h\n    \n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # create an empty dictionary to store the filtered entries\n    filtered_dict = {}\n    # loop through the dictionary's entries\n    for key, value in dict.items():\n        # if the value is greater than or equal to n, add the entry to the filtered dictionary\n        if value >= n:\n            filtered_dict[key] = value\n    # return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            if test_tup[i] < test_tup[i-1]:\n                break\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) ** 2 - 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i * (i+1)\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Initialize the variable `decagonal_num` to 0\n    decagonal_num = 0\n    \n    # Loop through each number between 1 and n\n    for i in range(1, n+1):\n        # Calculate the sum of the squares of the numbers between 1 and i\n        decagonal_sum = (i*i) + (i*i*2) + (i*i*3)\n        # Add the sum to the `decagonal_num` variable\n        decagonal_num += decagonal_sum\n        \n    # Return the value of `decagonal_num`\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize a variable to store the sum of the squares of odd numbers from 1 to n\n    odd_squares_sum = 0\n    \n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum\n        odd_squares_sum += i*i\n    \n    # return the decagonal number\n    return odd_squares_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n**2) - 6 * n + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i * (i+1)\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal_num = 1\n    while i <= n:\n        decagonal_num = decagonal_num + (10*i-5)\n        i = i + 1\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decimal = n\n    binary = 0\n    while decimal > 0:\n        binary += decimal % 2\n        decimal //= 10\n    if binary == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n and returns True if n is a decagonal number, otherwise False.\n    '''\n\n    def decagonal_formula(n):\n        return n * (3 * n - 1) // 2\n\n    return n == decagonal_formula(n)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Loop through the array and check if the element is equal to the item\n    for index, value in enumerate(dlist):\n        if value == item:\n            # If the element is found, return a tuple containing a boolean True and the index position\n            return (True, index)\n    # If the element is not found, return a tuple containing a boolean False and -1\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        print(\"All elements are unique!\")\n    else:\n        print(\"Not all elements are unique.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(test_list)\n    \n    # Check if the length of the unique_set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set to keep track of unique elements\n    unique_set = set()\n\n    # iterate over the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # check if the set has the same size as the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all its elements are unique and False otherwise.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # iterate over the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n    # if the length of the set is equal to the length of the list, all elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Create an empty list to store the result\n    result = []\n    # Compare each element of the two lists and append the difference to the result\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    # subtract each element of the lists\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n\n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # If the digit is not already in the dictionary, add it with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # If the digit is already in the dictionary, increment its frequency by 1\n        else:\n            freq[digit] += 1\n\n    # Iterate through each digit in the dictionary\n    for digit in freq:\n        # Check if the frequency of the digit is greater than or equal to the digit itself\n        if freq[digit] > int(digit):\n            # If the frequency is greater than or equal to the digit itself, return False\n            return False\n\n    # If all digits have a frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10\n    \n    # Count the frequency of each digit in the integer\n    for i in str(n):\n        freq[int(i)] += 1\n        \n    # Check if each digit's frequency is less than or equal to itself\n    for i in freq:\n        if i > i:\n            return False\n        \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10\n\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    for i in range(1, 10):\n        if freq[i] > 1:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n    # loop through each digit in the number\n    for i in str(n):\n        # check if the digit is already in the dictionary\n        if i in freq:\n            # increment the frequency count of the digit\n            freq[i] += 1\n        else:\n            # otherwise, add the digit to the dictionary and set its frequency count to 1\n            freq[i] = 1\n    # loop through each digit in the dictionary\n    for i in freq:\n        # check if the frequency of the digit is greater than the digit itself\n        if freq[i] > int(i):\n            # if it is, return False (indicating that the number is invalid)\n            return False\n    # if all digits pass the frequency check, return True (indicating that the number is valid)\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    for i in range(10):\n        freq[i] = 0\n    \n    # count the frequency of each digit in the number\n    while n > 0:\n        digit = n % 10\n        freq[digit] += 1\n        n //= 10\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for i in freq:\n        if freq[i] > i or (i == 0 and freq[i] > 9):\n            return False\n    \n    # all digits have frequency less than or equal to themselves\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    count = [0] * 10\n\n    for digit in str(n):\n        count[int(digit)] += 1\n\n    for i in range(1, 10):\n        if count[i] > 0 and count[i] > count[i - 1]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself, otherwise it returns False.\n    '''\n    digits = [int(digit) for digit in str(n)] # Convert the integer to a list of digits\n    freq = {} # Initialize a dictionary to store the frequency of each digit\n    \n    # Count the frequency of each digit in the integer\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n            \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n            \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of each digit\n    digit_freq = {}\n    # loop through each digit in the number and update the dictionary with its frequency\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # loop through each digit in the dictionary and check if its frequency is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    # If the list is empty, return True\n    if len(list) == 0:\n        return True\n\n    # If the first item in the list is equal to the element, check the rest of the list\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element as arguments and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'\\babb\\w{2,3}\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        print(\"The string contains 'a' followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain 'a' followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'(?=.*a)(?=.*b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?=\\s*(b){2,3})\\w+')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?=.*a)(?=.*b{2,3})'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"ab{2,3}\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Define a function to find the largest sum of a contiguous subarray\n    def max_sub_array_sum(arr, n):\n        max_sum = float('-inf')\n        current_sum = 0\n        for i in range(n):\n            current_sum += arr[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n            elif current_sum < 0:\n                current_sum = 0\n        return max_sum\n\n    # Create a modified array by repeating the given array k times\n    modified_arr = [0]*(n*k)\n    for i in range(n):\n        for j in range(k):\n            modified_arr[i*k+j] = a[i]\n\n    # Find the largest sum of a contiguous subarray in the modified array\n    max_modified_sum = max_sub_array_sum(modified_arr, n*k)\n\n    # Find the largest sum of a contiguous subarray in the original array\n    max_original_sum = max_sub_array_sum(a, n)\n\n    # Return the maximum of the two sums\n    return max(max_modified_sum, max_original_sum)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes a list 'a' of size 'n' and an integer 'k' as input. \n    The function returns the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    \n    # Iterate over the array 'n' times\n    for i in range(n):\n        # Append the first element of the array to the temporary sum\n        temp_sum += a[i]\n        # Check if the temporary sum is greater than the maximum sum so far\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        \n        # If the temporary sum is greater than the sum of the first k elements of the array,\n        # then remove the element at the beginning of the array and continue the process\n        if temp_sum > sum(a[:i+1]):\n            temp_sum -= a[i]\n            \n    # Return the maximum sum of the repeated array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Calculate the sum of the first k elements of the array\n    first_sum = sum(a[:k])\n\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = first_sum\n    current_sum = first_sum\n\n    # Iterate through the array from index k to the end\n    for i in range(k, n):\n        # Add the next element to the current sum and subtract the previous element\n        current_sum += a[i] - a[i-k]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the result with the first element of the array\n    max_sum = a[0]\n    \n    # Calculate the sum of the first k elements of the array\n    sum_of_first_k_elements = sum(a[:k])\n    \n    # Initialize the sum of the sub-array with the first element of the array\n    current_sub_array_sum = a[0]\n    \n    # Iterate through the remaining elements of the array\n    for i in range(1, n):\n        # If the sum of the sub-array is greater than the sum of the first k elements, update the max_sum\n        if current_sub_array_sum > sum_of_first_k_elements:\n            max_sum = current_sub_array_sum\n        \n        # Update the sum of the sub-array with the next element of the array\n        current_sub_array_sum += a[i]\n        \n        # Update the sum of the first k elements with the next element of the array\n        sum_of_first_k_elements += a[i]\n        \n    # Return the max_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a copy of the original array to avoid modifying the original array\n    modified_array = a.copy()\n\n    # Use sliding window technique to find the maximum subarray sum that contains all the elements in the modified array\n    max_sum = float('-inf')\n    start = 0\n    end = 0\n    while end < n:\n        # Add the current element to the sum of the subarray formed by the current window\n        current_sum = modified_array[end]\n        for i in range(k):\n            # Add the same element k times to the modified array to form the repeating element\n            modified_array.append(current_sum)\n\n        # Calculate the maximum sum of the current window\n        max_sum = max(max_sum, current_sum)\n\n        # Move the end pointer to the right by one to form a new window\n        end += 1\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Find the maximum sum of a contiguous array that is not repeated\n    max_sum = max(a)\n\n    # Create a modified array by repeating the given array k times\n    modified_array = [0] * (2 * n)\n    for i in range(n):\n        modified_array[2 * i] = a[i]\n\n    # Find the maximum sum of a contiguous array that is not repeated in the modified array\n    max_modified_sum = max_sum\n\n    # Calculate the maximum sum of a contiguous array that is not repeated in the modified array\n    for i in range(2 * n):\n        max_modified_sum = max(max_modified_sum, modified_array[i])\n\n    # Find the maximum sum of a contiguous array that is repeated k times\n    repeated_array = [0] * n\n    for i in range(n):\n        repeated_array[i] = a[i] * k\n\n    max_repeated_sum = max(max_modified_sum, max(repeated_array))\n\n    return max_repeated_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "Let's write the Python script for the above approach.<|im_sep|>"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_sum = 0\n\n    for i in range(k):\n        repeated_sum += a[0]\n        current_sum += a[0]\n\n    max_sum = max(max_sum, current_sum)\n\n    for i in range(n-k):\n        repeated_sum -= a[i]\n        current_sum -= a[i]\n        repeated_sum += a[i+k]\n        current_sum += a[i+k]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the first k elements of the array\n    sum_first_k = sum(a[:k])\n    \n    # Initialize the maximum sum to be the sum of the first k elements\n    max_sum = sum_first_k\n    \n    # Initialize the current sum of the array to be the sum of the first k elements\n    cur_sum = sum_first_k\n    \n    # Iterate over the remaining elements of the array\n    for i in range(k, n):\n        # Calculate the sum of the current element and the previous sum\n        cur_sum = cur_sum + a[i] - a[i-k]\n        \n        # Update the maximum sum if the current sum is greater\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(k):\n            if i == 0 or j == 0:\n                max_sum = max(max_sum, a[j])\n            else:\n                max_sum = max(max_sum, a[j] + max_sum)\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    sum_of_squares = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current number to the sum of squares\n        sum_of_squares += i*i\n    \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum_of_squares += count*count\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 0\n    \n    while i < n:\n        sum_of_squares += i**2\n        i += 2\n    \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of squares of even natural numbers\n    even_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of each even natural number to the sum\n        even_sum += i**2\n    \n    # Return the sum of squares of even natural numbers\n    return even_sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = [len(sublist) for sublist in list1]\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # create a dictionary to store the length of each sublist\n    sublist_lengths = {}\n    # iterate over each sublist in the list\n    for sublist in list1:\n        # iterate over each element in the sublist\n        for element in sublist:\n            # if the element is already in the dictionary, increment its count\n            if element in sublist_lengths:\n                sublist_lengths[element] += 1\n            # if the element is not in the dictionary, add it with a count of 1\n            else:\n                sublist_lengths[element] = 1\n    # create a list to store the maximum length sublists\n    max_sublists = []\n    # iterate over each element in the dictionary\n    for length, count in sublist_lengths.items():\n        # if the count is greater than 1, the sublist has the maximum length\n        if count > 1:\n            # create a list with the length and the sublist itself\n            sublist_with_length = [length]\n            # iterate over each element in the sublist\n            for element in sublist:\n                # if the element has the same length as the sublist, add it to the list\n                if len(element) == length:\n                    sublist_with_length.append(element)\n            # add the sublist with its length to the max_sublists list\n            max_sublists.append(sublist_with_length)\n    # return the list of maximum length sublists\n    return max_sublists"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_length = max(len(lst), max_length)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        max_length = 0\n        for item in sublist:\n            if len(str(item)) > max_length:\n                max_length = len(str(item))\n        max_length_list.append(max_length)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for i in range(len(list1)):\n        lengths.append(len(list1[i]))\n    return max(lengths)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def helper(l, count):\n        if count == 0:\n            return 1\n        elif count < 0:\n            return 0\n\n        if l[0] == l[1]:\n            return helper(l[2:], count - 2) + helper(l[2:], count - 1)\n        else:\n            return helper(l[2:], count - 1)\n\n    return helper(range(n), k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize an empty list to store the number of ways of painting fence\n    ways = []\n\n    # Iterate from 1 to n-1\n    for i in range(1, n):\n        # Iterate from 1 to k-1 and check if the current color is equal to the previous color\n        for j in range(1, k):\n            # Add the number of ways of painting the fence up to i-1 posts and k-j colors to the list of ways\n            ways.append(count_no_of_ways(i-1, j) + count_no_of_ways(i-1, j-1))\n\n    # Return the sum of all the ways of painting the fence\n    return sum(ways)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    # create a 2D array to store the number of ways to paint the fence\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # base case: if the fence has only 1 post and 1 color, there is only 1 way to paint it\n    if n == 1 and k == 1:\n        return 1\n    \n    # base case: if the fence has only 1 post and k colors, there is only 0 ways to paint it\n    if n == 1:\n        return 0\n    \n    # base case: if the fence has only k posts and 1 color, there is only 0 ways to paint it\n    if k == 1:\n        return 0\n    \n    # fill the dp array using dynamic programming\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            if i % 2 == 0 and j % 2 == 0:\n                dp[i][j] = dp[i-2][j-2]\n            elif i % 2 == 1 and j % 2 == 1:\n                dp[i][j] = dp[i-2][j-2]\n            else:\n                dp[i][j] = dp[i-2][j] + dp[i][j-2]\n                \n    # return the value in the last row of the dp array\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways of painting the fence for each color combination\n    ways = [[0] * (k+1) for _ in range(n+1)]\n    ways[0][0] = 1\n\n    # Iterate over all the possible combinations of the colors\n    for i in range(n):\n        for j in range(k+1):\n            # If the current color is different from the previous one, then we can paint the fence\n            if j > 0:\n                ways[i+1][j] = ways[i][j] + ways[i][j-1]\n                # If the current color is the same as the previous one, then we can paint the fence with the same number of posts\n                if j > 1 and ways[i+1][j] == ways[i][j]:\n                    ways[i+1][j] += ways[i][j-2]\n\n    # Return the final answer\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # initialize 2D table dp\n    dp = [[1 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1,n+1):\n        dp[i][1] = 1 # only one way to paint the first post in each color\n    for i in range(1,n+1):\n        for j in range(2,k+1):\n            if j == 2: # only one way to paint the last post with 2 colors\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j] # either choose to paint the previous post with the same color or with the current post with a different color\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    def helper(n, k, color1, color2, color3):\n        # base case: if we have 0 posts, we have one solution\n        if n == 0:\n            return 1\n        \n        # we have k colors left, so we can use the current color\n        if k == 1:\n            return helper(n-1, k, color1, color2, color3)\n        \n        # we have 2 colors left, so we need to use one color to paint the current post\n        else:\n            # we can use the current color to paint the current post\n            ways1 = helper(n-1, k-1, color1, color2, color3)\n            \n            # we can use color1 or color2 to paint the current post\n            ways2 = helper(n-1, k, color1, color2, color3)\n            \n            return ways1 + ways2\n    \n    # call the helper function with initial conditions\n    return helper(n, k, 1, 2, 3)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If the number of colors is less than 2, then the fence cannot be painted\n    if k < 2:\n        return 0\n    \n    # If the number of posts is 1, then there is only one way to paint the fence\n    if n == 1:\n        return 1\n    \n    # Initialize a 2D array to store the number of ways of painting the fence for each pair of colors\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # Initialize the first row and first column\n    for i in range(2, k+1):\n        dp[1][i] = 1\n        \n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            # If the colors are different\n            if j - 1!= j:\n                # Count the number of ways of painting the fence with i-1 posts and j-1 colors\n                dp[i][j] += dp[i-1][j-1]\n            \n            # If the colors are the same\n            else:\n                # Count the number of ways of painting the fence with i-1 posts and j colors\n                dp[i][j] += dp[i-1][j]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * (k+1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, k+1):\n        dp[i] = dp[i-1] + dp[i-2]\n        \n    for i in range(n, k, -1):\n        dp[i] += dp[i-1]\n        \n    return dp[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # create a 2D array to store the number of ways for each combination of colors\n    ways = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # initialize the first row and column of the array\n    ways[0][0] = 1\n    ways[0][1] = 1\n\n    # fill the rest of the array using the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # if both adjacent posts have the same color, add the number of ways of painting the fence without the two adjacent posts\n            if j == 2:\n                ways[i][j] = ways[i-1][j-1]\n            # if the first post has the same color, add the number of ways of painting the fence without the first post\n            elif j == 1:\n                ways[i][j] = ways[i-1][j]\n            # if the second post has the same color, add the number of ways of painting the fence without the second post\n            elif j == k:\n                ways[i][j] = ways[i-1][j-1]\n            # if there is no two adjacent posts with the same color, add the number of ways of painting the fence without the two adjacent posts\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1] + ways[i-1][j-2]\n\n    # return the number of ways of painting the fence\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a dictionary to store the count of ways for each combination of colors\n    ways = {}\n    \n    # Iterate through all possible pairs of colors in the fence\n    for i in range(k):\n        for j in range(i+1, k):\n            # Compute the number of ways for this combination of colors\n            ways[(i,j)] = count_no_of_ways(n-1, k-1)\n            \n            # Check if this combination of colors has at most 2 adjacent colors with the same color\n            if i == j:\n                ways[(i,j)] = ways[(i,j)] // 2\n                ways[(i,j)] += ways[(i,j)] // 2\n            \n            # Update the count of ways for this combination of colors\n            ways[(i,j)] = ways[(i,j)] * (n-2) + ways[(i,j)] * (k-2) + ways[(i,j)] * (k-3)\n    \n    # Return the total count of ways\n    return ways[(0,k-1)]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient by dividing the larger number by the smaller number\n    quotient = n // m\n    # Calculate the remainder using modulo operator\n    remainder = n % m\n    # Check if the remainder is zero, if yes then quotient is correct otherwise subtract the quotient from the smaller number\n    if remainder == 0:\n        return quotient\n    else:\n        return find(m, remainder)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    if quotient * m!= n:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # calculate the quotient\n    quotient = n // m\n\n    # round down the quotient to the nearest integer using the floor division operator //\n    quotient = quotient - (quotient % 1)\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n//m # integer division to find quotient\n    if n%m!= 0: # check if the remainder is not zero\n        result += 1 # add 1 to the quotient if the remainder is not zero\n    return result # return the result"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return int(n/m)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w+h)/2\n    # Calculate the area of the triangle\n    area = math.sqrt(s*(s-w)*(s-h))\n    # Calculate the second side of the triangle\n    side_2 = math.sqrt(s*s-area)\n    # Return the third side of the triangle\n    return side_2"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w+h)**2 - (w**2-h**2)\n    c = math.sqrt(s)\n    third_side = round((w+c)/2,2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the third side of a right angled triangle given the length of two sides.\n    '''\n\n    # Calculate the square of the semi-perimeter\n    s = (w**2 + h**2) / 4\n\n    # Calculate the cube root of the square\n    c = math.sqrt(s)\n\n    # Calculate the other side of the triangle\n    b = (w + c) / 2\n\n    # Return the third side\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using the Pythagorean theorem to calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    # Using the Law of Cosines to find the opposite side of the right angled triangle\n    cosine_opposite = (w**2 + h**2 - hypotenuse**2) / (2*w*h)\n    # Using the Law of Cosines to find the adjacent side of the right angled triangle\n    cosine_adjacent = (w**2 + h**2 + hypotenuse**2) / (2*w*h)\n    # Using the Law of Cosines to find the angle opposite the right angled triangle\n    angle_opposite = math.acos(cosine_opposite)\n    # Using the Law of Cosines to find the angle adjacent to the right angled triangle\n    angle_adjacent = math.acos(cosine_adjacent)\n    # Using the Law of Cosines to find the angle opposite of the adjacent side\n    angle_opposite_adjacent = math.acos((w**2 + h**2 - hypotenuse**2) / (2*w*hypotenuse))\n    # The third side of the right angled triangle is the length of the hypotenuse of the right angled triangle\n    third_side = hypotenuse\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = math.sqrt(w**2 + h**2)\n    side2 = math.sqrt(w**2 + (h**2)/2)\n    side3 = w\n    \n    return side3"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the second side\n    s = math.sqrt(w**2 + h**2)\n\n    # calculate the third side of the right angled triangle\n    result = math.sqrt(s**2 - w**2)\n\n    return result"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    c = math.sqrt(s**2 - w**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter\n    s = (w+h)/2\n    \n    # calculate the area\n    area = (math.sqrt(3)*w**2)/4\n    \n    # calculate the third side\n    side3 = math.sqrt(s**2 - area)\n    \n    return side3"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max_val to the first element in the list\n    max_val = listval[0]\n    # Loop through the list and update max_val if the current element is greater\n    for val in listval[1:]:\n        if val > max_val:\n            max_val = val\n    # Return the maximum value found in the list\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to keep track of the maximum value seen so far\n    max_so_far = None\n    \n    # Loop through the list and compare each value to the current maximum\n    for val in listval:\n        if max_so_far is None or val > max_so_far:\n            max_so_far = val\n    \n    # Return the maximum value\n    return max_so_far"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize variables\n    max_val = None\n    curr_type = None\n\n    # Iterate through the list and find the maximum value\n    for item in listval:\n        if curr_type!= type(item):\n            # If the type of the current item is different from the previous type,\n            # then we have reached a new type of value\n            # Update the max_val and curr_type variables accordingly\n            if max_val is None or item > max_val:\n                max_val = item\n                curr_type = type(item)\n            elif item == max_val:\n                continue  # Skip the current item if its value is already the maximum value\n        else:\n            # If the type of the current item is the same as the previous type,\n            # then we have reached a single value that is greater than or equal to the maximum value\n            # Update the max_val variable accordingly\n            if item >= max_val:\n                max_val = item\n\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # initialize the maximum value to the first value in the list\n    max_val = listval[0]\n\n    # loop through the rest of the list\n    for val in listval:\n        # if the current value is greater than the maximum value, update it\n        if val > max_val:\n            max_val = val\n\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n            \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], (int, float)):\n        return max(listval)\n    else:\n        return max_val(list(filter(lambda x: isinstance(x, int), listval)))"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max_val to the first value in the list\n    max_val = listval[0]\n    # Loop through the list and compare each value to max_val\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_div(10)) # Output: 17"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Check if the input is a positive integer\n    if type(number)!= int or number < 1:\n        return None\n    # Calculate the sum of all divisors\n    divisor_sum = 1\n    for i in range(2, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    divisors = []\n    divisor = 1\n\n    while divisor * divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [i for i in range(1, number+1) if number % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Step 1: Sort the array in ascending order\n    arr.sort()\n\n    # Step 2: Initialize count variable to 0\n    count = 0\n\n    # Step 3: Iterate through the array\n    for i in range(len(arr)):\n        # Step 3.1: Check if the current element is less than the previous element\n        if i > 0 and arr[i] < arr[i-1]:\n            # Step 3.2: If it is, increment the count variable\n            count += i - 1\n            \n        # Step 3.3: Update the count variable for the current element\n        count += 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    The function uses the Merge Sort algorithm to sort the array, which has an average time complexity of O(n log n).\n    Then, it iterates through the sorted array and counts the number of inversions by keeping track of the two pointers left and right.\n    The inversion count is the sum of the two pointers.\n    '''\n\n    # Sort the array using Merge Sort algorithm\n    merge_sort(arr)\n\n    # Initialize left and right pointers to 0\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize inversion count to 0\n    inv_count = 0\n\n    # Iterate through the sorted array and count inversions\n    while left < right:\n        # Check if the current element in the left sub-array is greater than the current element in the right sub-array\n        if arr[left] > arr[right]:\n            # Increment inversion count by the difference between the left and right pointers\n            inv_count += right - left\n            # Move the left pointer to the right of the current element\n            left += 1\n        else:\n            # Move the right pointer to the right of the current element\n            right -= 1\n\n    # Return the final inversion count\n    return inv_count\n\n\ndef merge_sort(arr):\n    '''\n    This function takes an array as input and sorts it using the Merge Sort algorithm.\n    The algorithm has an average time complexity of O(n log n).\n    '''\n\n    # Base case: if the array has only one element, it is already sorted\n    if len(arr) <= 1:\n        return arr\n\n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    # Sort the left and right halves of the array recursively\n    merge_sort(left_half)\n    merge_sort(right_half)\n\n    # Merge the two sorted halves of the array\n    i = j = k = 0\n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] < right_half[j]:\n            arr[k] = left_half[i]\n            i += 1\n        else:\n            arr[k] = right_half[j]\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of the left sub-array to the array\n    while i < len(left_half):\n        arr[k] = left_half[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of the right sub-array to the array\n    while j < len(right_half):\n        arr[k] = right_half[j]\n        j += 1\n        k += 1"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # To count inversions, we need to sort the array in non-decreasing order\n    arr.sort()\n    # Count the number of inversions\n    count = 0\n    for i in range(1, n):\n        count += (n-i)\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in non-decreasing order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += n - i - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n    for i in range(1, n): \n        for j in range(0, i): \n            if arr[i] < arr[j]: \n                inv_count += i - j \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion occurs when two elements of the array are in the wrong order.\n    '''\n\n    # check if array is empty or has only one element\n    if len(arr) <= 1:\n        return 0\n\n    # partition the array around a pivot element\n    pivot = arr[0]\n    left = [x for x in arr[1:] if x <= pivot]\n    right = [x for x in arr[1:] if x > pivot]\n\n    # count the inversions in the left and right sub-arrays recursively\n    inversions = get_Inv_Count(left) + get_Inv_Count(right)\n\n    # count the number of inversions in the pivot-partitioned array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if left[i] > right[j-i-1]:\n                inversions += 1\n\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    # Sort the array in ascending order \n    arr.sort()\n    # Count the inversions \n    count = 0\n    for i in range(1, n): \n        j = 0\n        while j < i: \n            if arr[i] < arr[j]: \n                count += i - j \n            j += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    inv_count = 0\n    sorted_arr = merge_sort(arr)\n    for i in range(1, len(sorted_arr)):\n        if sorted_arr[i] < sorted_arr[i-1]:\n            inv_count += len(sorted_arr) - i\n        else:\n            break\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n\n\ndef get_Inv_Count(arr):\n    arr = merge_sort(arr)\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Step 1: Sort the array \n    arr.sort() \n\n    # Step 2: Count inversions \n    count = 0 \n    for i in range(len(arr) - 1): \n        if arr[i] > arr[i + 1]: \n            count += len(arr) - i - 1 \n\n    return count "
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # initialize an empty list to store the flattened list\n    flattened_list = []\n    # loop through each element in the original list\n    for elem in list1:\n        # if the element is a list, recursively call the function on it\n        if isinstance(elem, list):\n            flattened_list.extend(flatten_list(elem))\n        # otherwise, append the element to the flattened list\n        else:\n            flattened_list.append(elem)\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a new flattened list.\n\n    :param lst: The input list to be flattened.\n    :return: A new flattened list.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    '''\n    A function to flatten a nested list structure.\n    '''\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        for j, val in enumerate(item):\n            max_agg[j] = max(max_agg[j], val)\n    return max_agg[0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for customer, amount in stdata:\n        # Update the maximum aggregate for the customer\n        max_agg[customer] = max(max_agg[customer], amount)\n\n    # Calculate the maximum aggregate across all customers\n    max_aggr = max(max_agg.values())\n\n    # Return the maximum aggregate across all customers\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    for student, marks in stdata:\n        max_sum[student] = max(max_sum[student], marks)\n    max_aggregate = max(max_sum.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for (date, amt) in stdata:\n        max_agg[date] += amt\n    max_agg_list = [max_agg[date] for date in max_agg]\n    return max_agg_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the number of transactions for each customer\n    num_transactions = defaultdict(int)\n    max_aggregate = 0\n    for i in range(len(stdata)):\n        num_transactions[stdata[i][0]] += 1\n        max_aggregate = max(max_aggregate, stdata[i][1])\n    for i in range(len(stdata)):\n        if num_transactions[stdata[i][0]] == 1:\n            max_aggregate = max(max_aggregate, stdata[i][1])\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initialize a dictionary to store the maximum aggregate for each stock\n    max_aggs = defaultdict(int)\n\n    # loop over the list of tuples\n    for stock, price in stdata:\n        # update the maximum aggregate for this stock\n        max_aggs[stock] = max(max_aggs[stock], price)\n\n    # return the maximum aggregate for each stock\n    return {k:v for k,v in max_aggs.items()}"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    st_max = defaultdict(int)\n    for name, cost, quantity in stdata:\n        st_max[name] += cost * quantity\n    return max(st_max.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n\n    # iterate over the list of tuples\n    for item in stdata:\n        # update the frequency of the item in the defaultdict\n        freq[item[0]] += item[1]\n\n    # initialize the maximum aggregate\n    max_agg = 0\n\n    # iterate over the items in the defaultdict\n    for item, freq in freq.items():\n        # calculate the current aggregate and compare with the maximum aggregate\n        agg = freq * item\n        if agg > max_agg:\n            max_agg = agg\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n    for s, t in stdata:\n        max_aggr[s] += t\n    # Find the maximum value in the dictionary\n    max_val = max(max_aggr.values())\n    # Return the maximum value as the maximum aggregate\n    return max_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    max_dict = defaultdict(int) # create an empty dictionary to store maximum aggregate\n\n    for item in stdata:\n        # iterate over each tuple and update the max_dict accordingly\n        if item[0] in max_dict:\n            max_dict[item[0]] += item[1] # add the value to the existing key in the dictionary\n        else:\n            max_dict[item[0]] = item[1] # add the key-value pair to the dictionary if it doesn't exist yet\n\n    # get the maximum aggregate from the dictionary and return it\n    return max(max_dict.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n-1), 2**n):\n        bit_sum = 0\n        for j in range(n):\n            bit_sum += (i >> j) & 1\n        if bit_sum == (i & ((1 << n) - 1)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n-1), 2**n):\n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(i-2**(n-1)-1)[2:].zfill(n)\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n):\n        temp = i\n        while temp:\n            if temp & 1 == 0:\n                temp >>= 1\n            else:\n                count += 1\n                temp >>= 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(j)[2:].zfill(n)):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Helper function to check if a given binary number is palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    # Helper function to check if a given binary sequence is palindrome\n    def is_palindrome_seq(seq):\n        return is_palindrome(int(seq, 2))\n    \n    # Initialize the count variable to zero\n    count = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Check if the first n bits are palindrome\n        if is_palindrome_seq(bin(i)[2:][-n:]):\n            # Check if the last n bits are palindrome\n            if is_palindrome_seq(bin(i)[2:][n:]):\n                # Increment the count if the two conditions are met\n                count += 1\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Calculate the sum of the first n bits\n    first_sum = 0\n    for i in range(n):\n        first_sum += 2\n\n    # Calculate the sum of the last n bits\n    last_sum = 0\n    for i in range(n, 2 * n):\n        last_sum += 2\n\n    # Count the number of sequences\n    count = 0\n    for i in range(1, 2 ** n):\n        binary = bin(i)[2:]  # Convert to binary and remove the '0b' prefix\n\n        if int(binary[:n]) == first_sum and int(binary[n:]) == last_sum:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if int(binary[:n]) == int(binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in bits[:n]) == sum(int(bit) for bit in bits[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    i = 0\n    while i < (1 << n):\n        j = 0\n        while j < (1 << n):\n            if i >> j & 1 == 0 and j > i >> n & 1:\n                count += 1\n            j += 1\n        i += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        num = bin(i)[2:].zfill(2*n) \n        if sum(int(bit) for bit in num[:n]) == sum(int(bit) for bit in num[-n:]): \n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n        else:\n            depth = 0\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [(d, 0)]\n    while stack:\n        item, depth = stack.pop()\n        if isinstance(item, dict):\n            stack.extend([(v, depth + 1) for k, v in item.items()])\n        else:\n            return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(map(lambda x: dict_depth(x), d.values()))\n    elif isinstance(d, list):\n        return 1 + max(map(lambda x: dict_depth(x), d))\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 1\n    else:\n        depth = 1\n        for v in d.values():\n            if isinstance(v, dict):\n                depth += dict_depth(v)\n        return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    \n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            dict_depth(value)\n            current_depth -= 1\n        elif isinstance(value, (list, tuple)):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n                    max_depth = max(max_depth, current_depth)\n                    dict_depth(item)\n                    current_depth -= 1\n                elif isinstance(item, (list, tuple)):\n                    for sub_item in item:\n                        if isinstance(sub_item, dict):\n                            current_depth += 1\n                            max_depth = max(max_depth, current_depth)\n                            dict_depth(sub_item)\n                            current_depth -= 1\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 0\n        for value in d.values():\n            if isinstance(value, dict):\n                sub_depth = dict_depth(value)\n                max_depth = max(max_depth, sub_depth + 1)\n            else:\n                max_depth += 1\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of ranges, the number of rotations, and an index. \n    It calculates the new index after the given number of rotations and returns the element at the new index.\n    '''\n    # Initialize the new index as the initial index\n    new_index = index\n    \n    # Perform the required rotations\n    for i in range(rotations):\n        # Calculate the new range\n        new_range = ranges[i]\n        \n        # Check if the new range is valid\n        if new_range[0] < 0 or new_range[1] > len(arr) - 1:\n            print(\"Invalid range\")\n            return\n        \n        # Calculate the start and end indices of the new range\n        start_index = new_range[0]\n        end_index = new_range[1]\n        \n        # Swap the elements at the start and end indices of the new range\n        arr[start_index], arr[end_index] = arr[end_index], arr[start_index]\n        \n        # Update the new range\n        new_range = [start_index, end_index]\n        \n        # Check if the new range is valid\n        if new_range[0] < 0 or new_range[1] > len(arr) - 1:\n            print(\"Invalid range\")\n            return\n        \n        # Update the new index\n        new_index = new_range[0]\n        \n        # Check if the new index is valid\n        if new_index < 0 or new_index > len(arr) - 1:\n            print(\"Invalid index\")\n            return\n    \n    # Return the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # calculate the number of elements to be rotated after the given index\n    rotated_elements = sum(ranges[i] for i in rotations)\n    # calculate the final index after the rotation\n    rotated_index = index - rotated_elements + 1\n    # check if the final index is within the array bounds\n    if rotated_index > len(arr):\n        return \"Element not found\"\n    else:\n        return arr[rotated_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a number of rotations, and an index.\n    The array is rotated in the given number of rotations and the element at the given index is found.\n    The function returns the element at the given index after the rotations.\n    \"\"\"\n\n    # Initialize the sum of the original array and the rotations array\n    total_sum = sum(arr) + sum(ranges)\n\n    # Initialize the index of the element in the rotated array\n    rotated_index = 0\n\n    # Iterate through the array and calculate the sum of the elements in each range\n    for i in range(len(ranges)):\n        range_sum = ranges[i][1] - ranges[i][0] + 1\n        total_sum -= range_sum\n\n    # Iterate through the rotated array and calculate the sum of the elements in each range\n    for i in range(rotations):\n        for j in range(len(arr)):\n            rotated_index = (rotated_index + 1) % (len(arr) * 2) - 1\n            if j + 1 in range(rotated_index, rotated_index + len(ranges[i][0]), len(ranges[i][0])):\n                total_sum += arr[j]\n\n    # Return the element at the given index after the rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    def find_Element_Helper(arr, ranges, rotations, index, start, end):\n        if start == end:\n            return arr[start]\n\n        mid = (start + end) // 2\n        if rotations == 1:\n            if index < mid:\n                return find_Element_Helper(arr, ranges, rotations, index, start, mid)\n            elif index == mid:\n                return arr[start]\n            else:\n                return find_Element_Helper(arr, ranges, rotations, index, mid, end)\n        elif rotations % 2 == 0:\n            if index < mid:\n                return find_Element_Helper(arr, ranges, rotations, index, start, mid)\n            elif index == mid:\n                return arr[start]\n            else:\n                return find_Element_Helper(arr, ranges, rotations, index, mid, end)\n        else:\n            if index < mid:\n                return find_Element_Helper(arr, ranges, rotations, index, mid, end)\n            elif index == mid:\n                return arr[start]\n            else:\n                return find_Element_Helper(arr, ranges, rotations, index, start, mid)\n\n    return find_Element_Helper(arr, ranges, rotations, index, 0, len(arr) - 1)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations_count = 0\n\n    for i in range(len(ranges)):\n        # Find the number of rotations to reach the desired index\n        rotations_count += (index - ranges[i][0] + rotations[i]) // rotations[i]\n\n        # Find the element after rotations\n        element = arr[rotations_count - 1]\n\n        # Check if the element is the desired index\n        if rotations_count == index:\n            return element\n\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list): A list of integers.\n    ranges (list): A list of tuples, each containing two integers, indicating the range of rotations to consider.\n    rotations (int): The number of rotations to perform.\n    index (int): The index of the element to find after the rotations.\n\n    Returns:\n    int: The element at the specified index after the specified number of rotations.\n    '''\n    # Initialize variables for the element at the given index and the element found after rotations\n    element_at_index = arr[index]\n    element_found_after_rotations = arr[0]\n\n    # Perform the specified number of rotations\n    for i in range(rotations):\n        # Find the element at the current index after the current rotation\n        next_index = (index + i) % len(arr)\n        element_at_next_index = arr[next_index]\n\n        # Update the element at the given index and the element found after rotations\n        if element_at_index < element_at_next_index:\n            element_at_index = element_at_next_index\n        elif element_at_index > element_at_next_index:\n            element_at_index = element_at_next_index\n        else:\n            element_at_index = None\n\n        # Update the element at the index found after rotations\n        element_found_after_rotations = element_found_after_rotations if element_found_after_rotations < element_at_next_index else element_at_next_index\n\n        # Check if we have found the element at the given index\n        if element_at_index is not None:\n            return element_at_index\n\n        # Check if we have found the element at the index found after rotations\n        if element_found_after_rotations is not None:\n            return element_found_after_rotations\n\n    # If we reach this point, the element was not found\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array 'arr', the number of rotations 'rotations', and the index 'index' as input.\n    The function then returns the element at the index after the number of rotations.\n    \"\"\"\n    # Calculate the element after rotations\n    temp = arr[index]\n    for i in range(rotations):\n        temp = arr[(i+index) % len(arr)]\n\n    # Find the element in the rotated array\n    for i in range(len(arr)):\n        if arr[i] == temp:\n            return i\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    def count_rotations(arr, ranges, rotations):\n        '''\n        Count the number of rotations required to find an element in an array.\n        '''\n        count = 0\n        while rotations > 0:\n            arr, ranges, rotations = rotate_array(arr, ranges, rotations)\n            count += 1\n        return count\n    \n    def rotate_array(arr, ranges, rotations):\n        '''\n        Rotate an array to the right by rotations number of times.\n        '''\n        for i in range(rotations):\n            arr.append(arr.pop(0))\n            for j in range(len(ranges)):\n                ranges[j].append(ranges[j].pop(0))\n        return arr, ranges, rotations-1\n    \n    def find_element(arr, ranges, index, count):\n        '''\n        Find an element in an array after rotations.\n        '''\n        if count == 0:\n            return arr[index]\n        else:\n            rotations = count-1\n            return find_element(arr, ranges, index, rotations)\n    \n    count = count_rotations(arr, ranges, rotations)\n    return find_element(arr, ranges, index, count)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the number of rotations required to reach the given index\n    rotation_count = 0\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            rotation_count += rotations[i]\n            index -= ranges[i]\n\n    # Calculate the final index after the specified rotations\n    final_index = index\n    for i in range(rotation_count):\n        final_index += arr.index(min(arr[final_index], arr[final_index + 1]))\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a list of rotations, and an index.\n    It returns the element at the given index after applying the rotations and ranges to it.\n    \"\"\"\n    # find the element at the given index\n    element = arr[index]\n    \n    # iterate over each rotation and range\n    for rotation, range_ in zip(rotations, ranges):\n        # rotate the element\n        element = element[rotation:] + element[:rotation]\n        \n        # find the element within the rotated range\n        element = element[range_[0]:range_[1]]\n    \n    return element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    pattern = re.compile(r'^p[a-z]*')\n    matches = re.findall(pattern, words)\n\n    if len(matches) < 2:\n        return 'No matches found'\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]+'\n    result = re.findall(pattern, words)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.'\n    return [word for word in words if re.match(pattern, word)]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if re.match('^[Pp]', words[i]):\n            return words[i:i+2]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p' and word not in result:\n            result.append(word)\n    if len(result) == 0:\n        return 'There are no words starting with letter p in the list.'\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+'\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+'\n    regex = re.compile(pattern)\n\n    p_words = regex.findall(words)\n    if len(p_words) < 2:\n        return None\n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+'\n    matches = re.findall(pattern,''.join(words))\n    if matches:\n        return matches\n    else:\n        return \"No words starting with 'p' found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    regex = re.compile(pattern)\n    matches = regex.findall(words)\n    if len(matches) == 0:\n        return None\n    else:\n        return matches[0] + \" \" + matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word, next(w for w in words if w!= word)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n\n    prefix_sum = [0] * (k + 1)\n\n    for i in range(1, k + 1):\n        prefix_sum[i] = max(a[index - i], prefix_sum[i - 1]) + a[index - i]\n\n    max_sum = prefix_sum[k]\n    for i in range(k + 1, n + 1):\n        prefix_sum[i] = max(a[i] + prefix_sum[i - 1], prefix_sum[i])\n        max_sum = max(max_sum, prefix_sum[i])\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:  # If k is after index\n        return max_sum_increasing_subseq(a, n, index - 1, k)  # Recursively call the function for k-1th element\n    else:\n        sum = 0\n        for i in range(index, k):  # Traverse the prefix from index to k-1\n            sum += a[i]\n        return sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n\n    for i in range(1, n + 1):\n        if i <= index:\n            dp[i] = max(a[i - 1] + dp[i - 1], dp[i - 1])\n        else:\n            dp[i] = max(dp[i - 1], dp[i - k])\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    max_sum = 0\n    current_sum = 0\n    prefix = [0] * n\n    prefix[0] = a[0]\n\n    for i in range(1, n):\n        if i == k:\n            current_sum = current_sum + a[i]\n            continue\n        if a[i] > a[index]:\n            current_sum = current_sum + a[i]\n        else:\n            current_sum = current_sum + a[index] - a[i]\n\n        prefix[i] = current_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    elif a[index] <= a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n\n    # Initialize the maximum sum and the current subsequence sum\n    max_sum = 0\n    current_sum = a[index]\n\n    # Loop through all the previous indices and find the maximum sum of increasing subsequences\n    for i in range(index):\n        if a[i] < a[index]:\n            current_sum += a[i]\n        elif a[i] > a[index]:\n            current_sum -= a[i]\n        else:\n            continue\n\n        if i == 0 or i == k:\n            max_sum = max(max_sum, current_sum)\n\n        # If the current subsequence sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = a[index]\n    start = index\n\n    # Traverse through the array from the given index\n    for i in range(index+1, n):\n        # Check if the current element is greater than the kth element\n        if a[i] > k:\n            # If yes, add it to the current sum and update the start index\n            current_sum += a[i]\n            start = i\n\n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # If yes, update the maximum sum\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    dp = [0] * (n+1)\n    dp[0] = a[0]\n\n    # Compute DP\n    for i in range(1, n+1):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Find the maximum sum of increasing subsequence\n    for i in range(n, index-1, -1):\n        if a[i] < a[k] and dp[i] > curr_sum:\n            curr_sum = dp[i]\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    \n    if k == index:\n        return a[k]\n    \n    # Initialize dp[i][j] as the maximum sum of increasing subsequence from prefix until i and including a[j]\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n, 0, -1):\n        for j in range(i, min(k, n) + 1):\n            # If the element before i is greater than a[j], then we don't include a[j] in the increasing subsequence\n            if a[j] > a[i]:\n                dp[i][j] = dp[i + 1][j]\n            # If the element before i is less than or equal to a[j], then we include a[j] in the increasing subsequence\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    # Return the maximum sum of increasing subsequence from prefix until index and including a[k]\n    return dp[index][k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the dp array to store the maximum sum of increasing subsequence for each prefix up to ith index\n    dp = [0] * (k + 1)\n    \n    # Initialize the maximum sum of increasing subsequence to be 0\n    max_sum = 0\n    \n    # Loop through the array to find the maximum sum of increasing subsequence for each prefix up to ith index\n    for i in range(1, k + 1):\n        dp[i] = max(a[index - i + 1] + dp[i - 1], dp[i - 1])\n        max_sum = max(max_sum, dp[i])\n    \n    # Initialize the sum of increasing subsequence from prefix until ith index to 0\n    sum_is = 0\n    \n    # Loop through the array from 0 to k to find the sum of increasing subsequence from prefix until ith index and including the given kth element k\n    for i in range(k + 1):\n        if i == 0:\n            continue\n        sum_is += dp[i]\n    \n    return max_sum, sum_is"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # get the index of the first element of the new tuple\n    index = len(new_tuplex)\n\n    # loop until we have reached the end of the new tuple\n    while index < m:\n        # add a new element to the new tuple\n        new_tuplex.append(0)\n        # increment the index\n        index += 1\n\n    # create a new tuple with n elements\n    colon = tuple(new_tuplex[:n])\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row_list = deepcopy(tuplex)\n    row_list = row_list[:m]\n    for i in range(n-m):\n        row_list.append(0)\n    row_list = tuple(row_list)\n    return row_list"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the input is valid\n    if len(tuplex)!= m:\n        print(\"Error: Invalid input. The input should have m elements.\")\n        return\n    \n    # Create a copy of the input tuple\n    colontup = deepcopy(tuplex)\n    \n    # Reverse the order of the elements in the colon\n    for i in range(m-1):\n        colontup[i], colontup[n-i-1] = colontup[n-i-1], colontup[i]\n    \n    return colontup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i]))\n        for j in range(n-i-1):\n            col[i][j] = 0\n        col[i][n-i-1] = 1\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if m <= 0 or n <= 0:\n        return None\n\n    if m > len(tuplex) or n > len(tuplex[0]):\n        return None\n\n    result = []\n    for i in range(m):\n        for j in range(n):\n            result.append(tuplex[i][j])\n    return tuple(result)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(tuplex_copy)\n    # Check if the tuple is of length 1\n    if length == 1:\n        # Get the first element of the tuple\n        first_element = tuplex_copy[0]\n        # Create a new list with n copies of the first element\n        colon = [first_element] * n\n        # Return the colon\n        return colon\n    # Check if the tuple is of length 2\n    elif length == 2:\n        # Get the first element of the tuple\n        first_element = tuplex_copy[0]\n        # Get the second element of the tuple\n        second_element = tuplex_copy[1]\n        # Create a new list with n copies of the second element\n        colon = [second_element] * n\n        # Return the colon\n        return colon\n    # If the tuple is of any other length, raise an error\n    else:\n        raise ValueError(\"The tuple should have length 1 or 2.\")"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): a tuple of integers\n        m (int): the row number where the colon starts\n        n (int): the column number where the colon ends\n\n    Returns:\n        int: the value of the colon\n    '''\n    new_tuplex = deepcopy(tuplex)\n    row = new_tuplex[m]\n    row_copy = row[:n+1]\n    row_copy[n] = row[n]\n    new_tuplex[m] = row_copy\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    colon_tup = []\n    for i in range(m):\n        row_tup = deepcopy(tuplex[0])\n        for j in range(n):\n            row_tup[j] = tuplex[j][i]\n        colon_tup.append(row_tup)\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuple of tuples, tuplex, and returns a colon of tuplex.\n    The colon is the n-th tuple in tuplex, where n is a non-negative integer.\n    If tuplex has fewer than m tuples, the function returns None.\n    \"\"\"\n    # Check if the input is valid\n    if not isinstance(tuplex, tuple) or not all(isinstance(t, tuple) for t in tuplex):\n        return None\n    if m > len(tuplex):\n        return None\n    if n < 0:\n        return None\n    # Get the n-th tuple\n    col_tuplex = deepcopy(tuplex[m - 1])\n    # Add a tuple to the colon\n    col_tuplex.insert(0, tuplex[0][n])\n    # Reverse the colon\n    col_tuplex.reverse()\n    return col_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    # Loop through each tuple in the new_tuplex list\n    for i in range(len(new_tuplex)):\n        # Get the first m elements from the ith tuple and the first n elements from the remaining tuples\n        tuplex_i = tuple(new_tuplex[i][:m])\n        new_tuplex[i] = tuple(tuplex_i + tuple(new_tuplex[j][m:]) for j in range(len(new_tuplex)) if j!= i)\n    # Return the new list of tuples\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    # Find the maximum product of two arrays\n    max_product = max(nums1[i]*nums2[j] for i in range(len(nums1)) for j in range(len(nums2)))\n\n    # Divide the product by the maximum product to get the quotient\n    quotient = max_product // max(nums1, nums2)\n\n    # Multiply the quotient by the largest factor from nums1 and nums2\n    factor1 = max(nums1) // quotient\n    factor2 = max(nums2) // quotient\n\n    # Find the largest product from the two factors\n    largest_product = factor1 * factor2\n\n    # Return the quotient and largest product as a tuple\n    return (quotient, largest_product)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products to negative infinity\n    largest1 = -float('inf')\n    largest2 = -float('inf')\n\n    # Loop over the desired number of products\n    for i in range(N):\n        # Find the largest product for each list, choosing the larger one\n        product1 = nums1[i] * nums2[i]\n        if product1 > largest1:\n            largest1 = product1\n        product2 = nums2[i] * nums1[i]\n        if product2 > largest2:\n            largest2 = product2\n\n    # Return the two largest products\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize variables\n    largest_product = 0\n    count = 0\n\n    # iterate through the lists\n    for i in range(N):\n        # multiply the two factors and update the count\n        product = nums1[i] * nums2[i]\n        count += 1\n\n        # update the largest product if the current product is greater than the current largest product\n        if product > largest_product:\n            largest_product = product\n\n    return count, largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function takes in two lists `nums1` and `nums2` and an integer `N` as input.\n    The function finds the `N` largest products of the two lists and returns them.\n    \"\"\"\n    # Find the minimum of the two lists and use it as a scaling factor\n    min_value = min(min(nums1), min(nums2))\n    scaling_factor = 10 ** 9 + min_value\n    \n    # Scale the two lists\n    scaled_nums1 = [x * scaling_factor for x in nums1]\n    scaled_nums2 = [x * scaling_factor for x in nums2]\n    \n    # Find the N largest products of the two scaled lists\n    sorted_nums1 = sorted(scaled_nums1, reverse=True)[:N]\n    sorted_nums2 = sorted(scaled_nums2, reverse=True)[:N]\n    \n    # Scale the sorted N largest products back to their original values\n    final_product = [round(x / scaling_factor) for x in sorted_nums1]\n    \n    return final_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    products = []\n    max_product = 0\n    # Loop through all possible combinations of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the corresponding factors\n            product = nums1[i] * nums2[j]\n            # If the product is greater than max_product, update max_product and add the product to the products list\n            if product > max_product:\n                max_product = product\n                products = [product]\n            # If the product is equal to max_product, add it to the products list\n            elif product == max_product:\n                products.append(product)\n            # If the product is less than max_product, do nothing\n            if len(products) == N:\n                break\n    # Return the list of N largest products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in non-descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through the first list\n    for num1 in nums1:\n        # Find the largest products for the given factor in the second list\n        largest_products = []\n        for num2 in nums2:\n            # Calculate the product of the current factor in the first list and the current factor in the second list\n            product = num1 * num2\n\n            # If the current product is larger than the largest product found so far, update the result\n            if product > largest_products[-1] if largest_products else 0:\n                largest_products.append(product)\n\n        # If the number of largest products found so far is equal to the desired number, add the current factor to the result\n        if len(largest_products) == N:\n            result.append(num1)\n\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the maximum product and its indices\n    max_product = float('-inf')\n    max_indices = [0, 0]\n\n    # Iterate through the first list and find the N largest products\n    for i in range(len(nums1)):\n        product = 1\n        for j in range(len(nums2)):\n            product *= max(nums1[i], nums2[j])\n        if product > max_product:\n            max_product = product\n            max_indices = [i, j]\n        if len(nums2) >= N:\n            break\n\n    # Iterate through the second list and find the N largest products\n    for j in range(len(nums2)):\n        product = 1\n        for i in range(len(nums1)):\n            product *= max(nums1[i], nums2[j])\n        if product > max_product:\n            max_product = product\n            max_indices = [i, j]\n        if len(nums1) >= N:\n            break\n\n    # Return the indices of the N largest products\n    return max_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize variables to store the largest products\n    largest_product1 = largest_product2 = float('-inf')\n    # Loop through the given lists and find the largest products\n    for i in range(N):\n        largest_product1 = max(largest_product1, nums1[i])\n        largest_product2 = max(largest_product2, nums2[i])\n    # Find the largest product\n    largest_product = max(largest_product1 * largest_product2, largest_product2 * largest_product1)\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Find the maximum product of the two largest factors\n    max_product = nums1[0] * nums2[0]\n\n    # Initialize the count of largest products\n    count = 1\n\n    # Iterate through the remaining factors\n    for i in range(1, len(nums1)):\n        for j in range(1, len(nums2)):\n            # Calculate the current product\n            current_product = nums1[i] * nums2[j]\n\n            # Update the count if the current product is greater than the maximum product\n            if current_product > max_product:\n                count = 1\n                max_product = current_product\n            elif current_product == max_product:\n                count += 1\n\n    # Return the count of largest products\n    return count"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the result list to keep track of the largest products found so far\n    result = []\n\n    # Iterate over the two lists of numbers\n    for i in range(len(nums1)):\n        # Sort the two lists of numbers\n        nums1.sort()\n        nums2.sort()\n\n        # Compute the product of the first N elements from each list\n        product = nums1[0] * nums2[0] * nums1[N-1] * nums2[N-1]\n\n        # Add the product to the result list if it's larger than any previous products\n        if product > max(result):\n            result = [product]\n        elif product == max(result):\n            result.append(product)\n\n    # Return the result list of the largest products found\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum number.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n\n    Args:\n    str1: a string\n\n    Returns:\n    A tuple of characters from the input string\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n        str1 (str): The string to convert.\n\n    Returns:\n        tuple: The tuple of characters.\n\n    Examples:\n        >>> string_to_tuple(\"hello\")\n        ('h', 'e', 'l', 'l', 'o')\n        >>> string_to_tuple(\"world!\")\n        ('w', 'o', 'r', 'l', 'd', '!')\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function converts a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # initialize a variable to store the unset bits\n    unset_bits = 0\n    # loop through each bit in the binary representation of n\n    for i in range(32):\n        # check if the current bit is set to 1\n        if (n & (1 << i)):\n            # if it is, unset it by shifting all bits to the right by i bits\n            n = n ^ (1 << i)\n            # increment the unset_bits variable by 1\n            unset_bits += 1\n    # if unset_bits is still 0, then all bits in the binary representation are set to 1\n    if unset_bits == 0:\n        n = 0\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit in a given number.\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # set all bits to 0\n    n = n & ~(0b1111111111111111111111111111111)\n    \n    # if the number has only one set bit, set the next unset bit to 1\n    if n & (n + 1) == 0:\n        n = n | (1 << 64)\n    \n    # return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the given integer to binary string format\n    binary_str = bin(n)[2:]\n\n    # Initialize the index of the leftmost unset bit\n    left_most_unset_bit_index = -1\n\n    # Iterate through the binary string and find the leftmost unset bit\n    for i in range(len(binary_str)):\n        if binary_str[i] == '0':\n            left_most_unset_bit_index = i\n            break\n\n    # Set the leftmost unset bit to 1\n    binary_str = binary_str[:left_most_unset_bit_index] + '1' + binary_str[left_most_unset_bit_index+1:]\n    n = int(binary_str, 2)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit as -1\n    leftmost_unset_bit = -1\n\n    # Iterate through all the bits of the number\n    for bit in range(32):\n        # If the current bit is unset, update the leftmost unset bit\n        if (n & (1 << bit)) == 0:\n            leftmost_unset_bit = bit\n\n    # If no leftmost unset bit was found, return the original number\n    if leftmost_unset_bit == -1:\n        return n\n\n    # Set the leftmost unset bit to 1\n    n |= (1 << leftmost_unset_bit)\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # initialize the unset bit variable\n    unset_bit = 0\n    \n    # iterate through each bit in the binary representation of n\n    for i in range(32):\n        if (n & (1 << i)) == 0:\n            # set the unset bit to the current index\n            unset_bit = i\n            # break out of the loop after the first unset bit is found\n            break\n            \n    # set the left most unset bit to 1\n    n |= (1 << unset_bit)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a Python function to set the left most unset bit in a binary number.\n    \"\"\"\n    # Initialize the count of unset bits to the number of bits in the number\n    count = bin(n).count('1')\n    # Loop through each bit from the right, starting from the least significant bit\n    for i in range(count, -1, -1):\n        # If the current bit is 0, set it to 1 and continue the loop\n        if bin(n)[-i-1] == '0':\n            n |= (1 << i)\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given integer.\n    \"\"\"\n    # initialize the bit counter\n    count = 0\n    # loop through the binary representation of the integer\n    while n > 0:\n        # check if the least significant bit is 1\n        if n & 1 == 1:\n            # if it is, break out of the loop and return the bit count\n            break\n        # shift the integer to the right by 1 bit\n        n >>= 1\n        # increment the bit counter\n        count += 1\n    # if the loop completes without finding a 1 bit, set the left most bit to 1\n    if count == 0:\n        n |= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the leftmost unset bit to 0\n    bit_index = 0\n    \n    # loop through all bits of n\n    while bit_index < 32 and (n & (1 << bit_index)):\n        bit_index += 1\n    \n    # set the leftmost unset bit to 1\n    n |= (1 << bit_index)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a given integer.\n\n    Args:\n    n (int): Integer whose left most unset bit needs to be set.\n\n    Returns:\n    int: Modified integer with the left most unset bit set.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    bit_set = count % 2\n    if bit_set == 0:\n        n |= 1\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    # calculating the volume of a cone\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r # calculate the area of the cone using the formula area = pi * r * r\n    volume = area * h / 3 # calculate the volume of the cone using the formula volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3 * math.pi * r ** 2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone and returns the volume.\n    '''\n    area_cone = math.pi * (r**2 + h**2) / 3\n    volume_cone = area_cone * h\n    return volume_cone"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula for volume of a cone\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculating the volume of the cone\n    volume = math.pi * r * r * h\n    # Returning the volume of the cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n\n    Parameters:\n    r (float): the radius of the cone\n    h (float): the height of the cone\n\n    Returns:\n    float: the volume of the cone\n    \"\"\"\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to a given number.\n    \"\"\"\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1: \n        n = n >> 1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Start by assuming that n is the largest power of 2 that is less than or equal to n\n    power = 1\n    \n    # Check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return power\n    \n    # Continue increasing the power until it is less than or equal to n\n    while power * 2 <= n:\n        power *= 2\n    \n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    # Initialize highest power of 2 found\n    highest_power_of_2 = 1\n\n    # Iterate through all possible powers of 2\n    for i in range(1, n + 1):\n        # Check if current power of 2 is greater than highest power found\n        if i > highest_power_of_2:\n            highest_power_of_2 = i\n\n    # Return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable to store the highest power of 2\n    highest_power = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # If the number is a power of 2, store the power in highest_power\n        if (i & (i-1)) == 0:\n            highest_power = i\n\n    # Return the highest power of 2 less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    return 1 << (31 - n.bit_length())"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = find_lucas(n-1) + find_lucas(n-2)\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        # Use the formula for the nth Lucas number: L(n) = L(n-1) + L(n-2)\n        lucas_prev = 2\n        lucas_curr = 1\n        for i in range(2, n):\n            lucas_next = lucas_curr + lucas_prev\n            lucas_prev = lucas_curr\n            lucas_curr = lucas_next\n        return lucas_curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function calculates the n-th Lucas number using the formula:\n    L(n) = L(n-1) + L(n-2)\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        # Recursive case\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Lucas number is:\", find_lucas(n))"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): The first list of values to convert.\n    l2 (list): The second list of values to convert.\n    l3 (list): The third list of values to convert.\n\n    Returns:\n    dict: A dictionary with nested keys representing each list's elements.\n\n    Example:\n    >>> convert_list_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], ['1', '2', '3'])\n    {'a': {'x': '1', 'y': '2', 'z': '3'}}\n    '''\n\n    result = {}\n\n    for i in range(len(l1)):\n        key = l1[i]\n        value = {l2[j]: l3[j] for j in range(len(l2))}\n        result[key] = value\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    \n    # loop through the first list\n    for i in range(len(l1)):\n        # create a dictionary with the key being the value of the first list\n        sub_dict = {l1[i]: l2[i]}\n        # add the sub_dict to the result dictionary\n        result.update(sub_dict)\n    \n    # loop through the second list\n    for i in range(len(l2)):\n        # create a dictionary with the key being the value of the second list\n        sub_dict = {l2[i]: l3[i]}\n        # add the sub_dict to the result dictionary\n        result.update(sub_dict)\n    \n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n    d['list3'] = l3\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize empty dictionary to store nested dictionaries\n    data = {}\n    \n    # Loop through each list and add each item to the dictionary\n    for item in l1:\n        data[item] = {}\n        \n    for item in l2:\n        data[item] = {}\n        \n    for item in l3:\n        data[item] = {}\n        \n    # Return the nested dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[i*len(l2) + j]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        for j in range(len(l2)):\n            inner_dict[l2[j]] = l3[l3.index(l2[j])]\n        result[l1[i]] = inner_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    result = {}\n    for i, item in enumerate(l1):\n        result[item] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Loop through each list and convert it to a dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {'city': l2[i],'state': l3[i]}\n    \n    # Return the resulting dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # initialize an empty dictionary\n    result = {}\n\n    # iterate over the list of lists and add them to the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n\n    # iterate over the list of dictionaries and add them to the result dictionary\n    for i in range(len(l3)):\n        result.update(l3[i])\n\n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    - l1: a list of dictionaries\n    - l2: a list of lists\n    - l3: a list of tuples\n\n    Returns:\n    - a list of dictionaries where each dictionary has a nested structure corresponding to the input lists\n\n    Example:\n    >>> convert_list_dictionary([[1,2,3],[4,5],[6]], ['a', 'b', 'c'], [('x',1),('y',2),('z',3)])\n    [{'a': 1, 'b': 2, 'c': 3}, {'a': 4, 'b': 5}, {'x': 1, 'y': 2, 'z': 3}]\n\n    Note:\n    - The input lists should have the same length.\n    - The nested structure of the dictionaries should correspond to the input lists.\n    '''\n\n    result = []\n    for i, d in enumerate(l1):\n        result.append({})\n        for j, k in enumerate(d):\n            result[i][l2[i][j]] = k\n        for j, k in enumerate(l3[i]):\n            result[i][k[0]] = k[1]\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Function to calculate the sum of first n terms of the Fibonacci sequence\n    def fibonacci(n):\n        a, b = 0, 1\n        for i in range(n):\n            yield a\n            a, b = b, a + b\n    \n    # Initialize the first n terms of the Fibonacci sequence\n    fib_seq = fibonacci(n)\n    \n    # Initialize the sum of the first n terms\n    sum_fib = sum(fib_seq)\n    \n    # Initialize the maximum sum\n    max_sum = sum_fib\n    \n    # Loop through the rest of the Fibonacci sequence and update the maximum sum\n    for fib in fibonacci(n+1):\n        sum_fib += fib\n        if sum_fib > max_sum:\n            max_sum = sum_fib\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 15\n    else:\n        return n + max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Define the initial values of f(0), f(1), f(2),..., f(n)\n    f = [0] * (n+1)\n    f[0] = 0\n    f[1] = 0\n    f[2] = 0\n    f[3] = 0\n    f[4] = 0\n    f[5] = 0\n    f[6] = 0\n    f[7] = 0\n    f[8] = 0\n    f[9] = 0\n    f[10] = 0\n    f[11] = 0\n    f[12] = 0\n    f[13] = 0\n    f[14] = 0\n    f[15] = 0\n    f[16] = 0\n    f[17] = 0\n    f[18] = 0\n    f[19] = 0\n    f[20] = 0\n    f[21] = 0\n    f[22] = 0\n    f[23] = 0\n    f[24] = 0\n    f[25] = 0\n    f[26] = 0\n    f[27] = 0\n    f[28] = 0\n    f[29] = 0\n    f[30] = 0\n    f[31] = 0\n    f[32] = 0\n    f[33] = 0\n    f[34] = 0\n    f[35] = 0\n    f[36] = 0\n    f[37] = 0\n    f[38] = 0\n    f[39] = 0\n    f[40] = 0\n    f[41] = 0\n    f[42] = 0\n    f[43] = 0\n    f[44] = 0\n    f[45] = 0\n    f[46] = 0\n    f[47] = 0\n    f[48] = 0\n    f[49] = 0\n    f[50] = 0\n    f[51] = 0\n    f[52] = 0\n    f[53] = 0\n    f[54] = 0\n    f[55] = 0\n    f[56] = 0\n    f[57] = 0\n    f[58] = 0\n    f[59] = 0\n    f[60] = 0\n    f[61] = 0\n    f[62] = 0\n    f[63] = 0\n    f[64] = 0\n    f[65] = 0\n    f[66] = 0\n    f[67] = 0\n    f[68] = 0\n    f[69] = 0\n    f[70] = 0\n    f[71] = 0\n    f[72] = 0\n    f[73] = 0\n    f[74] = 0\n    f[75] = 0\n    f[76] = 0\n    f[77] = 0\n    f[78] = 0\n    f[79] = 0\n    f[80] = 0\n    f[81] = 0\n    f[82] = 0\n    f[83] = 0\n    f[84] = 0\n    f[85] = 0\n    f[86] = 0\n    f[87] = 0\n    f[88] = 0\n    f[89] = 0\n    f[90] = 0\n    f[91] = 0\n    f[92] = 0\n    f[93] = 0\n    f[94] = 0\n    f[95] = 0\n    f[96] = 0\n    f[97] = 0\n    f[98] = 0\n    f[99] = 0\n    f[100] = 0\n    f[101] ="
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n-1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 8\n        elif n == 5:\n            return 15\n\n    if n == 1:\n        return 1\n    else:\n        return max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n <= 1:\n        return n\n\n    max1 = n\n    max2 = n + get_max_sum(n//2)\n    max3 = n + get_max_sum(n//3)\n    max4 = n + get_max_sum(n//4)\n    max5 = n + get_max_sum(n//5)\n\n    return max(max1, max2, max3, max4, max5)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Initialize variables\n    max_sum = n\n    first_term = 0\n    second_term = 0\n    third_term = 0\n    fourth_term = 0\n    \n    # Calculate the first term\n    first_term = (n/2) + (n/3) + (n/4) + (n/5)\n    \n    # Calculate the second term\n    if n >= 5:\n        second_term = (n/2) + (n/3) + (n/4) + (n/5) + (n/6)\n    else:\n        second_term = 0\n    \n    # Calculate the third term\n    third_term = (n/2) + (n/3) + (n/4) + (n/5) + (n/6) + (n/7)\n    \n    # Calculate the fourth term\n    if n >= 7:\n        fourth_term = (n/2) + (n/3) + (n/4) + (n/5) + (n/6) + (n/7) + (n/8)\n    else:\n        fourth_term = 0\n    \n    # Find the maximum sum\n    max_sum = max(first_term, second_term, third_term, fourth_term, n)\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = element\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize a variable to store the maximum length\n    max_length = 0\n    # Loop through each element of the input list\n    for element in input_list:\n        # If the length of the current element is greater than the maximum length, update the maximum length\n        if len(element) > max_length:\n            max_length = len(element)\n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables\n    max_length = 0\n    max_list = []\n\n    # Iterate through the input list\n    for i in range(len(input_list)):\n        # Get the length of the current list\n        length = len(input_list[i])\n        # Check if the length is greater than the current max length\n        if length > max_length:\n            # Update the max length and the corresponding list\n            max_length = length\n            max_list = input_list[i]\n\n    # Return the max list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store the unique elements of the tuple\n    unique_elements = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_elements) == len(test_tup):\n        # If both conditions are true, then the tuple contains no duplicates\n        return True\n    else:\n        # If the conditions are not met, then the tuple contains duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a dictionary to store the elements of the tuple\n    unique_dict = {}\n\n    # Iterate through the elements of the tuple\n    for element in test_tup:\n        # If the element is already in the dictionary, return False\n        if element in unique_dict:\n            return False\n        # Otherwise, add the element to the dictionary\n        else:\n            unique_dict[element] = True\n\n    # If the loop completes without returning False, it means all elements of the tuple are unique\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove any duplicates\n    unique_tup = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # iterate through the dictionary and find the first non-repeated character\n    for key, value in freq_dict.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first non-repeating character by iterating through the dictionary and keeping track of the first non-repeating index\n    first_index = None\n    for i, count in enumerate(char_count.values()):\n        if count == 1:\n            first_index = i\n            break\n    \n    # return the character at the first non-repeating index\n    if first_index is not None:\n        return str1[first_index]\n    else:\n        return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the counts of each character in the string\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    # find the first character with a count of 1\n    for char in char_counts:\n        if char_counts[char] == 1:\n            return char\n\n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # iterate through the dictionary to find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    # iterate over the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # iterate over the string again and return the first character with a frequency of 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    # if no character with a frequency of 1 is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Check if the string starts and ends with the same character\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    return pattern.match(string)"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of those numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the median\n    n = len(nums)\n    if n % 2 == 0:\n        median = (nums[n//2] + nums[n//2-1]) / 2\n    else:\n        median = nums[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # find the middle number\n    middle_index = len(sorted_numbers) // 2\n    middle_number = sorted_numbers[middle_index]\n\n    # if the middle number is odd, return the middle number\n    if len(sorted_numbers) % 2!= 0:\n        return middle_number\n\n    # if the middle number is even, return the average of the two middle numbers\n    else:\n        # calculate the average\n        average = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n\n        # return the average\n        return average"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Check if the length of the sorted array is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If it's even, take the average of the middle two numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2-1])/2\n    else:\n        # If it's odd, take the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Given three numbers a, b, and c, returns the median of the three numbers.\n\n    :param a: The first number\n    :param b: The second number\n    :param c: The third number\n    :return: The median of the three numbers\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle index of the sorted list\n    middle_index = len(sorted_numbers) // 2\n\n    # If the length of the list is odd, the middle number is the median\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[middle_index]\n\n    # If the length of the list is even, calculate the average of the middle two numbers\n    else:\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the length of the array\n    length = len(nums)\n\n    # Determine the median index\n    if length % 2 == 0:\n        # If the array has an even length, take the average of the middle two elements\n        median_index = length // 2\n        median = (nums[median_index - 1] + nums[median_index]) / 2\n    else:\n        # If the array has an odd length, take the middle element\n        median_index = length // 2\n        median = nums[median_index]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a, b, c]\n    num_list.sort()\n    if len(num_list) % 2 == 0:\n        median = (num_list[len(num_list) // 2 - 1] + num_list[len(num_list) // 2]) / 2\n    else:\n        median = num_list[len(num_list) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if sorted_numbers[2] == sorted_numbers[0]:\n        median = sorted_numbers[1]\n    else:\n        median = sorted_numbers[1]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # Calculate the median by finding the middle number\n    median = sorted_numbers[len(sorted_numbers)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # find the middle element in the list\n    middle = len(sorted_list) // 2\n    \n    # check if the length of the list is odd or even\n    if len(sorted_list) % 2 == 0:\n        # if even, return the average of the two middle elements\n        median = (sorted_list[middle - 1] + sorted_list[middle]) / 2\n    else:\n        # if odd, return the middle element\n        median = sorted_list[middle]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    a = sorted([a, b, c])[1]\n    b = sorted([a, b, c])[2]\n\n    # If the sum of the three numbers is odd, the median is the average of the two middle numbers\n    if a + b == 2 * c:\n        median = (a + b) / 2\n    # If the sum of the three numbers is even, the median is the average of the two middle numbers\n    else:\n        median = (a + b) / 2\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        sum_of_digits += temp\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = 0\n    for num in nums:\n        num_str = str(num)\n        for digit in num_str:\n            digits_sum += int(digit)\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        for digit in str(num):\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        if isinstance(num, int):\n            while num > 0:\n                result += num % 10\n                num //= 10\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(map(int, str(num)))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        digits = list(str(num))\n        # Loop through each digit and add it to a running total\n        total = 0\n        for digit in digits:\n            total += int(digit)\n        # Add the total to the running total of all numbers in the list\n        result.append(total)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert each tuple element to a string to perform bitwise XOR\n    xor_str = \"\".join([str(a ^ b) for a, b in zip(test_tup1, test_tup2)])\n    # Convert the string back to an integer and return the result\n    return int(xor_str, 2)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(int(a) ^ int(b) for a, b in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(xor_result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Use the ^ operator to perform the bitwise xor operation on the two tuples\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(bin(int(x, 2) ^ int(y, 2))[2:].zfill(len(x)) for x, y in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables to store the sum of the two tuples\n    xor_sum = 0\n    \n    # Loop through each element of both tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the two elements of the tuple\n        xor_sum ^= test_tup1[i] ^ test_tup2[i]\n    \n    # Return the xor_sum as the result of the function\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert the tuples to lists to make them mutable\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n\n    # Perform the bitwise xor operation on the lists\n    result = [x ^ y for x, y in zip(tup1, tup2)]\n\n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n    # loop through the list and update the frequency dictionary\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    # return the sum of the values in the frequency dictionary\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if (item,) not in freq_dict:\n            freq_dict[(item,)] = 1\n        else:\n            freq_dict[(item,)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Convert the list to a set to get only unique tuples\n    unique_tuples = set(test_list)\n    # Count the number of unique tuples in the set\n    num_unique_tuples = len(unique_tuples)\n    return num_unique_tuples"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for i in test_list:\n        for j in i:\n            if (j,) in freq_dict:\n                freq_dict[(j,)] += 1\n            else:\n                freq_dict[(j,)] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    \n    for item in test_list:\n        if (item,) not in freq_dict:\n            freq_dict[(item,)] = 1\n        else:\n            freq_dict[(item,)] += 1\n    \n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # convert the list to a set to get the unique tuples\n    unique_tuples = set(test_list)\n    # count the number of unique tuples\n    freq = len(unique_tuples)\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n\n    # iterate through the list of tuples and update the frequency of each tuple in the dictionary\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # initialize an empty dictionary to store the frequency of tuples\n    freq_dict = {}\n\n    # iterate over the list of tuples\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its frequency\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        # if the tuple is not in the dictionary, add it and set its frequency to 1\n        else:\n            freq_dict[tup] = 1\n\n    # return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the resultant tuple with zeros\n    result_tup = ([0]*len(test_tup1[0])) + ([0]*len(test_tup2[0]))\n    \n    # Loop through each index of the tuple\n    for i in range(len(test_tup1)):\n        # Loop through each element of the tuple at the current index\n        for j in range(len(test_tup1[i])):\n            # Add the element at index i,j of the first tuple and the element at index i,j of the second tuple\n            result_tup[j] += test_tup1[i][j] + test_tup2[i][j]\n            \n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same number of elements.\")\n        return\n    \n    # initialize a new tuple with the same number of elements as the input tuples\n    result_tup = (0,) * len(test_tup1)\n    \n    # perform index wise addition of the elements of both tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n        \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initialize an empty list to store the resultant tuple\n    result = []\n\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n\n        # Loop through the second tuple\n        for j in range(len(test_tup2[i])):\n\n            # Add the corresponding elements of the tuple and store the result in the result list\n            result.append(test_tup1[i] + test_tup2[i][j])\n\n    # Return the resultant tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # initialize a variable to store the result tuple\n    result_tup = ()\n\n    # loop through the first tuple and add each element to the result tuple\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        new_value = test_tup1[i] + test_tup2[i]\n        result_tup += (new_value,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new tuple to store the result\n    result_tup = ()\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[0])):\n            # calculate the index in the result tuple\n            index = i * len(test_tup2[0]) + j\n            # add the current element of the first tuple to the corresponding element of the second tuple\n            result_tup = result_tup + (test_tup1[i][j] + test_tup2[i][j],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for i in tuple1:\n        if i in tuplex:\n            print(f\"The element '{i}' exists within the tuple.\")\n        else:\n            print(f\"The element '{i}' does not exist within the tuple.\")\n    return"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            print(f\"{element} exists in {tuple1}\")\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for tup in tuplex:\n        if tup in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            print(f\"{element} exists in {tuplex}\")\n        else:\n            print(f\"{element} does not exist in {tuplex}\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0:\n        parity = (parity + 1) % 2\n        x = x // 2\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    if x%2 == 0:\n        parity = 0\n    else:\n        parity = 1\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if x is an integer\n    if type(x)!= int:\n        return \"Invalid input: Please enter an integer.\"\n    # Check if x is negative\n    elif x < 0:\n        return \"Invalid input: Please enter a non-negative integer.\"\n    # Check if x is odd\n    elif x % 2 == 0:\n        return \"The parity of {} is even.\".format(x)\n    else:\n        return \"The parity of {} is odd.\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns True if the parity is odd, False otherwise.\n    '''\n\n    # check if x is odd or even\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes a number as an argument and returns True if it's an odd number, False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Check if the number is even or odd\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # if x is even, return True\n    if x % 2 == 0:\n        return True\n\n    # if x is odd, return False\n    else:\n        return False"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # convert the given number to a string\n    num_str = str(n)\n\n    # find the length of the number\n    length = len(num_str)\n\n    # initialize a variable to keep track of the number of digits that need to be rearranged\n    rearranged_digits = 0\n\n    # loop through all possible permutations of the digits\n    for i in range(length):\n        for j in range(i + 1, length):\n            for k in range(j + 1, length):\n                # check if the current permutation is valid\n                permutation = [num_str[i], num_str[j], num_str[k]]\n                if int(''.join(permutation)) > n:\n                    # if it is, increment the rearranged_digits counter\n                    rearranged_digits += 1\n                    # if the rearranged_digits counter is equal to the length of the number, we've reached a valid permutation\n                    if rearranged_digits == length:\n                        # create the new number by rearranging the digits\n                        new_num = int(''.join(permutation))\n                        return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Get the list of digits of the input number\n    digits = [int(digit) for digit in str(n)]\n\n    # Sort the list of digits in reverse order\n    digits.sort(reverse=True)\n\n    # Get the maximum digit in the list\n    max_digit = digits[-1]\n\n    # Get the new digits list by rearranging the maximum digit to the beginning\n    new_digits = [max_digit] + digits[:-1]\n\n    # Convert the new digits list back to a string and return the result\n    return ''.join(str(digit) for digit in new_digits)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    n = int(digits[0])\n    for i in range(len(digits)):\n        if int(digits[i]) < n:\n            digits[i], digits[n] = digits[n], digits[i]\n            n += 1\n            if n == 10:\n                n = 0\n    return int(''.join(str(digit) for digit in digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # remove the leading zeros from the number\n    n = str(n)[1:]\n\n    # convert the number to a list of digits\n    digits = [int(d) for d in n]\n\n    # sort the list of digits in descending order\n    digits.sort(reverse=True)\n\n    # join the sorted digits into a string\n    sorted_digits = ''.join(str(d) for d in digits)\n\n    # convert the sorted digits string back to an integer and add 1\n    next_bigger = int(sorted_digits) + 1\n\n    # convert the next bigger integer back to a string and return it\n    return str(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    biggest = max(digits)\n\n    for i in range(len(digits)):\n        if digits[i] == biggest:\n            digits[i] = str(int(digits[i]) + 1)\n\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Create a string of digits in the input number\n    digits = [str(n)[i] for i in range(len(str(n)))]\n    # Create a list of tuples containing digits and their positions in the input number\n    digit_positions = [(digit, i) for i, digit in enumerate(digits)]\n    # Sort the list of digits by their positions\n    digit_positions.sort(key=lambda x: x[1])\n    # Reverse the order of the digits in the input number\n    reversed_digits = digits[::-1]\n    # Create a string of reversed digits\n    reversed_string = \"\".join(reversed_digits)\n    # Convert the reversed string to an integer and add 1 to it\n    next_bigger = int(reversed_string) + 1\n    # Convert the next_bigger to a string and return it\n    return str(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    return int(\"\".join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    num = 0\n    for digit in digits:\n        num += digit * 10 ** len(digits) - digit\n    return num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a list of digits of the given number\n    num_list = [int(d) for d in str(n)]\n    # reverse the list to make it increasing order\n    num_list.reverse()\n    # count the number of digits\n    count = sum(1 for x in num_list if x!= 0)\n    # initialize the result as 0\n    result = 0\n    # loop through the digits and add them to the result in increasing order\n    for digit in num_list:\n        result = result * 10 + digit\n    # add 1 to the result if the count is odd\n    if count % 2!= 0:\n        result += 1\n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number into a string\n    num_str = str(n)\n\n    # Reverse the string\n    num_str = num_str[::-1]\n\n    # Reverse the first and second digits\n    num_str = num_str[:2] + num_str[2:4] + num_str[:2]\n\n    # Convert the reversed string back to an integer\n    num_int = int(num_str)\n\n    # Return the next bigger number\n    return num_int"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pairs = []\n    heapq.heapify(pairs)\n    minheap = []\n    n = len(nums1)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            heapq.heappush(minheap, (-nums1[i], (i, j)))\n\n    for _ in range(k):\n        cost, (i1, j1) = heapq.heappop(minheap)\n        cost, (i2, j2) = heapq.heappop(minheap)\n        pair = (nums1[i1], nums2[j2])\n        pairs.append(pair)\n        if len(pairs) == k:\n            return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the smallest k elements from nums1 and nums2\n    min_heap = []\n    for num in nums1 + nums2:\n        heapq.heappush(min_heap, num)\n        # Remove the smallest element from nums1 and nums2 if the heap size is greater than k\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Extract the smallest k elements from the heap and return them as a list\n    return [heapq.heappop(min_heap) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function takes three arguments:\n    nums1: a list of integers representing the first array.\n    nums2: a list of integers representing the second array.\n    k: an integer representing the number of pairs to find.\n\n    This function uses a min heap to keep track of the k smallest pairs. It iterates over each element in the first array and each element in the second array. For each pair of elements, it calculates the sum of the two and adds it to the min heap. When the heap size reaches k, it removes the smallest pair from the heap and adds the next smallest pair to the heap. The function returns the k smallest pairs as a list of tuples containing the two elements.\n    '''\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            # Calculate the sum of the two elements\n            total = num1 + num2\n            # Add the sum to the heap\n            heapq.heappush(min_heap, total)\n            # If the heap size is greater than k, remove the smallest pair from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    # Extract the k smallest pairs from the heap and return them as a list of tuples\n    return [(-total, (nums1[i], nums2[j])) for i in range(len(nums1)) for j in range(len(nums2)) if total == -heapq.heappop(min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k and initialize it with the first element of each array\n    min_heap = [(-nums1[0], 0)]\n    heapq.heapify(min_heap)\n\n    # Create a dictionary to store the indices of the elements in the second array for each element in the first array\n    indices_dict = {}\n\n    for i in range(1, len(nums1)):\n        # Find the index of the smallest element in the second array that is greater than or equal to nums1[i]\n        j = bisect_left(nums2, -nums1[i])\n        # If there is no such element, return -1 (as there are not enough elements in the second array to create k pairs)\n        if j == len(nums2):\n            return -1\n\n        # Update the min heap with the new element and its index in the second array\n        heapq.heappush(min_heap, (-nums1[i], j))\n\n        # Update the indices_dict for the current element in the first array\n        indices_dict[nums1[i]] = j\n\n    # Initialize an empty list to store the pairs\n    pairs = []\n\n    # Iterate over the min heap until we have found k pairs\n    while len(pairs) < k:\n        # Pop the smallest element from the heap\n        element, index = heapq.heappop(min_heap)\n\n        # If the element is already in the list of pairs, skip it\n        if element in [pair[0] for pair in pairs]:\n            continue\n\n        # Otherwise, add the current element to the list of pairs and add its index to the indices_dict\n        pairs.append((element, nums2[index]))\n\n        # If the current element is not the first element in the second array, find the next smallest element in the second array\n        if index > 0:\n            # Find the index of the smallest element in the second array that is greater than or equal to -element\n            j = bisect_left(nums2, -element)\n            # If there is no such element, skip it\n            if j == len(nums2):\n                continue\n\n            # Update the indices_dict for the current element in the second array\n            indices_dict[nums2[j]] = j\n\n            # Update the min heap with the new element and its index in the second array\n            heapq.heappush(min_heap, (-element, j))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize the min_heap with the first k elements of nums1\n    min_heap = []\n    for num in nums1[:k]:\n        heapq.heappush(min_heap, (num, nums1.index(num)))\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the remaining elements of nums2\n    for num in nums2:\n        # Check if the current element is smaller than the smallest element in min_heap\n        while min_heap and min_heap[0][0] > num:\n            # Pop the smallest element from min_heap\n            _, index = heapq.heappop(min_heap)\n            # Check if the sum of the current element and the smallest element in min_heap is smaller than the k\n            if len(result) == k:\n                return result\n            # Add the pair to the result list\n            result.append((min_heap[0][0], num))\n\n        # Push the current element onto min_heap\n        heapq.heappush(min_heap, (num, nums2.index(num)))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # initialize min_heap with the smallest element of nums1 and nums2\n    min_heap = [(min(nums1[0], nums2[0]), (0, 0))]\n\n    # initialize a set to store the pairs found\n    pairs = set()\n\n    # loop through k times\n    for _ in range(k):\n\n        # find the minimum pair in the min_heap\n        _, pair = heapq.heappop(min_heap)\n\n        # if it's already in the pairs set, continue to the next iteration\n        if pair in pairs:\n            continue\n\n        # add the pair to the pairs set\n        pairs.add(pair)\n\n        # add the pair to the min_heap with the smaller elements\n        if nums1[pair[0]] < nums2[pair[1]]:\n            heapq.heappush(min_heap, (nums1[pair[0]], (pair[0], pair[1] + 1)))\n        else:\n            heapq.heappush(min_heap, (nums2[pair[1]], (pair[0] + 1, pair[1])))\n\n    # return the pairs set as a list\n    return sorted([pair for pair in pairs])"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(pq, pair)\n            if len(pq) > k:\n                heapq.heappop(pq)\n    return pq"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap to store the pairs\n    min_heap = []\n    \n    # Iterate over the first array\n    for num1 in nums1:\n        # Iterate over the second array\n        for num2 in nums2:\n            # Calculate the pair's value\n            pair_value = num1 + num2\n            \n            # Check if the pair is already in the min heap\n            if len(min_heap) == k or pair_value > min_heap[0][1]:\n                # If the heap is full or the pair's value is greater than the smallest pair's value, insert the pair into the heap\n                heapq.heappush(min_heap, (pair_value, (num1, num2)))\n            else:\n                # If the pair's value is smaller than or equal to the smallest pair's value, pop the smallest pair from the heap and insert the new pair into the heap\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (pair_value, (num1, num2)))\n                \n    # Return the pairs' values\n    return [pair[1] for pair in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    for _ in range(k):\n        _, (num1, num2) = heapq.heappop(heap)\n        result.append((num1, num2))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (min(num1, num2), (num1, num2)))\n            if len(pairs) == k:\n                return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function finds the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    products = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            products.append(list1[i][0] * list1[j][1])\n    min_product = min(products)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Sort the list in ascending order\n    list1.sort()\n    \n    # Initialize the minimum product and the minimum tuple\n    min_product = list1[-1] * list1[-2]\n    min_tuple = (list1[-1], list1[-2])\n    \n    # Loop through the list of tuples\n    for i in range(len(list1) - 2):\n        # Calculate the product of the next two tuples\n        product = list1[i + 1] * list1[i + 2]\n        \n        # If the product is smaller than the current minimum product, update the minimum product and tuple\n        if product < min_product:\n            min_product = product\n            min_tuple = (list1[i + 1], list1[i + 2])\n    \n    # Return the minimum product and the minimum tuple\n    return min_product, min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be the maximum value possible\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples and check if it's less than the current minimum\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize minimum product variable\n    min_product = float('inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Calculate product of the tuple pairs\n            product = list1[i][0] * list1[j][1]\n            # Update minimum product variable\n            min_product = min(min_product, product)\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum product\n    of two tuples from the list.\n    \"\"\"\n    product = lst[0][0] * lst[0][1]\n    min_product = product\n\n    for i in range(1, len(lst)):\n        temp_product = lst[i][0] * lst[i][1]\n        if temp_product < min_product:\n            min_product = temp_product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k]\n            for k in range(len(list1[j])):\n                product *= list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            list2.append(product)\n    return min(list2)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][1] < min_product:\n                min_product = list1[i][0]*list1[j][1]\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes in a heterogeneous list of values and returns the minimum value in the list.\n    \"\"\"\n    min_num = listval[0]\n    for i in listval:\n        if i < min_num:\n            min_num = i\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(i, (int, float, complex)) for i in listval):\n        raise TypeError(\"Input list must only contain numeric values.\")\n\n    min_val = listval[0]\n    for num in listval:\n        if num < min_val:\n            min_val = num\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Check if the list is empty\n    if not listval:\n        print(\"The list is empty.\")\n        return None\n    \n    # Initialize variables for the minimum and current values\n    min_val = listval[0]\n    curr_val = listval[0]\n    \n    # Loop through the list and find the minimum value\n    for i in range(1, len(listval)):\n        curr_val = listval[i]\n        \n        # Check if the current value is less than the minimum value\n        if curr_val < min_val:\n            min_val = curr_val\n    \n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Check if the input list is empty\n    if len(listval) == 0:\n        print(\"Error: the list is empty\")\n        return None\n    \n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # Iterate over the remaining elements of the list\n    for val in listval[1:]:\n        # If the current value is smaller than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    \n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # Loop over the rest of the list\n    for val in listval[1:]:\n        # If the current value is smaller than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    \n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], (int, float)):\n        return min(listval)\n    elif isinstance(listval[0], str):\n        return min(listval, key=len)\n    else:\n        raise TypeError(\"Input must be a list of numeric or string values\")"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # split the word into words using snake case pattern\n    words = re.findall(r'(?<!^)(?=[A-Z])', word)\n    # join the words to form a camel case string\n    camel_case = ''.join(word.capitalize() for word in words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = re.findall(r'\\w+', word)\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    # Convert the rest of the words to camel case\n    for i in range(1, len(words)):\n        words[i] = re.sub(r'([a-z])([A-Z])', r'\\1_\\2', words[i])\n    # Join the words into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # replace underscore with space and capitalize the first letter\n    word = re.sub('_(.)', lambda match: match.group(1).upper(), word)\n    # split the word and capitalize the first letter of each word\n    return ''.join([word[0].upper() + word[1:].lower() for word in word.split('_')])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Remove all underscores from the word\n    word = re.sub('_', '', word)\n    # Split the word into a list of words\n    words = word.split()\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with underscores\n    camel_case_word = '_'.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the word into parts based on the underscore\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Converting the parts to camel case\n    camel_case_word = ''.join([words[0].capitalize(), *map(str.lower, words[1:])])\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using snake case\n    words = re.findall(r'(?<=[a-z])(?=[A-Z])|(?<!^)(?=[A-Z][a-z])', word)\n\n    # Capitalize the first letter of each word\n    camel_case = [word.capitalize() for word in words]\n\n    # Combine the words into a camel case string\n    camel_string = ''.join(camel_case)\n\n    return camel_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string into a list of words\n    words = word.split('_')\n\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n\n    # Join the list of words into a camel case string\n    result = ''.join(words)\n\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('([a-z])([A-Z])', r'\\1_\\2', word)\n    return word.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel = \"\"\n    word = word.replace(\"_\", \"\")\n    for i in range(len(word)):\n        if i == 0:\n            camel += word[i].upper()\n        else:\n            camel += word[i].lower()\n    return camel"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first_cap = True\n    camel_case = ''\n    \n    for char in word:\n        if char == '_':\n            first_cap = True\n        else:\n            if first_cap:\n                camel_case += char.upper()\n                first_cap = False\n            else:\n                camel_case += char\n            \n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Create an empty list to store the even numbers\n    even_list = []\n    # Loop through the list and add even numbers to the even_list\n    for num in l:\n        if num % 2 == 0:\n            even_list.append(num)\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n    l: a list of numbers\n\n    Returns:\n    a new list containing only even numbers from the original list\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n - 1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # checking if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in list1):\n        raise TypeError(\"Input should be a list of tuples\")\n    \n    # extracting the nth element from the list\n    if n < 0 or n >= len(list1):\n        raise ValueError(\"n should be a positive integer less than or equal to the length of the list\")\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Check if the input list is empty\n    if not list1:\n        return None\n    \n    # Check if n is a valid index in the list\n    if n < 0 or n >= len(list1):\n        return None\n    \n    # Extract the nth element from the list\n    return list1[n][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print(\"Error: n is greater than the length of the list.\")\n        return None\n    \n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list of tuples is not empty\n    if not list1:\n        return None\n    \n    # Check if the length of the list is less than or equal to n\n    if len(list1) <= n:\n        return None\n    \n    # Extract the nth element from the list of tuples\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        raise TypeError('Input must be a list')\n    if type(n)!= int:\n        raise TypeError('n must be an integer')\n    if n < 0 or n >= len(list1):\n        raise ValueError('n must be between 0 and the length of the list minus 1')\n    \n    # create a list to store the extracted elements\n    extracted_elements = []\n    \n    # iterate through the list of tuples\n    for tup in list1:\n        # extract the nth element and append it to the extracted_elements list\n        extracted_elements.append(tup[n])\n    \n    # return the extracted elements list\n    return extracted_elements"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n\n    # Loop through the list of tuples\n    for tup in list1:\n        # If the index is equal to the nth element, append it to the extracted_elements list\n        if tup[0] == n:\n            extracted_elements.append(tup[1])\n\n    # If there are fewer than n elements in the list of tuples, return None\n    if len(extracted_elements) < n:\n        return None\n\n    # Return the extracted element(s)\n    else:\n        return extracted_elements"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any of the elements in the first list\n    exist in the second list. It returns False otherwise.\n    \"\"\"\n\n    for item in list1:\n        if item in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and checks whether any value in the first list exists in the second list or not.\n    \n    Args:\n    list1 (list): The first list to search in.\n    list2 (list): The second list to search in.\n    \n    Returns:\n    bool: True if any value in list1 exists in list2, else False.\n    \"\"\"\n    \n    for value in list1:\n        if value in list2:\n            return True\n    \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1 (list): the first list\n    list2 (list): the second list\n\n    Returns:\n    bool: True if there is any overlap, False otherwise.\n    \"\"\"\n    # check if the lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # check if any value in list1 is in list2\n    for item in list1:\n        if item in list2:\n            return True\n\n    # if no overlap was found, the function returns False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n\n    Parameters:\n    list1 - a sequence\n    list2 - a sequence\n\n    Returns:\n    True if any value in list1 exists in list2 and False otherwise.\n\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = []\n    min_pair = []\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n            if product < -max_product:\n                min_product = -arr[i] * -arr[j]\n                min_pair = [arr[i], arr[j]]\n    \n    return max_pair + min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    max_product_pair = (0, 0)\n    min_product = float('inf')\n    min_product_pair = (0, 0)\n    \n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_product_pair = (i, i)\n        elif arr[i] > min_product and arr[i] < max_product:\n            max_product_pair = (i, i)\n            \n        if arr[i] < min_product:\n            min_product = arr[i]\n            min_product_pair = (i, i)\n        elif arr[i] < max_product and arr[i] > min_product:\n            min_product_pair = (i, i)\n    \n    return max_product_pair, min_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (float('-inf'), float('-inf'))\n    for i in arr:\n        if i > max_pair[0]:\n            max_pair = (max_pair[0], i)\n        elif i < max_pair[1]:\n            max_pair = (i, max_pair[1])\n    return max_pair[1]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n\n    if max1 * max2 < min1 * min2:\n        return max1, max2\n    else:\n        return min1, min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    min_product = float('inf')\n    min_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n            elif product < min_product:\n                min_product = product\n                min_pair = (arr[i], arr[j])\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    max_product = arr[0] * arr[1]\n    \n    for i in range(2, len(arr)):\n        temp = max1\n        max1 = max(max1 * arr[i], max2 * arr[i])\n        max2 = temp * arr[i]\n        \n        if max_product < max1 * arr[i]:\n            max_product = max1 * arr[i]\n            \n    return (max_product, arr[0], arr[1])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max_pair = (float('-inf'), float('-inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_pair[0]:\n                max_pair = (product, arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find a pair with the highest product from a given array of integers.\n    \"\"\"\n\n    # Initialize max_product to the first element of the array\n    max_product = arr[0]\n\n    # Initialize two variables to the minimum value of the array\n    left = arr[0]\n    right = arr[0]\n\n    # Loop through the rest of the array\n    for i in range(1, len(arr)):\n        # Update left and right variables if the current element is greater than the current maximum\n        if arr[i] > right:\n            left = right\n            right = arr[i]\n        # Update left variable if the current element is greater than the current left element\n        elif arr[i] > left:\n            left = arr[i]\n        # Update right variable if the current element is greater than the current right element\n        elif arr[i] > right:\n            right = arr[i]\n\n        # Update max_product if the current product is greater than the previous max_product\n        if left * right > max_product:\n            max_product = left * right\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the pair with highest product\n    max_pair = (arr[0], arr[1])\n    min_pair = (arr[-1], arr[-2])\n\n    return max_pair, min_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples where each tuple contains common first element of input tuples.\n    '''\n    \n    # create a dictionary to store the frequency of each element in the input list\n    freq = {}\n    \n    # loop through the input list and update the frequency dictionary\n    for tup in Input:\n        if tup[0] in freq:\n            freq[tup[0]] += 1\n        else:\n            freq[tup[0]] = 1\n    \n    # create a list to store the output tuples with common first element\n    output = []\n    \n    # loop through the input list again and add tuples with common first element to the output list\n    for tup in Input:\n        if tup[0] in freq and freq[tup[0]] == 1:\n            output.append(tup)\n            freq[tup[0]] -= 1\n    \n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        if len(common_elements) == 0:\n            common_elements.append(i[0])\n        elif i[0] == common_elements[-1]:\n            continue\n        else:\n            break\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # create a set to store unique elements of Input\n    unique_elements = set()\n\n    # loop through Input and add unique elements to set\n    for element in Input:\n        if element[0] not in unique_elements:\n            unique_elements.add(element[0])\n\n    # create a new list to store common elements\n    common_elements = []\n\n    # loop through unique elements and add common elements to new list\n    for unique_element in unique_elements:\n        count = 0\n        for element in Input:\n            if element[0] == unique_element:\n                count += 1\n        if count > 0:\n            common_elements.append((unique_element, count))\n\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element is None:\n            common_element = i[0]\n        elif i[0] == common_element:\n            pass\n        else:\n            common_element = None\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # create a set to store unique elements\n    unique_elements = set()\n\n    # loop through each tuple in the input list\n    for i in range(len(Input)):\n        # get the first element from the current tuple\n        first_element = Input[i][0]\n\n        # if the first element is not in the set, add it to the set\n        if first_element not in unique_elements:\n            unique_elements.add(first_element)\n\n    # return the set as the result\n    return unique_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    \n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            continue\n        else:\n            common_element = None\n            break\n    \n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a dictionary to store common elements\n    common_elements = {}\n    # iterate over all tuples in the input list\n    for i in Input:\n        # get the first element of the tuple\n        first_element = i[0]\n        # check if the first element is already in the dictionary\n        if first_element in common_elements:\n            # if it is, increment the count of the element in the dictionary\n            common_elements[first_element] += 1\n        else:\n            # if it isn't, add the element to the dictionary with a count of 1\n            common_elements[first_element] = 1\n    # create a list of tuples with the common elements and their counts\n    output = [(k, v) for k, v in common_elements.items() if v == max(common_elements.values())]\n    # return the list of tuples with the common elements and their counts\n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    common = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common.append((Input[i][0], Input[i][1], Input[j][1]))\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    common = []\n    for i in range(len(Input)):\n        for j in range(len(Input)-i-1):\n            if Input[j][0] == Input[j+1][0]:\n                common.append(Input[j])\n                Input[j] = None\n                Input[j+1] = None\n                break\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for item in Input:\n        first_element = item[0]\n        if first_element not in common_elements:\n            common_elements.append(first_element)\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if len(str(ele)) > max_len:\n            max_len = len(str(ele))\n            max_ele = ele\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    max_length = 0\n    max_element = None\n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    if len(lst) == 1: # base case\n        return lst[0]\n    else:\n        return max(lst[0], Find_Max(lst[1:])) # recursive call\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst: \n        if len(ele) > max_len: \n            max_len = len(ele) \n            max_ele = ele\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n        print(rounded_num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        rounded = round(i)\n        total += rounded\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum(round(x) for x in list1)\n    length = len(list1)\n    print(total * length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round each number in the list\n    rounded_list = [round(num) for num in list1]\n    # Calculate the total sum\n    total_sum = sum(rounded_list)\n    # Multiply the total sum by the length of the list\n    result = total_sum * len(list1)\n    # Print the result\n    print(result)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initializing the sum variable to zero\n    sum = 0\n    \n    # Looping through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculating the cube of the current even number\n        cube = i**3\n        \n        # Adding the cube to the sum\n        sum += cube\n        \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n        count += 1\n    return sum, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize sum variable\n    sum = 0\n    \n    # Loop through first n even natural numbers\n    for i in range(1, n+1, 2): \n        # Add cube of i to sum\n        sum += i**3\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize variables\n    sum_cubes = 0\n    number = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        number = i ** 3\n        sum_cubes += number\n\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cube = 0\n    for i in range(n):\n        sum_cube += i**3\n    return sum_cube\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of the first\", n, \"even natural numbers is\", cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join([str(elem) for elem in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # initialize an empty string to concatenate the elements\n    concat_str = \"\"\n    # loop through each element of the tuple\n    for element in test_tup:\n        # concatenate the element with the delimiter to the string\n        concat_str += str(element) + \" \"\n    # return the concatenated string with the delimiter\n    return concat_str.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) +''\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # concatenate elements of tuple using join() method\n    concatenated_tuple = ', '.join(str(i) for i in test_tup)\n    return concatenated_tuple"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    \"\"\"\n    This function takes a tuple as input and concatenates each element of the tuple by the delimiter.\n\n    :param test_tup: A tuple of strings\n    :param delimiter: The delimiter to be used for concatenating the elements of the tuple\n    :return: A string representing the concatenated elements of the tuple\n    \"\"\"\n    concatenated_string = \"\"\n    for elem in test_tup:\n        concatenated_string += str(elem) + delimiter\n    # Removing the extra delimiter at the end of the string\n    concatenated_string = concatenated_string[:-2]\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter ='- '\n    return delimiter.join(test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0  \n    for i in range(1, n+1):  \n        sum_cubes += i**3  \n    average_cube = sum_cubes / n  \n    return average_cube  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n\n    average = sum / (n**2)\n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    return sum(cubes) / len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(n+1):\n        sum_cubes += i**3\n    return sum_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    # Initialize the sum of cubes and the count of cubes to zero\n    sum_cubes = 0\n    count_cubes = 0\n\n    # Loop through the first n natural numbers and calculate the cubes\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        count_cubes += 1\n\n    # Calculate the average of cubes\n    average_of_cubes = sum_cubes / count_cubes\n\n    # Return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 1:\n        raise ValueError(\"n should be greater than or equal to 1.\")\n    elif n == 1:\n        return 1\n    else:\n        sum_of_cubes = 0\n        for i in range(1, n+1):\n            sum_of_cubes += i**3\n        average = sum_of_cubes / (n**2)\n        return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\nn = int(input(\"Enter the number of natural numbers: \"))\nresult = find_Average_Of_Cube(n)\nprint(\"The average of cubes of first {} natural numbers is: {}\".format(n, result))"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return tuple(rear_elements)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [string[-1] for string in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    Counts the number of sublists in the list that contain the given element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n\n    Parameters:\n    nums (list): a list of numbers\n\n    Returns:\n    list: a new list containing only the odd numbers from the input list\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_re = r'\\d{4}-\\d{2}-\\d{2}'\n    dd_mm_yyyy_re = r'\\d{2}-\\d{2}-\\d{4}'\n    yyyy_mm_dd_regex = re.compile(yyyy_mm_dd_re)\n    dd_mm_yyyy_regex = re.compile(dd_mm_yyyy_re)\n    match = yyyy_mm_dd_regex.search(dt)\n    if match:\n        return match.group().replace('-', '/')\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\1-\\2', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    pattern = re.compile(date_format)\n    match = pattern.search(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match a valid date string\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    # Use the re.search() function to search for a match in the input date string\n    match = re.search(pattern, dt)\n    # If a match is found, split the date string into year, month, and day components\n    if match:\n        year, month, day = match.groups()\n        # Convert the year, month, and day components to the desired format\n        year = str(day) + '-' + str(month) + '-' + str(year)\n        return year\n    # If no match is found, return the original date string as is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use the re.sub() function to replace the month and day components with the corresponding month name and day name\n    new_date = re.sub(r'\\d{2}-', lambda m: f'{m.group().split(\"-\")[2]}-', dt)\n    # Remove the leading zeroes from the day component if any\n    new_date = re.sub(r'-0', lambda m: m.group()[1:], new_date)\n    # Split the new date string into year, month, and day components\n    year, month, day = new_date.split('-')\n    # Convert the year component to the desired format (YYYY)\n    year = f'{year[-2:]}' + year[:2]\n    # Return the new date in the desired format (dd-mm-yyyy)\n    return f'{day}-{month}-{year}'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match dates in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Use the re.sub() method to replace all occurrences of the pattern with the desired format\n    dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace hyphens with spaces and split the date into year, month, and day components\n    date_parts = re.split(r'[-]', dt)\n\n    # Convert the year and month components to integers\n    year = int(date_parts[0])\n    month = int(date_parts[1])\n\n    # Check if the month is January, February, or March\n    if month in [1, 2, 3]:\n        # If the month is February, check if it's a leap year\n        if year % 4 == 0:\n            # If it is, adjust the month to February 29\n            if month == 2 and year % 100 == 0:\n                if year % 400 == 0:\n                    month = 2\n                else:\n                    month = 2\n            # If it's not a leap year, adjust the month to February 28\n            else:\n                month = 2\n        # If the month is not February, adjust the month to March\n        else:\n            month = 3\n\n    # Set the day component to 1\n    day = 1\n\n    # Format the date in the desired format\n    formatted_date = f\"{day:02}-{month:02}-{year:04}\"\n\n    return formatted_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_dt = day + '-' + month + '-' + year\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    # Find the largest element in the array\n    n = len(my_list)\n    largest = my_list[0]\n    for i in range(1, n):\n        if my_list[i] > largest:\n            largest = my_list[i]\n    \n    # Set gap size\n    gap = n // 2\n    \n    while gap > 0:\n        # Insertion sort for this gap size\n        for i in range(gap, n):\n            # Bubble sort\n            for j in range(i, gap, -gap):\n                if my_list[j] < my_list[j-gap]:\n                    my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Define the increment sequence for each sub-list\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = h*3 + 1\n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > key:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h+1\n\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Insertion sort on smaller arrays\n    for gap in range(n//2):\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Calculate the step value for each pass\n    step = n // 2\n    \n    while step > 0:\n        # Perform insertion sort for this step\n        for i in range(step, n):\n            key = my_list[i]\n            j = i\n            while j >= step and my_list[j-step] > key:\n                my_list[j] = my_list[j-step]\n                j -= step\n            my_list[j] = key\n        step //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Define the increment value\n    increment = len(my_list) // 2\n    \n    while increment > 0:\n        # Iterate over all elements in the array\n        for i in range(increment, len(my_list)):\n            # Define the current element and the previous element\n            current = my_list[i]\n            j = i - increment\n            \n            # Move the previous element to its correct position in the array\n            while j >= 0 and my_list[j] > current:\n                my_list[j+increment] = my_list[j]\n                j -= increment\n            \n            my_list[j+increment] = current\n        \n        # Decrease the increment value\n        increment //= 2\n    \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty tuple to store the elementwise and tuples\n    result = ()\n    # iterate through the elements of both tuples and check if they are equal\n    for i in range(len(test_tup1)):\n        # if the elements are equal, append 1 to the tuple\n        if test_tup1[i] == test_tup2[i]:\n            result += (1,)\n    # return the elementwise and tuples\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check that the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length\")\n\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = (None,) * len(test_tup1)\n\n    # Extract the elementwise and tuples from the input tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = (test_tup1[i] & test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the elementwise and tuples from the given two tuples.\n    and_tup1 = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    and_tup2 = tuple(x and y for x, y in zip(test_tup2, test_tup1))\n\n    # Return the elementwise and tuples.\n    return and_tup1, and_tup2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same number of elements\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] & test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Use zip() function to iterate over the two tuples and extract the corresponding elements\n    and_list = [(i, j) for i, j in zip(test_tup1, test_tup2) if i & j]\n    # Return the and_list as a tuple\n    return tuple(and_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize a new tuple to hold the elementwise and tuples\n    and_tup = ()\n\n    # iterate through each element in both tuples\n    for i in range(len(test_tup1)):\n        # add the elementwise and of the corresponding elements to the new tuple\n        and_tup += (test_tup1[i] & test_tup2[i],)\n\n    # return the new tuple of elementwise and tuples\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the tuples must be equal.\")\n    # initialize an empty list to store the and tuples\n    and_tuples_list = []\n    # iterate over the two tuples and extract the elementwise and tuples\n    for i in range(len(test_tup1)):\n        and_tuples_list.append((test_tup1[i] & test_tup2[i]))\n    return and_tuples_list"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant > 0:\n        directrix = (-b + determinant**0.5)/(2*a)\n    elif determinant == 0:\n        directrix = -b/(2*a)\n    else:\n        directrix = -b/(2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n\n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    directrix = (-b + discriminant**0.5) / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = (b ** 2) - (4 * a * c)\n    \n    # calculate the directrix\n    if discriminant > 0:\n        directrix = (-b + ((b ** 2) - (4 * a * c)) ** 0.5) / (2 * a)\n    elif discriminant == 0:\n        directrix = -b / (2 * a)\n    else:\n        directrix = -b / (2 * a)\n    \n    # return the directrix\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc == 0:\n        return \"There are no real solutions\"\n    elif disc > 0:\n        return \"There are two real solutions\"\n    else:\n        return \"One real solution\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # If the discriminant is positive, then the directrix exists\n    if disc > 0: \n        # Calculate the root of the discriminant\n        root = (-b + disc**0.5)/(2*a)\n\n        # Check if the root is real and positive\n        if root.is_real and root.is_positive: \n            # Return the root\n            return root\n        else: \n            # If the root is not real or not positive, then the directrix does not exist\n            return None\n    # If the discriminant is zero, then the directrix is zero\n    elif disc == 0: \n        return 0\n    # If the discriminant is negative, then there is no real root, and the directrix does not exist\n    else: \n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**(0.5)) / (2*a)\n        x2 = (-b - discriminant**(0.5)) / (2*a)\n    elif discriminant == 0:\n        x1 = x2 = -b / (2*a)\n    else:\n        print('No real roots')\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0:\n        directrix = (-b + discriminant**0.5)/(2*a)\n        return directrix\n    elif discriminant == 0:\n        directrix = -b/(2*a)\n        return directrix\n    else:\n        return \"The equation does not have a unique directrix\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from list1 and store it in set1\n    set1 = set(list1)\n    # Create a set from list2 and store it in set2\n    set2 = set(list2)\n    # Find the intersection of set1 and set2 and store it in intersection\n    intersection = set1.intersection(set2)\n    # Return true if intersection is not empty, else return false\n    return bool(intersection)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # check if there are any common elements between the two sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # convert the lists to sets to remove duplicates and ensure uniqueness\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # if both sets are the same size, then there is at least one common element\n    if len(set1) == len(set2):\n        return True\n\n    # if one set is a subset of the other, then there is at least one common element\n    if set1.issubset(set2) or set2.issubset(set1):\n        return True\n\n    # if there are any common elements, then there is at least one common element\n    return any(elem in set1 for elem in set2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for item in list1:\n        if item in list2:\n            common.append(item)\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Convert the lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n\n    # Check if the two sets have any common elements\n    if list1.intersection(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length1 = 2 * base1 + base2\n    length2 = 2 * base2 + base1\n    length = length1 + length2\n\n    if height % 2 == 0:\n        median = (length1 + length2) / 2\n    else:\n        median = length1\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium using Heron's formula\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    area_sum = area1 + area2\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + 2 * height\n\n    # Calculate the length of the shorter side\n    shorter_side = perimeter / 2\n\n    # Calculate the lengths of the other two sides using the Law of Cosines\n    length1 = shorter_side / 2\n    length2 = shorter_side - length1\n\n    # Calculate the area of the trapezium using the trapezoidal rule\n    area = (area_sum + length1 * height + length2 * height) / 2\n\n    # Calculate the lengths of the other two sides using the Law of Cosines\n    length3 = (area / (2 * height)) ** 0.5\n    length4 = (area / (2 * height)) ** 0.5 - length3\n\n    # Calculate the lengths of the two sides of the trapezium\n    length1 = length1 * 2\n    length2 = length2 * 2\n    length3 = length3 * 2\n    length4 = length4 * 2\n\n    # Sort the lengths to get the median value\n    sorted_lengths = sorted([length1, length2, length3, length4])\n    median = sorted_lengths[len(sorted_lengths) // 2]\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function computes the median length of a trapezium given its base1, base2, and height.\n    '''\n    # Compute the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 * height\n    # Compute the lengths of the three right triangles\n    a = 0.5 * base1\n    b = 0.5 * base2\n    c = height\n    # Compute the lengths of the three equilateral triangles\n    d = 0.5 * base1\n    e = 0.5 * base1\n    f = height\n    # Find the lengths of the three longest sides using the Pythagorean theorem\n    s = (a**2 + b**2) ** 0.5\n    t = (a**2 + c**2) ** 0.5\n    u = (b**2 + c**2) ** 0.5\n    # Find the lengths of the three shortest sides using Heron's formula\n    A = (a * b * c) ** 0.5\n    B = (b * c * d) ** 0.5\n    C = (a * d * e) ** 0.5\n    # Find the lengths of the three mid-sides using the Pythagorean theorem\n    x = (a**2 + b**2) ** 0.5\n    y = (b**2 + c**2) ** 0.5\n    z = (a**2 + c**2) ** 0.5\n    # Compute the lengths of the three mid-triangles using the Law of Cosines\n    phi = 180 * (a**2 + b**2) / (a * b)\n    theta = 180 * (c**2 + b**2) / (c * b)\n    psi = 180 * (a**2 + c**2) / (a * c)\n    # Find the lengths of the two mid-circles\n    r1 = (x**2 + y**2) ** 0.5\n    r2 = (z**2 + y**2) ** 0.5\n    # Find the areas of the three right triangles\n    area1 = a * b * c\n    area2 = b * c * d\n    area3 = a * d * e\n    # Compute the lengths of the two largest triangles\n    S = (c * (e + f) * (c + d)) ** 0.5 / 2\n    T = (c * (d + f) * (a + e)) ** 0.5 / 2\n    # Find the area of the smallest triangle using the Law of Cosines\n    area4 = 180 * (a**2 + b**2) / (a * b) ** 2\n    # Compute the area of the trapezium using the Law of Cosines\n    area_trapezium = (A * area1 + B * area2 + C * area3) / 2\n    # Compute the area of the trapezium using the Law of Cosines (2)\n    area_trapezium2 = (phi * r1 * r1 + theta * r2 * r2 + psi * r1 * r2) / 2\n    # Find the area of the smallest trapezium using the Law of Cosines\n    area_smallest_trapezium = 0.5 * area_trapezium\n    # Compute the median length of the trapezium using the Law of Cosines (3)\n    median_length = (area_trapezium + area_trapezium2 + area_smallest_trapezium) / 3\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    median = area / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5*base1*base2 + 0.5*base2*height + 0.5*height*height\n    \n    base_length = math.sqrt(area)\n    \n    if area < height*base1*base2:\n        return (base1 + base2)/2\n    elif area > height*base1*base2:\n        return base_length\n    else:\n        return 0.5*base_length + 0.5*height"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of the trapezium using Heron's formula\n    s = (base1 + base2) / 2\n    area = (base1 * height) / 2 + (base2 * height) / 2\n    trapezium_length = 2 * s * height / area\n\n    # Calculate the areas of the base and trapezium using the trapezium formula\n    base1_area = height * base1 / 2\n    base2_area = height * base2 / 2\n    trapezium_area = (base1 * height + base2 * height) / 2\n\n    # Find the difference between the areas of the two bases\n    difference_area = abs(base1_area - base2_area)\n\n    # Calculate the difference between the areas of the two trapeziums\n    difference_trapezium = abs(trapezium_area - trapezium_length * height)\n\n    # Calculate the median length of the trapezium using the formula\n    median_length = 0.5 * (trapezium_length + base1 + base2)\n\n    # Calculate the difference between the medians of the two trapeziums\n    difference_median = abs(median_length - trapezium_length)\n\n    # Determine which base has the smaller area and return the smaller one\n    if difference_area < difference_trapezium:\n        return base1\n    elif difference_area > difference_trapezium:\n        return base2\n    else:\n        return None"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = base1 * height\n    half_area1 = base1 * 0.5 * height\n    half_area2 = base2 * 0.5 * height\n    total_area = area + half_area1 + half_area2\n    median_length = total_area / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2) + height\n\n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = 0.5 * (base1 + base2)\n\n    # Calculate the area of the base\n    base_area = 0.5 * (base1 * base2) * height\n\n    # Calculate the area of the hypotenuse\n    hypotenuse_area = 0.5 * base1 * base2\n\n    # Calculate the area of the semicircle\n    semicircle_area = 2 * (area - 0.25 * hypotenuse_area)\n\n    # Calculate the area of the trapezium that lies inside the semicircle\n    inside_area = 0.5 * (semi_perimeter * (base1 + base2) + height * (0.25 * base1 * base2 + base1 * base2))\n\n    # Calculate the length of the trapezium that lies inside the semicircle\n    inside_length = 0.5 * (height * (0.25 * base1 * base2 + base1 * base2) + base1 + base2)\n\n    # Calculate the area of the trapezium that lies outside the semicircle\n    outside_area = 0.5 * (semi_perimeter * (base1 + base2) - height * (0.25 * base1 * base2 + base1 * base2))\n\n    # Calculate the length of the trapezium that lies outside the semicircle\n    outside_length = 0.5 * (height * (0.25 * base1 * base2 + base1 * base2) - base1 - base2)\n\n    # Determine the area of the trapezium that lies between the two semicircles\n    area_between = 0.5 * (inside_area + outside_area)\n\n    # Determine the length of the trapezium that lies between the two semicircles\n    length_between = 0.5 * (inside_length + outside_length)\n\n    # Determine the distance between the two semicircles\n    distance = math.sqrt(area_between * area_between - length_between * length_between)\n\n    # Determine the location of the point on the base of the trapezium that lies closest to the semicircle\n    closest_point = 0.5 * distance / area_between\n\n    # Determine the length of the base of the trapezium that lies closest to the semicircle\n    closest_base = 0.5 * (base1 + base2) * closest_point\n\n    # Calculate the area of the base of the trapezium that lies closest to the semicircle\n    closest_base_area = 0.5 * (closest_base * closest_base) * height\n\n    # Determine the area of the trapezium that lies closest to the semicircle\n    closest_area = closest_base_area + semicircle_area\n\n    # Determine the length of the trapezium that lies closest to the semicircle\n    closest_length = 0.5 * (height * (0.25 * closest_base * closest_base + closest_base * closest_base) + closest_base + closest_base)\n\n    # Determine the length of the other half of the trapezium that lies closest to the semicircle\n    other_half_length = 0.5 * (height * (0.25 * base1 * base2 + base1 * base2) - closest_length)\n\n    # Calculate the area of the trapezium that lies between the closest base and the other half of the trapezium\n    between_area = 0.5 * (closest_area - other_half_length)\n\n    # Determine the length of the trapezium that lies between the closest base and the other half of the trapezium\n    between_length = 0.5 * (height * (0.25 * base1 * base2 + base1 * base2) - other_half_length)\n\n    # Calculate the length of the trapezium that lies outside the semicircle\n    outside_length = 0.5 * (height * (0.2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Calculate the length of the semi-perimeter of the trapezium\n    semi_perimeter = (base1 + base2) / 2\n    \n    # Calculate the length of the longest side of the trapezium\n    longest_side = (base1 ** 2 + height ** 2) ** 0.5\n    \n    # Calculate the length of the shortest side of the trapezium\n    shortest_side = (base2 ** 2 + height ** 2) ** 0.5\n    \n    # Calculate the length of the area of the trapezium\n    area_length = area * longest_side / shortest_side\n    \n    # Find the median length of the trapezium\n    median = area_length / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 + 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the longest side of the trapezium\n    longest_side = 0.5 * area\n\n    # Calculate the lengths of the two shorter sides\n    shorter_sides = [base1, base2]\n    shorter_sides.sort()\n    shorter_side1 = shorter_sides[0]\n    shorter_side2 = shorter_sides[1]\n\n    # Calculate the length of the shortest side of the trapezium\n    shortest_side = 0.5 * area - shorter_side1 - shorter_side2\n\n    # Determine which side is longer\n    if longest_side > shorter_side1 + shorter_side2:\n        longer_side = longest_side - shorter_side1 - shorter_side2\n        shorter_side1 = 0\n        shorter_side2 = longest_side\n    else:\n        longer_side = shorter_side1 + shorter_side2\n        shorter_side1 = shorter_side2\n        shorter_side2 = 0\n\n    # Calculate the length of the trapezium itself\n    trapezium_length = 0.5 * longer_side * (height - 0.5 * shorter_side1)\n\n    # Calculate the median of the two sides\n    median_side1 = shorter_side1 + longer_side\n    median_side2 = shorter_side1 + shorter_side2\n\n    # Determine the median of the trapezium\n    median = 0.5 * (median_side1 + median_side2)\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(arr[i], 'is greater than', number)\n            break\n    else:\n        print(number, 'is not greater than any element of the array.')"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n\n    # initialize a variable to store the count of greater elements\n    count = 0\n\n    # loop through the array and check if each element is greater than the given number\n    for i in arr:\n        if i > number:\n            count += 1\n\n    # return the count of greater elements\n    return count"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*?b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w+b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a(?=b)\"\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"This is a test string with ab's.\"\nresult = text_match_one(text)\nprint(result)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b+')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n\n    Example:\n    last_Digit(1234) -> 4\n\n    \"\"\"\n\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # taking the last digit of a number\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n\n    :param n: An integer.\n    :return: An integer.\n    \"\"\"\n    # Convert the given number to a string\n    str_num = str(n)\n\n    # Find the length of the string\n    length = len(str_num)\n\n    # Return the last digit of the string\n    return int(str_num[length-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to string\n    num_str = str(n)\n    # convert the string to list of characters\n    char_list = list(num_str)\n    # get the last character of the list\n    last_char = char_list[-1]\n    # convert the last character to an integer\n    last_int = int(last_char)\n    # return the last integer digit\n    return last_int"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    # extract the last digit of the number using string manipulation\n    last_digit = str(n)[-1]\n    # convert the last digit to an integer and return it\n    return int(last_digit)"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with only the negative numbers.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing the negative numbers of the input list.\n    '''\n    # Create an empty list to store the negative numbers\n    neg_list = []\n    # Loop through each element in the input list\n    for num in list1:\n        # If the element is negative, append it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # Return the neg_list containing the negative numbers\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty string to store the result\n    result = ''\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is odd (i.e. its remainder when divided by 2 is not 0), append it to the result string\n        if char % 2!= 0:\n            result += char\n            \n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit() and int(char)%2 == 0:\n            continue\n        else:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            if int(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # convert the string to a list of characters\n    char_list = list(str1)\n    # initialize an empty string for the modified string\n    modified_str = ''\n    # iterate through the list of characters and append even characters to the modified string\n    for char in char_list:\n        if int(char) % 2 == 0:\n            modified_str += char\n    # return the modified string\n    return modified_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes odd characters from the given string.\n    \"\"\"\n    return ''.join([char for char in string if char.isdigit() or (char.isalpha() and int(char) % 2 == 0)])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if char.islower():\n                if char % 2!= 0:\n                    new_str += char\n            else:\n                if char % 2!= 0:\n                    new_str += char.lower()\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j] or (test_list[i][1], test_list[j][0]) in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    Args:\n        test_list: list of tuples\n\n    Returns:\n        int: number of bidirectional tuple pairs\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0]:\n                if test_list[i][1] < test_list[j][1]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Count bidirectional tuple pairs in a list of tuples.\n    '''\n    count = 0\n    for pair in test_list:\n        if pair[::-1] in test_list:\n            count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for i in L:\n        single *= i\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #initialize the single integer variable\n    single_integer = 0\n    \n    #loop through each element in the list\n    for num in L:\n        #if the current element is a multiple of 5, add it to the single integer variable\n        if num % 5 == 0:\n            single_integer += num\n    \n    #return the single integer\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for num in L:\n        single *= num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in L:\n        total += i\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result variable\n    result = 0\n    \n    # iterate through the list of numbers\n    for num in L:\n        # add the current number to the result variable\n        result += num\n    \n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum_ = 0\n    for i in L:\n        sum_ += i\n    return sum_"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[a-z][a-z]*\\b', text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n\n    # Loop through each adverb and append its position to the positions list\n    for i, adv in enumerate(adverbs):\n        positions.append(text.index(adv))\n\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b([a-z]+)([A-Z][a-z]+)\\b'\n    # Use the regular expression pattern to find all the adverbs in the sentence\n    adverbs = re.findall(pattern, text)\n    # Check if there are any adverbs in the sentence\n    if not adverbs:\n        return \"No adverbs found in the sentence.\"\n    # Iterate through all the adverbs and find their positions in the sentence\n    for i, adv in enumerate(adverbs):\n        # Define the regular expression pattern to match the adverb and its position in the sentence\n        pattern = r'\\b([a-z]+)([A-Z][a-z]+) ([A-Z][a-z]+)\\b'\n        # Use the regular expression pattern to find the position of the adverb in the sentence\n        position = re.search(pattern, text).span()\n        # Print the adverb and its position\n        print(adv[0].capitalize(), \":\", position)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b\\w*adv[.]?s?\\b', re.IGNORECASE)\n    \n    # Find all the matches of the pattern in the input text\n    matches = pattern.findall(text)\n    \n    # If no matches found, return empty list\n    if not matches:\n        return []\n    \n    # Sort the matches by their positions in the text\n    matches.sort(key=lambda x: text.find(x))\n    \n    # Return the sorted matches and their positions in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to match adverbs and their positions in the sentence\n    adverbs = re.findall(r'\\b\\w+ly\\b|\\b\\w+lys\\b|\\b\\w+ily\\b|\\b\\w+ilys\\b', text, flags=re.IGNORECASE)\n    \n    if adverbs:\n        print(\"The first adverb(s) is/are:\", \", \".join(adverbs))\n    else:\n        print(\"No adverbs found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    pattern = r'\\b\\w+(ed|ing|s|ing|ly)\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        adverb = match.group()\n        adverbs.append(adverb)\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    \n    # Loop through all adverbs and find their positions in the text\n    for i, adv in enumerate(adverbs):\n        # Use regular expressions to find the position of the adverb in the sentence\n        position = text.find(adv)\n        \n        # Print the adverb and its position in the sentence\n        print(adv, position)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b(\\w+)(\\W)'\n    \n    # Find all non-word characters in the text\n    non_word_chars = re.findall(r'\\W+', text)\n    \n    # Find all adverbs using the regular expression pattern\n    adverbs = re.findall(pattern, text)\n    \n    # Find the positions of the adverbs in the text\n    adverb_positions = []\n    for i, adverb in enumerate(adverbs):\n        if i == 0:\n            # If this is the first adverb, append its position to the list\n            adverb_positions.append(len(non_word_chars))\n        else:\n            # If this is not the first adverb, find its position relative to the previous adverb\n            prev_adverb = adverbs[i-1]\n            prev_pos = adverb_positions[i-1]\n            pos = non_word_chars.index(prev_adverb) + prev_pos + len(prev_adverb)\n            adverb_positions.append(pos)\n    \n    # Return a list of tuples containing the adverb and its position in the text\n    return [(adverb, pos) for adverb, pos in zip(adverbs, adverb_positions)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w*[a-zA-Z]+\\b'\n    \n    # Use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop through all the matches and print their positions\n    for i, match in enumerate(matches):\n        print(f\"Adverb {i+1}: {match}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    if adverbs:\n        print(\"Adverbs:\", adverbs)\n        print(\"Positions:\", [text.find(adv) for adv in adverbs])\n    else:\n        print(\"No adverbs found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regex pattern for adverbs\n    adverb_pattern = r'\\b(?:adverb)\\b'\n\n    # Find all matches for the pattern in the text\n    matches = re.findall(adverb_pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n\n    # Iterate over the matches and extract the position\n    for match in matches:\n        start, end = match.span()\n        adverb_positions.append(start)\n\n    # Return the adverb positions in a list\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (2 * l) * (2 * l)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l * l + 12 * l + 8\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n    return count[0] / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the list to an array of integers\n    arr = array('i', nums)\n    # count the number of positive numbers\n    count = sum(1 for num in arr if num > 0)\n    # calculate the ration as a float\n    ratio = count / len(arr)\n    # return the ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = 0\n    total_nums = len(nums)\n\n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n\n    return positive_nums / total_nums"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i')\n    negatives = array('i')\n    zeroes = array('i')\n    for num in nums:\n        if num > 0:\n            positives.append(1)\n        elif num < 0:\n            negatives.append(1)\n        else:\n            zeroes.append(1)\n    pos_count = sum(positives) / len(positives)\n    neg_count = sum(negatives) / len(negatives)\n    zero_count = sum(zeroes) / len(zeroes)\n    return pos_count, neg_count, zero_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array of integers to store the positive numbers\n    positives = array('i')\n    # iterate through the input array and add positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n    # find the number of positive numbers in the array\n    num_positives = positives.itemsize * len(positives)\n    # calculate the ration of positive numbers and return it as a float\n    return float(num_positives) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    pos_ratio = 100 * pos_count / (pos_count + neg_count + zero_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to an array of booleans\n    arr = array('b', nums)\n\n    # Initialize variables for the positive and negative counts\n    pos_count = 0\n    neg_count = 0\n\n    # Iterate through the array and count positive and negative numbers\n    for num in arr:\n        if num == True:\n            pos_count += 1\n        elif num == False:\n            neg_count += 1\n\n    # Calculate the ratio of positive numbers to total numbers\n    pos_ratio = pos_count / (pos_count + neg_count)\n\n    # Return the ratio as a float\n    return round(pos_ratio, 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_list = array('i', nums)\n    positive_count = 0\n    negative_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    ratio = positive_count/len(num_list)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    zero = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        else:\n            zero += 1\n    return [positive, negative, zero] / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf') #initialize largest to negative infinity\n    for num in list1: #iterate through list\n        if num < 0 and num > largest: #check if num is negative and greater than largest\n            largest = num #update largest if necessary\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an input and returns the largest negative number from the list.\n    '''\n    largest = list1[0]\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf') # initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest: # check if current number is negative and greater than largest so far\n            largest = num # update largest with current number\n    return largest # return largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = float('-inf')\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    return max(filter(lambda x: x < 0, lst))"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = -1\n    for num in list1: \n        if num < 0 and num > neg_num: \n            neg_num = num\n    return neg_num"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the length of the tuple is greater than k, trim the tuple by k\n        if len(tup) > K:\n            tup = tup[:K]\n        # If the length of the tuple is less than or equal to k, do nothing\n        else:\n            continue\n        # Replace the trimmed tuple with the original tuple\n        test_list.remove(tup)\n        test_list.append(tup)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tup[:K]\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j] for j in range(len(test_list[i])) if j % K!= 0)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create a new list to store the trimmed tuples\n    trimmed_list = []\n    # loop through the tuples in the given list\n    for tup in test_list:\n        # if the length of the tuple is greater than k, trim it to k elements\n        if len(tup) > K:\n            tup = tup[:K]\n        # add the trimmed tuple to the new list\n        trimmed_list.append(tup)\n    # return the new list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                del test_list[i][j]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [[item[i] for item in test_list] for i in range(len(test_list[0]))]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tup[:K] + (tup[K+1:],)\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i]*test_tup2[i])\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length.\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns their index multiplication.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = ()\n    # Loop through the elements of the input tuples\n    for i in range(len(test_tup1)):\n        # Perform the index wise multiplication of the i-th element of the input tuples\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through both tuples and multiply their elements at each index\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n        \n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for item in lst: \n        if item in count_dict: \n            count_dict[item] += 1\n        else: \n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a set to remove duplicates and then convert it back to a list\n    unique_lst = list(set(tup))\n    count_dict = Counter(unique_lst)\n    count_dict.update(lst)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = Counter(lst)\n    \n    # Loop through each element in the tuple and check if it is in the dictionary\n    for element in tup:\n        if element in count_dict:\n            count_dict[element] += 1\n    \n    # Return the dictionary with the count of each element in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for i in tup: \n        count[i] += tup.count(i)\n    return count "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert tuple to list\n    lst = list(tup)\n    # Create a dictionary to store the count of each element in the list\n    count = Counter(lst)\n    # Return the dictionary\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    count_dict = dict(count)\n    count_lst = [count_dict[x] for x in lst]\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count = Counter()\n    for item in tup:\n        count.update([item])\n    for item in lst:\n        count.update([item])\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Counter object to count the occurrence of each element in the list\n    count = Counter(lst)\n    # Dictionary to store the count of each element in the list\n    element_count = {}\n    # Iterate through the elements of the tuple\n    for element in tup: \n        # Check if the element is in the count dictionary. If not, add it with a count of 1\n        if element in count: \n            element_count[element] = count[element]\n        else: \n            element_count[element] = 1\n    return element_count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Using Counter to count the occurence of each element in the tuple\n    count = Counter(tup) \n    # Using a loop to count the occurence of each element in the list\n    for element in lst: \n        count[element] += 1 \n    # Return the dictionary containing the counts of each element in the tuple\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a dictionary to store the count of each element in lst\n    count_dict = Counter(lst)\n    \n    # initialize an empty dictionary to store the count of each element in tup\n    count_in_tup = {}\n    \n    # loop through each element in tup\n    for item in tup:\n        # check if item is in count_dict\n        if item in count_dict:\n            # if it is, add 1 to its count in count_in_tup\n            count_in_tup[item] = count_in_tup.get(item, 0) + 1\n    \n    # return the count_in_tup dictionary\n    return count_in_tup"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n\n    # Create an empty list to store the cubes\n    cubes = []\n\n    # Iterate through the list of numbers\n    for num in nums:\n        # Calculate the cube of the number and append it to the cubes list\n        cubes.append(num ** 3)\n\n    # Return the cubes list\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perrin_numbers(n):\n    \"\"\"\n    Returns a list of the first n Perrin numbers.\n    \"\"\"\n    return [i for i in range(1, n+1)]\n\ndef cal_sum(n):\n    \"\"\"\n    Returns the sum of the first n Perrin numbers.\n    \"\"\"\n    perrin_list = perrin_numbers(n)\n    return sum(perrin_list)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    # initialize sum to 0\n    total = 0\n    # loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # check if number is a Perrin number\n        if is_perrin(i):\n            # add the number to the total\n            total += i\n    # return the total sum of Perrin numbers\n    return total\n\ndef is_perrin(n):\n    '''\n    Write a function to check if a given number is a Perrin number.\n    '''\n    # initialize variables\n    p = 0\n    sum_of_squares = 0\n    # loop through digits of number\n    for digit in str(n):\n        # add the digit to the sum of squares\n        sum_of_squares += int(digit)**2\n        # check if sum exceeds the square of the digit\n        if sum_of_squares > int(digit)**2:\n            # return False because number is not a Perrin number\n            return False\n        # check if sum is greater than the digit\n        if sum_of_squares > int(digit):\n            # calculate the factor\n            p = (sum_of_squares - int(digit)**2) // int(digit)\n            # check if the factor is a Perrin number\n            if is_perrin(p):\n                # return True because number is a Perrin number\n                return True\n    # return False because number is not a Perrin number\n    return False"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    s = 0\n    for i in range(1, n+1):\n        s += p\n        p *= 2\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += (i*i*i + 1)/2\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = []\n    for i in range(1, n+1):\n        perrin_list.append(i*i*i)\n    return sum(perrin_list)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += (1/i)**2\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 2*i*(3*i-1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += ((3*i*i)+1)/2\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [1, 1]\n    for i in range(2, n):\n        perrin.append(perrin[i-1] + perrin[i-2])\n    return sum(perrin)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(i * (i+1))\n    return sum(perrin_numbers)"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    This function takes a list of strings and an integer as input and returns a list of strings of specified length.\n    \"\"\"\n    result = []\n    for item in str_list:\n        if len(item) >= length:\n            result.append(item[:length])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): list of strings\n    size (int): size of strings to be extracted\n\n    Returns:\n    list: list of extracted strings\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.extend(str_list[i:i+size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i][0:l[i].find(str)]:\n            result.append(l[i][l[i].find(str):])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    str_list = str_list[:size]\n    return str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(len(l)):\n        if len(l[i]) > l[i]:\n            output.append(l[i][:l[i]])\n    return output"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n    str_list (list): List of string values.\n    size (int): Size of the strings to be extracted.\n\n    Returns:\n    list: List of extracted string values.\n    \"\"\"\n    extracted_strings = []\n    for i, string in enumerate(str_list):\n        if len(string) == size:\n            extracted_strings.append(string)\n        elif i == len(str_list) - 1:\n            extracted_strings.append(string)\n        else:\n            continue\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # create an empty list to store the extracted strings\n    extracted_str = []\n    # iterate over the list of strings\n    for string in str_list:\n        # check if the length of the current string is greater than or equal to the specified size\n        if len(string) >= size:\n            # if the length is greater than or equal to the specified size, append the string to the list\n            extracted_str.append(string)\n    # return the list of extracted strings\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s for s in str_list if len(s) == size]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \"\"\"\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    # Use regular expression to remove all occurrences of whitespace\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespaces from the given string using regular expressions\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the string\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Define a regular expression pattern for whitespace characters\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to remove all whitespaces from the string\n    text1 = pattern.sub('', text1)\n    # Return the modified string\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function will remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove whitespaces\n    text = re.sub(r'\\s+','', text)\n    \n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount >= actual_cost:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    # Calculate the loss amount if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize variables\n    even_factors = 0\n    total = 0\n    \n    # Check if input is a positive integer\n    if isinstance(n, int) and n > 0:\n        # Iterate through all odd numbers from 3 to n-1\n        for i in range(3, n+1, 2):\n            # Check if i is a factor of n\n            if i in range(2, int(math.sqrt(n))+1):\n                # If yes, add it to the total\n                total += i\n                # Increment the even factor count\n                even_factors += 1\n        \n        # Return the sum of even factors\n        return total, even_factors\n    \n    # If input is not a positive integer, return an error message\n    else:\n        print(\"Error: Input must be a positive integer.\")"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of even factors of n.\n    \"\"\"\n    # Initialize variables\n    sum = 0\n    factor = 2\n    \n    # Loop through all odd factors of n\n    while factor <= n:\n        # Check if factor is even\n        if factor % 2 == 0:\n            # If even, add it to sum\n            sum += factor\n        # Increment factor\n        factor += 1\n        \n    # Return sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # Find the sum of even factors\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 and i%2 == 0 : \n            sum_even_factors += i\n    \n    # Return the sum of even factors\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumOfFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    if n < 2:\n        return 0\n    \n    # create a boolean list of size n+1 and initialize all values as True\n    isPrime = [True] * (n+1)\n    \n    # mark all multiples of 2 as composite\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if isPrime[i]:\n            for j in range(i*i, n+1, i):\n                isPrime[j] = False\n    \n    # calculate the sum of even factors of n using the boolean list\n    sum = 0\n    for i in range(2, n+1):\n        if isPrime[i] and i % 2 == 0:\n            sum += i\n    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 and i % 2 == 0: \n            total += i \n    return total "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumOfFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]+z\\b'\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regular expression pattern to match 'z' in words\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b')\n\n    # Use the re.findall() method to find all non-overlapping occurrences of 'z' in the text\n    matches = re.findall(pattern, text)\n\n    # Print all matches\n    for match in matches:\n        print(match)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b[zZ]\\w+\\b')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Define a regular expression pattern for matching 'z'\n    pattern = r'\\b(z)\\w*\\b'\n\n    # Use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches are found, return an empty list\n    if not matches:\n        return []\n\n    # Return the first match found\n    else:\n        return matches[0]"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define the regular expression pattern\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    # find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if the month number contains 31 days or not\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if len(monthnum2) == 2:\n        monthnum = int(monthnum2)\n        if monthnum in range(1, 13):\n            if monthnum in [2, 4, 6, 9, 11]:\n                return True\n            elif monthnum % 2 == 0 and monthnum % 100!= 0 or monthnum % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_dict = {'01': 31, '03': 31, '04': 30, '05': 31, '06': 30, '07': 31, '08': 31, '09': 30, '10': 31, '11': 30, '12': 31}\n    if monthnum2 in month_dict.keys():\n        return month_dict[monthnum2]\n    else:\n        return \"Invalid Month\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 % 2 == 0:\n            if monthnum2 == 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if len(str(monthnum2)) == 2:\n        monthnum2 = int(monthnum2)\n        if monthnum2 == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            if monthnum == 2:\n                return True\n            else:\n                return False\n        else:\n            if monthnum == 2:\n                return False\n            else:\n                return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Convert the month number to a string\n    monthnum = str(monthnum2)\n\n    # Check if the length of the string is 2\n    if len(monthnum) == 2:\n        # Convert the string to an integer\n        monthnum = int(monthnum)\n\n        # Check if the integer is between 1 and 12\n        if monthnum >= 1 and monthnum <= 12:\n            # If the integer is 2 or 3, it means that it contains 31 days\n            if monthnum in [2, 3]:\n                return True\n            # If the integer is between 4 and 12, it means that it contains 30 days\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['1', '3', '5', '7', '8', '10', '12']:\n        print(\"31 days\")\n    elif monthnum2 in ['4', '6', '9', '11']:\n        print(\"30 days\")\n    elif monthnum2 in ['2']:\n        print(\"28 or 29 days\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum % 100 == 0:\n        if monthnum % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate over each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string and assign it back to the list\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string\n        reversed_string = stringlist[i][::-1]\n        # Update the string in the list\n        stringlist[i] = reversed_string\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    # create an empty list to store the reversed strings\n    reversed_list = []\n    \n    # loop over each string in the input list\n    for string in stringlist:\n        # reverse the string and append it to the reversed list\n        reversed_list.append(string[::-1])\n        \n    # return the reversed list\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        new_list.append(reversed_string)\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        count = 0\n        for j in range(i, len(lst)):\n            count += 1\n            if count == min_length:\n                min_sublist.append(lst[j])\n                break\n            if count < min_length:\n                min_sublist.append(lst[j])\n                min_length = count\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist that has the minimum length.\n    '''\n    sublist = []\n    min_len = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst, index=0):\n    '''\n    This function finds the sublist with minimum length in a given list.\n    If the index is equal to the length of the list, the sublist is considered as the minimum sublist.\n    '''\n    if index == len(lst):\n        return lst\n    else:\n        min_sublist = Find_Min(lst, index+1)\n        if len(min_sublist) < len(lst[index]):\n            return lst[index]\n        else:\n            return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_len = float('inf')  # set the initial minimum length to infinity\n    min_sublist = []  # initialize an empty list to store the minimum sublist\n    \n    for i in lst:  # iterate over each element in the list\n        for j in range(len(i)):  # iterate over all possible sublists of length j\n            sublist = i[j:]  # get the sublist starting from index j\n            if len(sublist) < min_len:  # if the sublist has a shorter length than the current minimum\n                min_len = len(sublist)  # update the minimum length to the length of the sublist\n                min_sublist = sublist  # update the minimum sublist to the sublist itself\n    \n    return min_sublist  # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    \n    # Initialize a variable to store the minimum length \n    min_len = float('inf')\n    \n    # Initialize a variable to store the sublist with minimum length \n    min_sublist = []\n    \n    # Loop through each sublist in the list \n    for i in range(len(lst)): \n        \n        # Check if the length of the sublist is less than the current minimum length \n        if len(lst[i]) < min_len: \n            \n            # Update the minimum length and the sublist with minimum length \n            min_len = len(lst[i]) \n            min_sublist = lst[i]\n            \n    # Return the sublist with minimum length \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as an argument and returns the sublist having the minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    \n    # iterate over all sublists of the input list\n    for sublist in lst:\n        # if the length of the sublist is smaller than the current minimum, update the minimum length and the sublist\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function finds the sublist with the minimum length in a list.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = 1000 # initial value for minimum length\n    min_sublist = [] # initial value for minimum sublist\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Args:\n        l (float): length of the rectangle\n        b (float): width of the rectangle\n\n    Returns:\n        float: area of the rectangle\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define the pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z]+')\n\n    # Replace all uppercase substrings with spaces\n    str1 = pattern.sub(' ', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z][a-z]+'\n    \n    # find all substrings that match the pattern in the input string\n    substrings = re.findall(pattern, str1)\n    \n    # remove all uppercase substrings from the input string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase letters\n    pattern = re.compile('[A-Z]+')\n    # Find all uppercase substrings in the given string\n    matches = pattern.findall(str1)\n    # Iterate over the list of uppercase substrings and remove them from the string\n    for match in matches:\n        str1 = re.sub(f'\\\\{match}', '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    return uppercase_pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase letters\n    pattern = re.compile(r'[A-Z]+')\n    # Find all uppercase substrings in the string and replace them with an empty string\n    str2 = pattern.sub('', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    \n    # Find all uppercase substrings in the string using the pattern\n    substrings = pattern.findall(string)\n    \n    # Iterate over the substrings and remove them from the string\n    for substring in substrings:\n        string = string.replace(substring, '')\n    \n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Create a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Find all uppercase substrings in the string\n    substrings = pattern.findall(str1)\n\n    # Loop through each uppercase substring and remove it from the string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # Use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n\n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        try:\n            result.append(sublist[0])\n        except IndexError:\n            continue\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        if isinstance(sublist, list):\n            sublist.insert(0, sublist.pop(0))\n        else:\n            sublist = [sublist]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the extracted elements\n    extracted = []\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # If the sublist is not empty\n        if sublist:\n            # Get the first element of the sublist and append it to the extracted list\n            extracted.append(sublist[0])\n    # Return the extracted list\n    return extracted"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    This function counts the number of upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    combinations = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # create a list to store all the combinations\n    combinations = []\n\n    # loop through all possible indices\n    for i in range(len(list1)):\n        # loop through all possible indices for the remaining elements\n        for j in range(len(list1)-i-1):\n            # append the combination to the list\n            combinations.append(list1[i:i+j+1])\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Generate all possible combinations of a list of items.\n\n    Args:\n        lst (list): The list of items to generate combinations for.\n\n    Returns:\n        list: A list of all possible combinations.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = list1[i:j]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n    # Sort the list in ascending order\n    list1.sort()\n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # Initialize a new list to store the remaining elements\n        remaining = list1[i+1:]\n        # Loop through each element in the remaining list\n        for j in range(len(remaining)):\n            # Combine the current element with the remaining element and add to the combinations list\n            combination = [list1[i]] + remaining[j:]\n            combinations.append(combination)\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store the combinations\n    combinations = []\n\n    # sort the list\n    list1.sort()\n\n    # loop through all possible pairs of elements\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # append the pair to the combinations list\n            combinations.append(list1[i:j])\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create a list to store the combinations\n    combinations = []\n    # loop through each element in the list\n    for i in range(len(list1)):\n        # create a list to store the remaining elements to choose from\n        remaining = list1.copy()\n        # remove the current element from the remaining list\n        remaining.pop(i)\n        # create the combination\n        combination = [list1[i]] + remaining\n        # add the combination to the list of combinations\n        combinations.append(combination)\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    current_product = 1\n    max_ending_here = 1\n    for num in arr:\n        if num > 0:\n            current_product *= num\n            max_ending_here *= num\n            if max_ending_here < 0:\n                max_ending_here = 1\n        else:\n            current_product = 1\n            max_ending_here = 1\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    # Initialize variables to store the maximum product subarray and its start and end indices\n    max_product = float('-inf')\n    start = 0\n    end = 0\n\n    # Iterate over the array and update the maximum product subarray accordingly\n    for i in range(len(arr)):\n        # If the current element is negative, reset the start index to 0 and update the end index\n        if arr[i] < 0:\n            start = 0\n            end = i\n\n        # Calculate the product of the current subarray and update the maximum product if necessary\n        product = 1\n        for j in range(i, len(arr)):\n            product *= arr[j]\n            if product > max_product:\n                max_product = product\n                start = i\n                end = j\n\n    # Return the maximum product subarray\n    return arr[start:end+1], max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    max_ending_here = 1\n\n    for num in arr:\n        curr_product *= num\n        max_ending_here = max(max_ending_here * num, curr_product)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    curr_product = 1\n\n    for i in range(len(arr)):\n        curr_product *= arr[i]\n\n        if curr_product > max_product:\n            max_product = curr_product\n        elif curr_product < 0:\n            curr_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray of the array.\n    The maximum product subarray is a subarray that has the largest product.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        for value in dict.values():\n            if value!= dict[list(dict.keys())[0]]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Initialize a variable to store the count of values in the dictionary\n    count = 0\n\n    # Iterate through the values of the dictionary\n    for value in dict.values():\n        # Increment the count of values by 1\n        count += 1\n\n        # If the count becomes equal to n, return True\n        if count == n:\n            return True\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        values = list(dict.values())\n        return values.count(values[0]) == 1\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    value = next(iter(dict.values()))  # Get the first value of the dictionary\n    if value in dict.values():\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Store the first value of the dictionary\n    value = dict[next(iter(dict))]\n    \n    # Loop through all the values of the dictionary\n    for key, val in dict.items():\n        # If any value is not same as the first value, then return False\n        if val!= value:\n            return False\n    \n    # If all values are same as the first value, then return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict)!= n:\n        return False\n    else:\n        for i in range(n):\n            if dict[i]!= dict[0]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # get the first key-value pair from the dictionary\n    key, value = dict.items()[0]\n    # iterate through the rest of the dictionary\n    for key, value in dict.items()[1:]:\n        # check if the values are same\n        if value!= value:\n            return False\n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # create a list of values in the dictionary\n    values = list(dict.values())\n    # if the length of the list is 0 or 1, it means all values are same\n    if len(values) == 0 or len(values) == 1:\n        return True\n    # if the length of the list is greater than 1, it means some values are different\n    else:\n        # iterate through the list of values\n        for i in range(len(values)-1):\n            # if any two values are different, return False\n            if values[i]!= values[i+1]:\n                return False\n        # if all values are the same, return True\n        return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for k,v in dict1.items():\n        if v:\n            new_dict[k] = v\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sub_array = arr[i:j+1]\n            product = 1\n            for num in sub_array:\n                product *= num\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n\n    # Initialize variables to store the maximum product and the maximum subsequence ending at each index\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    # Traverse through the array and update the maximum product and maximum subsequence ending at each index\n    for i in range(1, n):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_val = float('-inf')\n    max_ending_here = 1\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_ending_here *= arr[i]\n            if max_ending_here > max_val:\n                max_val = max_ending_here\n        else:\n            max_ending_here = 1\n\n    return max_val"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, n):\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    n = len(arr)\n    if n == 0:\n        return 0\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n    min_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            min_so_far = min(min_so_far, min_ending_here)\n        else:\n            max_ending_here = min_ending_here = arr[i]\n            max_so_far = min_so_far = arr[i]\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_products = [[0]*n for i in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_products[i][j] = max(max_products[i][j], max_products[i-1][j]*arr[i])\n    return max_products[n-1][0]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n        \n        max_so_far = max(max_so_far, max_ending_here)\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(n):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        \n        current_product = max(current_product, 1)\n    \n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum variable to 0\n    total = 0\n    # loop through each element in the tuple\n    for i in range(len(test_tup)-1):\n        # add the current element and the next element in the tuple\n        total += test_tup[i] + test_tup[i+1]\n    # return the total sum\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initializing the sum variable to 0\n    sum_pairwise = 0\n    # Looping through the tuple\n    for i in range(len(test_tup)-1):\n        # Adding the current element and the next element to get the sum of the pairwise addition\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[i:i+2] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return test_tup\n    \n    sum_pair = 0\n    for i in range(len(test_tup)-1):\n        sum_pair += test_tup[i] + test_tup[i+1]\n    \n    return sum_pair"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(a + b for a, b in zip(test_tup[:-1], test_tup[1:]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define the number of elements in the tuple\n    n = len(test_tup)\n    # Initialize the sum of the neighboring elements to be 0\n    sum_neighboring = 0\n    # Loop through the elements of the tuple\n    for i in range(n-1):\n        # Add the neighboring elements and store the result in the sum_neighboring variable\n        sum_neighboring += test_tup[i] + test_tup[i+1]\n    # Return the sum of the neighboring elements\n    return sum_neighboring"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Initialize the list to store the pairwise sums\n    pairwise_sum = []\n    # Iterate over the tuple elements\n    for i in range(len(test_tup)):\n        # Check if the current index is not the last one\n        if i < len(test_tup) - 1:\n            # Add the sum of the current element and the next element to the list\n            pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        result = test_tup[0]\n        for i in range(1, len(test_tup)-1):\n            result += test_tup[i+1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        addition = 0\n        for i in range(1, len(test_tup)):\n            addition += test_tup[i] - test_tup[i-1]\n        return addition"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    # Initialize variables\n    product = 1\n    modulo = n\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Calculate the product modulo n\n        product = (product * arr[i]) % modulo\n    \n    # Return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array `arr` and an integer `n` as input.\n    It finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array `arr` and an integer `n` and returns the product of the array multiplied by n modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and an integer as input and returns the remainder of the product of the array modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array of integers and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    for num in arr:\n        product *= num\n        if product >= n:\n            product %= n\n    \n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    elif l[0] == l[1]:\n        return True\n    elif l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] == l[i-1] + 1:\n                return False\n        return True\n    else:\n        for i in range(1, len(l)):\n            if l[i] == l[i-1] - 1:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Check if the list contains any consecutive numbers\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    # If no consecutive numbers are found, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i] + 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the count of each element in the first list\n    count_dict = {}\n    for element in test_list1:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # Iterate through the second list and remove the elements that are not present in the first list\n    intersection_list = []\n    for element in test_list2:\n        if element in count_dict and count_dict[element] > 0:\n            intersection_list.append(element)\n            count_dict[element] -= 1\n            \n    # Return the intersection list\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # creating a set of the elements in the first list to check if the elements are present in the second list\n    first_set = set(test_list1)\n    # creating an empty set to store the common elements\n    common_set = set()\n\n    # iterating over the elements of the second list\n    for element in test_list2:\n        # checking if the element is present in the first list\n        if element in first_set:\n            # adding the element to the common set\n            common_set.add(element)\n\n    # converting the common set to a list and returning it\n    return list(common_set)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty dictionary to store the count of each element in the first list\n    count1 = {}\n    # Iterate over the first list\n    for item in test_list1:\n        # If the element is already in the dictionary, increment its count\n        if item in count1:\n            count1[item] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            count1[item] = 1\n    # Initialize an empty list to store the intersection of elements in the second list\n    intersection = []\n    # Iterate over the second list\n    for item in test_list2:\n        # If the element is present in the first list and its count is greater than 0, append it to the intersection list\n        if item in count1 and count1[item] > 0:\n            intersection.append(item)\n            # Decrement the count of the element in the first list\n            count1[item] -= 1\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Initialize empty set to store the intersection of the two lists\n    result = set()\n    # Loop through each tuple in the first list\n    for tup1 in test_list1:\n        # Check if the tuple exists in the second list\n        if tup1 in test_list2:\n            # If the tuple exists in the second list, add it to the result set\n            result.add(tup1)\n    # Return the result set as a list of tuples\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Step 1: Find the intersection of elements in the two lists\n    intersection_set = set(test_list1) & set(test_list2)\n    \n    # Step 2: Convert the set to a list\n    intersection_list = list(intersection_set)\n    \n    # Step 3: Sort the intersection list in ascending order\n    intersection_list.sort()\n    \n    # Step 4: Return the sorted intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n    test_list1: List of tuples.\n    test_list2: List of tuples.\n\n    Returns:\n    A set of tuples that are common to both input lists, irrespective of their order.\n    \"\"\"\n\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through each tuple in the first list\n    for t1 in test_list1:\n        # Loop through each tuple in the second list\n        for t2 in test_list2:\n            # Check if each tuple is identical\n            if t1 == t2:\n                # Add the tuple to the common elements set\n                common_elements.add(t1)\n                break\n\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty set to store the intersection\n    intersection_set = set()\n    # Loop through both lists simultaneously\n    for item in test_list1:\n        # Check if the item exists in the second list and if it doesn't add it to the intersection set\n        if item not in test_list2:\n            intersection_set.add(item)\n    # Loop through the second list again and add any items not in the first list to the intersection set\n    for item in test_list2:\n        if item not in test_list1:\n            intersection_set.add(item)\n    # Return the intersection set as a list of tuples\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert both lists to sets to get unique elements\n    list1_set = set(test_list1)\n    list2_set = set(test_list2)\n\n    # find the intersection of the two sets\n    intersection_set = list1_set.intersection(list2_set)\n\n    # convert the intersection set back to a list of tuples\n    intersection_list = list(intersection_set)\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set for the first list\n    set1 = set(test_list1)\n    # create a set for the second list\n    set2 = set(test_list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for tup in test_list1:\n        if tup in test_list2:\n            result.append(tup)\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n    \n    :param str1: the input string\n    :type str1: str\n    :param ch: the character to replace\n    :type ch: str\n    :param newch: the character to replace with\n    :type newch: str\n    \n    :return: a new string with all occurrences of `ch` replaced by `newch`\n    :rtype: str\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character `ch` in a string `str1` with the character `newch`.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The original string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old character.\n\n    Returns:\n    str: The modified string with the replaced character.\n\n    Example:\n    replace_char(\"Hello world!\", \"l\", \"x\")\n    Output: \"Helo wrod!\"\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes three arguments - a string, a character to be replaced, and a new character to replace it with.\n    It returns the modified string with all occurrences of the character replaced with the new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1.values())\n    sorted_dict = dict(sorted(counter.items()))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # Create a Counter object from the dictionary\n    c = Counter(dict1)\n\n    # Sort the Counter object by value (i.e., by frequency)\n    sorted_c = sorted(c.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary from the sorted Counter object\n    sorted_dict = {}\n    for item in sorted_c:\n        sorted_dict[item[0]] = item[1]\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # sort the Counter object by value\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and sorts it by value in descending order.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and sorts it by value in descending order.\n    '''\n\n    # Sort the dictionary by value in descending order\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary with sorted keys and values\n    sorted_counter = Counter(sorted_dict)\n\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Count the frequency of values in the dictionary\n    count = Counter(dict1)\n    \n    # Sort the dictionary by value\n    sorted_dict = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    if len(nums) == 1:\n        return nums[0]\n    \n    min_val = nums[0]\n    max_val = nums[0]\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array as input and returns the sum of the largest and smallest value in the array.\n    '''\n    if len(nums) == 0:\n        return \"Array cannot be empty\"\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest value in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    # find the sum of the largest and smallest value\n    sum_val = max_val + min_val\n    return sum_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Use the built-in max() and min() functions to find the largest and smallest values\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate and return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest value in the array\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the sum of the largest and smallest value\n    sum_of_largest_smallest = largest + smallest\n    \n    # Return the sum of the largest and smallest value\n    return sum_of_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n\n    # Find the sum of the first two elements\n    first_sum = nums[0] + nums[1]\n\n    # Find the sum of the last two elements\n    last_sum = nums[-1] + nums[-2]\n\n    # Return the sum of the two sums\n    return first_sum + last_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the sum of the largest and smallest values\n    largest_sum = nums[0] + nums[1]\n    smallest_sum = nums[0] + nums[len(nums)-1]\n    \n    return largest_sum, smallest_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the minimum and maximum values\n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    # Iterate over the array and update the minimum and maximum values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    # Return the sum of the minimum and maximum values\n    return min_val + max_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = float('-inf')\n    min_val = float('inf')\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is all lowercase or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the same string in lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the same string in lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lowercase or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # remove all lowercase substrings from the string\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # use regex to find all lowercase substrings in str1\n    pattern = r'[a-z]+'\n    matches = re.findall(pattern, str1)\n    \n    # remove each lowercase substring from str1\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # split the string into a list of substrings\n    words = str1.split()\n    # initialize an empty list to store the non-lowercase words\n    non_lowercase_words = []\n    # loop through the words list and append the non-lowercase words to the new list\n    for word in words:\n        if not word.islower():\n            non_lowercase_words.append(word)\n    # join the non-lowercase words into a string and return it\n    return''.join(non_lowercase_words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+' # regular expression pattern to match lowercase substrings\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Use the re.sub() method to remove all lowercase substrings from the string\n    string = re.sub(pattern, '', string)\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define regular expression to match lowercase substrings\n    regex = re.compile(r'[a-z]+')\n    # find all lowercase substrings in the given string\n    matches = regex.findall(str1)\n    # remove the lowercase substrings from the given string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    # return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'\\b[a-z]+\\b')\n    return lowercase_pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?<![a-zA-Z])[a-z]+(?![a-zA-Z])')\n    return pattern.sub('', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Compile regular expression pattern for lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # Find all lowercase substrings in the given string\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # checking if the input is a valid number\n    if not n.isdigit():\n        print(\"Invalid input\")\n        return\n    \n    # converting the number to integer\n    num = int(n)\n\n    # finding the first digit of the number\n    first_digit = num // 10**len(str(num))\n    \n    # printing the first digit\n    print(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # Convert the input number to a string to extract its first digit\n    str_n = str(n)\n    first_digit = int(str_n[0])\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Check if the number is positive\n    if n < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Convert the number to a string and split it into its digits\n    digits = str(n)\n    first_digit = digits[0]\n\n    # Return the first digit as an integer\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to an integer\n    first_digit = int(first_char)\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n) :\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # converting the input number to a string\n    str_n = str(n)\n    # finding the length of the string\n    length = len(str_n)\n    # returning the first character of the string\n    return str_n[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Find the length of the number\n    num_length = len(str(n))\n\n    # Find the index of the first digit\n    first_digit_index = num_length - 1\n\n    # Return the first digit of the number\n    return n // 10**first_digit_index"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    first_digit = n % 10 # taking the last digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # Convert the given number to a string\n    str_num = str(n)\n    # Convert the first character of the string to an integer\n    first_digit = int(str_num[0])\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to a string\n    num = str(n)\n    # return the first digit of the string\n    return num[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns the odd numbers only.\n    '''\n    result = []\n    for num in lst:\n        if num % 2 == 1:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns only the odd numbers.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers as input and returns a list containing only the odd integers.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        cubes += i ** 3\n        sum_of_numbers += i\n    difference = cubes - sum_of_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    cube_sum = sum([i**3 for i in range(1, n+1)])\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    # Calculate the difference between the two sums\n    difference = cube_sum - sum_of_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables to store the sum of cubes and sum of natural numbers\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current natural number and add it to the sum of cubes\n        cube = i**3\n        sum_of_cubes += cube\n\n        # Add the current natural number to the sum of natural numbers\n        sum_of_natural_numbers += i\n\n    # Calculate the difference between the sum of cubes and the sum of natural numbers\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(i**3 for i in range(n+1))\n    sum_natural = sum(range(1,n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_cubes(n):\n    \"\"\"\n    Returns the sum of cubes of first n natural numbers\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) / 6\n\ndef sum_of_natural_numbers(n):\n    \"\"\"\n    Returns the sum of first n natural numbers\n    \"\"\"\n    return n * (n + 1) // 2\n\ndef difference(n):\n    \"\"\"\n    Returns the difference between sum of cubes of first n natural numbers and sum of first n natural numbers\n    \"\"\"\n    return sum_of_cubes(n) - sum_of_natural_numbers(n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Find the difference between the two sums\n    diff = abs(sum_cubes - sum_natural)\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize a counter variable to keep track of the number of pairs\n    odd_pairs_count = 0\n    # Loop through the first N elements of the list\n    for i in range(N):\n        # Check if the xor of the current element and all the elements up to N-1 is odd\n        xor_value = sum([A[j] for j in range(N) if j!= i])\n        if xor_value % 2!= 0:\n            odd_pairs_count += 1\n    # Return the number of odd pairs found\n    return odd_pairs_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    # initialize count variable\n    count = 0\n    \n    # loop through all possible pairs (i,j) of indices i and j\n    for i in range(N):\n        for j in range(i+1,N):\n            # compute the xor value of the current pair (i,j)\n            xor_value = A[i] ^ A[j]\n            \n            # if the xor value is odd, increment the count variable\n            if xor_value % 2!= 0:\n                count += 1\n                \n    # return the count of odd pairs found\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n                if count == N:\n                    return True\n    return False"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes two lists A and N and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_list = []\n    count = 0\n    \n    for i in range(N):\n        xor_list.append(sum(A[i]))\n        \n    for i in range(len(xor_list)):\n        for j in range(i+1,len(xor_list)):\n            xor = xor_list[i] ^ xor_list[j]\n            if xor % 2!= 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor = 0\n    count = 0\n    for i in range(N):\n        xor ^= A[i]\n        count += xor & 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Create a set to store the numbers of each odd number in the array\n    odd_numbers = set()\n    # Loop through the array and check if each number is odd and not in the set\n    for i in range(N):\n        if A[i] % 2!= 0 and A[i] not in odd_numbers:\n            odd_numbers.add(A[i])\n    # Count the number of pairs whose xor value is odd\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0 and A[i] not in odd_numbers and A[j] not in odd_numbers:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the character is lowercase, convert it to uppercase\n        if string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # If the character is uppercase, convert it to lowercase\n        elif string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n    # Return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    lower_case_string = string.lower()\n    # Initialize an empty list to store the toggled characters\n    toggled_list = []\n    # Loop through each character in the lowercase string\n    for char in lower_case_string:\n        # If the character is uppercase, convert it to lowercase\n        if char.isupper():\n            toggled_list.append(char.lower())\n        # If the character is lowercase, convert it to uppercase\n        else:\n            toggled_list.append(char.upper())\n    # Join the list of toggled characters into a single string\n    toggled_string = ''.join(toggled_list)\n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the two integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Initialize the sum of differences\n    sum_diff = 0\n    \n    # Loop through each digit in the two lists\n    for i in range(max(len(digits1), len(digits2))):\n        # If the digits are the same, continue to the next digit\n        if digits1[i] == digits2[i]:\n            continue\n        \n        # Calculate the difference between the digits\n        diff = abs(digits1[i] - digits2[i])\n        \n        # Add the difference to the sum of differences\n        sum_diff += diff\n        \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the length of the input numbers\n    n1_len = len(str(n1))\n    n2_len = len(str(n2))\n\n    # Calculate the maximum length between the two numbers\n    max_len = max(n1_len, n2_len)\n\n    # Initialize variables for the sum and the current number\n    sum_diff = 0\n    curr_num = 0\n\n    # Loop through the maximum length of the input numbers\n    for i in range(max_len):\n        # Get the digits of the current number\n        d1 = int(str(n1)[-1 - i]) if i < n1_len else 0\n        d2 = int(str(n2)[-1 - i]) if i < n2_len else 0\n\n        # Calculate the difference between the digits\n        diff = d1 - d2\n\n        # Add the difference to the sum\n        sum_diff += diff * (10 ** i)\n\n        # Update the current number\n        curr_num = 10 * curr_num + diff\n\n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert both numbers to lists of digits\n    num1_digits = list(str(n1))\n    num2_digits = list(str(n2))\n\n    # Find the maximum number of digits in either number\n    max_num_digits = max(len(num1_digits), len(num2_digits))\n\n    # Initialize the sum of differences to zero\n    sum_diff = 0\n\n    # Loop through each digit in the numbers\n    for i in range(max_num_digits):\n        # If there are fewer digits in the second number than the first, break\n        if i >= len(num2_digits):\n            break\n\n        # Calculate the difference between the two digits\n        diff = abs(int(num1_digits[i]) - int(num2_digits[i]))\n\n        # Add the difference to the sum of differences\n        sum_diff += diff\n\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_diff += diff\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize the sum variable to zero\n    digit_sum = 0\n\n    # loop through each digit of n1 and n2\n    for i in range(len(str(n1))):\n        # subtract the corresponding digits of n1 and n2\n        digit_sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    count = 0\n    for i in range(len(str(n1))):\n        if n1 % 10!= n2 % 10:\n            count += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return count"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert both numbers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Calculate the per-digit difference between the two numbers\n    digit_diff = 0\n    for i in range(len(str_n1)):\n        digit_diff += abs(int(str_n1[i]) - int(str_n2[i]))\n    \n    # Return the sum of the per-digit differences\n    return digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(len(str(n1))):\n        if str(n1)[i]!= str(n2)[i]:\n            digit_diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n            sum_diff += digit_diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the numbers to strings and calculate the per-digit differences\n    diff_sum = 0\n    for i in range(len(str(n1))):\n        diff = int(str(n1)[i]) - int(str(n2)[i])\n        diff_sum += abs(diff)\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    for i in range(10):\n        digit_sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return digit_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables for current sum and maximum sum\n    curr_sum = 0\n    max_sum = 0\n\n    # Traverse through the list and calculate the current sum of the sublist\n    for i in range(size):\n        curr_sum += a[i]\n\n        # Check if the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i >= size - 1:\n            break\n        curr_sum -= a[i]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = 0\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_ending_here > max_sum:\n            max_sum = max_ending_here\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n\n    return max_sum, start\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    # Initialize the sum of the largest subarray and the maximum sum found so far\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Traverse through the list and find the sum of the largest contiguous subarray\n    for i in range(len(a) - size + 1):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(len(a)):\n        current_sum += a[i]\n\n        if i >= size-1:\n            max_sum = max(max_sum, current_sum)\n            current_sum = 0\n            start += 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the max sum and current sum variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the list and calculate the current sum\n    for i in range(size):\n        current_sum += a[i]\n\n        # Update the max sum if the current sum is greater than the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset the sum to zero\n        elif current_sum < 0:\n            current_sum = 0\n\n    # Return the max sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf') # Initialize max_so_far to negative infinity\n    max_ending_here = 0 # Initialize max_ending_here to 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n\n    # Use the set() function to remove duplicates from the combined list\n    unique_list = list(set(combined_list))\n\n    # Sort the unique list in ascending order\n    unique_list.sort()\n\n    # Return the sorted unique list as a tuple\n    return tuple(unique_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples into a single tuple\n    combined_tup = test_tup1 + test_tup2\n    \n    # Sort the combined tuple\n    sorted_tup = sorted(combined_tup)\n    \n    # Print the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n\n    # convert the combined tuple to a set and sort the elements\n    unique_elements = sorted(list(set(combined_tup)))\n\n    # print the result\n    print(unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one list\n    combined_list = test_tup1 + test_tup2\n    # Convert the combined list into a set to remove any duplicates\n    unique_list = list(set(combined_list))\n    # Sort the unique list in ascending order\n    sorted_list = sorted(unique_list)\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    \n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(unique_set))\n    \n    # Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(union_set)\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two tuples into a single tuple\n    union_tup = test_tup1 + test_tup2\n\n    # Sort the combined tuple in ascending order\n    sorted_tup = sorted(union_tup)\n\n    # Output the sorted tuple\n    print(sorted_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # Use set() to remove duplicates and then convert back to a list\n    unique_list = list(set(combined_list))\n    # Sort the list in ascending order\n    unique_list.sort()\n    # Output the sorted list\n    print(unique_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Get the union of the two tuples\n    union = test_tup1 + test_tup2\n\n    # Sort the union in ascending order\n    union.sort()\n\n    # Print the union\n    print(union)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize maximum length variable to zero\n    max_length = 0\n    \n    # loop through each sublist in the list\n    for i in range(len(lst)):  \n        # initialize current sublist length variable to zero\n        sublist_length = 0\n        \n        # loop through each element in the sublist\n        for j in range(i, len(lst)):  \n            # increment the length of the sublist by one\n            sublist_length += 1\n            \n            # if the sublist length is greater than the current maximum length, update maximum length\n            if sublist_length > max_length:\n                max_length = sublist_length\n    \n    # return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    curr_len = 0\n    for i in lst:\n        curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n        elif curr_len < max_len and i == lst[0]:\n            max_len = 1\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0  \n    current_length = 0  \n    for num in lst:  \n        if num == lst[0]:  \n            current_length += 1  \n        else:  \n            max_length = max(max_length, current_length)  \n            current_length = 1  \n    max_length = max(max_length, current_length)  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0   # Initialize max_length variable to 0\n    for i in range(len(lst)):  \n        # Loop through each element of the list\n        length = 1   # Initialize length variable to 1\n        for j in range(i+1,len(lst)):  \n            # Find the length of the sublist from index i to j (inclusive)\n            while j < len(lst) and lst[j] == lst[i]:  \n                j += 1  \n                length += 1  \n            # Update max_length if the current sublist is longer\n            if length > max_length:  \n                max_length = length  \n            # Reset length to 1 after finding a sublist of length greater than 1\n            length = 1  \n    # Return the value of max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            current_length = j - i\n            if current_length > max_length:\n                max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        temp_length = 0  \n        for j in range(i,len(lst)):  \n            temp_length += 1  \n            if j < len(lst)-1 and lst[j] == lst[j+1]:  \n                temp_length -= 1  \n            if temp_length > max_length:  \n                max_length = temp_length  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, j-i+1)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    maxLength = 0\n    currentLength = 0\n    for i in range(len(lst)):\n        if i > 0:\n            if lst[i] == lst[i-1]:\n                currentLength += 1\n            else:\n                maxLength = max(maxLength, currentLength)\n                currentLength = 0\n        else:\n            currentLength = 1\n    return maxLength + currentLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    longest = 0\n\n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            longest = max(longest, len(lst[j]) - len(lst[i]))  \n\n    return longest  "
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\\\"]*)\"' # match any string between double quotes\n    match = re.findall(pattern, text) # find all matches in the text using the pattern\n    values = [m.strip('\"') for m in match] # remove leading and trailing quotes and convert to a list\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")\\w+(?:\\s\\w+)*?(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define the pattern to search for values between quotation marks\n    pattern = r'\"(.*?)\"'\n\n    # Use the re module to search for values between quotation marks\n    values = re.findall(pattern, text)\n\n    # Return the list of values found\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<=\")(?:(?=(?:[^\"]*\"\"[^\"]*\"))\\2.)*(?<!\\\\)\"')\n    match = pattern.findall(text)\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\\b)\\w+(?=\\b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    # initialize a counter to keep track of the number of pairs\n    count = 0\n    # loop through all pairs of elements from 0 to n-1\n    for i in range(n):\n        for j in range(i+1, n):\n            # if both elements are not equal, increment the counter\n            if arr[i]!= arr[j]:\n                count += 1\n    # return the count of possible pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # calculate the count of possible unordered pairs\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += min(freq[i], freq[j])\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # initialize a count variable to store the number of pairs found\n    count = 0\n\n    # loop through each pair of elements\n    for i in range(n):\n        for j in range(i+1, n):\n            # check if both elements are unequal and have the same frequency\n            if arr[i]!= arr[j] and freq[arr[i]] == freq[arr[j]]:\n                count += 1\n\n    # return the count of pairs found\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Loop through the array and update the frequency of each element in the dictionary\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Initialize a counter to store the number of possible pairs\n    count = 0\n\n    # Loop through the keys in the frequency dictionary\n    for i in freq:\n        # Loop through the remaining keys in the dictionary\n        for j in freq:\n            # If the keys are not equal, increment the count by the product of their frequencies\n            if i!= j:\n                count += freq[i] * freq[j]\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Initialize a counter variable to keep track of the number of pairs\n    count = 0\n\n    # Iterate through all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the elements at indices i and j are different\n            if arr[i]!= arr[j]:\n                # Increment the counter if the pair is valid\n                count += 1\n\n    # Return the final count of valid pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # loop through each character in the word\n    for char in word: \n        # print the character\n        print(char) "
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Convert the input string to a list of characters\n    chars = list(word)\n    # Return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # split the string into a list of characters\n    char_list = list(word)\n    \n    # return the list of characters\n    return char_list"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # split the string into a list of characters\n    chars = list(word)\n    # print the list of characters\n    print(chars)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a running total of the digits of n\n    total = 0\n    \n    # Loop through each digit of n\n    while n > 0:\n        # Get the rightmost digit of n\n        digit = n % 10\n        \n        # Add the digit to the running total\n        total += digit\n        \n        # Remove the rightmost digit of n\n        n //= 10\n        \n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to store the sum of digits\n    sum = 0\n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit of the number\n        digit = n % 10\n        # add the digit to the sum\n        sum += digit\n        # remove the last digit of the number\n        n //= 10\n    # return the sum of digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string and iterate over its characters\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to store the sum of digits\n    total = 0\n    \n    # loop through each digit of the number and add it to the total\n    while n > 0:\n        digit = n % 10\n        total += digit\n        # remove the last digit from the number\n        n //= 10\n    \n    # return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Get the digits of the given number\n    digits = [int(digit) for digit in str(n)]\n    # Sum the digits\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize a variable to store the sum\n    total = 0\n    # loop through each character in the string\n    for char in num_str:\n        # convert the character to an integer\n        digit = int(char)\n        # add the integer to the total\n        total += digit\n    # return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input to an integer and check if it's non-negative\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    # Calculate the sum of the digits using a loop\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    # Loop through each digit in the integer\n    while n > 0:\n        # Add the current digit to the sum\n        total += n % 10\n        # Remove the current digit from the integer\n        n //= 10\n    # Return the final sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the given integer to a string and then sum the digits\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # sum up the digits\n    total = sum(digits)\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # Check if the list is already sorted\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if it is sorted in ascending order, False otherwise.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    This function takes in a list and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] <= list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] <= list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if all the elements in the list are same\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the list\n    for sublist in list1:\n\n        # Convert the sublist to a string and sort the characters\n        sorted_str = ''.join(sorted(sublist))\n\n        # Convert the sorted string back to a list and append to the original list\n        list1[list1.index(sublist)].append(sorted_str)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize a dictionary to store unique numbers\n    unique_nums = {}\n    # iterate over each list in the input list of lists\n    for lst in nums:\n        # iterate over each element in the list\n        for num in lst:\n            # add the unique number to the dictionary if it doesn't already exist\n            if num not in unique_nums:\n                unique_nums[num] = True\n    # create a new list with only the unique numbers\n    unique_nums_lst = list(unique_nums.keys())\n    # return the new list with unique numbers\n    return unique_nums_lst"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_set = set()\n    # Iterate through each list in the given number of lists\n    for i in range(len(nums)):\n        # Iterate through each element in the current list\n        for j in range(len(nums[i])):\n            # If the current element is not in the unique set, add it to the set\n            if nums[i][j] not in unique_set:\n                unique_set.add(nums[i][j])\n    # Convert the unique set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Removes duplicate numbers from a given number of lists.\n\n    Parameters:\n    nums (list): A list of lists containing integers\n\n    Returns:\n    list: A list of unique integers from the original lists\n    \"\"\"\n\n    # Create a set of unique integers from all lists\n    unique_nums = set()\n    for sublist in nums:\n        unique_nums |= set(sublist)\n\n    # Convert the set back to a list of unique integers\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of lists.\n\n    :param nums: A list of lists containing numbers.\n    :return: A list containing the unique numbers in the original list.\n    \"\"\"\n    unique_nums = []\n    for sublist in nums:\n        for num in sublist:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty list to store unique numbers\n    unique_nums = []\n\n    # loop through each number in the list\n    for num in nums:\n        # if the number is not already in the unique_nums list, add it\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    # return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data)\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)  # convert the list to a set to get unique numbers only\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    if len(unique_numbers) == 0:\n        return 1\n\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Remove duplicate numbers from the list\n    unique_list = list(set(list_data))\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    # Create a set of unique numbers from the list\n    unique_nums = set(list_data)\n    # Convert the set to a list and multiply the list by 1\n    product = [x * 1 for x in unique_nums]\n    # Calculate the product of the list and return it\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    return reduce(lambda x, y: x * y, unique_numbers)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    return 1 if len(unique_numbers) == 1 else list_data[0] * unique_product(list_data[1:])"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # Formula for surface area of a cylinder\n    surface_area = 2 * pi * r * h\n    \n    # Return the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * r * r\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder using the formula:\n    # A = \u03c0r\u00b2h\n    # where r is the radius of the cylinder and h is its height\n    A = math.pi * r ** 2 * h\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    SA = 2 * pi * r * h + 2 * pi * r\n    return SA\n\nIn this function, we first define the radius and height of the cylinder as input parameters. We then calculate the surface area using the formula given in the problem statement. Finally, we return the calculated surface area."
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to calculate surface area of a cylinder\n    surface_area = (2 * 3.14 * r * r) + (2 * 3.14 * r * h) + (2 * 3.14 * h * h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # pi is a mathematical constant\n    pi = 3.14159\n    # Calculate the surface area of the cylinder\n    surface_area = 2*pi*r*r + 2*pi*r*h + 2*pi*h*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    count = 0\n    i = 0\n\n    while i < len(A):\n        if A[i] == B[count]:\n            count += 1\n            if count == len(B):\n                return True\n        i += 1\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n\n    i = 0\n    j = 0\n\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    i, j = 0, 0\n    while j < len(A):\n        if A[j] == B[i]:\n            i += 1\n            if i == len(B):\n                return True\n        j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): \n        A = sorted(A) \n    i = 0 \n    j = 0\n    while i < len(A) and j < len(B): \n        if A[i] == B[j]: \n            i += 1 \n        j += 1\n    return True if i == len(A) else False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    if len(B) > len(A): \n        return \"Sublist is not present in the given list\" \n    elif len(B) == 0: \n        return True \n    else: \n        for i in range(len(A)-len(B)+1): \n            if A[i:i+len(B)] == B: \n                return True \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # convert both lists into sets to make them faster to search for substrings\n    A = set(A)\n    B = set(B)\n\n    # check if all elements of B are present in A\n    if len(A - B) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and checks whether B is sublist of A or not.\n    It returns True if B is a sublist of A and False otherwise.\n    \"\"\"\n    if not B:\n        return True\n    for i in range(len(A)):\n        if B[0] == A[i]:\n            newB = B[1:]\n            newA = A[:i] + A[i+1:]\n            if is_Sub_Array(newA, newB):\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # converting the given number to string to find its last digit\n    str_n = str(n)\n    last_digit = int(str_n[-1])\n    \n    # finding the factorial of the given number\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # multiplying the last digit with the factorial of the number\n    result = last_digit * fact\n    \n    # returning the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Convert the given number to string\n    str_n = str(n)\n    \n    # Find the length of the string\n    length = len(str_n)\n    \n    # Convert the last digit of the string to integer\n    last_digit = int(str_n[-1])\n    \n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit_factorial = int(factorial/last_digit)\n    \n    # Return the last digit of the factorial\n    return last_digit_factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Extract the last digit from the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of its factorial.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the length of the string\n    length = len(num_str)\n\n    # Convert the first digit to an integer\n    first_digit = int(num_str[0])\n\n    # Calculate the factorial of the first digit\n    factorial = 1\n    for i in range(1, first_digit + 1):\n        factorial *= i\n\n    # Calculate the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    # check if the input is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # compute the factorial and get the last digit\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    last_digit = int(factorial % 10)\n\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Calculate factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # Extract last digit of the factorial\n    last_digit = int(str(fact)[-1])\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    temp = n\n    while temp > 0:\n        factorial *= temp % 10\n        temp //= 10\n    return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Ensure that all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    \n    # Combine all lists into a single list and return it\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Find the length of the longest list\n    max_length = max(len(list1), len(list2), len(list3))\n    \n    # Initialize an empty list to hold the interleaved lists\n    interleaved_list = []\n    \n    # Loop through each index of the interleaved list\n    for i in range(max_length):\n        # Add the first list element to the interleaved list\n        if i < len(list1):\n            interleaved_list.append(list1[i])\n        # Add the second list element to the interleaved list\n        if i < len(list2):\n            interleaved_list.append(list2[i])\n        # Add the third list element to the interleaved list\n        if i < len(list3):\n            interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists of equal length and returns a single flat list.\n    The function first combines the first two lists into a single list, then combines the result with the third list.\n    \"\"\"\n    # combine the first two lists into a single list\n    combined = list1 + list2\n    # combine the combined list with the third list\n    interleaved = combined + list3\n    # return the interleaved list\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all the lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Error: All lists must have the same length.\"\n\n    # Initialize an empty list to store the interleaved list\n    result = []\n\n    # Traverse each list, adding the elements at the same position to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in 3 lists of the same length and returns a single flat list.\n    \"\"\"\n    # Calculate the length of the output list\n    output_len = len(list1) + len(list2) + len(list3)\n    # Create an empty list to store the interleaved elements\n    interleaved_list = []\n    # Loop through the input lists and append each element to the output list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n    for i in range(len(list2)):\n        interleaved_list.append(list2[i])\n    for i in range(len(list3)):\n        interleaved_list.append(list3[i])\n    # Return the output list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Error: All lists must be of the same length.\"\n    else:\n        flat_list = []\n        for i in range(len(list1)):\n            flat_list.append(list1[i])\n            flat_list.append(list2[i])\n            flat_list.append(list3[i])\n        return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # loop through each list and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Initialize an empty list to store the interleaved lists\n    interleaved_list = []\n\n    # Initialize the pointers for each list\n    i, j, k = 0, 0, 0\n\n    # Iterate over each position in the flat list\n    while i < len(list1) + len(list2) + len(list3):\n        if i < len(list1):\n            interleaved_list.append(list1[i])\n            i += 1\n        elif j < len(list2):\n            interleaved_list.append(list2[j])\n            j += 1\n        else:\n            interleaved_list.append(list3[k])\n            k += 1\n\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff = [x for x in test_tup1 if x not in test_tup2]\n    return diff"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # set up two empty sets to hold the elements from each tuple\n    set1 = set()\n    set2 = set()\n\n    # loop through each element in the tuple and add it to the sets\n    for elem in test_tup1:\n        set1.add(elem)\n    for elem in test_tup2:\n        set2.add(elem)\n\n    # find the dissimilar elements by subtracting the intersection of the two sets\n    dissimilar = set1.symmetric_difference(set2)\n\n    # return the dissimilar elements as a list\n    return list(dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # initialize a list to store the dissimilar elements\n    dissimilar_elements = []\n\n    # loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # if the element in the first tuple is not equal to the element in the second tuple, append it to the dissimilar_elements list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n\n    # return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the first tuple\n    freq1 = {}\n    for i in test_tup1:\n        if i in freq1:\n            freq1[i] += 1\n        else:\n            freq1[i] = 1\n    \n    # create a dictionary to store the frequency of each element in the second tuple\n    freq2 = {}\n    for i in test_tup2:\n        if i in freq2:\n            freq2[i] += 1\n        else:\n            freq2[i] = 1\n    \n    # find the dissimilar elements by comparing the two dictionaries\n    dissimilar_elems = []\n    for i in freq1:\n        if i not in freq2 or freq2[i] < freq1[i]:\n            dissimilar_elems.append(i)\n    \n    # return the dissimilar elements as a list\n    return dissimilar_elems"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    dissimilar_elements = set(test_tup1) - set(test_tup2) - common_elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through each element in the two tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # If the element is different, add it to the list of dissimilar elements\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is present in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # If it is not, add it to the dissimilar set\n            dissimilar_set.add(test_tup1[i])\n\n    # Iterate over the elements of the second tuple\n    for i in range(len(test_tup2)):\n        # Check if the element is present in the first tuple\n        if test_tup2[i] not in test_tup1:\n            # If it is not, add it to the dissimilar set\n            dissimilar_set.add(test_tup2[i])\n\n    # Return the dissimilar set as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of tuples to store the common elements of the two tuples\n    common_elements = set(test_tup1) & set(test_tup2)\n    \n    # Create a set of tuples to store the dissimilar elements of the two tuples\n    dissimilar_elements = set(test_tup1) - set(test_tup2)\n    \n    # Filter the set of dissimilar elements to find the dissimilar ones\n    dissimilar_elements = filter(lambda x: x not in common_elements, dissimilar_elements)\n    \n    # Convert the dissimilar elements set to a list and return it\n    return list(dissimilar_elements)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            if even_fnc(item):\n                new_tuple.append(item)\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            even_list.append(item)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for sub_list in test_tuple:\n        for element in sub_list:\n            if even_fnc(element):\n                even_list.append(element)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create a new list to store the even elements\n    even_list = []\n    # Loop through each element in the input tuple\n    for elem in test_tuple:\n        # Check if the element is an even integer\n        if even_fnc(elem):\n            # Add the even element to the even_list\n            even_list.append(elem)\n    # Return the even_list\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    :param test_tuple: a nested mixed tuple, where each element is either a primitive type or a tuple\n    :param even_fnc: a function that takes an element of the tuple and returns True if it is even, False otherwise\n    :return: a new tuple with only even elements from the input tuple, using the provided even_fnc\n    \"\"\"\n    result = []\n    for element in test_tuple:\n        if isinstance(element, (int, float, str)):\n            result.append(element)\n        else:\n            if even_fnc(element):\n                result.append(element)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    :param test_tuple: a nested mixed tuple of any type (e.g. lists, tuples, strings, etc.)\n    :param even_fnc: a function that takes one argument and returns a boolean indicating whether the argument is even.\n    :return: a new nested mixed tuple with even elements removed from the original tuple.\n    \"\"\"\n    def is_even(x):\n        return even_fnc(x)\n    \n    def is_even_list(lst):\n        return all(is_even(x) for x in lst)\n    \n    def is_even_tuple(tup):\n        return all(is_even(x) for x in tup)\n    \n    def is_even_string(s):\n        return all(is_even(ord(c)) for c in s)\n    \n    def is_even_dict(d):\n        return all(is_even(v) for k, v in d.items())\n    \n    def is_even_any(x):\n        return all(is_even(y) for y in x)\n    \n    is_even_funcs = [is_even_list, is_even_tuple, is_even_string, is_even_dict, is_even_any]\n    \n    for is_even_func in is_even_funcs:\n        if is_even_func(test_tuple):\n            return test_tuple\n    \n    # if we reach this point, we didn't find any even elements in the nested mixed tuple\n    return []"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Loop through each element in the tuple\n    for i in range(len(test_tuple)):\n        # If the element is a list, recurse to remove even elements\n        if isinstance(test_tuple[i], list):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        # If the element is a tuple, recurse to remove even elements\n        elif isinstance(test_tuple[i], tuple):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        # If the element is not even, apply the even_fnc to it\n        elif not even_fnc(test_tuple[i]):\n            test_tuple[i] = even_fnc(test_tuple[i])\n    # Return the modified tuple\n    return tuple(filter(lambda x: x is not None, test_tuple))"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*s + (b**2)*s + (b**2)*s + (b**2)*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s): \n    '''\n    This function takes two arguments, b and s, which represent the base edge of the square pyramid and the height of the pyramid respectively.\n    \n    The function then calculates the surface area of the pyramid using the formula A = \u221a(b^2 * s^2 + b^2 * (s-h) + (b-h)^2 * s^2).\n    \n    The value of h is derived from the given formula by solving for h using the given values of b and s.\n    \n    Finally, the function returns the calculated surface area of the pyramid.\n    '''\n    h = (b**2 * s**2 + b**2 * (s-s) + (b-s)**2 * s**2) ** 0.5 # Using the formula to solve for h\n    \n    A = (b**2 * s**2 + b**2 * (s-h) + (b-h)**2 * s**2) / 2 # Calculating the surface area\n    \n    return A"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of each triangle using Heron's formula\n    area1 = (b**2) / 4\n    area2 = (s**2) / 2\n    # Add up the areas and return the result\n    return area1 + area2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2 * b * (s + b) + 2 * b * s + 2 * b * b + 2 * s * (b + s) + 2 * s * b + 2 * s * s + 2 * s * b + 2 * b * (b + s) + 2 * b * b\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((2*b)**2 + (2*b)**2) * s\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 1/2 * b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2) + (s**2)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s) + (b*s) + (b*s)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)**2 + (b*s)\n"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (4*n-1)/(2*n-1) + catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    catalan_number_list = [1]\n    for i in range(2, n + 1):\n        catalan_number_list.append(catalan_number_list[i-1] * (n-i+1) // i)\n    return catalan_number_list[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        c = 0\n        for i in range(1, n+1):\n            c += catalan_number(i) * catalan_number(n-i)\n        return c // (n*(2*n-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number.\n    \n    Args:\n    n (int): A non-negative integer.\n    \n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # Calculate the (n-1)th Catalan number\n        catalan_prev = catalan_number(n-1)\n        \n        # Calculate the (n-1)th Catalan number using the formula\n        catalan = (4 * catalan_prev**2 - 2 * catalan_prev) / (n-1)\n        \n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2*num-1)/(num+1) * catalan_number(num-1) + (2*num-1)/(num+2) * catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth Catalan number, defined as the number of ways of partitioning n elements into two disjoint subsets whose sum equals n.\n    \"\"\"\n    # Calculate the binomial coefficients\n    catalan = lambda n: (math.factorial(2 * n) // (math.factorial(n) * math.factorial(n + 1)))\n    return catalan(num)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    >>> catalan_number(5)\n    10\n    \"\"\"\n    def catalan(n, k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return catalan(n, k-1) * (n - k + 1) // k\n\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return catalan(2*n, n) // (2*n)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += (factorial(2*n) // (factorial(n) * factorial(i)))\n        return result\n\ndef factorial(n):\n    \"\"\"\n    This function returns the factorial of a number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return 4 * catalan_number(num - 1) / (num + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return (4 * (2*num - 1)) * catalan_number(num - 1) / num"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all matches of the pattern \"([^a-zA-Z]+)ly$\" in the text\n    matches = re.findall(r\"([^a-zA-Z]+)ly$\", text)\n    \n    # Initialize an empty list to store the positions of the matches\n    positions = []\n    \n    # Iterate over the matches and add their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    \n    # Sort the positions list in ascending order\n    positions.sort()\n    \n    # Return a tuple containing the positions list and the number of matches found\n    return positions, len(matches)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b[aeiou]y\\w*\\b'\n\n    # Find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # Iterate through the matches and print their positions and the adverb itself\n    for match in matches:\n        print(f'{text[match.start():match.end()].strip()} (at position {match.start()}): {match}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern for adverbs ending with 'ly'\n    pattern = r'\\b(ly)$'\n\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If the matches list is not empty, return a list of tuples containing the adverb and its position in the text\n    if matches:\n        adverbs = [(match, text.index(match)) for match in matches]\n        return adverbs\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'\\bly\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for identifying adverbs ending with ly\n    pattern = r'\\b(ly|first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth|eleventh|twelfth|thirteenth|fourteenth|fifteenth|sixteenth|seventeenth|eighteenth|nineteenth|twentieth|thirtieth|fortieth|fiftieth|sixtieth|seventieth|eightieth|ninetieth)\\b'\n    \n    # Use the re.finditer() function to iterate over all occurrences of the pattern in the given text\n    for match in re.finditer(pattern, text):\n        # Extract the adverb and its position from the match object and print it\n        adverb = match.group(1)\n        start_pos = match.start()\n        end_pos = match.end()\n        print(f\"{adverb} at position {start_pos}-{end_pos}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(ly)\\b'\n    # Find all non-overlapping matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # Iterate through the matches and return a list of tuples containing the adverb and its position in the text\n    adverbs = []\n    for match in matches:\n        pos = text.find(match)\n        adverbs.append((match, pos))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    \n    # Find all occurrences of the regular expression pattern in the input string\n    matches = pattern.findall(text)\n    \n    # Initialize an empty dictionary to store the positions of the adverbs\n    positions = {}\n    \n    # Loop through the matches and store their positions in the dictionary\n    for match in matches:\n        positions[match] = text.find(match)\n    \n    # Return the dictionary of positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all adverbs ending with ly\n    adverbs = re.findall(r'\\b(ly)\\b', text)\n    \n    # Find their positions in the string\n    positions = []\n    for i in range(len(text)):\n        if text[i:i+2] == 'ly':\n            positions.append(i)\n    \n    # Return a list of tuples containing adverb and its positions\n    return [(adv, pos) for adv, pos in zip(adverbs, positions)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Use re.findall() to find all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # Iterate through the matches and store their positions in a list\n    positions = []\n    for match in matches:\n        positions.append(text.index(match))\n    # Return the list of positions of the adverbs ending with ly\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+\\s*ly\\b', text)\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input\n    and returns a list of the n most expensive items in the dataset.\n\n    The function first creates a min heap of size n and adds the first n\n    elements of the input list to the heap. Then, it iterates over the\n    remaining elements of the input list, and for each element, it compares\n    it to the minimum element in the heap. If the element is cheaper than\n    the minimum element, it is added to the heap. After the iteration,\n    the function returns the n most expensive elements in the heap.\n    '''\n    heap = items[:n]\n    for item in items[n:]:\n        if item < heap[0]:\n            heapq.heappushpop(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items.\n\n    The function uses a min-heap to maintain a minimum price per item while iterating through the list of items.\n    The heapq module provides functions for heapifying a list, which in this case is done using a min-heap.\n    The heapq.nlargest() function returns the n largest elements in the heap.\n\n    The time complexity of this algorithm is O(n log n) due to the heapifying step.\n    '''\n\n    min_prices = []\n    for item in items:\n        if len(min_prices) < n:\n            heapq.heappush(min_prices, item)\n        else:\n            if item < heapq.heappop(min_prices):\n                heapq.heappush(min_prices, item)\n\n    return min_prices"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the heap size exceeds n, remove the minimum item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items in the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    # Insert the items into the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n    # Remove the lowest n items and return them as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    items (list): a list of items, where each item is a tuple of the form (price, item)\n    n (int): the number of items to return\n\n    Returns:\n    list: the n most expensive items, sorted by price in descending order\n    \"\"\"\n    # Sort the items by price in descending order\n    items.sort(key=lambda x: x[0], reverse=True)\n\n    # Return the first n items\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n    \n    # Iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        \n        # If the heap size exceeds n, remove the item with the smallest price\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    # Return the n most expensive items in the order they appear in the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a number n and returns a list of the n most expensive items.\n    '''\n    # Create a min heap to store the n most expensive items\n    max_heap = []\n\n    # Iterate through the items and add each item to the heap\n    for item in items:\n        heapq.heappush(max_heap, item)\n\n        # If the heap size exceeds n, remove the smallest item from the heap\n        while len(max_heap) > n:\n            heapq.heappop(max_heap)\n\n    # Return the n most expensive items from the heap\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    items: list, the dataset of items with their prices\n    n: int, the number of items to return\n\n    Returns:\n    list, a list of the n most expensive items in the dataset\n    \"\"\"\n    # Create a min heap of size n to store the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n\n    # Extract the n most expensive items from the min heap\n    result = []\n    for _ in range(n):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Returns the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the items by price in ascending order\n    sorted_items = sorted(items, key=lambda item: item['price'])\n\n    # Create a min heap of size n to store the n most expensive items\n    heap = [sorted_items[0]] * n\n\n    # Fill the min heap with the remaining items\n    for item in sorted_items[1:]:\n        if item['price'] > heap[0]['price']:\n            heapq.heappushpop(heap, item)\n\n    # Return the heap\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if isinstance(l, list):\n        mid = len(l) // 2\n        if n > mid:\n            return l[:n] + l[n:]\n        elif n < mid:\n            return l[:n] + [l[n]] + l[n+1:]\n        else:\n            return l[:n] + [l[n]] + l[n+1:]\n    else:\n        raise ValueError(\"Input must be a list\")"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_list = l[:n]\n    new_list = l[n:]\n    return split_list + new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    l = second_part + first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # if the length of the list is less than the nth element, return the original list\n    if len(l) < n:\n        return l\n    # if the length of the list is equal to the nth element, return the original list with the first element added to the end\n    elif len(l) == n:\n        return l + [l[0]]\n    # if the length of the list is greater than the nth element, return the list with the first part added to the end, and the last part added to the beginning\n    else:\n        return [l[0]] + l[n-1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create a new empty list\n    new_list = []\n    # loop through the list from the beginning to n-1\n    for i in range(n):\n        # append the current element to the new list\n        new_list.append(l[i])\n    # loop through the list from n to the end\n    for i in range(n, len(l)):\n        # append the current element to the new list\n        new_list.append(l[i])\n    # return the new list with the first part appended to the end\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < len(l):\n        split_index = n\n        second_part = l[split_index:]\n        first_part = l[:split_index]\n        return first_part + second_part\n    else:\n        return \"Error: The list does not have enough elements to split at the specified index.\""
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n is greater than the length of the list\")\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Check if the list is empty or not\n    if len(l) == 0:\n        return []\n    \n    # Check if the element to be split exists in the list\n    if n >= len(l):\n        return l\n    \n    # Find the index of the element to be split\n    index = 0\n    while index < len(l) and l[index]!= l[n]:\n        index += 1\n        if index >= len(l):\n            return l\n    \n    # Split the list at the nth element\n    mid = index\n    while mid < len(l):\n        l[mid] = l[mid+1]\n        mid += 1\n    \n    # Add the first part of the list to the end\n    for i in range(mid, n):\n        l.append(l[i])\n    \n    # Return the modified list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_tuple(lst):\n    '''\n    Converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Get the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    # Calculate the difference between the maximum and minimum values\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    min_num = nums[0]\n    max_num = nums[0]\n    \n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"Error: List is empty.\"\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 'List should have at least 2 elements'\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the difference between the two values\n    diff = largest - smallest\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list of all numbers from a to b\n    numbers = list(range(a, b+1))\n    \n    # Create a list of all primes up to the square root of the range\n    primes = [True] * b + [False] * (2 * b + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(b ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, b+1, i):\n                primes[j] = False\n    \n    # Initialize a set to keep track of the perfect squares found\n    squares = set()\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        # Check if the number is a perfect square\n        if num == int(num ** 0.5) ** 2:\n            # Add the square to the set of perfect squares found\n            squares.add(num)\n    \n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(int(a), int(b) + 1):\n        if num**2 == num:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list of all integers between a and b\n    numbers = list(range(a, b+1))\n    \n    # Use the Sieve of Eratosthenes algorithm to find all perfect squares\n    squares = []\n    for i in range(2, b+1):\n        if all(i % j!= 0 for j in numbers):\n            squares.append(i)\n    \n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    \n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n    \n    # Loop through the range of values between a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square by squaring and comparing with itself\n        square = i**2\n        if square == i:\n            # If i is a perfect square, add it to the list of perfect squares\n            perfect_squares_list.append(square)\n    \n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all integers between a and b (inclusive)\n    for i in range(a, b+1):\n        # calculate the square of i\n        square = i ** 2\n        # check if the square is a perfect square (i.e., its square is an integer)\n        if square == int(square):\n            # if so, print i and its square\n            print(i, square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i*i == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == sum([int(digit) for digit in str(square)]):\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        square = int(num**0.5) + 1\n        if num == square**2:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Loop through all possible numbers between a and b\n    for num in range(a, b+1):\n        # Check if the square of the number is equal to the number itself\n        if num == num ** 2:\n            # Print the number if it is a perfect square\n            print(num)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def polar_rect(r,theta):\n    \"\"\"\n    This function converts polar coordinates (r, theta) to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radius of the point.\n    theta (float): The angle of the point in radians.\n\n    Returns:\n    x (float): The x-coordinate of the point.\n    y (float): The y-coordinate of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (radius and angle) to rectangular coordinates.\n\n    Args:\n        r (float): Radius of the point.\n        theta (float): Angle of the point in radians.\n\n    Returns:\n        (x, y): Tuple containing the x and y coordinates of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert polar coordinates to complex numbers\n    z = complex(x,y)\n\n    # Calculate rectangular coordinates\n    r = abs(z)\n    phi = cmath.phase(z)\n    x = r*cmath.cos(phi)\n    y = r*cmath.sin(phi)\n\n    # Return rectangular coordinates\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # define the number of elements in the list\n    n = len(newList)\n    # check if the list has only one element\n    if n == 1:\n        return newList\n    else:\n        # interchange the first and last elements\n        first = newList[0]\n        last = newList[n-1]\n        newList[0] = last\n        newList[n-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n    else:\n        return \"List must have at least two elements.\""
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list should have at least two elements.\"\n\n    # interchange the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"List should contain at least two elements.\"\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    length = len(newList)\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last elements in the list.\n    '''\n\n    # Using slicing to swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Return the modified list\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0: \n        return 0\n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k or k<0:\n        return \"Invalid input\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0 or k == 0 or k > n:\n        return 0\n    elif k == 1 or k == n:\n        return 1\n    else:\n        return (n * binomial_Coeff(n-1, k-1)) + (binomial_Coeff(n-1, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize sum and product variables\n    sum_prod = 0\n    prod = 1\n\n    # Calculate sum of product of consecutive binomial co-efficients\n    for i in range(1, k+1):\n        prod *= (n-i+1)\n        sum_prod += prod\n\n    # Return the sum of product of consecutive binomial co-efficients\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0 or k > n: \n        return \"Invalid input\"\n    if k == 0 or k == n: \n        return 1\n    if k == 1 or k == n-1: \n        return n\n    binomial_coeff = [1] * (n+1)\n    for i in range(1, n+1): \n        for j in range(1, min(k, i)+1): \n            binomial_coeff[i] += binomial_coeff[i-1] * binomial_coeff[j-1] * binomial_coeff[i-j]\n    return binomial_coeff[n]"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    elif k == 1 or k == n - 1:\n        return n\n    else:\n        return binomial_Coeff(n - 1, k - 1) * (n - k + 1) / k"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k) + binomial_Coeff(n-1, k-1)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is: \", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    sum_prod_coeff = 0\n    for i in range(1,k+1):\n        coeff = binomial_coeff(n,i)\n        sum_prod_coeff += coeff*(n-i+1)\n    \n    return sum_prod_coeff\n\ndef binomial_coeff(n,k):\n    '''\n    Write a python function to calculate the binomial coefficient.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_coeff(n-1,k-1) + binomial_coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the binomial coefficient array\n    B = [1]\n    for i in range(1, n+1):\n        B.append(B[i-1] * i)\n\n    # Initialize the sum array\n    S = [0] * (n-k+1)\n\n    # Calculate the sum of the product of consecutive binomial coefficients\n    for i in range(n-k+1):\n        S[i] = B[n] // (B[k] * B[n-k+i])\n\n    # Return the sum\n    return sum(S)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    elif k < 0 or k > n:\n        return 0\n    else:\n        return binomial_Coeff(n - 1, k) + binomial_Coeff(n - 1, k - 1)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+','',ip)\n    ip = re.sub('\\s+','',ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+(\\d)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expressions to remove leading zeroes\n    ip = re.sub(r'^\\s*0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define regular expression pattern for ip address\n    pattern = r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$'\n\n    # match pattern in ip address\n    match = re.match(pattern, ip)\n\n    # if match found, extract groups and remove leading zeroes from each group\n    if match:\n        groups = match.groups()\n        groups = [group if int(group)!= 0 else group.lstrip('0') for group in groups]\n        return '.'.join(groups)\n\n    # if no match found, return original ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression pattern to match IP addresses\n    pattern = r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b'\n    # Find all the IP addresses in the input string\n    ips = re.findall(pattern, ip)\n    # Remove leading zeroes from each IP address\n    for ip in ips:\n        ip = re.sub(r'^\\b0+', '', ip)\n    # Join the IP addresses back into a string\n    result = '.'.join(ips)\n    return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+(\\.\\d+){3}$'\n    match = re.match(pattern, ip)\n    if match:\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            ip_list[i] = int(ip_list[i])\n            if ip_list[i] == 0:\n                del ip_list[i]\n        return '.'.join(str(x) for x in ip_list)\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}$'\n    if re.match(pattern, ip):\n        ip_list = ip.split('.')\n        for i, item in enumerate(ip_list):\n            if item.startswith('0'):\n                ip_list[i] = item.lstrip('0')\n        return '.'.join(ip_list)\n    else:\n        return 'Invalid IP address format'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_regex = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}$'\n    match = re.match(ip_regex, ip)\n    if match:\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            if ip_list[i] == '0':\n                ip_list.pop(i)\n        return '.'.join(ip_list)\n    else:\n        return 'Invalid IP Address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match any sequence of one or more zeroes followed by a digit\n    pattern = re.compile('^0*(1\\d{2}|2[0-4]\\d|25[0-5])$')\n    # Find all matches in the input string\n    matches = pattern.findall(ip)\n    # Remove all matches from the input string\n    ip = re.sub('^0*(1\\d{2}|2[0-4]\\d|25[0-5])', '', ip)\n    # Return the modified input string\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d*[.]0', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num % 2 == 0 and odd_num % 2 == 1:\n        diff = even_num - odd_num\n        return diff\n    else:\n        return \"The list contains non-even or non-odd numbers.\"\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[1]\n    diff = first_even - first_odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n\n    if first_even is None or first_odd is None:\n        return \"List does not contain any even or odd numbers.\"\n    else:\n        return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the difference of the first even and first odd numbers in the list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    # iterate through the list\n    for num in lst:\n        # if the number is even and there is no first_even yet, set it to the number\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        # if the number is odd and there is no first_odd yet, set it to the number\n        elif num % 2 == 1 and first_odd is None:\n            first_odd = num\n    \n    # if there are no even or odd numbers, return None\n    if first_even is None and first_odd is None:\n        return None\n    \n    # calculate the difference between the first even and first odd numbers\n    diff = first_even - first_odd\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n\n    if len(even) < 1:\n        print(\"List does not have any even numbers\")\n    else:\n        diff = even[0] - odd[0]\n        print(\"The difference of first even and first odd number is\", diff)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    # Loop through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # Find the difference between even and odd numbers\n    diff = abs(even_num - odd_num)\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 == 1 and first_odd is None:\n            first_odd = num\n    if first_even is None or first_odd is None:\n        return None\n    else:\n        return first_even - first_odd"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n    :param str1: binary string representing the first binary number\n    :param str2: binary string representing the second binary number\n    :return: minimum number of swaps required to convert the first binary number to the second binary number.\n    \"\"\"\n    # Convert the input strings to binary\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the count of swaps\n    swaps = 0\n\n    # Initialize the carry value\n    carry = 0\n\n    # Iterate through each bit of the binary numbers\n    for i in range(32):\n        # Compute the sum of the bits of the two numbers and the carry value\n        new_bit = (num1 & num2) | (carry << 1)\n\n        # Compute the carry value\n        carry = (num1 & num2) << 1\n\n        # Update the number of swaps required to convert the numbers\n        swaps += (num1 ^ num2) >> i\n\n        # Update the binary numbers\n        num1 = num2\n        num2 = new_bit\n\n    # Add the carry value to the final number of swaps required\n    swaps += carry\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    n = len(str1)\n    swaps = 0\n    temp = \"\"\n    for i in range(n) : \n        if str1[i] == str2[i] : \n            temp += str1[i]\n        else : \n            if len(temp) == 0 : \n                temp += str1[i]\n            else : \n                index = str1.index(temp)\n                str1 = str1[:index] + str2[index] + str1[index+1:]\n                str2 = str2[:index] + str1[index] + str2[index+1:]\n                temp = \"\"\n                swaps += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function calculates the minimum number of swaps required to convert one binary number represented as a string to another.\n\n    Parameters:\n    str1 (str): A binary number represented as a string\n    str2 (str): Another binary number represented as a string\n\n    Returns:\n    int: The minimum number of swaps required to convert str1 to str2\n    \"\"\"\n\n    # Convert strings to lists of bits\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # Compare the lengths of the two strings and swap if necessary\n    for i in range(len(str1), len(str2)):\n        if str1[i] == '0':\n            str1[i], str2[i] = str2[i], str1[i]\n\n    # Count the number of swaps required\n    swap_count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            swap_count += 1\n            str1[i], str2[i] = str2[i], str1[i]\n\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Find the length of the input strings\n    n = len(str1)\n\n    # Initialize a boolean array to keep track of swaps\n    swap_arr = [False] * n\n\n    # Initialize a variable to keep track of minimum swaps required\n    min_swaps = n\n\n    # Compare each character of the two strings\n    for i in range(n):\n        # If the characters are different, swap them\n        if str1[i]!= str2[i]:\n            # Check if the swapping is possible\n            if swap_arr[i] == False:\n                # Swap the characters\n                str1[i], str1[swap_arr.index(False)] = str1[swap_arr.index(False)], str1[i]\n                str2[i], str2[swap_arr.index(False)] = str2[swap_arr.index(False)], str2[i]\n                # Increment the number of swaps\n                swap_arr[i] = True\n                swap_arr[swap_arr.index(False)] = True\n                # Decrement the minimum swaps required\n                min_swaps = min(min_swaps, n-i)\n            else:\n                # If the swapping is not possible, decrement the minimum swaps required\n                min_swaps = min(min_swaps, n-i)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists of bits\n    list1 = [int(bit) for bit in str1]\n    list2 = [int(bit) for bit in str2]\n\n    # Find the length of the longest binary number\n    max_length = max(len(str1), len(str2))\n\n    # Initialize the swap count\n    swap_count = 0\n\n    # Traverse through the binary strings from right to left\n    for i in range(max_length - 1, -1, -1):\n        # If the corresponding bits are different, swap the bits\n        if list1[i]!= list2[i]:\n            # Increment the swap count\n            swap_count += 1\n            # Swap the bits\n            list1[i], list2[i] = list2[i], list1[i]\n\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to binary integers\n    n1 = int(str1, 2)\n    n2 = int(str2, 2)\n    # Initialize count of swaps\n    count = 0\n    # Initialize a set to store the binary digits of str2\n    str2_binary = set(bin(n2)[2:])\n    # Iterate over each binary digit of str1\n    for digit in str1:\n        # If the binary digit is not in str2_binary, add it and increment count of swaps\n        if digit not in str2_binary:\n            str2_binary.add(digit)\n            count += 1\n    # Return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # calculate the difference between the numbers\n    diff = num1 - num2\n\n    # initialize the minimum number of swaps\n    min_swaps = len(str1)\n\n    # initialize the carry and flag variables\n    carry = 0\n    flag = 0\n\n    # iterate through the binary representation of the number and perform swap operations\n    for i in range(len(str1)):\n        if (diff & (1 << i)) and not flag:\n            # perform a swap operation\n            min_swaps -= 1\n            diff |= 1 << i\n            diff ^= (diff & -diff) << 1\n            diff ^= (diff & -diff) << 2\n            diff ^= (diff & -diff) << 4\n            diff ^= (diff & -diff) << 8\n            diff ^= (diff & -diff) << 16\n\n        # update the carry and flag variables\n        if diff & 1:\n            carry ^= 1 << i\n        diff >>= 1\n\n    # add the carry to the result\n    if carry:\n        min_swaps -= 1\n        diff |= 1 << len(str1)\n        diff ^= (diff & -diff) << 1\n        diff ^= (diff & -diff) << 2\n        diff ^= (diff & -diff) << 4\n        diff ^= (diff & -diff) << 8\n        diff ^= (diff & -diff) << 16\n\n    # check for overflow\n    if diff!= 0:\n        raise ValueError(\"Overflow encountered.\")\n\n    # return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # converting strings to lists of binary digits\n    list1 = [int(digit) for digit in str1]\n    list2 = [int(digit) for digit in str2]\n\n    # creating a dictionary to store the count of digits in each binary number\n    count = {}\n    for i in range(len(str1)):\n        if str1[i] in count:\n            count[str1[i]] += 1\n        else:\n            count[str1[i]] = 1\n\n    # calculating the difference between the two binary numbers\n    diff = abs(list1[::-1] - list2[::-1])\n\n    # creating a list of all possible pairs of digits to swap\n    pairs = [(i, j) for i in range(len(str1)) for j in range(i+1, len(str1))]\n\n    # keeping track of the minimum number of swaps required\n    min_swaps = len(str1)\n\n    # iterating over all possible pairs of digits to swap\n    for i in range(len(pairs)):\n        # checking if the pair of digits to swap can be swapped\n        if diff[pairs[i][0]] <= diff[pairs[i][1]] and count[str1[pairs[i][0]]] >= count[str1[pairs[i][1]]]:\n            # updating the minimum number of swaps required\n            min_swaps = min(min_swaps, 1 + pairs[i][1] - pairs[i][0])\n\n    # returning the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2): \n    n1=len(str1) \n    n2=len(str2) \n    swaps=0 \n    # check for common subsequence \n    for i in range(n1): \n        if str1[i]==str2[i]: \n            continue \n        else: \n            break \n    else: \n        swaps+=n1 \n    # check for common subsequence \n    for i in range(n2): \n        if str1[i]==str2[i]: \n            continue \n        else: \n            break \n    else: \n        swaps+=n2 \n    return swaps "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Initialize two lists to store the binary values of str1 and str2\n    binary_str1 = [int(digit) for digit in str1]\n    binary_str2 = [int(digit) for digit in str2]\n\n    # Initialize two pointers to keep track of the current positions in binary_str1 and binary_str2\n    i = 0\n    j = 0\n\n    # Initialize a counter to keep track of the number of swaps required\n    swaps = 0\n\n    # Loop until all elements have been compared and swapped\n    while i < len(binary_str1) and j < len(binary_str2):\n        # Compare the current elements of binary_str1 and binary_str2\n        if binary_str1[i]!= binary_str2[j]:\n            # If they are not equal, swap them and increment the counter\n            binary_str1[i], binary_str1[j] = binary_str1[j], binary_str1[i]\n            binary_str2[i], binary_str2[j] = binary_str2[j], binary_str2[i]\n            swaps += 1\n\n        # Increment the pointers\n        i += 1\n        j += 1\n\n    # If there are any remaining elements in binary_str1 or binary_str2, they must be equal\n    while i < len(binary_str1):\n        # If there are elements left in binary_str1, swap them with the last element of binary_str2\n        binary_str1[i], binary_str1[j] = binary_str1[j], binary_str1[i]\n        binary_str2[i], binary_str2[j] = binary_str2[j], binary_str2[i]\n        swaps += 1\n        i += 1\n        j += 1\n\n    # If there are any remaining elements in binary_str2, they must be equal\n    while j < len(binary_str2):\n        # If there are elements left in binary_str2, swap them with the last element of binary_str1\n        binary_str1[i], binary_str1[j] = binary_str1[j], binary_str1[i]\n        binary_str2[i], binary_str2[j] = binary_str2[j], binary_str2[i]\n        swaps += 1\n        i += 1\n        j += 1\n\n    # Return the final count of swaps required\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size\n\nif __name__ == \"__main__\":\n    tuple_list = (1, \"hello\", 3.14, True)\n    print(\"Size of the tuple in bytes:\", tuple_size(tuple_list))"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize the size variable to 0\n    size = 0\n    \n    # loop through each element in the tuple\n    for element in tuple_list:\n        # if the element is a tuple, recursively call the function\n        if isinstance(element, tuple):\n            size += tuple_size(element)\n        # if the element is a list, recursively call the function\n        elif isinstance(element, list):\n            size += list_size(element)\n        # if the element is a string, add its length to the size\n        elif isinstance(element, str):\n            size += len(element)\n        # if the element is a number, add its size to the size\n        elif isinstance(element, (int, float)):\n            size += sys.getsizeof(element)\n    \n    # return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to a list\n    tuple_list = list(tuple_list)\n    # Get the size of the list in bytes\n    size = sys.getsizeof(tuple_list)\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    # Calculate the size of each tuple\n    tuple_sizes = [sys.getsizeof(t) for t in tuple_list]\n    # Calculate the total size of the tuples\n    total_size = sum(tuple_sizes)\n    # Return the total size of the tuples\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three sorted arrays as inputs, and returns the kth element from the first array.\n    \"\"\"\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    i = 0\n    j = len(arr2) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr1[mid] < arr2[0]:\n            i = mid + 1\n        elif arr1[mid] > arr2[0]:\n            j = mid - 1\n        else:\n            return arr1[mid]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    i = j = 0\n    \n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    \n    if i == m:\n        return arr2[j]\n    else:\n        return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n        else:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            j += 1\n            k -= 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the minimum length\n    min_len = min(n1, n2)\n\n    # Compare the first min_len elements of each array\n    i = j = 0\n    while i < min_len and j < min_len:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    # If one array is completely traversed, return the remaining elements of the other array\n    if i == min_len:\n        return arr2[j:]\n    else:\n        return arr1[i:]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number >= 1000:\n        # Convert the number to a string\n        number_str = str(number)\n        # Initialize the sum variable to 0\n        sum = 0\n        # Loop through each digit in the number string\n        for digit in number_str:\n            # Convert the digit to an integer and cube it\n            cube_digit = int(digit) ** 3\n            # Add the cube of the digit to the sum\n            sum += cube_digit\n        # Check if the sum is equal to the original number\n        if sum == number:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(number):\n    # Helper function to get the sum of digits raised to the power of the number of digits\n    def digit_sum(n):\n        digits = [int(d) for d in str(n)]\n        return sum(d**len(digits) for d in digits)\n\n    # Check if the number is greater than 999\n    if number > 999:\n        return False\n\n    # Check if the sum of digits raised to the power of the number of digits is equal to the original number\n    if digit_sum(number) == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(number):\n    num_str = str(number)\n    sum_of_squares = 0\n\n    for digit in num_str:\n        square = int(digit) ** 3\n        sum_of_squares += square\n\n    return sum_of_squares == number\n\ndef armstrong_number(number):\n    if is_armstrong_number(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(n):\n    '''\n    Check whether the given number is an Armstrong number or not.\n    '''\n    # Calculate the sum of the cubes of each digit\n    digit_sum = 0\n    while n > 0:\n        digit = n % 10\n        digit_sum += digit ** 3\n        n //= 10\n    # Compare the sum with the original number\n    return digit_sum == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    # Get the length of the number\n    num_length = len(str(num))\n    \n    # Iterate from 1 to the square root of the number\n    for i in range(1, int(num ** 0.5) + 1):\n        # Calculate the power of the number to the power of i\n        power = 0\n        temp_num = num\n        while temp_num > 0:\n            power += temp_num % 10\n            temp_num //= 10\n        \n        # If the power is equal to the length of the number, the number is an Armstrong number\n        if power == num_length:\n            return True\n    \n    # If the number is not an Armstrong number, return False\n    return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong_number(num):\n    # remove all non-numeric characters from the number\n    num = ''.join(filter(str.isdigit, str(num)))\n    # calculate the sum of the cubes of the digits\n    sum_of_cubes = sum([int(digit)**3 for digit in num])\n    # check if the sum of the cubes is equal to the original number\n    return sum_of_cubes == int(num)\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    num_str = str(num)\n    num_digits = len(num_str)\n    sum_of_digits = 0\n    power = 1\n\n    while num > 0:\n        last_digit = num % 10\n        sum_of_digits += last_digit ** power\n        power += 1\n        num //= 10\n\n    return num == sum_of_digits\n\nnum = int(input(\"Enter a number: \"))\nprint(is_armstrong(num))"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    temp = number\n    total = 0\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reversed_number = str(number)[::-1]\n\n    # Calculate the sum of the squares of the digits\n    sum_of_squares = 0\n    for digit in reversed_number:\n        digit_squared = int(digit) ** 2\n        sum_of_squares += digit_squared\n\n    # Check if the sum of squares equals the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(number):\n    '''\n    Check if a given number is an Armstrong number or not.\n    '''\n    # Check if the number is less than 10\n    if number < 10:\n        return False\n    \n    # Get the sum of the cubes of each digit\n    digit_sum = 0\n    while number > 0:\n        digit = number % 10\n        digit_sum += digit ** 3\n        number //= 10\n    \n    # Compare the sum with the original number\n    if digit_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        num = int(input(\"Enter a natural number: \"))\n        sum += num\n        count += 1\n    average = sum / n\n    print(\"Sum of first\", n, \"natural numbers is:\", sum)\n    print(\"Average of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total += i\n    average = total/number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(n):\n        total += i\n        count += 1\n        \n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n    \n    # loop through the first n natural numbers\n    for i in range(n):\n        # add each number to the sum\n        sum += i\n        # increment the count\n        count += 1\n    \n    # calculate the average\n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        total += i\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(number):\n        total += i\n        count += 1\n    average = total / count\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total_sum = 0\n    total_count = 0\n    for i in range(1, number + 1):\n        total_sum += i\n        total_count += 1\n    average = total_sum / total_count\n    return total_sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        count += 1\n    avg = total/number\n    print(\"Sum of first\", number, \"natural numbers is:\", total)\n    print(\"Average of first\", number, \"natural numbers is:\", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initializing the sum and count variables to zero\n    sum = 0\n    count = 0\n\n    # looping through the first n natural numbers\n    for i in range(number):\n        # adding the current number to the sum and incrementing the count\n        sum += i\n        count += 1\n\n    # calculating the average of the first n natural numbers\n    average = sum / count\n\n    # printing the sum and average of the first n natural numbers\n    print(\"Sum of the first\", number, \"natural numbers is:\", sum)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f'{n} is even.')\n    else:\n        print(f'{n} is odd.')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n) :\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0 :\n        print(\"The number is even.\")\n    else :\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j]:\n                return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through each character in the string again\n    for char in str1:\n        # If the character is in the dictionary and its count is greater than 1, return it as the first repeated character\n        if char in char_count and char_count[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store character frequency\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate through the dictionary and find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    # Initialize two empty dictionaries to store the count of each character in the string\n    char_count = {}\n    repeated_char = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the char_count dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n\n    # Loop through each character in the string again to find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            repeated_char = char\n            break\n\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            return char\n        char_freq[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string again\n    for char in str1:\n        # If the character is already in the dictionary and its count is 2 or more, return its index\n        if char in char_count and char_count[char] >= 2:\n            return str1.index(char)\n\n    # If no repeated character is found, return -1\n    return -1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n    \n    # Loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # Check if the integer is a lucid number\n        if is_lucid(i):\n            # If the integer is a lucid number, add it to the list\n            lucid_numbers.append(i)\n    \n    # Return the list of lucid numbers\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through all integers from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # Check if the integer is divisible by i\n        if n % i == 0:\n            # If it is, increment the counter variable\n            count += 1\n            \n            # If the counter variable exceeds 1, return False\n            if count > 1:\n                return False\n    \n    # If the loop completes without finding any divisors, return True\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    current = 2\n    \n    while current <= n:\n        lucid_numbers.append(current)\n        current += 1\n    \n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n    \n    # Check if the given integer is odd or even\n    if n % 2 == 0:\n        # If it's even, add 1 to the integer to get the first odd lucid number\n        first_lucid_number = n + 1\n    else:\n        # If it's odd, add 2 to the integer to get the first even lucid number\n        first_lucid_number = n + 2\n    \n    # Iterate through the numbers from first_lucid_number to n\n    for i in range(first_lucid_number, n+1):\n        # Check if the number is divisible by 3 or 5\n        if i % 3 == 0 or i % 5 == 0:\n            # If it is, add it to the lucid_numbers list\n            lucid_numbers.append(i)\n    \n    # Return the lucid_numbers list\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize a list to store the lucid numbers\n    ludic_numbers = []\n    # Loop through all numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a lucid number\n        is_lucid = True\n        # Loop through all factors of the number\n        for factor in range(1, int(num**0.5)+1):\n            # Check if the number is divisible by the factor\n            if num % factor == 0:\n                # If it is, the number is not a lucid number\n                is_lucid = False\n                break\n        # If the number is a lucid number, add it to the list of lucid numbers\n        if is_lucid:\n            ludic_numbers.append(num)\n    # Return the list of lucid numbers\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if i**2 <= n:\n            lucid_numbers.append(i**2)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n\n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Check if the number is a lucid number\n        if i == 1 or i % 2 == 0:\n            lucid_numbers.append(i)\n\n        # Check for all even numbers less than or equal to sqrt(i)\n        sqrt_i = int(i ** 0.5)\n        for j in range(2, sqrt_i+1):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # initialize a list to store lucid numbers\n    lucid_numbers = []\n\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a lucid number\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        # if the number is a lucid number, add it to the list\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(1, n+1):\n        if sum(int(digit)**i for digit in str(i)) == i:\n            lucid_nums.append(i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Iterate through all numbers less than or equal to n\n    for i in range(2, n+1):\n\n        # Check if i is a lucid number\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the words back into a string\n    s =''.join(words)\n\n    # Return the reversed string\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words = words[::-1]\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence = \" \".join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Remove leading and trailing whitespaces\n    s = s.strip()\n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n    # Reverse each word in the list\n    words = [word[::-1] for word in words]\n    # Join the reversed words back into a string with spaces as the delimiter\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n    \n    # Reverse each word in the list and join them back together using whitespace as the delimiter\n    reversed_words =''.join(reversed(word) for word in words)\n    \n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into a list of words\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])  # reverse the characters of each word in the list\n    return''.join(reversed_words)  # join the reversed words back together into a string with spaces between them"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    reversed_words = words[::-1] # reverse the order of the words in the list\n    reversed_string =''.join(reversed_words) # join the reversed words back into a string with spaces between\n    return reversed_string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number,\n    and False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    Returns True if the given number is prime, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is equal to 2 or 3\n    elif num == 2 or num == 3:\n        return True\n    \n    # Check if the number is divisible by 2 or 3\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    # Check if the number is divisible by any number between 4 and sqrt(num)\n    for i in range(4, int(num**0.5)+1, 6):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n    \n    # If none of the above conditions are met, then the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the given number is 1 or a negative number\n    if num <= 1 or num < 0:\n        return False\n\n    # initialize a variable to keep track of whether the number is prime or not\n    is_prime = True\n\n    # loop through all numbers from 2 to the square root of the given number\n    for i in range(2, int(num ** 0.5) + 1):\n        # if the given number is divisible by the current number, then the number is not prime\n        if num % i == 0:\n            is_prime = False\n            break\n\n    # if the number is still prime after checking all numbers, then it is prime\n    return is_prime"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    '''\n    This function checks if a given integer is a prime number.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is divisible by 2 or 3\n    elif num == 2 or num == 3:\n        return True\n    # check if the number is divisible by any odd number from 3 to num-1\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    # if the number has no factors other than 1 and itself, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(0), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # find all occurrences of pattern in text using re.findall()\n    matches = re.findall(pattern, text)\n\n    # iterate over matches and return the longest match\n    longest_match = None\n    for match in matches:\n        if longest_match is None or len(match) > len(longest_match):\n            longest_match = match\n\n    return longest_match"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Search the text for the pattern and return the matching substring and its start and end indices\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches for a regex pattern in the given text and returns the matching substrings along with their start and end indexes.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        literal = text[start:end]\n        literals.append((literal, start, end))\n\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If a match is found, return the substring, start index, and end index\n    if match:\n        return match.group(), match.start(), match.end()\n    \n    # Otherwise, return None if no match is found\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (4 * (n - 1) + 1) * bell_Number(n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # initializing first two bell numbers as 1\n    a, b = 1, 1\n\n    # iterating n-1 times\n    for i in range(1, n):\n        # calculating next bell number by adding previous two bell numbers\n        a, b = b, a + b\n\n    return a"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    This function returns the nth Bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        bell_number = 0\n        for i in range(1, n+1):\n            bell_number += (-1)**(i-1) * (2*i-1)\n        return bell_number"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_nums = [1]\n    for i in range(2, n+1):\n        bell_nums.append(bell_nums[i-1] + bell_nums[i-2])\n    return bell_nums[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    k = L - 1\n    list1.remove(list1[k])\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L < 1:\n        return list1\n    else:\n        return remove_kth_element(list1[1:], L-1) + [list1[0]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    if L > n:\n        raise ValueError(\"L is greater than the length of the list.\")\n    elif L == 1:\n        return list1[1:]\n    else:\n        k = n - L + 1\n        return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1:\n        return list1\n    else:\n        return remove_kth_element(list1[1:], L-1) + [list1[0]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(lst, k):\n    '''\n    This function takes a list and k as input and returns a list with the same elements, but the k'th element removed.\n    '''\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a list to store the elements of the list without the kth element\n    new_list = []\n    # iterate over the elements of the list1 and add them to the new_list, excluding the kth element\n    for i in range(0, len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    # If L is greater than the length of the list, return the original list\n    if L > len(list1):\n        return list1\n\n    # Find the k'th element and remove it from the list\n    k = L - 1\n    while k > 0 and list1[k - 1]!= k:\n        k -= 1\n    if k > 0:\n        list1 = list1[:k - 1] + list1[k:]\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return None\n    elif L == 1:\n        return [i for i in list1 if i!= list1[0]]\n    elif L > 1:\n        k = L\n        count = 0\n        for i in list1:\n            count += 1\n            if count == k:\n                list1.remove(i)\n                return list1\n            elif count > k:\n                list1.remove(i)\n        return None"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L // 2\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Calculate the length of the longest row in the matrix\n    max_row = max([len(row) for row in test_list])\n\n    # Initialize the maximum value of then'th column\n    max_value = 0\n\n    # Loop through each row of the matrix and calculate the maximum value of then'th column\n    for row in range(len(test_list)):\n        if row == 0:\n            max_value = test_list[row][N-1]\n        else:\n            max_value = max(max_value, test_list[row][N-1])\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Get the length of the first row in the list (matrix)\n    first_row_length = len(test_list[0])\n\n    # Initialize an empty list to store the maximum values\n    max_values = []\n\n    # Loop through the rows of the matrix\n    for row in test_list:\n        # If the current row is longer than the length of the first row, raise an error\n        if len(row) > first_row_length:\n            raise ValueError(\"Matrix is too wide for the given N.\")\n\n        # Get the value of then'th column\n        nth_value = row[N-1]\n\n        # If the nth_value is not in the max_values list, add it\n        if nth_value not in max_values:\n            max_values.append(nth_value)\n\n    # Return the maximum value in the max_values list\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column_max = []\n    for row in test_list:\n        column_max.append(row[N-1])\n    return max(column_max)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize variables\n    max_val = float('-inf')\n    col_num = 0\n\n    # Loop through the matrix\n    for row in test_list:\n        # Check if the current column number is the nth column\n        if col_num == N:\n            # If it is, update the max value if the current value is greater\n            if row[col_num] > max_val:\n                max_val = row[col_num]\n        # Increment the column number\n        col_num += 1\n\n    # Return the max value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize an empty list to store the max values for each row\n    max_values = []\n    \n    # Loop through each row of the matrix\n    for row in test_list:\n        # Calculate the maximum value of then'th column\n        max_value = max(row[i] for i in range(len(row)) if i % N == 0)\n        \n        # Append the maximum value to the list of max values for each row\n        max_values.append(max_value)\n    \n    # Return the maximum value for each row\n    return max_values"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # iterate over the rows of the matrix\n    for row in test_list:\n        # find then'th column in the current row\n        nth_column = [row[i] for i in range(len(row)) if i % N == 0]\n        # find the maximum value in the nth column\n        max_value = max(nth_column)\n        # print the maximum value for the nth column\n        print(\"The maximum value in the {}th column is: {}\".format(N, max_value))"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if N in row:\n            max_val = max(max_val, row.index(N))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Calculate the length of the first row of the matrix\n    length = len(test_list[0])\n\n    # Initialize an empty list to hold the maximum values of each column\n    max_col_vals = []\n\n    # Loop through each row of the matrix\n    for row in test_list:\n        # Initialize a variable to hold the maximum value of then'th column\n        max_val = None\n\n        # Loop through each column of the row\n        for i in range(length):\n            # If this is then'th column, find the maximum value and store it in the variable\n            if i == N - 1:\n                max_val = max(max_val, row[i])\n\n        # If we found a maximum value for this column, add it to the list of max column values\n        if max_val is not None:\n            max_col_vals.append(max_val)\n\n    # Return the maximum value of then'th column\n    return max(max_col_vals)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        test_list[i].append(max(test_list[i][:N]))\n        del test_list[i][:N]\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Returns the maximum value of the nth column of a matrix.\n\n    :param matrix: a list of lists representing a matrix\n    :param N: the column index to get the maximum value of\n    :return: the maximum value of the nth column of the matrix\n    \"\"\"\n    max_val = matrix[0][N]\n    for row in matrix[1:]:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(0, len(lst), 2):\n        merged.append([lst[i][0], lst[i+1][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        sublist = lst[i]\n        first_elem = sublist[0]\n        second_elem = sublist[1]\n        new_list = [first_elem, second_elem]\n        result.append(new_list)\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n\n    # Iterate through the tuple list\n    for num in test_list:\n        # Add the current number to the cumulative sum\n        cumulative_sum += num\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for item in test_list:\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a list to store the cumulative sum of values in the given list\n    cumulative_sum = []\n    \n    # Loop through each element of the list\n    for i in range(len(test_list)):\n        # If the element is a tuple, add the sum of the values in the tuple to the cumulative sum list\n        if isinstance(test_list[i], tuple):\n            cumulative_sum.append(sum(test_list[i]))\n        # If the element is not a tuple, simply append it to the cumulative sum list\n        else:\n            cumulative_sum.append(test_list[i])\n    \n    # Return the cumulative sum list\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumsum = 0\n    for item in test_list:\n        cumsum += item\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values in the list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][0]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        cum_sum += tup[0]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        avg = sum(nums[i]) / len(nums[i])\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples as input and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        tuple_sum = sum(nums[i])\n        tuple_len = len(nums[i])\n        avg = tuple_sum/tuple_len\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for tup in nums:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    results = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        avg = total / count\n        results.append(avg)\n    return results"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    # Iterate over each tuple in the input list\n    for t in nums:\n        # Calculate the average of the tuple\n        avg = sum(t) / len(t)\n        # Add the average to the list\n        averages.append(avg)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        sum = 0\n        count = 0\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n            count += 1\n        averages.append(sum/count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        nums[i] = tuple(nums[i])  # convert each tuple to a list\n        result.append(sum(nums[i]) / len(nums[i]))  # calculate the average value for each tuple\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple)/len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length!\")\n        return\n\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length!\")\n        return None\n    else:\n        # perform element wise modulo operation on the tuples\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # initialize the result tuple with zeros\n    result_tup = [0] * len(test_tup1)\n    \n    # perform element-wise modulo using nested for loops\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] % test_tup2[i]\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return\n    \n    # perform element-wise modulo\n    result_tup = tuple((x % y for x, y in zip(test_tup1, test_tup2)))\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    i = 0  # Step count\n    j = d  # Starting point\n\n    # Initialize a list to store the distances visited so far\n    distances = []\n\n    # Loop while we haven't reached the starting point\n    while j!= 0:\n        # Add the current distance to the list\n        distances.append(j)\n\n        # If the next step is greater than the current point, update the starting point\n        if j > i:\n            i = j\n\n        # Update the current point\n        j = j - 1\n\n    # Return the number of jumps required\n    return len(distances)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    i, j, x, y = 0, 0, 0, 0\n    jumps = 0\n    \n    # Iterate until we reach the desired point (d, 0)\n    while x!= d and y!= 0:\n        # Move up\n        if y == 0:\n            i += 1\n        y += 1\n        \n        # Move right\n        if x == d:\n            j += 1\n        x += 1\n        \n        # Count jumps\n        if x == d and y == 0:\n            jumps += 1\n        \n        # Check if we have reached the end of the matrix\n        if i == len(steps) and j == len(steps[0]):\n            break\n    \n    # Return number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d > steps:\n        return 0\n    elif d == 0:\n        return 1\n    else:\n        return min_Jumps(steps-1, d-1) + min_Jumps(steps-1, d)\n\nprint(min_Jumps(5, 3))"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    rows, cols = len(steps), len(steps[0])\n    steps[0][0] = 0\n    jumps = 0\n    end = d\n\n    for i in range(rows):\n        for j in range(cols):\n            if steps[i][j] == 1:\n                if i == end[0] and j == end[1]:\n                    return jumps\n                if j > 0:\n                    steps[i][j-1] = 0\n                if j < cols-1:\n                    steps[i][j+1] = 0\n                jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    \n    # Initialize the number of jumps required\n    jumps = 0\n    \n    # Initialize the position of the starting point (0, 0)\n    x, y = 0, 0\n    \n    # Initialize the number of steps taken so far\n    steps_taken = 0\n    \n    # Initialize a boolean variable to check if the position has been visited before\n    visited = set()\n    \n    # Loop through each step of the given length\n    while steps_taken < steps:\n        \n        # Check if the position (x, y) has been visited before\n        if (x, y) in visited:\n            \n            # If the position has been visited before, move to the next position\n            x, y = x + 1, y\n            \n            # Check if we can move to the next position without jumping\n            if x < d:\n                x, y = x + 1, y\n            \n            # Increment the number of jumps taken\n            jumps += 1\n        \n        # If we are at the starting position (0, 0), check if we can reach the point (d, 0)\n        elif x == 0 and y == 0:\n            \n            # If we can reach the point (d, 0), increment the number of steps taken\n            if x + y == d:\n                steps_taken += 1\n            \n            # If we cannot reach the point (d, 0), increment the number of steps taken and move to the next position\n            else:\n                steps_taken += 1\n                x, y = x + 1, y\n        \n        # If we are not at the starting position, move to the next position\n        else:\n            x, y = x + 1, y\n        \n        # Add the position (x, y) to the set of visited positions\n        visited.add((x, y))\n        \n    # Return the number of jumps taken\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    while i < steps:\n        if i == d:\n            return jumps\n        if i > d:\n            jumps += 1\n        i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Calculate the maximum number of jumps required to reach the target point\n    max_jumps = steps // d + (steps % d > 0)\n    return max_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    # Find the length of a step\n    step_length = 1 / steps\n    # Initialize variables\n    min_steps = 0\n    current_jumps = 0\n    current_x = 0\n    current_y = 0\n    # Loop through all possible jumps\n    while current_x < d and current_y >= 0:\n        min_steps += 1\n        current_x += current_jumps * step_length\n        current_y -= current_jumps * step_length\n        current_jumps += 1\n    # Return the minimum number of jumps\n    return min_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Find the number of jumps required to reach (d, 0) from origin\n    def reach_zero(i, j, d):\n        if i == steps and j == 0:\n            return 0\n        elif i == 0:\n            return min_Jumps(steps-1, d) + 1\n        else:\n            return min_Jumps(i-1, j-1, d) + 1\n\n    # Check for the minimum number of jumps\n    def min_jumps(d):\n        if d == 0:\n            return 0\n        else:\n            return min_jumps(d-1) + 1\n\n    # Start the recursion\n    return min_jumps(d)"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of lists is equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length.\")\n        return\n    \n    # Create a new list to store the result\n    result = []\n    \n    # Loop through the lists\n    for i in range(len(nums1)):\n        # Divide the elements of the two lists\n        result.append(nums1[i] / nums2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists and returns a new list where each element of the first list is divided by the corresponding element of the second list.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length!\")\n        return None\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists should have the same length.')\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have same length.\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The lists are not of equal length!\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    # initialize an empty list to store numbers\n    num_list = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, add it back to the string\n        else:\n            test_str = test_str.replace(char, \"\")\n            test_str = test_str.lstrip(\"0\")\n            test_str = test_str.lstrip(\"-\")\n            test_str = test_str.lstrip(\"+\")\n\n    # join the num_list into a single string and move it to the end of the string\n    return test_str + \"\".join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize an empty string to store the result\n    result = ''\n\n    # loop through each character in the input string\n    for char in test_str:\n\n        # if the character is a digit, add it to the result and move on to the next character\n        if char.isdigit():\n            result += char\n            continue\n\n        # if the character is not a digit, move on to the next character\n        else:\n            result += char\n\n    # return the result string with all the digits moved to the end\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        return test_str[-len(num_list):] + ''.join(num_list)\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    return result + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list) + test_str.replace(''.join(num_list), '')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the string to a list of characters\n    test_list = list(test_str)\n\n    # Initialize two pointers, one at the beginning of the string and one at the end\n    start = 0\n    end = len(test_list) - 1\n\n    # Move all the numbers to the end of the string\n    while start < end:\n        if test_list[start].isdigit():\n            # Swap the current character with the character at the end of the string\n            test_list[start], test_list[end] = test_list[end], test_list[start]\n            # Increment the start pointer\n            start += 1\n        else:\n            # Increment the end pointer\n            end -= 1\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(test_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_count = 0\n    num_str = ''\n\n    # iterate through the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the num_str variable\n            num_str += char\n            # increment the num_count variable\n            num_count += 1\n        else:\n            # if the character is not a number, add it to the end of the string\n            test_str += char\n\n    # return the final string with all the numbers moved to the end\n    return test_str + num_str * num_count"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    new_str = \"\"\n    num_found = False\n    for char in test_str:\n        if char.isdigit():\n            num_found = True\n        else:\n            new_str += char\n        if num_found:\n            num_found = False\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    non_num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n    return non_num_list + num_list"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    # create a set to store the numbers that are divisible by 2\n    divisible_set = set()\n\n    # loop through the list and add the numbers that are divisible by 2 to the set\n    for num in a:\n        if num % 2 == 0:\n            divisible_set.add(num)\n\n    # initialize the largest subset size to 0\n    largest_subset_size = 0\n\n    # loop through the set and find the size of the largest subset that contains every number that is divisible by 2\n    for num in divisible_set:\n        subset_size = 1\n        while num + subset_size * 2 in divisible_set:\n            subset_size += 1\n\n        # update the largest subset size if the current number is the largest subset so far\n        if subset_size > largest_subset_size:\n            largest_subset_size = subset_size\n\n    # return the largest subset size\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # sort the list in ascending order\n    n = len(a)\n    for i in range(n-2): # iterate over all subsets of size 2\n        for j in range(i+3, n): # iterate over all subsets of size i+2\n            if a[i] % a[j] == 0: # check if all pairs in the subsets are divisible\n                return j - i # return the size of the largest subset\n            else:\n                continue # skip pairs that are not divisible"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a dictionary to store the count of numbers in each subset\n    subset_count = {}\n    # initialize the size of the largest subset as 0\n    max_size = 0\n    # loop through the input list of numbers\n    for num in a:\n        # if the number is not in the subset_count dictionary, add it with a count of 1\n        if num not in subset_count:\n            subset_count[num] = 1\n        # if the number is already in the subset_count dictionary, increment its count by 1\n        else:\n            subset_count[num] += 1\n        # if the size of the subset is greater than the current max_size, update max_size\n        if len(subset_count) > max_size:\n            max_size = len(subset_count)\n        # if the size of the subset is equal to the current max_size, loop through the subset dictionary to check if every pair is divisible\n        elif len(subset_count) == max_size:\n            divisible = True\n            for pair in subset_count:\n                # if a pair is not divisible, set divisible to False and break out of the loop\n                if pair % 2!= 0:\n                    divisible = False\n                    break\n                # if every pair is divisible, set divisible to True and break out of the loop\n                elif pair % 2 == 0:\n                    break\n            # if every pair in the subset is divisible, update max_size\n            if divisible:\n                max_size = len(subset_count)\n    # return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 1\n    current_size = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n    max_size = max(max_size, current_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    # Create a set of all the integers in the list\n    s = set(a)\n    \n    # Find the largest subset that is divisible by every number in the set\n    subset = [max(a) // b for b in s]\n    \n    # Find the maximum size of the largest subset\n    max_size = max(subset)\n    \n    # Return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()  # sort the list in ascending order\n    n = len(a)\n    max_length = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            # check if the previous element is divisible by 2\n            if i > 0 and a[i - 1] % 2 == 1:\n                # if the previous element was not divisible by 2, skip this element\n                continue\n            # if the previous element was divisible by 2 or if this is the first element, update max_length\n            max_length = max(max_length, i + 1)\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset_size = 0\n    prev_max_subset_size = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] % a[j] == 0:\n                if j - i + 1 > max_subset_size:\n                    max_subset_size = j - i + 1\n                    prev_max_subset_size = i\n    return max_subset_size\n\na = [2, 4, 8, 16]\nprint(largest_subset(a)) # Output: 4"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Create a list of pairs where the first element is the number and the second element is the index\n    pairs = [(a[i], i) for i in range(len(a))]\n    \n    # Sort the pairs by the first element\n    pairs.sort(key=lambda x: x[0])\n    \n    # Initialize the largest subset size and the current subset size\n    max_size = 0\n    curr_size = 0\n    \n    # Loop through the pairs\n    for i in range(len(pairs)):\n        # If the current pair is divisible by the next pair, add it to the current subset and update the maximum subset size\n        if pairs[i][0] % pairs[i+1][0] == 0:\n            curr_size += 1\n            max_size = max(max_size, curr_size)\n            \n        # If the current pair is not divisible by the next pair, start a new subset\n        else:\n            curr_size = 1\n            \n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    subset_sum = 0\n    largest_subset_size = 0\n\n    for i in range(n):\n        subset_sum += a[i]\n        largest_subset_size = max(largest_subset_size, i+1)\n        while subset_sum % 2!= 0:\n            subset_sum -= a[i]\n            largest_subset_size = max(largest_subset_size, i)\n\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * (n+1)\n    max_size = 0\n\n    for i in range(1, n+1):\n        if a[i-1] % i == 0:\n            dp[i] = dp[i-1] + 1\n            if dp[i] > max_size:\n                max_size = dp[i]\n\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge two sorted lists into one\n    merged = arr1 + arr2\n    merged.sort()\n\n    # Calculate the median\n    median = merged[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate both arrays\n    arr = arr1 + arr2\n\n    # Sort the concatenated array\n    arr.sort()\n\n    # Calculate the median index\n    median_index = n // 2\n\n    # Return the median\n    return arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    merged_list = arr1 + arr2\n    # sort the merged list\n    merged_list.sort()\n    # find the median\n    median = None\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Calculate the length of the merged list\n    len_merged_list = len(merged_list)\n    \n    # Find the median index\n    mid_index = len_merged_list // 2\n    \n    # Check if the median index is even or odd\n    if len_merged_list % 2 == 0:\n        median = (merged_list[mid_index - 1] + merged_list[mid_index]) / 2\n    else:\n        median = merged_list[mid_index]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists of the same size and a number n,\n    and returns the median of the two lists.\n\n    The function first checks if the length of the two lists is equal. If they are\n    not equal, the function raises a ValueError.\n\n    Then, the function first sorts the two input lists. Next, the function calculates\n    the midpoint of the sorted list. If the length of the sorted list is odd, the\n    median is simply the element at the midpoint. If the length of the sorted list\n    is even, the median is the average of the two elements at the midpoints.\n\n    Finally, the function returns the median.\n    \"\"\"\n\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both input lists must be of the same size.\")\n\n    arr1.sort()\n    arr2.sort()\n\n    midpoint = n // 2\n\n    if n % 2 == 0:\n        return (arr1[midpoint - 1] + arr1[midpoint]) / 2\n    else:\n        return arr1[midpoint]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists\n    arr = arr1 + arr2\n    \n    # Sort the merged list\n    arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        return (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    merged_arr = arr1 + arr2\n    sorted_arr = sorted(merged_arr)\n    n_middle = n // 2\n    if n % 2 == 0:\n        return (sorted_arr[n_middle - 1] + sorted_arr[n_middle]) / 2.0\n    else:\n        return sorted_arr[n_middle]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two sorted lists\n    arr = arr1 + arr2\n    # sort the concatenated list\n    arr.sort()\n    # calculate the length of the sorted list\n    length = len(arr)\n    # calculate the median\n    if length % 2 == 0:\n        # if the length of the list is even, find the average of the two middle numbers\n        middle = length // 2\n        median = (arr[middle - 1] + arr[middle]) / 2\n    else:\n        # if the length of the list is odd, find the middle number\n        middle = length // 2\n        median = arr[middle]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # sort the input arrays\n    arr1.sort()\n    arr2.sort()\n\n    # find the median index\n    mid1 = n // 2\n    mid2 = (n + 1) // 2\n\n    # check if the length of the input arrays is odd or even\n    if n % 2 == 0:\n        # if even, then return the average of the two middle elements\n        return (arr1[mid1 - 1] + arr1[mid1]) / 2\n    else:\n        # if odd, then return the middle element\n        return arr1[mid1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2) or len(arr1)!= n:\n        return 'Invalid input. The two input lists should have the same size and n.'\n    \n    # merge the two arrays\n    merged = arr1 + arr2\n\n    # sort the merged array\n    sorted_arr = sorted(merged)\n\n    # find the middle index\n    mid = n // 2\n\n    # if n is even\n    if n % 2 == 0:\n        # return the median\n        return (sorted_arr[mid-1] + sorted_arr[mid]) / 2.0\n    \n    # if n is odd\n    else:\n        # return the middle element\n        return sorted_arr[mid]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Check if input string is not empty\n    if not string:\n        return \"Input string cannot be empty\"\n    \n    # Convert string to uppercase\n    string = string.upper()\n    \n    # Check if string is uppercase\n    if string == string.upper():\n        return \"The string is already uppercase\"\n    else:\n        return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    # Create an empty string to store the uppercase version of the input string\n    upper_string = \"\"\n    \n    # Loop through each character in the input string\n    for char in string:\n        # If the character is lowercase, convert it to uppercase and append it to the output string\n        if char.islower():\n            upper_string += char.upper()\n    \n    # Return the uppercase version of the input string\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    for char in string:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Initialize two pointers to the first and last elements of the list\n    i = 0\n    j = len(newList) - 1\n    \n    # Swap the first and last elements using a temporary variable\n    temp = newList[i]\n    newList[i] = newList[j]\n    newList[j] = temp\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than or equal to 2.\n    if len(newList) < 2: \n        # If the length is less than 2, return the original list as it is.\n        return newList\n    \n    # Interchange the first and last element of the list.\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list.\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Checking if the given list is empty or not\n    if len(newList) == 0:\n        return \"List is empty\"\n    else:\n        # Swapping the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"The list must have at least two elements to swap.\")\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Assign the first and last element of the list to variables\n        first = newList[0]\n        last = newList[-1]\n        # Assign the second to the first position and the last to the second position\n        newList[0] = last\n        newList[-1] = first\n        # Return the updated list\n        return newList\n    else:\n        # If the length of the list is 1, return the same list\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initialize the first and last indices of the list\n    first = 0\n    last = len(newList)-1\n\n    # swap the first and last elements\n    newList[first], newList[last] = newList[last], newList[first]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # check if the list is empty\n    if len(newList) == 0:\n        return \"The list is empty.\"\n\n    # check if the list has only one element\n    if len(newList) == 1:\n        return \"The list has only one element.\"\n\n    # interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"List should have at least two elements.\"\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return the new list\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Radius of semicircle\n    s = 2 * r\n    \n    # Calculating area of largest triangle\n    a = (s**2) / 6\n    \n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of a square with side length r\n    area = (2 * r**2) / (5 * (r - 1)**2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of the largest square that can be inscribed in a semicircle of radius r\n    s = 2 * r * math.asin(r/2)\n    # calculate the area of a triangle with sides of length 1 and height sqrt(s/3)\n    area = 1/3 * s * s * math.sqrt(s/3)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * (r ** 2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Base case for r <= 0\n    if r <= 0:\n        return 0\n    \n    # Base case for r = 1\n    if r == 1:\n        return 3.14159265359\n    \n    # Calculate the area of the triangle using Heron's formula\n    a = math.sqrt(3)\n    area = (math.sqrt(3) * r) / 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of a circle with radius r\n    area_circle = 3.14 * r * r\n    \n    # calculate the maximum possible area of a triangle that can be inscribed in a semicircle with radius r\n    max_area = 3.14 * r * r\n    \n    # calculate the maximum possible area of a triangle that can be inscribed in a semicircle with radius r and side of length sqrt(3/4)r\n    max_area_sqrt_3_4 = 3.14 * (r + 1/4*sqrt(3)) * (r + 1/4*sqrt(3))\n    \n    # calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area_triangle = max(max_area, max_area_sqrt_3_4)\n    \n    # calculate the area of the largest triangle that can be inscribed in a semicircle with radius r and side of length sqrt(3/4)r\n    area_triangle_sqrt_3_4 = 3.14 * (r + 1/4*sqrt(3)) * (r + 1/4*sqrt(3))\n    \n    # calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r and side of length sqrt(3/4)r\n    area_triangle_sqrt_3_4_side = 3.14 * (r + 1/4*sqrt(3)) * r / 2\n    \n    # calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r and side of length sqrt(3/4)r\n    area_triangle_sqrt_3_4_side_sqrt_3 = 3.14 * (r + 1/4*sqrt(3)) * (r + 1/4*sqrt(3)) / 2\n    \n    # calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r and side of length sqrt(3/4)r\n    area_triangle_sqrt_3_4_side_sqrt_3_sqrt_3 = 3.14 * (r + 1/4*sqrt(3)) * (r + 1/4*sqrt(3))\n    \n    # calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r and side of length sqrt(3/4)r\n    area_triangle_sqrt_3_4_side_sqrt_3_sqrt_3_sqrt_3 = 3.14 * (r + 1/4*sqrt(3)) * (r + 1/4*sqrt(3))\n    \n    # calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r and side of length sqrt(3/4)r\n    area_triangle_sqrt_3_4_side_sqrt_3_sqrt_3_sqrt_3_sqrt_3 = 3.14 * (r + 1/4*sqrt(3)) * (r + 1/4*sqrt(3))\n    \n    # calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r and side of length sqrt(3/4)r\n    area_triangle_sqrt_3_4_side_sqrt_3_sqrt_3_sqrt_3_sqrt_3_sqrt_3 = 3.14 * (r + 1/4*sqrt(3)) * (r + 1/4*sqrt(3))\n    \n    # calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r and side of length sqrt(3/4)r\n    area_triangle_sqrt_3_4_side_sqrt_3_sqrt_3_sqrt_3_sqrt_3_sqrt_3_sqrt_3 = 3.14 * (r + 1/4*sqrt(3)) * (r + 1/4*sqrt(3))\n    \n    # calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r and side of length sqrt(3/4)r\n    area_triangle_sqrt_3_4_side_sqrt_3_sqrt_3_sqrt_3_sqrt_3_sqrt_3_sqrt_3_sqrt_3 = 3.14 * (r + 1/4*sqrt(3)) * ("
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Using Heron's formula to find the area of a triangle\n    def herons_formula(a, b, c):\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Using the Pythagorean theorem to find the length of the semi-perimeter\n    def semi_perimeter(r):\n        return 2 * r\n    \n    # Using the Pythagorean theorem to find the length of the longest side\n    def longest_side(a, b, c):\n        return sqrt(a**2 + b**2 + c**2)\n    \n    # Using the Pythagorean theorem to find the length of the shortest side\n    def shortest_side(a, b, c):\n        return sqrt(a**2 + b**2 - c**2)\n    \n    # Using the Pythagorean theorem to find the length of the longest side of the smallest triangle\n    def smallest_triangle(a, b, c):\n        return sqrt(a**2 + b**2 - c**2)\n    \n    # Finding the semi-perimeter of the semicircle\n    s = semi_perimeter(r)\n    \n    # Finding the length of the longest side of the largest triangle\n    a = longest_side(s, r, s)\n    \n    # Finding the length of the shortest side of the largest triangle\n    b = shortest_side(s, r, s)\n    \n    # Finding the length of the longest side of the smallest triangle\n    c = smallest_triangle(s, r, s)\n    \n    # Using Heron's formula to find the area of the largest triangle\n    area = herons_formula(a, b, c)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    perimeter = 2*r\n    # Calculate the semi-perimeter of the circle\n    semi_perimeter = 2*r\n    # Calculate the area of the largest triangle that can be inscribed in the circle\n    area = (semi_perimeter**2) / (4*math.tan(math.pi/5))\n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the perimeter of the semicircle\n    perimeter = 2 * r\n    \n    # Calculate the area of each triangle\n    area1 = (r ** 2) / 4\n    area2 = (r ** 2) / 2\n    area3 = 0\n    \n    # Find the area of the largest triangle\n    area = max(area1, area2, area3)\n    \n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    area_smallest = 2 * r * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_largest = area_smallest - perimeter\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Calculate the area of a triangle with sides of 2r and 2r\n    area1 = math.pi * (2 * r) ** 2\n\n    # Calculate the area of a triangle with sides of r and r\n    area2 = math.pi * r ** 2\n\n    # Calculate the area of a triangle with sides of 2r and 2r using Heron's formula\n    s = (2 * r) ** 2\n    area3 = math.sqrt(s * (s - 4 * r) * (s - 6 * r) * (s - 8 * r))\n\n    # Find the maximum of the three areas and return it\n    return max(area1, area2, area3)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if array is already sorted\n    if array[0]!= 1:\n        return None\n    # If start is not given, start from index 1\n    if start == 0:\n        start = 1\n    # If end is not given, find the last index of the array\n    if end == None:\n        end = len(array) - 1\n    # Iterate through the array and find the smallest missing number\n    for i in range(start,end+1):\n        if i+1 not in array:\n            return i+1\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # Find the first missing number\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    # If all numbers are consecutive, the last missing number is the length of the array + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers as an argument and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): A list of natural numbers sorted in ascending order.\n    start (int): The starting index of the array. Defaults to 0.\n    end (int): The ending index of the array. Defaults to None, which means the entire array is used.\n\n    Returns:\n    int: The smallest missing number.\n\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # Check if the input is valid\n    if not isinstance(array, list):\n        raise ValueError(\"Input must be a list\")\n\n    # Check if the list is empty\n    if len(array) == 0:\n        return None\n\n    # If the end index is not specified, set it to the last index of the list\n    if end is None:\n        end = len(array)-1\n\n    # Check if the input list is sorted in ascending order\n    if array[0] > array[1]:\n        raise ValueError(\"Input list must be sorted in ascending order\")\n\n    # Loop through the array and check if each element is present and consecutive\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n\n    # If the loop completes without finding the missing number, return None\n    return None"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers and returns a list of even numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]\n    adj.extend(sub)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele) == tuple:\n        for i in range(len(ele)):\n            x, y = ele[i]\n            if i < len(ele)-1:\n                sub.append((x+1, y))\n            if i > 0:\n                sub.append((x-1, y))\n            if i % 2 == 0:\n                if y < len(ele)-1:\n                    sub.append((x, y+1))\n                if y > 0:\n                    sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # Extract the x and y coordinates of the given coordinate tuple\n    x, y = ele\n    \n    # Define a set to store the adjacent coordinates of the given coordinate tuple\n    adj = set()\n    \n    # Loop through the 8 directions (north, south, east, west, northeast, southeast, southwest, northwest)\n    for dx, dy in ((1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, 1), (-1, -1), (1, -1)):\n        # Calculate the new x and y coordinates of the adjacent coordinate\n        nx, ny = x + dx, y + dy\n        \n        # Check if the new coordinate is within the bounds of the grid\n        if nx >= 0 and nx < len(grid) and ny >= 0 and ny < len(grid[0]):\n            # Add the new coordinate to the adjacent coordinate set\n            adj.add((nx, ny))\n    \n    # Return the set of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    # initializing adjacent coordinates list\n    adj = []\n    # checking each adjacent cell\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # if the adjacent cell is within the boundaries of the grid and not the same as the current cell\n            if 0 <= x+i < n and 0 <= y+j < n and (i, j)!= (0,0):\n                # appending the adjacent coordinates to the list\n                adj.append((x+i, y+j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if ele[0] > 0:\n        sub.append((ele[0]-1, ele[1]))\n    if ele[1] > 0:\n        sub.append((ele[0], ele[1]-1))\n    if ele[0] < 2:\n        sub.append((ele[0]+1, ele[1]))\n    if ele[1] < 2:\n        sub.append((ele[0], ele[1]+1))\n    return list(set(sub))"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            if i!= x or j!= y:\n                if (i, j) not in adj and (i, j)!= (x, y):\n                    adj.append((i, j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    if i == 0:\n        if j == 0:\n            sub.append((i+1,j))\n            sub.append((i,j+1))\n        elif j == n-1:\n            sub.append((i+1,j))\n            sub.append((i,j-1))\n        else:\n            sub.append((i+1,j))\n            sub.append((i,j-1))\n            sub.append((i,j+1))\n    elif i == m-1:\n        if j == 0:\n            sub.append((i-1,j))\n            sub.append((i,j+1))\n        elif j == n-1:\n            sub.append((i-1,j))\n            sub.append((i,j-1))\n        else:\n            sub.append((i-1,j))\n            sub.append((i,j-1))\n            sub.append((i,j+1))\n    elif j == 0:\n        sub.append((i+1,j))\n        sub.append((i-1,j))\n        sub.append((i,j+1))\n    elif j == n-1:\n        sub.append((i+1,j))\n        sub.append((i-1,j))\n        sub.append((i,j-1))\n    else:\n        sub.append((i+1,j))\n        sub.append((i-1,j))\n        sub.append((i,j+1))\n        sub.append((i,j-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the adjacent coordinates\n    adj = []\n\n    # Extract the row and column values from the coordinate tuple\n    row, col = ele\n\n    # Iterate over the four adjacent positions and append them to the adjacent list\n    if row > 0:\n        adj.append((row-1, col))\n    if row < n-1:\n        adj.append((row+1, col))\n    if col > 0:\n        adj.append((row, col-1))\n    if col < m-1:\n        adj.append((row, col+1))\n\n    # Add the adjacent coordinates to the sublist\n    sub.extend(adj)\n\n    # Recursively call the function for each adjacent position and append the result to the sublist\n    for pos in adj:\n        adjac(pos, sub)\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i!= 0 or j!= 0) and (i + ele[0], j + ele[1]) not in sub:\n                adj.append((i + ele[0], j + ele[1]))\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    This function takes a string as input and replaces all occurrences of whitespaces with an underscore and vice versa.\n    '''\n    # Split the string into a list of words\n    words = text.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the current word is a whitespace\n        if words[i].isspace():\n            # Replace the whitespace with an underscore\n            words[i] = '_'\n        else:\n            # Replace the underscore with a whitespace\n            words[i] =''\n\n    # Join the words back together into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert all the spaces to underscores\n    new_text = text.replace(' ', '_')\n    # Convert all the underscores to spaces\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # split the string into a list of words\n    words = text.split()\n\n    # iterate through each word in the list\n    for i in range(len(words)):\n        # if the word contains a space, replace it with an underscore\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n        # if the word does not contain a space, replace it with the space it is replaced with\n        else:\n            words[i] = words[i].replace('_','')\n\n    # join the words back into a string and return it\n    return''.join(words)\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # define the function to replace spaces with underscores\n    def replace_spaces_with_underscore(text):\n        return text.replace(\" \", \"_\")\n    \n    # define the function to replace underscores with spaces\n    def replace_underscores_with_spaces(text):\n        return text.replace(\"_\", \" \")\n    \n    # call the function to replace spaces with underscores\n    replaced_text = replace_spaces_with_underscore(text)\n    \n    # call the function to replace underscores with spaces\n    replaced_text_back = replace_underscores_with_spaces(replaced_text)\n    \n    # return the modified string\n    return replaced_text_back"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers, one at the start of the list and one at the end\n    start = 0\n    end = len(num_list) - 1\n    \n    # Iterate through the list\n    while start < end:\n        # If the current element is zero, move it to the end of the list and move the start pointer to the next element\n        if num_list[start] == 0:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            start += 1\n        # If the current element is not zero, move the start pointer to the next element\n        else:\n            start += 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store non-zero numbers\n    non_zero_list = []\n\n    # loop through the original list and append non-zero numbers to the new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # loop through the original list and move all zeros to the end of the new list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = non_zero_list.pop(0)\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # initialize two variables\n    count = 0\n    non_zero_count = 0\n\n    # loop through the list\n    for num in num_list:\n        # if the number is zero, increment the count of non-zero numbers\n        if num == 0:\n            count += 1\n            # move the zeros to the end of the list\n            num_list[non_zero_count], num_list[count] = num_list[count], num_list[non_zero_count]\n            # increment the non-zero count\n            non_zero_count += 1\n            # increment the count of zeroes\n            count += 1\n\n    # remove the extra zeros from the list\n    num_list = num_list[:non_zero_count]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list without zeroes\n    new_list = [x for x in num_list if x!= 0]\n    # concatenate the two lists\n    new_list += [0] * len([x for x in num_list if x == 0])\n    # return the concatenated list\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeros = []\n    non_zeros = []\n\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n\n    return zeros + non_zeros"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            # shift all the non-zero elements to the right\n            for j in range(i, len(num_list) - 1):\n                num_list[j] = num_list[j+1]\n            # decrement the length of the list by 1\n            len_list = len(num_list)\n            len_list -= 1\n            # adjust the indices for the shifted elements\n            for j in range(len_list):\n                num_list[j] = num_list[j+1]\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    \n    if zero_index == -1:\n        return num_list\n    \n    for j in range(len(num_list)-1, zero_index, -1):\n        num_list[j], num_list[j+1] = num_list[j+1], num_list[j]\n        \n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of first element with all other elements\n    xor1 = 0\n    for i in range(1, n):\n        xor1 = xor1 ^ arr[i]\n    # XOR of last element with all other elements except the last element\n    xor2 = 0\n    for i in range(n-2, -1, -1):\n        xor2 = xor2 ^ arr[i]\n    # XOR of xor1 with xor2\n    xor = xor1 ^ xor2\n    # XOR of all elements with xor\n    xor_all = 0\n    for i in range(n):\n        xor_all = xor_all ^ arr[i]\n    # XOR of xor with xor_all\n    final_xor = xor ^ xor_all\n    # Sum of xor of all pairs of elements in the list\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor = sum_xor ^ (arr[i] ^ arr[j])\n    # Sum of xor of all pairs of elements in the list\n    final_sum = xor + sum_xor\n    # Return the sum of xor of all pairs of elements in the list\n    return final_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    \n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n        \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n\n    # Convert the given list to a max heap\n    heap = hq.nlargest(len(iterable), iterable)\n\n    # Remove the maximum element from the heap\n    sorted_list = [heapq.heappop(heap) for _ in range(len(heap))]\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a max-heap.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n\n    # Create a list of tuples containing the element and its index in the list.\n    indexed_list = [(i, x) for i, x in enumerate(iterable)]\n\n    # Use heapify to build the max heap from the indexed list.\n    heapq.heapify(indexed_list)\n\n    # Extract each element from the max heap and add it to the sorted list.\n    sorted_list = []\n    while indexed_list:\n        max_element = indexed_list[0][1]\n        sorted_list.append(max_element)\n        indexed_list.pop(0)\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heapsort algorithm.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable and sorts it using the heap sort algorithm.\n    '''\n    # Convert the given iterable to a list\n    lst = list(iterable)\n    # Build a max heap from the list\n    hq.heapify(lst)\n    # Sort the heap using heapsort and convert back to a list\n    sorted_lst = hq.heapify(lst)\n    return sorted_lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort.\n    \"\"\"\n    n = len(iterable)\n    # Build max heap from the given list\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        hq.heapreplace(iterable, iterable[i])\n        # Heapify the reduced heap\n        heapify(iterable, i, 0)\n\ndef heapify(arr, n, i):\n    \"\"\"\n    Build a max heap by reducing the heap at index i\n    \"\"\"\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts a list using the heap sort algorithm.\n    \"\"\"\n    n = len(iterable)\n    # Build a max heap from the input list\n    hq.heapify(iterable)\n    # Extract elements from the heap one by one\n    sorted_list = []\n    while n > 0:\n        sorted_list.append(hq.heappop(iterable))\n        n -= 1\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes the actual cost of a sale and the sale amount and returns True if it has no profit and no loss, otherwise False.\n    \"\"\"\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    profit = sale_amount - actual_cost\n    \n    if profit == 0:\n        print(\"The amount has no profit and no loss\")\n    else:\n        print(\"The amount has a profit\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Compute the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit is zero and the loss is zero\n    if profit == 0 and loss == 0:\n        print(\"The amount has no profit and no loss.\")\n        return True\n    else:\n        print(\"The amount has a profit of {:.2f} and a loss of {:.2f}\".format(profit, loss))\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    elif profit > 0 and loss == 0:\n        print(\"The given amount has a profit\")\n    elif profit == 0 and loss > 0:\n        print(\"The given amount has a loss\")\n    else:\n        print(\"The given amount has both a profit and a loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # if the sale amount is less than actual cost, then the sale is a loss\n    if sale_amount < actual_cost:\n        return \"loss\"\n    # if the sale amount is equal to the actual cost, then there is no profit or loss\n    elif sale_amount == actual_cost:\n        return \"equal\"\n    # if the sale amount is greater than the actual cost, then the sale is a profit\n    else:\n        return \"profit\"\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n\n    # Calculate the profit\n    profit = sale_amount - actual_cost\n\n    # Check if the profit is zero\n    if profit == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t <= 0:\n        raise ValueError(\"Temperature must be a positive number.\")\n    if v <= 0:\n        raise ValueError(\"Wind speed must be a positive number.\")\n    if t > 30:\n        raise ValueError(\"Temperature must be less than or equal to 30 degrees Celsius.\")\n    if t < 0:\n        raise ValueError(\"Temperature must be greater than or equal to 0 degrees Celsius.\")\n    if v > 15:\n        raise ValueError(\"Wind speed must be less than or equal to 15 km/h.\")\n    if v < 0:\n        raise ValueError(\"Wind speed must be greater than or equal to 0 km/h.\")\n\n    wc_c = 0.62197182 + 0.42759476 * math.log(t) - 11.37802818 * math.log(t) ** 2 + 0.3965575 * math.log(v) - 13.07757576 * math.log(v) ** 2\n    wc_c = round(wc_c)\n    return wc_c\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # calculate the dew point\n    dew_point = 243.04*(1 - (0.0065*(t-273.15)))\n\n    # calculate the wind chill\n    wci = 35.74 + (0.6215*t) - (35.75*math.log(v)) + (0.4275*dew_point)\n\n    # round the wind chill to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < 0:\n        raise ValueError(\"Temperature cannot be negative\")\n    elif t >= 0 and v < 0:\n        raise ValueError(\"Wind velocity cannot be negative\")\n    else:\n        chill_index = 25.0 - 1.1 * math.log10(v) + 0.34 * t - 0.003 * t**2\n        return round(chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t - 273.15 # Convert celsius to fahrenheit\n    wind_speed_mph = v * 0.621371 # Convert km/h to miles/hour\n    wind_speed_miles = wind_speed_mph * 0.621371\n    wind_chill_temp = 35.74 + 0.6215 * wind_speed_miles - 35.757 * math.log(wind_speed_miles) + 0.4275 * t\n    wind_chill_index = round(wind_chill_temp) # Round wind chill index to the nearest integer\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 200 # reference temperature in Celsius\n    f = math.degrees(math.atan(16.67/t)) # formula to convert temperature to Fahrenheit\n    e = 6.112 * math.exp(17.625 * (f - 32) / (f - 237.3)) # formula to calculate the approximate air pressure in Pascals\n    pc = 101325 # specific heat capacity of dry air at constant pressure in Pascals\n    a = (e - 101325) / (v * 1000) # formula to calculate the actual vapor pressure\n    b = (8.314 * (f + 459.67)) / (v * 1000 * pc) # formula to calculate the ideal gas constant\n    c_p = a / b # ideal gas constant times actual vapor pressure\n    h = math.log10(c_p / pc) # logarithm of the ratio of specific heats at constant pressure\n    psi = (h + 2501) * 100 / 7.7 # formula to calculate the viscosity\n    k = psi * 0.00065 # formula to calculate the heat conductivity\n    wc = 35.74 + (0.6215 * (v - 50)) + (0.4275 * (t - 30))\n    index = math.ceil(wc / k) # calculate the wind chill index rounded to the nearest integer\n    return index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill_index = 0\n    if v < 3.2:\n        chill_index = int(3.2)\n    elif v >= 3.2 and v < 10.4:\n        chill_index = int(v - 0.621 * math.log(t - 32))\n    elif v >= 10.4 and v < 16.7:\n        chill_index = int(v - 0.427 * math.log(t - 32))\n    elif v >= 16.7 and v < 24.4:\n        chill_index = int(v - 0.286 * math.log(t - 32))\n    elif v >= 24.4 and v < 33.3:\n        chill_index = int(v - 0.185 * math.log(t - 32))\n    else:\n        chill_index = int(33.3)\n    return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to kelvin\n    t = t + 273.15\n\n    # calculate the wind chill index\n    if v < 1:\n        wc = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v) - 0.000016 * t * t * math.log(v)\n    else:\n        wc = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.4275 * t * math.log(v) - 0.000016 * t * t * math.log(v)\n\n    # round the wind chill index to the nearest integer\n    wc = round(wc)\n\n    # return the wind chill index\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to Fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate the wind chill in Celsius\n    w_c = (v * 1.15) + 2.04\n\n    # Calculate the wind chill index\n    w_ci = 35.74 + (0.6215 * t_f) - (35.75 * w_c) + (0.4275 * t_f * w_c) - (0.0068 * v * v * v)\n\n    # Round the wind chill index to the nearest integer\n    w_ci = round(w_ci)\n\n    return w_ci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return math.ceil(0.01 * (v + 26.85) * math.log((t + 273.15) / 273.15) + 32)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v <= 0:\n        return None\n    c = 0.0065 # heat capacity of water [J/kg/K]\n    rho = 1000 # density of water [kg/m^3]\n    h = 100 # height of atmosphere [m]\n    T_air = 290 # temperature of air [K]\n    alpha = 1.5 # ratio of specific heats\n    U = (v*rho*c)/(h*T_air) # dynamic viscosity of water\n    S = U/(c*T_air) # saturation vapor pressure\n    T_dew = 0.33 * T_air + 273.15 # dew point temperature\n    T_ice = 0.15 * T_air + 273.15 # ice point temperature\n    T_s = T_air + ((T_dew - T_ice) / 2) # standard temperature\n    T_w = T_s + 1 # wind temperature\n    w = math.sqrt(U/rho) # wind speed\n    S_w = 0.622 * S * math.exp((17.625 * (T_w - 273.15)) / (T_w - 237.3)) # saturation vapor pressure of wind\n    T_sw = (0.34 * T_air + 273.15) * (S_w / S) ** (1 / 3) # temperature of the wind at the saturation vapor pressure\n    chill_w = 13.12 + (0.6215 * w) + (0.4275 * (T_sw - T_w)) - (0.14 * (T_s - T_sw))\n    chill = round(chill_w)\n    return chill\n"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if not name[0].islower()]\n    total_len = sum([len(name) for name in names])\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names after removing the lowercase letters\n    names = []\n    # iterate through the given list of names\n    for name in sample_names:\n        # if the name starts with a lowercase letter, remove it from the list\n        if name[0].islower():\n            names.append(name)\n    # sum the length of the names in the list\n    total_length = sum([len(name) for name in names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    # initialize the sum of lengths to 0\n    total_length = 0\n    \n    # loop through the list of names\n    for name in sample_names:\n        # remove any names that start with a lowercase letter\n        if name[0].islower():\n            continue\n        # add the length of the remaining names to the total length\n        total_length += len(name)\n        \n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            valid_names.append(name)\n    return sum(len(name) for name in valid_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the valid names\n    valid_names = []\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it\n            continue\n        # if the name does not start with a lowercase letter, add it to the valid_names list\n        valid_names.append(name)\n    # sum the lengths of all valid names and return the sum\n    return sum([len(name) for name in valid_names])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of names' lengths\n    total_length = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, skip it\n            continue\n        # Otherwise, add the length of the name to the total\n        total_length += len(name)\n    # Return the total length of the names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # remove names that start with a lowercase letter\n    names = [name for name in sample_names if name[0].isupper()]\n    \n    # sum the lengths of the names\n    total_length = sum(len(name) for name in names)\n    \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define a list to store the names that start with a lowercase letter\n    names_start_with_lowercase = []\n    \n    # Loop through the names in the sample list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, add it to the list of names that start with a lowercase letter\n            names_start_with_lowercase.append(name)\n    \n    # Sum the lengths of the names that start with a lowercase letter\n    total_length = sum(len(name) for name in names_start_with_lowercase)\n    \n    # Return the total length of the names that start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    names = [name for name in sample_names if name[0].isupper()]\n    total_length = sum([len(name) for name in names])\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to remove parenthesis from items\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # create a regular expression pattern to match the parenthesis and what is inbetween them\n    pattern = re.compile(r'\\(.*?\\)')\n\n    # find all the matches of the pattern in the string\n    matches = pattern.findall(items)\n\n    # loop through the matches and remove the parenthesis and what is inbetween them\n    for match in matches:\n        # split the match into a list of substrings, removing the first and last substrings\n        substrings = match.strip('()').split(',')\n        # join the substrings into a single string, removing any whitespace characters\n        items = ', '.join([substring.strip() for substring in substrings])\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Remove all the parenthesis from the string\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Remove all spaces and newlines from the string\n    items = re.sub(r'\\s+','', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)' # regular expression pattern to match any parenthesis\n    items = re.sub(pattern, '', items) # remove any parenthesis from the string using regular expression replace function\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern for matching the parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    \n    # Use the pattern to find all the matches in the input string\n    matches = pattern.findall(items)\n    \n    # Loop through each match and remove the parenthesis from the string\n    for match in matches:\n        items = items.replace(match, '')\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)' # regular expression pattern to match any parenthesis\n    items_list = re.findall(pattern, items) # find all occurrences of the pattern in the string\n    for item in items_list: # loop through all occurrences of the pattern\n        items = items.replace(item, '') # replace the item with an empty string\n    return items # return the modified string with all parenthesis removed"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * (n - 1) ** 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n-1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    if n <= 0:\n        return None\n\n    # initialize a variable to keep track of the running sum\n    running_sum = 0\n\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the current nonagonal number\n        nonagonal = (2*i*(i+1)) // 2\n\n        # add the current nonagonal number to the running sum\n        running_sum += nonagonal\n\n    return running_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define the first two nonagonal numbers\n    prev = 1\n    curr = 2\n\n    # Loop through the remaining numbers\n    for _ in range(1, n):\n        # Compute the next nonagonal number by adding the previous two\n        next_num = prev + curr\n        # Update the previous and current numbers for the next iteration\n        prev = curr\n        curr = next_num\n\n    # Return the final nonagonal number\n    return curr"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the sum of squares of odd numbers to 0\n    sum_of_squares_odd = 0\n\n    # Initialize the sum of squares of even numbers to 0\n    sum_of_squares_even = 0\n\n    # Check the number of iterations to calculate the sum of squares\n    for i in range(n+1):\n        # If the current number is odd, add its square to the sum of squares of odd numbers\n        if i % 2!= 0:\n            sum_of_squares_odd += i**2\n        # If the current number is even, add its square to the sum of squares of even numbers\n        else:\n            sum_of_squares_even += i**2\n\n    # Calculate the nth nonagonal number by subtracting the sum of squares of odd numbers from the sum of squares of even numbers\n    nth_nonagonal = sum_of_squares_odd - sum_of_squares_even\n\n    # Return the nth nonagonal number\n    return nth_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n and returns True if it is a nonagonal number, otherwise False.\n    A nonagonal number is a number whose sum of its sides is greater than the sum of its diagonals.\n    For example, 2 is a nonagonal number because it can be represented as a 3x3 square by adding 1 and 2 to the diagonals (1+1=2 and 2+2=4).\n    1 is not a nonagonal number because there is no way to represent 1 as a 3x3 square with positive integers that can form the diagonals.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    # Calculate the sum of the sides and diagonals\n    sides_sum = n * (n+1) // 2\n    diagonals_sum = (n+1) * (2*n+1) // 6\n    # Check if the sum of sides and diagonals is greater than the product of n and its square\n    if sides_sum > diagonals_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    i = 1\n    while i <= n:\n        if (2*i)**2 == (2*i-1)**2:\n            print(2*i-1)\n        i += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # initialize variables\n    nonagonal_num = 0\n    previous_num = 1\n\n    # loop n times to find the nth nonagonal number\n    for i in range(1, n+1):\n\n        # add the previous two numbers to find the nth nonagonal number\n        nonagonal_num = previous_num + previous_num - 2\n\n        # update previous_num to the current nonagonal number\n        previous_num = nonagonal_num\n\n    # return the nth nonagonal number\n    return nonagonal_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    k = 1\n    \n    while i <= n:\n        k = 1\n        while j <= n:\n            k = k * j\n            j += 1\n        i += 1\n        j = 1\n        k = k * i\n    return k"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 2:\n        return False\n    else:\n        return (2 * n - 1) ** 2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)(z)(?!\\w)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)(.*?)(z)\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*[a-z])[zZ]\\b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define regex pattern to match 'z' in middle of a word\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    \n    # Search for pattern in the text and return True if found, False otherwise\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # loop through each word\n    for word in words:\n        # check if the word ends with 'z'\n        if word[-1] == 'z':\n            # check if the word starts with 'z'\n            if word[0] == 'z':\n                # print the word if it meets the criteria\n                print(word)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern for matching words containing 'z'\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    \n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Check if the match was found\n    if match:\n        # Return True if the pattern was found in the text\n        return True\n    else:\n        # Return False if the pattern was not found in the text\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)' # '(?<!\\w)' matches the position before a word boundary, 'z' matches the character 'z', and '(?!\\w)' matches the position after a word boundary\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    if k < 1 or k > n:\n        return input\n    \n    temp = input[k-1]\n    for i in range(k-1, 0, -1):\n        input[i] = input[i-1]\n    input[0] = temp\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the entire array\n    input.reverse()\n    # Reverse the array upto a given position k\n    for i in range(k-1, len(input)//2):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the input array from start to k-1\n    input[:k-1] = input[:k-1][::-1]\n    # reverse the input array from k to end\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # reverse first k elements of the array\n    for i in range(k):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    # reverse remaining elements of the array\n    for i in range(k, n):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = input[::-1] #reverse the array in place\n    return input[:k] #return the first k elements of the reversed array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input)\n    # reverse first k elements of array\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # reverse remaining elements of array\n    for i in range(k, n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # reverse remaining elements of array\n    for i in range(n//2, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to len(input)-1\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Check if k is greater than or equal to the length of the array\n    if k >= len(input):\n        return input\n\n    # Initialize two pointers, one at the beginning of the array and the other at the end\n    left = 0\n    right = len(input) - 1\n\n    # Swap elements until kth element is reached\n    while left < k:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    # Reverse the remaining elements of the array\n    while left <= right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # reverse the array from 0 to k-1\n    input = input[::-1][:k]\n    # reverse the array from k to n-1\n    input = input[::-1][k:] + input[k:]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    for i in range(0, k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    new_dict = dict(test_dict)\n    new_tuple.update(new_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for key, value in test_dict.items():\n        new_tup = new_tup + (value,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new tuple with the given dictionary added to the original tuple\n    new_tup = (test_tup[0], test_tup[1], test_dict)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list\n    test_list = list(test_dict.items())\n    # Add the list to the tuple\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Add the dictionary to the tuple\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Initialize a new dictionary to store the updated values\n    updated_dict = {}\n    # Iterate through the keys of the dictionary and add them to the updated dictionary\n    for key in test_dict:\n        updated_dict[key] = test_dict[key]\n    # Add the updated dictionary to the tuple\n    new_tup = test_tup + (updated_dict,)\n    # Return the updated tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # convert the dictionary to a tuple\n    dict_tup = tuple(test_dict.items())\n    # combine the tuple with the original tuple\n    combined_tup = (test_tup, dict_tup)\n    return combined_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = (test_tup, value)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    dp[0][0] = 0\n\n    for i in range(1, N):\n        for j in range(1, N):\n            right_cell = dp[i-1][j]\n            down_cell = dp[i][j-1]\n\n            if cost[i][j] > right_cell:\n                dp[i][j] = down_cell + cost[i][j]\n            else:\n                dp[i][j] = right_cell\n\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n\n    # Initialize the maximum average and the current path\n    max_avg = 0\n    current_path = [[(0, 0)]]\n\n    # Iterate through all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if this cell is part of a path\n            if i == 0 and j == 0:\n                continue\n\n            # If the cell is part of the path, check the neighbor cells to see if they are part of the same path\n            neighbor_paths = []\n            for x, y in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                neighbor_x, neighbor_y = i + x, j + y\n                if 0 <= neighbor_x < N and 0 <= neighbor_y < N:\n                    if (neighbor_x, neighbor_y) not in current_path[-1] and (neighbor_x, neighbor_y)!= (0, 0):\n                        neighbor_paths.append([(current_path[-1][-1][0][0], current_path[-1][-1][0][1]), (neighbor_x, neighbor_y)])\n\n            # If there are no neighbor paths, add the current cell to the current path and continue\n            if not neighbor_paths:\n                current_path[-1].append((i, j))\n                continue\n\n            # Compute the maximum average of each path\n            path_avgs = [0] * len(neighbor_paths)\n            for path_idx, path in enumerate(neighbor_paths):\n                total_cost = 0\n                visited_cells = set()\n                for cell in path:\n                    total_cost += cost[cell[0][0]][cell[0][1]]\n                    visited_cells.add((cell[1], cell[0]))\n                path_avgs[path_idx] = total_cost / len(visited_cells)\n\n            # Update the maximum average\n            max_avg = max(max_avg, max(path_avgs))\n\n            # Update the current path\n            current_path.append(neighbor_paths[path_avgs.index(max(path_avgs))])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    total_cost = 0\n    max_avg = 0\n    current_row = 0\n    current_col = 0\n    max_avg_path = None\n    \n    def dfs(row, col):\n        nonlocal total_cost, visited, max_avg_path\n        if row == N-1 and col == N-1:\n            avg = total_cost / (row + col - 1)\n            if avg > max_avg:\n                max_avg = avg\n                max_avg_path = [(row, col)]\n            elif avg == max_avg:\n                max_avg_path.append((row, col))\n            return True\n        \n        if not visited[row][col]:\n            visited[row][col] = True\n            total_cost += cost[row][col]\n            if col < N-1:\n                if dfs(row, col+1):\n                    return True\n                visited[row][col] = False\n            if row < N-1:\n                if dfs(row+1, col):\n                    return True\n                visited[row][col] = False\n            visited[row][col] = False\n            return False\n    \n    dfs(current_row, current_col)\n    return max_avg_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # initialize variables\n    max_avg = 0\n    visited = [[False]*N for _ in range(N)]\n    current_avg = 0\n    current_cost = 0\n    # recursive function to find max avg of path\n    def find_max_avg(i, j):\n        if i == N-1 and j == N-1:\n            # if end of path, compute average and compare with max_avg\n            visited[i][j] = True\n            current_avg = current_cost / (i+1)\n            if current_avg > max_avg:\n                max_avg = current_avg\n            return current_avg\n        else:\n            # if not end of path, check neighbors and update average\n            visited[i][j] = True\n            if i < N-1 and not visited[i+1][j]:\n                current_avg += cost[i+1][j]\n            if j < N-1 and not visited[i][j+1]:\n                current_avg += cost[i][j+1]\n            if i > 0 and not visited[i-1][j]:\n                current_avg += cost[i-1][j]\n            if j > 0 and not visited[i][j-1]:\n                current_avg += cost[i][j-1]\n            current_cost += cost[i][j]\n            if current_avg > max_avg:\n                max_avg = current_avg\n            return current_avg\n    # call recursive function to find max avg of path\n    find_max_avg(0, 0)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n\n    for i in range(n):\n        dp[0][i] = cost[0][i]\n\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i == n-1 and j == n-1:\n                max_avg = max(max_avg, dp[i][j])\n            elif i == n-1:\n                max_avg = max(max_avg, dp[i][j], dp[i][j+1])\n            elif j == n-1:\n                max_avg = max(max_avg, dp[i][j], dp[i+1][j])\n            else:\n                max_avg = max(max_avg, dp[i][j], dp[i+1][j], dp[i][j+1])\n\n    return max_avg/n**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, visited, path_cost):\n        if i == N - 1 and j == N - 1:\n            path_avg = sum(path_cost) / len(path_cost)\n            if max_avg < path_avg:\n                max_avg = path_avg\n            return\n\n        if i < N:\n            if not visited[i][j] and cost[i][j] <= cost[i + 1][j]:\n                visited[i][j] = True\n                dfs(i + 1, j, visited, path_cost + [cost[i][j]])\n                visited[i][j] = False\n\n        if j < N:\n            if not visited[i][j] and cost[i][j] <= cost[i][j + 1]:\n                visited[i][j] = True\n                dfs(i, j + 1, visited, path_cost + [cost[i][j]])\n                visited[i][j] = False\n\n    N = len(cost)\n    max_avg = 0\n    visited = [[False] * N for _ in range(N)]\n\n    dfs(0, 0, visited, [])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    \n    # Initialize the first row and column\n    dp[0][0] = cost[0][0]\n    \n    # Fill in the rest of the DP table\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n        \n    # Initialize variables for the maximum average and the path\n    max_avg = float('-inf')\n    path = [[0]*N for _ in range(N)]\n    \n    # Fill in the maximum average and the path\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            \n            # Update the maximum average and the path if necessary\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n                path[i][j] = 1\n            else:\n                path[i][j] = path[i-1][j] + path[i][j-1]\n    \n    # Return the maximum average and the path\n    return max_avg, path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def is_valid_path(path):\n        rows, cols = len(cost), len(cost[0])\n        for i in range(rows - 1):\n            if cost[i][path[-1]] < cost[i+1][path[-1]]:\n                return False\n        for j in range(cols - 1):\n            if cost[path[-1]][j] < cost[path[-1]][j+1]:\n                return False\n        return True\n\n    def find_max_average(start_row, start_col, visited):\n        rows, cols = len(cost), len(cost[0])\n        if start_row == rows - 1 and start_col == cols - 1:\n            return cost[start_row][start_col]\n        if (start_row, start_col) in visited:\n            return 0\n        visited.add((start_row, start_col))\n        left, right, top, bottom = (start_row - 1, start_col), (start_row + 1, start_col), (start_row, start_col - 1), (start_row, start_col + 1)\n        if cost[start_row][start_col] > find_max_average(*left, visited) + find_max_average(*right, visited) + find_max_average(*top, visited) + find_max_average(*bottom, visited):\n            return cost[start_row][start_col]\n        return 0\n\n    max_cost = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            max_cost = max(max_cost, find_max_average(i, j, set()))\n\n    return max_cost / (len(cost) * len(cost[0]))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_avg = float('-inf')\n    total_cost = 0\n    visited = set()\n\n    # Loop through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # If current cell has not been visited yet\n            if (i, j) not in visited:\n                # Add current cell to visited set\n                visited.add((i, j))\n                # Recursively find the maximum average of the path starting from current cell\n                avg = maxAverageOfPathHelper(cost, visited)\n                # If the maximum average is greater than the current maximum average, update max_avg and total_cost\n                if avg > max_avg:\n                    max_avg = avg\n                    total_cost = 0\n                # Add current cell cost to total_cost\n                total_cost += cost[i][j]\n    # Return maximum average\n    return total_cost / len(visited)\n\n\ndef maxAverageOfPathHelper(cost, visited):\n    '''\n    Helper function to find the maximum average of a path starting from a given cell.\n    '''\n\n    # Initialize variables\n    max_avg = float('-inf')\n    total_cost = 0\n\n    # Loop through all possible directions\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # If direction is valid and current cell is not visited yet\n            if (i, j)!= (0, 0) and (i, j) not in visited:\n                # Add current cell to visited set\n                visited.add((i+j, j))\n                # Recursively find the maximum average of the path starting from current cell\n                avg = maxAverageOfPathHelper(cost, visited)\n                # If the maximum average is greater than the current maximum average, update max_avg and total_cost\n                if avg > max_avg:\n                    max_avg = avg\n                    total_cost = 0\n                # Add current cell cost to total_cost\n                total_cost += cost[i+j][j]\n    # Return maximum average\n    return total_cost / len(visited)\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    \n    # initialize variables\n    max_average = float('-inf')\n    dp = [[0 for j in range(N)] for i in range(N)]\n\n    # fill dp table\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # find maximum average\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            for k in range(2):\n                if k == 0:\n                    for l in range(i+1, N):\n                        max_average = max(max_average, dp[l][j])\n                else:\n                    for l in range(j+1, N):\n                        max_average = max(max_average, dp[i][l])\n\n    return max_average / (N*N)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = students[name]\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # initialize an empty list to store the filtered students\n    filtered_students = []\n    # loop through all the students in the dictionary\n    for student in students.items():\n        # unpack the student name and height and weight from the tuple\n        name, (height, weight) = student\n        # check if the height and weight are above the minimum height and weight\n        if height > h and weight > w:\n            # if yes, add the student to the filtered students list\n            filtered_students.append(name)\n    # return the filtered students list\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Using the `eq` operator to compare the values of each pair of lists\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum to zero\n    sum = 0\n    # loop through each digit of base\n    for digit in str(base):\n        # convert the digit to an integer\n        digit = int(digit)\n        # calculate the sum of digits raised to power\n        sum += digit ** power\n    # return the final sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    # Convert the base to a string and get its digits as a list\n    digits = [int(d) for d in str(base)]\n    # Initialize the sum to zero\n    total = 0\n    # Iterate over the digits and add the power of each digit to the sum\n    for digit in digits:\n        total += digit**power\n    # Return the sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit**power\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes a base and power as arguments and calculates the sum of all digits of the base raised to the power.\n    '''\n\n    # Convert the base to a string and convert each character in the string to its integer value.\n    base_list = [int(i) for i in str(base)]\n\n    # Calculate the sum of all digits raised to the power using recursion.\n    result = 0\n    for i in range(len(base_list)):\n        if i == 0:\n            result = base_list[i]**power\n        else:\n            result += base_list[i]**power\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    base_digits = [int(digit) for digit in str(base)]\n\n    # Loop through each digit of the base and add it to the sum until the power is reached\n    for i in range(len(base_digits)):\n        sum_of_digits += base_digits[i]\n\n        # If the power has been reached, break out of the loop\n        if i == power:\n            break\n\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit ** power\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # calculate the sum of all digits of the base to the specified power\n    sum_digits = sum(int(digit) ** power for digit in str(base))\n\n    # return the sum\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += base % 10\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += base % 10\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regex to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use regex findall to extract values between quotation marks\n    matches = re.findall(pattern, text)\n\n    # Return list of values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Split the string by space and then extract the quotation marks by using a regular expression\n    text2 = re.split('\"', text1)\n\n    # Return the extracted values\n    return text2"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define pattern for matching quotation marks\n    pattern = re.compile(r'(?<!\\\\)\"(.*?)\"')\n    # use search() method to find all the occurrences of pattern in the string\n    matches = pattern.findall(text)\n    # extract values between the quotation marks\n    return [match[0] for match in matches]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Find all the quotation marks in the string\n    quotations = re.findall(r'\"([^\"]*)\"', text)\n    # Loop through all the quotations and extract the values\n    values = []\n    for quotation in quotations:\n        # Extract the value between the quotation marks\n        value = quotation.strip('\"')\n        # Check if the value is not empty\n        if value:\n            values.append(value)\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the pattern to match any pair of quotation marks\n    pattern = r'\"([^\"]*)\"'\n    \n    # Use the re.findall() function to find all the matches of the pattern in the given string\n    matches = re.findall(pattern, text)\n    \n    # Iterate through the matches and return only the quotes within them\n    for match in matches:\n        # Use the re.sub() function to remove any leading or trailing spaces from the quote and return it\n        yield re.sub(r'\\s+','', match.strip())\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expressions to extract values between quotation marks \" \"\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n\n    # Returning the list of matched values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expression to find all occurrences of a quotation mark (\")\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    # Loop through the matches and return the values between quotation marks\n    for match in matches:\n        # Remove any extra spaces and return the value\n        return match.strip()"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define the regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # use re.findall() function to extract all the values between quotation marks\n    matches = re.findall(pattern, text1)\n    # return the extracted values in a list\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        return tuple([0] * len(test_tup))\n    \n    result_tup = []\n    for i in range(len(test_tup) - 1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    \n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    return tuple([test_tup[i] * test_tup[i+1] for i in range(N)])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty tuple to hold the result\n    result = ()\n    # loop over the indices of the tuple\n    for i in range(len(test_tup)-1):\n        # append the product of the current element and the next element to the result tuple\n        result += (test_tup[i]*test_tup[i+1],)\n    # return the final result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) // 2\n    result = (test_tup[0] * test_tup[1], test_tup[2] * test_tup[3])\n    for i in range(4, 2*N+2, 2):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0] * test_tup[1],)\n    for i in range(2, N):\n        result_tup += (test_tup[i] * result_tup[-1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    multiplied_tuple = []\n    for i in range(N):\n        multiplied_tuple.append(test_tup[i] * test_tup[i+1])\n    return multiplied_tuple"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = (test_tup[0],) * N\n    for i in range(1, N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists must have equal length\")\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n] and [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Initialize an empty list to store the sum of two lists\n    result_list = []\n    \n    # Iterate through each element of lst1 and lst2\n    for i in range(len(lst1)):\n        result_list.append(lst1[i] + lst2[i])\n    \n    # Return the result_list as output\n    return result_list"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or num!= nums[i-1]:\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return [list(group) for key, group in groupby(sorted(nums)) if key == 0]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a generator object of consecutive pairs of items in the list\n    grouped = groupby(enumerate(nums), lambda x: x[0] == x[1])\n    # iterate over the generator object and append each consecutive pair of duplicates to a new list\n    result = []\n    for item in grouped:\n        if item[1][0][1] == item[1][1][1]:\n            result.extend(item[1][0][0]+1 for _ in range(2))\n        else:\n            result.extend(item[1])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set([num for _, num_list in groupby(nums) if len(num_list) == 1]))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == 0:\n            continue\n        prev = key - 1\n        if prev in group:\n            yield from group\n            continue\n        yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    seen = set()\n    result = []\n\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for k, g in groupby(sorted(set(nums))) if not k]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create an iterator object to iterate over the list\n    it = iter(nums)\n    # initialize the consecutive_duplicates variable to an empty list\n    consecutive_duplicates = []\n    # initialize the current value to None\n    current_value = None\n    # iterate over the list using the groupby() function\n    for key, group in groupby(it):\n        # if the current value is None, set it to the first value in the group\n        if current_value is None:\n            current_value = next(group)\n        # if the current value is the same as the first value in the group\n        elif current_value == next(group):\n            # append the current value to the consecutive_duplicates list\n            consecutive_duplicates.append(current_value)\n            # skip the first value in the group\n            next(group)\n        # if the current value is different from the first value in the group\n        else:\n            # append the current value to the consecutive_duplicates list\n            consecutive_duplicates.append(current_value)\n            # update the current value to the first value in the group\n            current_value = next(group)\n    # append the last value to the consecutive_duplicates list\n    consecutive_duplicates.append(current_value)\n    # return the consecutive_duplicates list\n    return consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given the radius r and height h.\n    '''\n    s = 2*math.pi*r*h # Side area\n    sl = math.pi*r**2 # Lateral surface area\n    return s - sl"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3*math.pi*r**2)/(4*h)\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Calculating the lateral surface area using the formula A = pi*r^2*h\n    A = math.pi*r**2*h\n    \n    # Returning the lateral surface area\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r**2 * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi * r * r * h) / 3\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    lateral_surface = math.pi*(r**2 + h**2)\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * r * math.sin(math.pi/6) * h + 2 * r * math.sin(2*math.pi/6) * h + 2 * r * math.sin(3*math.pi/6) * h\n    return s"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+|[,\\.]', ':', text)\n    return text\n\ntext = 'Hello, World! This is a sample text with spaces, commas, and dots.'\nnew_text = replace_specialchar(text)\nprint(new_text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regular expression pattern to match special characters\n    pattern = re.compile(r'[\\s,\\.]+')\n    # replace all occurrences of special characters with a colon\n    result = pattern.sub(':', text)\n    # return the modified text\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'([,.])'\n    replacement = r':'\n    text = re.sub(pattern, replacement, text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[^\\w\\s]|_+', '', text)\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,\\.]+')\n    colon_text = pattern.sub(':', text)\n    return colon_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r\"[\\s,\\.]\"\n    replacement = \":\"\n    return re.sub(pattern, replacement, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text) # remove all non-word characters and digits\n    text = re.sub(r'\\s+','', text) # replace multiple spaces with one space\n    text = re.sub(r'\\s+:', ':', text) # replace one or more spaces with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # create a regular expression pattern to match all special characters\n    pattern = re.compile(r'[\\s,\\.]')\n    # replace all occurrences of special characters with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # x is present at the mid element\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n\n    # x is not present in A\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the leftmost index where the current number is smaller than x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If no occurrence is found, return -1\n    if left > len(A) or A[left]!= x:\n        return -1\n    \n    # Find the first occurrence of x\n    first_occurrence = left\n    while first_occurrence < len(A) and A[first_occurrence] == x:\n        first_occurrence += 1\n    \n    # Return the index of the first occurrence\n    return first_occurrence - 1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the index of the first occurrence of x as -1\n    index = -1\n    # loop through the array from the beginning to the end\n    for i in range(len(A)):\n        # check if the current element is equal to x\n        if A[i] == x:\n            # if it is, update the index of the first occurrence to i\n            index = i\n            # break out of the loop\n            break\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index variable to -1\n    index = -1\n\n    # Loop through the array and check if the current element is equal to the target number\n    for i in range(len(A)):\n        if A[i] == x:\n            # If the element is found, update the index variable and break out of the loop\n            index = i\n            break\n\n    # Return the index of the first occurrence of the target number in the array\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the last occurrence of x in A\n    last_occurrence_index = -1\n    for i, a in enumerate(A):\n        if a == x and i > last_occurrence_index:\n            last_occurrence_index = i\n    \n    # find the index of the first occurrence of x in A\n    first_occurrence_index = -1\n    for i, a in enumerate(A):\n        if a == x and i < last_occurrence_index:\n            first_occurrence_index = i\n    \n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i, n):\n            dp[j] = (dp[j] * arr[i]) % (10**9 + 7)\n    total = 0\n    for i in range(n):\n        total += dp[i]\n    return total"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    res = 0\n\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + arr[i - 1]\n        res += dp[i] * dp[i]\n\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i, n):\n            dp[j] *= arr[j] - arr[i]\n    return sum(dp)\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n\n    # Calculate the cumulative sum of all the elements in the array\n    cumulative_sum = [0] * (n + 1)\n    cumulative_sum[0] = arr[0]\n    for i in range(1, n + 1):\n        cumulative_sum[i] = cumulative_sum[i - 1] + arr[i - 1]\n\n    # Calculate the products of all possible sublists of the array\n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            end = start + length\n            product = 1\n            for i in range(start, end):\n                product *= arr[i]\n            result += product\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # initialize a 2D array to store subarray products and their indices\n    subarray_products = [[0]*(n-i+1) for i in range(n)]\n    # initialize a variable to store the sum of subarray products\n    subarray_product_sum = 0\n    # loop through all subarrays of length i\n    for i in range(n):\n        # loop through all elements in the subarray\n        for j in range(i,n):\n            # calculate the product of the subarray and add it to the sum of subarray products\n            subarray_product_sum += arr[j]*subarray_products[i][j-i]\n    return subarray_product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = arr[0]\n    for i in range(2, n+1):\n        dp[i] = arr[i-1] * dp[i-1]\n    ans = 0\n    for i in range(1, n+1):\n        ans += arr[i-1] * dp[n-i+1]\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Calculate the sum of all elements in the array\n    total_sum = sum(arr)\n\n    # Initialize a variable to store the sum of products of subarrays\n    subarray_product_sum = 0\n\n    # Loop through all possible starting positions for subarrays\n    for i in range(len(arr)):\n        # Initialize a variable to store the sum of products of the current subarray\n        subarray_product = 1\n        # Loop through all possible ending positions for the current subarray\n        for j in range(i, len(arr)):\n            # Calculate the product of the current subarray and add to the sum of products\n            subarray_product *= arr[j]\n            # Calculate the sum of products of subarrays with the current starting position\n            subarray_product_sum += total_sum - subarray_product\n\n    # Return the final sum of products of subarrays\n    return subarray_product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    \n    # Initialize sum of products of sublists and prefix sum\n    prefix_sum = [0] * (n+1)\n    prefix_sum[1] = arr[0]\n    \n    # Calculate the prefix sum of the product of all sublists\n    prod_sum = 1\n    for i in range(1, n):\n        prod_sum = (prod_sum * arr[i]) % mod\n        prefix_sum[i+1] = (prefix_sum[i] + prod_sum) % mod\n    \n    # Initialize sum of products of all possible sublists\n    sublist_prod_sum = [0] * (n+1)\n    sublist_prod_sum[1] = arr[0]\n    \n    # Calculate the sum of products of all possible sublists\n    for i in range(2, n+1):\n        for j in range(1, i):\n            sublist_prod_sum[i] = (sublist_prod_sum[i] + (arr[j] * (prefix_sum[i] - prefix_sum[j]))) % mod\n    \n    return sublist_prod_sum[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Calculate product of subarray from index 0 to i\n    def prod_subarray(i):\n        prod = 1\n        for j in range(i+1):\n            prod *= arr[j]\n        return prod\n\n    # Find sum of products of all subarrays\n    n = len(arr)\n    subarray_product = [prod_subarray(i) for i in range(n)]\n    subarray_sum = sum(subarray_product)\n\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Find the sum of products of all subarrays\n    subarray_sum_product = [0] * (n + 1)\n    subarray_sum_product[0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            subarray_sum_product[i] += arr[j] * subarray_sum_product[j]\n\n    return subarray_sum_product[n]"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # If the input number is 0, return 0\n    if n == 0:\n        return 0\n\n    # Initialize variables\n    mask = 1  # Mask to set first and last bits\n    x = 1  # Variable to store number with middle bits toggled\n    carry = 0  # Carry variable\n\n    # Set first bit to 1\n    mask <<= 1\n    x <<= 1\n    carry = 1\n\n    # Toggle bits of middle bits\n    for i in range(31):\n        if (n & mask)!= 0:\n            x ^= mask  # Toggle bit\n            carry = 1 if (x & mask)!= 0 else 0  # Update carry\n        else:\n            carry = 0  # Reset carry\n\n        mask <<= 1  # Shift mask to next bit\n\n    # If carry is still 1, add 1 to the result\n    if carry == 1:\n        x ^= mask\n\n    # Return result\n    return x"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # mask for the first and the last bit\n    first_last_mask = (1 << 1) - 1\n\n    # mask for the rest of the bits\n    rest_mask = ~(first_last_mask << 1)\n\n    # toggle the first and the last bit of the number\n    n &= first_last_mask\n\n    # toggle the rest of the bits of the number\n    n ^= rest_mask\n\n    # add the first and the last bits of the number\n    n |= first_last_mask\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the binary representation of the number\n    binary = bin(n)[2:]\n\n    # Toggle the first and last bit\n    binary = binary[:1] + \"1\" + binary[2:]\n\n    # Convert the binary string back to an integer\n    result = int(binary, 2)\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # bitwise XOR of all bits except the first and the last bit\n    m = n ^ (n & (n - 1))\n    return m"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the binary representation of the input number\n    binary_n = bin(n)[2:]\n    \n    # Find the position of the first and last bit\n    first_bit = binary_n.find('1')\n    last_bit = binary_n.rfind('1')\n    \n    # Toggle the middle bits\n    middle_bits = binary_n[:first_bit] + binary_n[first_bit+1:last_bit+1] + binary_n[last_bit+1:]\n    \n    # Convert the binary representation of the middle bits back to decimal and return the result\n    return int(middle_bits, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_half = n & 0b1111111111111111\n    last_half = (n >> 12) & 0b1111111111111111\n    first_half = first_half ^ (0b1111111111111111 << 12)\n    last_half = last_half ^ (0b1111111111111111 >> 12)\n    n = first_half | last_half\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize two variables to store the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n\n    # Create a variable to store the result\n    result = n ^ first_bit ^ last_bit\n\n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Set the middle bit to the opposite value of the first and last bit\n    mid_bit = n & 1\n    n = n ^ (mid_bit << 1) ^ (mid_bit << 31)\n    \n    # Set the second last bit to the opposite value of the second last bit\n    second_last_bit = n & 2**31\n    n = n ^ (second_last_bit << 2)\n    \n    # Set the last bit to the opposite value of the middle bit\n    last_bit = n & 2**31\n    n = n ^ (last_bit << 30)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = (n & 0b1)\n    last_bit = (n & 0b10) >> 1\n    middle_bits = ((n & 0b11001111) << 1) & 0b1111111111111111\n    result = first_bit ^ last_bit ^ middle_bits\n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        a: List[int] - A sorted list of integers.\n        x: int - The value to locate in the list.\n\n    Returns:\n        int - The left insertion point for the specified value in the list.\n\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if a[index] == x else index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    # use binary search to find the left insertion point\n    left = bisect.bisect_left(a, x)\n\n    # if the left insertion point is 0, then the value x should be inserted at the beginning of the list\n    if left == 0:\n        return 0\n\n    # if the left insertion point is len(a), then the value x should be inserted at the end of the list\n    elif left == len(a):\n        return len(a)\n\n    # if the left insertion point is between 1 and len(a-1), then the value x should be inserted at the left of a[left-1]\n    else:\n        return left\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use the binary search algorithm to find the left insertion point\n    index = bisect.bisect_left(a, x)\n\n    # Check if the value is already present in the sorted array\n    if index!= len(a) and a[index] == x:\n        # Return the index of the current value\n        return index\n    # If the value is not present in the sorted array, insert it at the next available index\n    elif index < len(a):\n        return index + 1\n    # If the value is greater than all the values in the array, insert it at the end of the array\n    else:\n        return len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # check if n is less than or equal to 1\n    if n <= 1:\n        return n\n    else:\n        # recursive call to calculate the geometric sum of n-1\n        result = n - 1\n        # recursive call to calculate the geometric sum of n-2\n        result = geometric_sum(result)\n        return result"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 / n) * geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Index(n):\n    if n==1:\n        return 1\n    else:\n        return n*n + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n\n    # function to calculate the nth triangular number\n    def triangular(n):\n        return (n*(n+1))//2\n\n    # function to find the index of smallest triangular number with n digits\n    def smallest_triangular(n):\n        # calculate the length of the number\n        length = math.ceil(math.log10(n))\n\n        # calculate the number of digits of the smallest triangular number\n        digits = math.ceil(math.log10(triangular(n)))\n\n        # calculate the number of digits to pad with zeros\n        pad = length - digits\n\n        # convert the number to string and pad with zeros\n        num = \"{0:0\" + str(pad) + \"d}\".format(n)\n\n        # find the index of the smallest triangular number with n digits\n        index = int(num)\n\n        return index\n\n    # find the smallest triangular number with n digits\n    index = smallest_triangular(n)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the maximum value of n\n    max_value = 9 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n    \n    # Initialize a variable to keep track of the smallest triangular number with n digits\n    smallest_triangular = 10 ** n - 1\n    \n    # Loop through each digit from n to 1\n    for i in range(n, 0, -1):\n        # Find the maximum value that can be written with digits from 1 to i\n        max_value_with_i = 9 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 // math.factorial(i)\n        \n        # Check if the current smallest triangular number with i digits is smaller than the maximum value with i digits\n        if smallest_triangular * 10 ** (i - 1) >= max_value_with_i:\n            # Update the smallest triangular number with i digits\n            smallest_triangular = smallest_triangular * 10 ** (i - 1)\n    \n    # Return the index of the smallest triangular number with n digits\n    return i - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    def get_triangular_num(n):\n        # Base case\n        if n == 0:\n            return 0\n        # Recursive case\n        else:\n            return get_triangular_num(n-1) + get_triangular_num(n-2) + 1\n    \n    # Calculate the smallest triangular number with n digits\n    smallest_triangular_num = get_triangular_num(n)\n    \n    # Find the index of the smallest triangular number\n    index = 0\n    current_num = smallest_triangular_num\n    while current_num < n:\n        index += 1\n        current_num = get_triangular_num(index)\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize first index and smallest triangular number\n    index = 1\n    smallest_triangular = 1\n    \n    # Iterate from second index to n\n    while index <= n:\n        \n        # Calculate the next triangular number\n        triangular = index * (index + 1) // 2\n        \n        # Check if the triangular number is smaller than the current smallest triangular number\n        if triangular < smallest_triangular:\n            \n            # If it is, update the smallest triangular number and its index\n            smallest_triangular = triangular\n            index = triangular // (index + 1)\n            \n        # Move to the next index\n        index += 1\n        \n    # Return the smallest triangular number and its index\n    return smallest_triangular, index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize variables\n    triangular_number = 0\n    index = 0\n    \n    # Calculate the first triangular number\n    triangular_number = n * (n + 1) // 2\n    \n    # Calculate the index of the first triangular number\n    index = math.floor(triangular_number - (triangular_number - n) + 0.5)\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = 0\n    i = 1\n    while len(str(triangular_number)) < n:\n        triangular_number = i * (i + 1) / 2\n        i += 1\n    return i - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of the smallest triangular number with n digits. \n    \"\"\"\n    # Initialize the index of the smallest triangular number\n    index = 0\n\n    # Initialize the number of digits in the smallest triangular number\n    digits = 0\n\n    # Initialize the smallest triangular number\n    smallest_triangular = 0\n\n    # Loop through all the triangular numbers with n digits\n    while index <= n:\n        # Check if the current triangular number is greater than or equal to the smallest triangular number\n        if math.factorial(n - index) >= math.factorial(digits):\n            # If it is greater, update the smallest triangular number and its index\n            smallest_triangular = index\n            digits = n - index\n            # Increment the index\n            index += 1\n        else:\n            # If it is not greater, increment the index\n            index += 1\n\n    return smallest_triangular, digits"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = int(math.sqrt(5 * n + 0.25))\n    b = math.sqrt(5 * n + 0.25) - a\n\n    triangular = int((a * (a + 1) * (a + 2) * (a + 3) + b * (b + 1) * (b + 2) * (b + 3)) / 24)\n    triangular_digits = len(str(triangular))\n\n    if triangular_digits == n:\n        return triangular - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    else:\n        index = 1\n        triangular = 1\n        while n > 1:\n            triangular = triangular + index\n            n = n - 1\n            index = index + 1\n        return triangular - index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Create an empty dictionary\n    my_dict = {}\n    \n    # Iterate over the tuple\n    for i in range(len(test_tup)):\n        # If the current index is less than the length of the tuple minus 1,\n        # add an entry to the dictionary with the current index as the key and the\n        # next adjacent element as the value.\n        if i < len(test_tup) - 1:\n            my_dict[i] = test_tup[i+1]\n            \n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary to store key-value pairs\n    my_dict = {}\n    # Loop through the tuple using the range function and the zip function\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    count = 0\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            key = test_tup[i]\n            value = test_tup[i+1]\n            result[key] = value\n            count += 1\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Iterate through the given tuple\n    for i in range(len(test_tup)):\n        # Add the key-value pair to the dictionary\n        result_dict[i] = test_tup[i]\n    # Return the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup)-1, 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # create an empty dictionary\n    dict_obj = {}\n\n    # iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        dict_obj[test_tup[i]] = test_tup[i+1]\n\n    # return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_[key] = value\n        i += 2\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2 == 0:\n        count = 0\n        dict_obj = {}\n        for i in test_tup:\n            dict_obj[i] = test_tup[count+1]\n            count += 2\n        return dict_obj\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a dictionary using adjacent elements.\n    \"\"\"\n    test_dict = {}\n    for i in range(len(test_tup)):\n        test_dict[i] = test_tup[i]\n    return test_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string s as input and returns True if all the characters in the string are same, False otherwise.\n    \"\"\"\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Check if all the values in the dictionary are equal to 1\n    for count in char_count.values():\n        if count!= 1:\n            return False\n    \n    # If all the values are equal to 1, all the characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(s)\n    # Find the first character in the list\n    first_char = char_list[0]\n    # Check if all the characters in the list are the same as the first character\n    if all(char == first_char for char in char_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initialize a variable to store the count of all characters in the string\n    count = {}\n    \n    # loop through each character in the string\n    for c in s:\n        # if the character is not already in the count dictionary, add it and set its count to 1\n        if c not in count:\n            count[c] = 1\n        # if the character is already in the count dictionary, increment its count by 1\n        else:\n            count[c] += 1\n    \n    # loop through each key in the count dictionary and check if all the counts are the same\n    for key in count:\n        if count[key]!= 1:\n            return False\n    \n    # if all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to a list\n    lst = list(s)\n    # check if all the characters in the list are same or not\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to lowercase\n    s = s.lower()\n    # Check if all the characters in the string are the same\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string into a list of characters\n    char_list = list(s)\n\n    # Check if all the characters are the same\n    if len(char_list) == 1:\n        return True\n    elif len(char_list) > 1:\n        for i in range(len(char_list)-1):\n            if char_list[i]!= char_list[i+1]:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Check whether all the characters in a given string are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n\n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a side as input and calculates the area of a tetrahedron using Heron's formula.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    area = (1/3) * s * (s - side) * (s - side) * (s - side)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    half_perimeter = side / 2\n    area = math.sqrt(half_perimeter ** 2 + half_perimeter ** 2 + half_perimeter ** 2 + half_perimeter ** 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the half-perimeter of the tetrahedron\n    half_perimeter = 2 * side\n    \n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(3) / 4 * half_perimeter ** 2\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side / 2\n    b = math.sqrt(3) / 2\n    area = a * b * math.sin(math.pi / 3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6 * side ** 2 / (4 * math.tan(math.pi / 3))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3*side**2)/12\n    A = math.sqrt(s)\n    return A\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a side of a tetrahedron as input and returns the area of the tetrahedron.\n    The formula for the area of a tetrahedron is:\n    Area = sqrt(s(s-a)(s-b)(s-c))\n    where s is the semi-perimeter of the tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    s = (a + b + c) / 2  # semi-perimeter\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.25\n\n    # Calculate the area of the tetrahedron\n    area = math.sqrt(semi_perimeter ** 2 * (3 - math.sqrt(3)))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side * side * side\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.25\n    return 6 * s"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # check if list is empty or has only one element\n    if n <= 1:\n        return list\n    \n    # shift the elements to the right by m items\n    for i in range(m % n):\n        temp = list[-1]\n        list[-1] = list[-(i+1)]\n        list[-(i+1)] = temp\n        \n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a list to the right by `m` items.\n    \"\"\"\n    n = len(lst)\n    # check if list is empty\n    if n == 0:\n        return lst\n    # check if rotation is necessary\n    if m >= n:\n        # if rotation is necessary, append elements from lst to the end of new list\n        return lst + lst[:m]\n    else:\n        # if rotation is not necessary, append elements from lst to the end of new list\n        return lst + lst[n-m:]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m == 0 or m == n:\n        return list\n    if m > n:\n        m = m % n\n    list.extend(list[:m])\n    list = list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Calculate the length of the list\n    n = len(list)\n    \n    # If the number of items to be rotated is greater than the length of the list, return the original list\n    if m >= n:\n        return list\n    \n    # Calculate the number of times to rotate the list\n    k = n - m\n    \n    # Create a temporary list to store the rotated elements\n    temp = []\n    \n    # Traverse through the list and add the elements to the temporary list\n    for i in range(k):\n        temp.append(list[i])\n    \n    # Add the remaining elements to the temporary list\n    for i in range(k, n):\n        temp.append(list[i])\n    \n    # Return the temporary list as the rotated list\n    return temp"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m % n):\n        list.append(list.pop(0))\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n  # To handle the case when m is greater than n\n    list.extend(list[:m])  # extend the original list with the items from index 0 to m-1\n    list[m:] = list[:n-m]  # replace the items from index m to n-1 with the items from index n to n-m\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n\n    list[m:], list[:m] = list[:m], list[m:]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for element in test_tup:\n        if element is None:\n            none_count += 1\n    return none_count == 0"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    has_none = False\n    for item in test_tup:\n        if item is None:\n            has_none = True\n            break\n    return has_none"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Check if a given number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n            if num % digit!= 0:\n                return False\n        return True\n    \n    numbers = [num for num in range(startnum, endnum+1) if is_divisible_by_digit(num)]\n    return numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(num):\n        '''\n        Returns True if the input number is divisible by every digit in the range of 0 to 9.\n        '''\n        def is_digit(digit):\n            '''\n            Returns True if the input digit is an integer between 0 and 9.\n            '''\n            return isinstance(digit, int) and 0 <= digit <= 9\n        return all(is_digit(d) for d in str(num))\n\n    for num in range(startnum, endnum+1):\n        if is_divisible(num):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda num, digit: num % digit == 0\n    \n    # Define a lambda function to check if a number is divisible by all its digits\n    is_divisible_by_digits = lambda num: all(is_divisible_by_digit(num, digit) for digit in str(num))\n    \n    # Use list comprehension to find all numbers within the range that are divisible by all its digits\n    divisible_numbers = [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]\n    \n    # Return the list of divisible numbers\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    # Convert input numbers to lists of digits\n    startnum_digits = list(str(startnum))\n    endnum_digits = list(str(endnum))\n    \n    # Use a lambda function to filter out numbers that do not have every digit divisible by 1\n    filter_func = lambda x: all(d in x for d in x)\n    \n    # Apply the filter to the list of digits and find the numbers within the given range\n    result = [x for x in range(startnum, endnum+1) if filter_func(str(x))]\n    \n    # Convert the result list back to a string and print it\n    result_str = ''.join(str(x) for x in result)\n    print(result_str)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible(num):\n        '''\n        Helper function to check if a given number is divisible by every digit.\n        '''\n        digits = [int(d) for d in str(num)]\n        return all(num % digit == 0 for digit in digits)\n    \n    return [num for num in range(startnum, endnum+1) if is_divisible(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digit_set = set(str(startnum))\n    for num in range(startnum, endnum+1):\n        if all(int(digit) % int(digit_set) == 0 for digit in str(num)):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = [int(d) for d in str(startnum)]\n    # Find all digits in the range\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        # Check if every digit is divisible by every digit in the range\n        if all(d % digits[i] == 0 for i, d in enumerate(digits)):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % i == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = [int(d) for d in str(startnum)]\n    for num in range(startnum, endnum+1):\n        if all(num % d == 0 for d in digits):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Function to check if a number is divisible by every digit\n    is_divisible_by_digits = lambda x: all(int(d) in str(x) for d in str(x))\n    \n    # Function to check if a number is divisible by every other digit\n    is_divisible_by_other_digits = lambda x: all(int(d) in str(x) and d!= '0' for d in str(x))\n    \n    # Function to check if a number is divisible by every third digit\n    is_divisible_by_third_digits = lambda x: all(int(d) in str(x) and (d!= '0' and (x % 10!= 0 or x // 10!= 0)) for d in str(x))\n    \n    # List comprehension to find all numbers within the given range where every number is divisible by every digit it contains\n    divisible_by_digits_numbers = [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n    \n    # List comprehension to find all numbers within the given range where every number is divisible by every other digit it contains\n    divisible_by_other_digits_numbers = [num for num in range(startnum, endnum + 1) if is_divisible_by_other_digits(num)]\n    \n    # List comprehension to find all numbers within the given range where every number is divisible by every third digit it contains\n    divisible_by_third_digits_numbers = [num for num in range(startnum, endnum + 1) if is_divisible_by_third_digits(num)]\n    \n    # Return the list of numbers divisible by every digit, every other digit, and every third digit\n    return divisible_by_digits_numbers + divisible_by_other_digits_numbers + divisible_by_third_digits_numbers"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    \n    area = math.pi * r**2 * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is less than 360 degrees\n    if a > 360:\n        return None\n    else:\n        # Calculate the area of the sector\n        area = r**2 * math.sin(math.radians(a))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * math.sin(math.radians(a))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area = (r**2)*math.sin(a*math.pi/180)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of LCS of substrings\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Fill table L in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # print LCS\n    i = m\n    j = n\n    k = p\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i - 1][j][k] == L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    print(lcs)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y)\n    # creating a table to store length of longest common subsequence for all substrings\n    L = [[0] * (n+1) for _ in range(m+1)]\n    # finding length of longest common subsequence for all possible substrings\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    # reconstructing the longest common subsequence\n    lcs = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    # returning the longest common subsequence\n    return ''.join(lcs[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D array to store the length of LCS of all possible substrings\n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # fill the LCS array in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k])\n\n    # print the LCS array to get the LCS of all possible substrings\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if L[i][j][k] > 0:\n                    print(\"X: \", X[i-1], \" Y: \", Y[j-1], \" Z: \", Z[k-1], \" LCS: \", X[i-1:j], \" = \", Y[j-1:k], \" = \", Z[k-1:k-L[i][j][k]-1], \" \", L[i][j][k], \"\\n\")\n\n    # return the LCS of all possible substrings\n    return L[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    def helper(x, y, z, dp):\n        if x == 0 or y == 0 or z == 0:\n            return 0\n        if (x, y, z) in dp:\n            return dp[(x, y, z)]\n        elif x == y == z == 0:\n            return 0\n        elif X[x-1] == Y[y-1] == Z[z-1]:\n            return max(helper(x-1, y-1, z-1, dp) + 1, helper(x-1, y, z, dp) + 1, helper(x, y-1, z, dp) + 1)\n        else:\n            return max(helper(x-1, y, z, dp), helper(x, y-1, z, dp), helper(x, y, z-1, dp))\n        \n    return helper(len(X), len(Y), len(Z), {})"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y)\n    len_z = len(Z)\n    L = [[0] * (len_z + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(len_z + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    i, j = m, len_z\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))\n\n\nif __name__ == \"__main__\":\n    X = input(\"Enter the first string sequence: \")\n    Y = input(\"Enter the second string sequence: \")\n    Z = input(\"Enter the third string sequence: \")\n    print(\"The longest common subsequence is: \", lcs_of_three(X, Y, Z))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Find length of each string\n    m, n, o = len(X), len(Y), len(Z)\n    # Create a table to store lengths of LCS of subproblems\n    L = [[0] * (n + 1) for j in range(m + 1)]\n\n    # Build table L[][] in bottom up fashion\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Find length of LCS of all three strings\n    LCS_length = L[m][n]\n\n    # Create a table to store LCS of subproblems\n    lcs = [[0] * (LCS_length + 1) for j in range(3)]\n\n    # Fill the table lcs[][] in bottom up fashion\n    i = m\n    j = n\n    k = 0\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs[k][LCS_length] = X[i - 1]\n            i -= 1\n            j -= 1\n            k += 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Print the LCS of all three strings\n    for i in range(LCS_length, -1, -1):\n        print(lcs[0][i], end=\" \")"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n    max_len = 0\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n                max_len = max(max_len, p[i][j])\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n    \n    lcs = []\n    i = n\n    j = m\n    \n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return ''.join(lcs[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, p = len(X), len(Y), len(Z)\n\n    # Create a table to store lengths of LCS of subproblems\n    dp = [[0] * (p+1) for i in range(n+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][k])\n\n    # Backtrack to find the LCS of the given sequence\n    i, j, k = n, m, p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        elif dp[i][j-1] > dp[i-1][j]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS and return it\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # create a table to store lengths of longest common subsequences ending at each position in the strings\n    L = [[0] * (len(Y)+1) for _ in range(len(X)+1)]\n\n    # fill the table in bottom-up fashion\n    for i in range(len(X)+1):\n        for j in range(len(Y)+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # initialize the result string as empty and backtrack from the table to find the common subsequence\n    result = ''\n    i = len(X)\n    j = len(Y)\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            result = X[i-1] + result\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return result"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n\n    Input:\n    - X: a string\n    - Y: a string\n    - Z: a string\n\n    Output:\n    - the length of the longest common subsequence for the given three string sequence\n    \"\"\"\n\n    # create a list of tuples to store the lengths of LCS for all possible prefixes\n    # of the strings X, Y, and Z\n    table = []\n    for i in range(len(X) + 1):\n        table.append([])\n        for j in range(len(Y) + 1):\n            table[i].append([])\n\n    # fill in the table using dynamic programming\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                table[i].append(table[i - 1][j - 1] + 1)\n            else:\n                table[i].append(max(table[i - 1][j], table[i][j - 1]))\n\n    # trace back the LCS using the table\n    lcs_length = table[-1][-1]\n    lcs = []\n    i, j = len(X), len(Y)\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i, j = i - 1, j - 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # return the length of the LCS and the LCS itself\n    return lcs_length, \"\".join(reversed(lcs))"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n\n    # Iterate over the words and replace the first letter with a space\n    for i in range(len(words)):\n        if words[i][0].isupper() and len(words[i]) > 1:\n            words[i] ='' + words[i]\n\n    # Join the words into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n\n    # split the string into words\n    words = str1.split()\n\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Create a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Split the string into words using the pattern\n    words = re.findall(pattern, str1)\n    # Convert each word to uppercase and join the words with spaces\n    result =''.join([word.upper() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Define the regular expression pattern to match a capital letter\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    \n    # Split the string into words\n    words = re.findall(pattern, string)\n    \n    # Join the words with spaces\n    words_with_spaces =''.join(words)\n    \n    # Return the modified string with spaces between capital letters\n    return words_with_spaces"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # find all capital words and replace them with spaces\n    pattern = r'[A-Z][a-z]+'\n    string = re.sub(pattern, r' \\1', string)\n    # remove leading and trailing spaces and convert to lowercase\n    return string.strip().lower()\n"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Capitalize each word and join them into a string with spaces\n    result =''.join([word.capitalize() for word in words])\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, str1)\n    capitalized_words = [' '.join(word.title().split()) for word in words]\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match capital letters at the beginning of a word\n    pattern = re.compile(r'(?<![a-z])(?=[A-Z])')\n    \n    # Find all the matches of the pattern in the string\n    matches = pattern.finditer(str1)\n    \n    # Loop through the matches and replace them with spaces\n    for match in matches:\n        # Get the start index of the match and the end index of the match\n        start = match.start()\n        end = match.end()\n        \n        # Replace the match with spaces\n        str1 = str1[:start] +'' + str1[end:]\n    \n    # Return the modified string with spaces between capital letters\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # Remove any single-letter words (e.g., \"a\", \"an\", \"the\")\n    words = [word for word in words if len(word) > 1]\n    # Capitalize the first letter of each word and join them with spaces\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Convert all strings in the list to integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to strings\n    nums_str = [str(num) for num in nums]\n\n    # Return the sorted list\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the strings into numbers\n    nums = [int(num) for num in nums_str]\n    # Use the built-in sort() function to sort the list in ascending order\n    nums.sort()\n    # Convert the sorted list back into strings\n    sorted_nums = [str(num) for num in nums]\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_int = [int(num) for num in nums_str if num.isdigit()]\n    nums_str = [num for num in nums_str if not num.isdigit()]\n    nums_str.sort(key=lambda x: int(x))\n    nums_str.extend(nums_int)\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        if num_str.isnumeric():\n            nums.append(int(num_str))\n        else:\n            nums.append(num_str)\n    return sorted(nums)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    num_list = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            num_list.append(num)\n        except ValueError:\n            pass\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda s: int(s))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Split the input list into separate strings\n    nums_str = [str(x) for x in nums_str]\n    # Convert the strings to float values\n    nums_float = [float(x) for x in nums_str]\n    # Sort the list of floats\n    nums_float.sort()\n    # Convert the sorted list back to strings\n    nums_str = [str(x) for x in nums_float]\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the list of integers using the built-in `sort()` function\n    nums.sort()\n    \n    # Convert the list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        if isinstance(i, tuple):\n            test_list.append(i)\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the given tuple to the given list\n    test_list.append(test_tup)\n    \n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) == tuple:\n            for j in range(len(test_tup)):\n                test_list[i] = test_list[i] + (test_tup[j],)\n        else:\n            test_list[i] = test_list[i] + test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    left = 2 * i\n    right = 2 * i + 1\n    \n    if arr[i] > min(arr[left], arr[right]):\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    if not isinstance(arr, list):\n        return False\n    \n    if len(arr) % 2!= 0:\n        return False\n    \n    if check_min_heap_helper(arr, 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n\n    # check if the array is a complete binary tree\n    if not is_complete_binary_tree(arr):\n        return False\n    \n    # check if the array is a min heap\n    i = 1\n    while i < len(arr):\n        # check if the root is greater than its children\n        if arr[0] > min(arr[i], arr[i+1]):\n            return False\n        i *= 2\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. \n    '''\n    if i > len(arr) // 2:\n        # if the current index is greater than the middle of the array\n        # then the array represents a min heap\n        return True\n    left = 2 * i\n    right = 2 * i + 1\n    if left <= len(arr) - 1 and arr[left] < arr[i]:\n        # if the left child is smaller than the current node, it is not a min heap\n        return False\n    if right <= len(arr) - 1 and arr[right] < arr[i]:\n        # if the right child is smaller than the current node, it is not a min heap\n        return False\n    # if both children are smaller than the current node, it is a min heap\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. \n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the current element is smaller than its parent\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n\n    # Recursively call the function for the left and right subtrees\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the array has a minimum element\n    if arr[0] > arr[-1]:\n        return False\n\n    # Recursively call the helper function for the whole array\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    if arr[i] < arr[parent]:\n        return False\n    return check_min_heap_helper(arr, parent)\n\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if len(arr) <= 1:\n        return True\n\n    # check if the array represents a min heap or not\n    for i in range(1, len(arr)-1):\n        if arr[i] > arr[i-1]:\n            return False\n\n    # if the array is a min heap, then return True\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n\n    # Build max heap from arr[1..n/2]\n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    # Check if the max heap property is satisfied or not\n    for i in range(n - 1, 0, -1):\n        if arr[0] > arr[i]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n    Args:\n    arr: list of integers\n    i: index of the current node\n\n    Returns:\n    True if the array represents min heap else False\n    '''\n\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n\n    # If the left child of the node at index i is smaller than the current node, then the current node is not a min heap\n    if arr[2 * i] > arr[i]:\n        return False\n\n    # Recursively check the left and right subtrees\n    return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10921, 21843, 43685, 87371, 174741, 349483, 698965, 1397931, 2795861, 5591723, 11183445, 22366891, 44733781, 89467563, 178935125, 357870251, 715740501, 1431481003, 2862962005, 5725924011, 11451848021, 22903696043, 45807392085, 91614784171, 183229568341, 366459136683, 732918273365, 1465836546731, 2931673093461, 5863346186923, 11726692373845, 23453384747691, 46906769495381, 93813538990763, 187627077981525, 375254155963051, 750508311926101, 1501016623852203, 3002033247704405, 6004066495408811, 12008132990817621, 24016265981635243, 48032531963270485, 96065063926540971, 192130127853081943, 384260255706163885, 768520511412327771, 1537041022824655541, 3074082045649311083, 6148164091298622165, 12296328182597244331, 24592656365194488661, 49185312730388977323, 98370625460777954645, 196741250921555909291, 393482501843111818581, 786965003686223637163, 1573930007372447274325, 314786001474489454"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    # Initialize variables\n    a = 0\n    b = 1\n    c = 1\n    d = 3\n    e = 5\n    f = 11\n    g = 21\n    h = 43\n    i = 85\n    j = 171\n    k = 341\n    l = 683\n    m = 1365\n    n = 2731\n    \n    # Calculate nth jacobsthal number\n    if n == 1:\n        return a\n    elif n == 2:\n        return b\n    elif n == 3:\n        return c\n    elif n == 4:\n        return d\n    elif n == 5:\n        return e\n    elif n == 6:\n        return f\n    elif n == 7:\n        return g\n    elif n == 8:\n        return h\n    elif n == 9:\n        return i\n    elif n == 10:\n        return j\n    elif n == 11:\n        return k\n    elif n == 12:\n        return l\n    elif n == 13:\n        return m\n    elif n == 14:\n        return n\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal = 0\n        for i in range(1, n+1):\n            jacobsthal += (i * 10**(n-i))\n        return jacobsthal\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function takes an integer n and returns the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2) - 1\n    else:\n        return 2 * jacobsthal_num((n-1)//2) - 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize variables\n    prev_num = 1\n    curr_num = 1\n\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return None\n\n    # Iterate through the sequence of jacobsthal numbers\n    for i in range(2, n+1):\n        next_num = prev_num + curr_num\n        prev_num = curr_num\n        curr_num = next_num\n\n    # Return the nth jacobsthal number\n    return curr_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_num = [0, 1]\n    for i in range(2, n):\n        jacobsthal_num.append(jacobsthal_num[i-1] + jacobsthal_num[i-2])\n    return jacobsthal_num[n]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n    min_list = []\n    for i in range(len(test_list)):\n        min_list.append(test_list[i][0])\n        if len(min_list) == K:\n            break\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_k_list = []\n    for i in range(len(test_list)):\n        if len(min_k_list) < K:\n            min_k_list.append(test_list[i])\n        elif min_k_list[0][0] > test_list[i][0]:\n            del min_k_list[0]\n            min_k_list.append(test_list[i])\n\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Parameters:\n    test_list (list): A list of tuples (id, score) representing student records.\n    K (int): The number of records to consider.\n    \n    Returns:\n    (list): A list of tuples containing the minimum k records from the input list.\n    '''\n\n    # Sort the list of tuples based on the score\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum K records\n    min_list = []\n\n    # Iterate over the first K records\n    for i in range(K):\n        min_list.append(test_list[i])\n\n    # Return the list of minimum K records\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = sorted(test_list)\n    if len(min_list) < K:\n        return None\n    else:\n        return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Create a dictionary to store the count of each value in the list\n    count_dict = {}\n    for tup in test_list:\n        if tup[1] in count_dict:\n            count_dict[tup[1]] += 1\n        else:\n            count_dict[tup[1]] = 1\n\n    # Find the minimum value in the dictionary\n    min_val = min(count_dict.values())\n\n    # Create a list of tuples containing the values and their counts\n    min_list = []\n    for val in count_dict:\n        if count_dict[val] == min_val:\n            min_list.append((val, count_dict[val]))\n\n    # Sort the list of tuples by the second element (count)\n    min_list.sort(key=lambda x: x[1])\n\n    # Return the first K elements of the sorted list\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list (list of tuples): list of tuples containing data.\n    K (int): number of records to be considered.\n    \n    Returns:\n    (int): minimum k records from tuple list.\n    \"\"\"\n    # initialize minimum count as infinity\n    min_count = float('inf')\n    \n    # iterate through the list of tuples\n    for tup in test_list:\n        # check if the length of the tuple is less than K\n        if len(tup) < K:\n            continue\n        \n        # count the number of records in the tuple\n        count = 1\n        \n        # iterate through the rest of the tuple\n        for i in range(K, len(tup)):\n            # if the element is not None, increment the count\n            if tup[i] is not None:\n                count += 1\n        \n        # check if the count is less than minimum count\n        if count < min_count:\n            min_count = count\n    \n    # return the minimum count\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_records = []\n    min_count = float('inf')\n    for record in test_list:\n        count = record[0]\n        if count < min_count:\n            min_records = [record]\n            min_count = count\n        elif count == min_count:\n            min_records.append(record)\n    return min_records[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n\n    # Sort the test_list based on the second element\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize minimum number of records as infinity\n    min_k_records = float('inf')\n\n    # Iterate over the first K elements of the sorted list\n    for i in range(K):\n        # Update minimum number of records if the current element is smaller\n        if test_list[i][1] < min_k_records:\n            min_k_records = test_list[i][1]\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x:x[1])  # sort by second element\n    min_record = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i][0]!= min_record[0]:\n            min_record = test_list[i]\n            if len(test_list) - i - 1 < K:\n                break\n    return min_record"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if test_list[i][0] < min_list[0][0]:\n                min_list.pop(0)\n                min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create a set to store the common elements\n    common_set = set()\n\n    # Loop through each list and find the common elements\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_set.add(l1[i])\n        if l2[i] in l1 and l2[i] in l3:\n            common_set.add(l2[i])\n        if l3[i] in l1 and l3[i] in l2:\n            common_set.add(l3[i])\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty dictionary to store the common elements and their indices\n    common_elements = {}\n\n    # Loop through each element in l1\n    for i in range(len(l1)):\n        # If the element is in l2 and l3, add it to the dictionary with its indices\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements[l1[i]] = [i, l2.index(l1[i]), l3.index(l1[i])]\n\n    # Create a new list to store the common elements\n    common_list = []\n\n    # Loop through each element in common_elements\n    for key in common_elements:\n        # Append the key to the common list and its indices to the list\n        common_list.append(key)\n        common_list.append(common_elements[key])\n\n    # Return the common list\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3 and l2[i] in l2:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2 and l3[i] in l3:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common = []\n    \n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    \n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty list to store the common elements\n    common_list = []\n\n    # loop through each index of the lists\n    for i in range(len(l1)):\n        # check if the element at the current index is in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # if it is, add it to the common list\n            common_list.append(l1[i])\n\n    # return the common list\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n    \n    # check if the list has only one element\n    if len(numbers) == 1:\n        return None\n    \n    # return the second smallest element\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Initialize two variables to store the smallest and second smallest numbers\n    smallest = second_smallest = float('inf')\n\n    # Loop through the list and find the smallest and second smallest numbers\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()  # Sort the list in ascending order\n    return numbers[1]  # Return the second element (index 1) of the sorted list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n            \n    if second_smallest == float('inf'):\n        return 'There are not enough numbers in the list to find the second smallest number.'\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:])"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(b)*\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    # Define the regular expression pattern\n    pattern = r'a(b)*'\n\n    # Use the re.search() function to search for a match in the text\n    match = re.search(pattern, text)\n\n    # If a match is found, return the matched substring\n    if match:\n        return match.group()\n\n    # If no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[^b]*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group(0))\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # Define the regular expression pattern\n    pattern = r'ab+'\n    # Search for matches in the text string\n    matches = re.findall(pattern, text)\n    # Print the matches\n    print(\"Matches found:\", matches)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?:b*)'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n\n    # Create a hash table to store the frequency of each character in the list\n    freq = {}\n    for i in range(n):\n        for j in range(i + 1, n):\n            freq[test_list[i] + test_list[j]] = freq.get(test_list[i] + test_list[j], 0) + 1\n\n    # Iterate through the list and check if the reverse of the current string is present in the hash table\n    # If yes, increment the count\n    for i in range(n):\n        for j in range(i + 1, n):\n            if test_list[i][::-1] + test_list[j][::-1] in freq:\n                count += freq[test_list[i][::-1] + test_list[j][::-1]]\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\n\ndef is_reverse(s):\n    \"\"\"\n    Check if a given string is a reverse of itself.\n    \"\"\"\n    return s == s[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and test_list[i] == test_list[j][::-1]:\n                reverse_count += 1\n    return reverse_count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Count the number of pairs of reverse strings in the given list of strings.\n    \"\"\"\n    count = 0\n    for string in test_list:\n        # convert string to list of characters\n        char_list = list(string)\n        # sort the list of characters in reverse order\n        char_list.sort(reverse=True)\n        # join the sorted list of characters back into a string\n        sorted_string = ''.join(char_list)\n        # check if the sorted string is equal to the original string\n        if string!= sorted_string:\n            count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    # base case: empty list\n    if not list1:\n        return {}\n\n    # recursive case: first element of list\n    first_elem = list1[0]\n\n    # create dictionary to store count of each tuple\n    counts = {tuple([first_elem]): 1}\n\n    # iterate through remaining elements of list\n    for elem in list1[1:]:\n        # convert each list element to tuple\n        new_tuple = tuple([elem])\n\n        # check if new tuple is already in dictionary\n        if new_tuple in counts:\n            # increment count for existing tuple\n            counts[new_tuple] += 1\n        else:\n            # add new tuple to dictionary and set its count to 1\n            counts[new_tuple] = 1\n\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert the list to a set of lists\n    sublists = set(list(map(tuple, list1)))\n\n    # Initialize an empty dictionary to store the sublist count\n    sublist_count = {}\n\n    # Iterate through the set of sublists\n    for sublist in sublists:\n        # Convert the sublist to a string and split it by commas\n        sublist_str = ','.join(str(x) for x in sublist)\n        # Convert the string to an integer and increment the count in the dictionary\n        sublist_count[sublist_str] = sublist_count.get(sublist_str, 0) + 1\n\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Creating a dictionary to store the count of unique lists\n    count_dict = {}\n\n    # Looping through each element in the list\n    for element in list1:\n        # Converting each element to a tuple and appending it to the list\n        new_element = tuple(element)\n        # If the new element is already in the dictionary, increment the count\n        if new_element in count_dict:\n            count_dict[new_element] += 1\n        # If the new element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[new_element] = 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Iterate through each element of the list\n    for elem in lst:\n        # If the element is a list, convert it to a tuple and add it to the count dictionary\n        if isinstance(elem, list):\n            tup = tuple(elem)\n            if tup in count_dict:\n                count_dict[tup] += 1\n            else:\n                count_dict[tup] = 1\n    \n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Iterate through the list\n    for i in range(len(list1)):\n        # Convert the list to a tuple\n        tup = tuple(list1[i])\n        \n        # Check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # Increment the count of the tuple\n            count_dict[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_dict:\n                sublist_dict[sublist] = list1[i:j].count(sublist)\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for item in list1:\n        for subitem in item:\n            if subitem not in sublist_count:\n                sublist_count[subitem] = 1\n            else:\n                sublist_count[subitem] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for lst in list1:\n        if lst in count_dict:\n            count_dict[lst] += 1\n        else:\n            count_dict[lst] = 1\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    # Check if num is a string\n    if not isinstance(num, str):\n        return False\n\n    # Remove any non-numeric characters from the string\n    num = ''.join(e for e in num if e.isdigit() or e == '.')\n\n    # Check if the string is of the form \"###.##\"\n    if len(num)!= 7 or '.' not in num or len(num.split('.')[1]) > 2:\n        return False\n\n    # Split the string into integer and decimal parts\n    int_part, dec_part = num.split('.')\n\n    # Check if the integer part is of the form \"###\"\n    if len(int_part)!= 3 or int_part[2]!= '0':\n        return False\n\n    # Convert the integer and decimal parts to integers\n    int_part = int(int_part[:2])\n    dec_part = int(dec_part[:2])\n\n    # Check if the integer and decimal parts are less than 10\n    if int_part < 0 or int_part > 9 or dec_part < 0 or dec_part > 9:\n        return False\n\n    # Check if the integer and decimal parts have a precision of 2\n    if abs(int_part) > 99 or abs(dec_part) > 9:\n        return False\n\n    # Check if the integer and decimal parts have leading zeros\n    if int_part == 0 and dec_part[0] == '0':\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    if num.replace(\".\", \"\", 1).isdigit() and num.count(\".\") <= 1:\n        try:\n            float(num)\n            return True\n        except ValueError:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = list(num)\n    decimal_point = False\n    for i in range(len(num_list)):\n        if num_list[i] == '.' and not decimal_point:\n            decimal_point = True\n        elif num_list[i] == '.' and decimal_point:\n            return False\n        elif num_list[i]!= '.' and not decimal_point:\n            if not num_list[i].isdigit():\n                return False\n            if len(num_list[i]) > 2:\n                return False\n    if decimal_point:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        decimal_part = float_num - int(float_num)\n        if abs(decimal_part) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    int_part = parts[0]\n    frac_part = parts[1]\n    if len(int_part) > 15:\n        return False\n    if len(frac_part) > 15:\n        return False\n    if len(int_part) + len(frac_part)!= len(num):\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # remove any non-numeric characters from the string\n    num = ''.join(e for e in num if e.isdigit())\n\n    # check if the string has only two numeric characters\n    if len(num)!= 2:\n        return False\n\n    # convert the string to a float with a precision of 2\n    float_num = float(num)\n\n    # check if the float is a decimal number with a precision of 2\n    if round(float_num, 2) == float_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num:\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) > 2:\n            return False\n        for char in decimal_part:\n            if not char.isdigit() and not char in ['e', 'E']:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.strip()\n    if num.count('.')!= 1:\n        return False\n    if '.' in num:\n        if '.' not in num.replace('.', '', 1):\n            return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the number contains only digits and decimal point\n    if not all(char.isdigit() or char == '.' for char in num) or '.' not in num:\n        return False\n    \n    # convert the number to a float and check the precision\n    num_float = float(num)\n    precision = 2\n    return abs(num_float - int(num_float)) <= 10**(-precision)"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Convert the list to set to remove duplicates\n    unique_set = set(arr)\n    # Check if the length of set is one\n    if len(unique_set) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)): #check if all elements are distinct\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    if len(count) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # check whether the length of the set is equal to 1 or not\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 30 days, False otherwise.\n    Months are given as numbers from 1 to 12.\n    '''\n    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum in months:\n        if months[monthnum] == 31 and monthnum in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        elif months[monthnum] == 30 and monthnum in [4, 6, 9, 11]:\n            return True\n        elif months[monthnum] == 28 and monthnum == 2:\n            return True\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    \n    # check if the month number is divisible by 3\n    if monthnum3 % 3 == 0:\n        return True\n    \n    # if the month number is not divisible by 3, check if it is divisible by 100\n    if monthnum3 % 100 == 0:\n        return True\n    \n    # if the month number is not divisible by 3 or 100, check if it is divisible by 400\n    if monthnum3 % 400 == 0:\n        return True\n    \n    # if none of the above conditions are met, the month number does not contain 30 days\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Dictionary to map month numbers to days in each month\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # Check if the month number is in the dictionary\n    if monthnum3 in days_in_month:\n        # Check if the month number contains 30 days\n        if days_in_month[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        if monthnum3 % 2 == 1:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid Month Number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 30 days, and False otherwise.\n    '''\n\n    # The month numbers containing 30 days\n    months_30_days = [4, 6, 9, 11]\n\n    # Check if the given month number is in the list of months containing 30 days\n    if monthnum in months_30_days:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2 and not (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days[1] = 29\n    return days[monthnum3-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 10:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Dictionary containing the number of days in each month\n    month_days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # Check if the month number exists in the dictionary\n    if monthnum3 in month_days:\n        # If the month number exists in the dictionary, check if it has 30 days\n        if month_days[monthnum3] == 30:\n            print(\"The month number\", monthnum3, \"has 30 days.\")\n        else:\n            print(\"The month number\", monthnum3, \"does not have 30 days.\")\n    else:\n        print(\"The given month number is invalid.\")"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n integers and returns the minimum difference between any two elements in the array.\n\n    :param arr: An array of n integers.\n    :param n: The length of the array.\n    :return: The minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes two arguments: arr (list of integers) and n (int)\n    The function returns the minimum difference between any two elements in the array.\n    \n    The function first initializes two variables min_diff and min_num to positive infinity. \n    min_diff will be used to keep track of the minimum difference found so far, and min_num will be used to keep track of the \n    minimum element found so far.\n    \n    The function then loops through the array and for each element i, it checks if it is greater than the current minimum element.\n    If it is, then min_num is updated to be equal to i and min_diff is updated to be the difference between i and the current minimum element.\n    \n    Finally, the function returns the minimum difference found.\n    '''\n    min_diff = float('inf')\n    min_num = arr[0]\n    for i in range(1, n):\n        if arr[i] > min_num:\n            min_num = arr[i]\n            min_diff = abs(min_num - arr[i])\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array of integers and its length as input and returns the minimum difference between any two elements in the array.\n    \n    :param arr: list of integers\n    :param n: length of the array\n    :return: minimum difference between any two elements in the array\n    \"\"\"\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the last two elements\n    min_diff = arr[n-1] - arr[0]\n\n    # Loop through the array and update the minimum difference if we encounter a smaller difference between any two elements\n    for i in range(n-2):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize two pointers at the beginning and end of the array\n    i = 0\n    j = n - 1\n    # Initialize the minimum difference found so far\n    min_diff = float('inf')\n    # Loop until the two pointers meet\n    while i < j:\n        # Calculate the difference between the current elements\n        diff = arr[j] - arr[i]\n        # Update the minimum difference found so far\n        min_diff = min(min_diff, diff)\n        # If the difference is negative, increment the left pointer\n        if diff < 0:\n            i += 1\n        # If the difference is positive, decrement the right pointer\n        else:\n            j -= 1\n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the first two elements in the array\n    min_diff = arr[1] - arr[0]\n\n    # Iterate over the remaining elements in the array\n    for i in range(2, n):\n        # Calculate the difference between the current element and the next element in the array\n        diff = arr[i] - arr[i - 1]\n\n        # Update the minimum difference if the current difference is smaller than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables to store minimum difference and current difference\n    min_diff = float('inf')\n    current_diff = 0\n\n    # Iterate through the array and calculate the difference between adjacent elements\n    for i in range(1, n):\n        current_diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, current_diff)\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a Python function to find the minimum difference between any two elements in a given array.\n    :param arr: List of integers.\n    :param n: Size of the array.\n    :return: The minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sorting the array\n    min_diff = arr[1] - arr[0]  # Finding the minimum difference between the first and second elements\n    for i in range(1, n - 1):  # Checking for the minimum difference between any two elements in the array\n        if arr[i + 1] - arr[i] < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sorting the array in ascending order\n    \n    # Initializing minimum difference variable\n    min_diff = arr[1] - arr[0]\n    \n    # Looping through the remaining elements of the array\n    for i in range(2, n):\n        # Checking if the current element is smaller than the minimum difference\n        if arr[i] - arr[i-1] < min_diff:\n            # Updating the minimum difference variable\n            min_diff = arr[i] - arr[i-1]\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # sorting the array in ascending order\n    arr.sort()\n\n    # calculating the minimum difference\n    min_diff = arr[n-1] - arr[0]\n\n    # iterating through the remaining elements of the array\n    for i in range(1, n-1):\n        # calculating the current difference\n        diff = arr[n-1] - arr[i]\n\n        # updating the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    def nth_polite(num):\n        if num % 2 == 0:\n            return 2 * num + 1\n        else:\n            return 2 * num - 1\n\n    def check_polite(num):\n        if num in [2, 4, 6, 8]:\n            return True\n        elif num % 2 == 0 and num % 3 == 0:\n            return True\n        elif num % 2!= 0 and num % 3!= 0:\n            return True\n        else:\n            return False\n\n    num = n\n    while True:\n        if check_polite(nth_polite(num)):\n            return nth_polite(num)\n        num += 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    A polite number is an integer greater than or equal to 10 and less than 100.\n    '''\n    if n < 10 or n >= 100:\n        return \"Invalid input!\"\n    elif n == 10:\n        return 11\n    else:\n        return n + math.ceil(math.log10(n)) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Define the set of prime numbers up to n\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n\n    # Iterate over the set of primes and mark all the multiples of each prime as composite\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    # Iterate over the set of primes and find the nth prime\n    for i in range(2, n+1):\n        if primes[i]:\n            return i\n\n    # If we reach this point, then the nth prime is not found\n    return \"Not found\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    polite_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    if n <= 20:\n        return polite_numbers[n-1]\n    else:\n        p = 20\n        count = 0\n        for i in range(20, n+1):\n            count += 1\n            if count == 4:\n                p += 1\n                count = 0\n        return p"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the nth polite number.\n    \"\"\"\n    # Initialize the number to be the smallest polite number\n    polite_number = 1\n\n    # Iterate until the nth polite number is found\n    for i in range(1, n + 1):\n        # Add the next polite number to the current polite number\n        polite_number += 1\n\n        # Check if the polite number is a prime number\n        is_prime = True\n        for j in range(2, int(math.sqrt(polite_number)) + 1):\n            if polite_number % j == 0:\n                is_prime = False\n                break\n\n        # If the polite number is a prime number, return it\n        if is_prime:\n            return polite_number\n\n    # If no polite number is found, return None\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return None\n\n    def is_divisible_by(num, divisor):\n        return num % divisor == 0\n\n    def get_next_polite(num):\n        if num < 10:\n            return 10\n        elif is_divisible_by(num, 10):\n            return 2 * num\n        elif is_divisible_by(num, 5):\n            return 5 * num\n        elif is_divisible_by(num, 2):\n            return 3 * num\n        else:\n            return 2 * num\n\n    polite_number = 1\n    i = 1\n    while i <= n:\n        polite_number = get_next_polite(polite_number)\n        i += 1\n\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize variables\n    count = 1\n    current_number = 1\n\n    # Loop till count becomes n\n    while count < n:\n\n        # Check if current number is polite\n        if is_prime(current_number):\n            print(current_number)\n            count += 1\n\n        # Calculate next number\n        current_number += 1\n\n    # If count is equal to n then return nth polite number\n    return current_number\n\ndef is_prime(num):\n    '''\n    Returns True if num is a prime number, else False.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return math.floor(n * (math.log(n) / math.log(2))) + 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Function to find the greatest common divisor of two numbers.\n        \"\"\"\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    def is_prime(n):\n        \"\"\"\n        Function to check if a number is prime or not.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def nth_polite(n):\n        \"\"\"\n        Function to find the nth polite number.\n        \"\"\"\n        i = 1\n        while True:\n            if is_prime(i):\n                count = 0\n                j = 1\n                while True:\n                    if is_prime(j) and gcd(i, j) == 1:\n                        count += 1\n                    j += 1\n                    if count == n:\n                        return i\n                    if j * i > 2**31 - 1:\n                        break\n                i += 1\n\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef is_polite(n):\n    if is_palindrome(n):\n        return True\n    \n    if n % 11 == 0:\n        return True\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n^2 + 3n + 11)) + 1):\n        remainder = (n^2 + 3n + 11) % (11 * i)\n        if remainder == 0:\n            count += 1\n    \n    return count % 2 == 1"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x, l1[i+1]) for i, x in enumerate(l1) if i+1 < len(l1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    # Initialize an empty list to store pairs\n    pairs = []\n\n    # Check if the list has at least two items\n    if len(l1) < 2:\n        return pairs\n\n    # Loop through the list and find pairs of consecutive items\n    for i in range(len(l1)):\n        if i < len(l1) - 1:\n            pairs.append((l1[i], l1[i+1]))\n\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function takes two arguments: a list of numbers and the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and a sum and returns the count of pairs in the list whose sum is equal to the given sum.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create a new list to store the difference\n    diff_list = []\n    # loop through the two lists\n    for i in li1:\n        if i not in li2:\n            # if the element is not present in the second list, add it to the new list\n            diff_list.append(i)\n    # return the new list as the difference between the two lists\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    # Checking if both lists have the same length\n    if len(li1)!= len(li2):\n        return \"Both lists should have the same length\"\n    # Calculating the difference between the lists\n    diff = []\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff.append(li1[i])\n    # Returning the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing all the elements of li1 that are not present in li2.\n    \"\"\"\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # create an empty set to store the difference between the lists\n    diff_set = set()\n\n    # iterate through each element of the first list and check if it exists in the second list\n    for element in li1:\n        if element not in li2:\n            # if the element is not in the second list, add it to the set to store the difference\n            diff_set.add(element)\n\n    # convert the set to a list and return it as the difference between the two lists\n    return list(diff_set)\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements of the first list that are not in the second list.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as inputs and returns their difference.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function calculates the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initializing the sum variable to zero\n    sum = 0\n\n    # Looping for n iterations\n    for i in range(1, n+1):\n\n        # Calculating the fourth power of the odd number\n        fourth_power = i**4\n\n        # Adding the fourth power to the sum variable\n        sum += fourth_power\n\n    # Returning the sum of fourth power of odd numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(2, n+1):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    sum = 0\n    \n    for i in range(1, n+1):\n        if i % 2!= 0:\n            count += 1\n            sum += i ** 4\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function calculates the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    sum_of_fourth_powers = 0\n    count = 1\n    while count <= n:\n        if count % 2 == 1:\n            sum_of_fourth_powers += count ** 4\n        count += 1\n\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        elif char in ['+', '-', '*', '/']:\n            if len(stack) == 0:\n                return False\n            top = stack[-1]\n            if (top == '(' and char in ['+', '-']) or (top == ')' and char in ['*', '/']):\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n\n    if len(stack)!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                balanced = False\n                break\n            stack.pop()\n\n    return balanced"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char!= '(':\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_expression(exp):\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n    \n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif bracket in closing_brackets:\n            if not stack:\n                return False\n            else:\n                top_bracket = stack[-1]\n                if top_bracket in opening_brackets.values():\n                    if opening_brackets[top_bracket] == bracket:\n                        stack.pop()\n                elif top_bracket in closing_brackets.values():\n                    if closing_brackets[top_bracket] == bracket:\n                        stack.pop()\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Remove words with k length\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    \n    # Join the result and return\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty list to store words with length less than K\n    result = []\n    # iterate over the words\n    for word in words:\n        # check if the length of the word is less than K\n        if len(word) < K:\n            # add the word to the result list\n            result.append(word)\n    # join the words in the result list into a string\n    result_str =''.join(result)\n    # return the result string\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string to a list of words\n    words = test_str.split()\n\n    # Initialize an empty list to store the non-K-length words\n    non_k_length_words = []\n\n    # Loop through the words\n    for word in words:\n        # Check if the length of the word is equal to K\n        if len(word)!= K:\n            # If it's not, add it to the non_k_length_words list\n            non_k_length_words.append(word)\n\n    # Join the words in the non_k_length_words list into a string and return it\n    return''.join(non_k_length_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(\"Match found at index {} with length {}\".format(match.start(), len(match.group())))\n            print(\"Substring found: {}\".format(match.group()))\n            return (match.start(), match.start() + len(match.group()), match.group())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        matches = re.finditer(pattern, text)\n        for matchNum, match in enumerate(matches, start=1):\n            print(f'Match {matchNum}: {match.group()} found at index {match.start()}')\n        return None\n    except:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            if match[0] == pattern:\n                index = text.index(match[0])\n                return (match[0],index)\n            else:\n                continue\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function takes a string and a pattern as inputs and returns a tuple containing the occurrence and position of the pattern in the string.\n    If the pattern is not found in the string, the function returns None.\n    \"\"\"\n    # use regular expressions to find all occurrences of the pattern in the text\n    occurrences = re.finditer(pattern, text)\n\n    # iterate over the occurrences and return the result as a tuple\n    if len(list(occurrences)) > 0:\n        for i, match in enumerate(occurrences):\n            return (match.start(), match.end(), match.group())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m:\n        occurrence = m.group(0)\n        position = m.start()\n        return (occurrence,position)\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        index = text.index(pattern)\n        return f\"The substring '{pattern}' occurs at index {index}\"\n    except ValueError:\n        return \"No match found.\"\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            if i % 2 == 0:\n                continue\n            else:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums = 0\n\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                odd_nums += 1\n\n    if odd_nums == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of integers as input and checks whether every odd index contains odd numbers.\n    Returns True if every odd index contains odd numbers, otherwise False.\n    '''\n    for i in range(1, len(nums), 2):\n        if not all(x % 2!= 0 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    n = len(nums)\n    for i in range(1, n+1, 2):\n        if not all(nums[i-1] % 2 == nums[i] % 2 for j in range(2)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not any(num % 2 for num in nums[i]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                odd_count += 1\n                if odd_count == 2:\n                    return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    # Iterate through the list and check if the odd indices are even or not\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    count = 0\n    for i in range(0, len(nums), 2):\n        if sum([int(x) for x in str(nums[i])]) % 2 == 0:\n            count += 1\n        else:\n            break\n    return count == len(nums)"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # create a boolean list to keep track of the odd numbers in the given list\n    odd_numbers = [num % 2!= 0 for num in nums]\n    \n    # iterate through each odd index in the list and check if there are odd numbers at that index\n    for i in range(1, len(nums), 2):\n        if odd_numbers[i] is False:\n            return False\n    \n    # if all odd indices have odd numbers, return True\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if (test_str[i] == vowels[0] and test_str[i-1] in vowels) or \\\n               (test_str[i] == vowels[0] and test_str[i+1] in vowels) or \\\n               (test_str[i] == vowels[1] and test_str[i-1] in vowels and test_str[i+1] in vowels) or \\\n               (test_str[i] == vowels[2] and test_str[i-1] in vowels and test_str[i+1] in vowels) or \\\n               (test_str[i] == vowels[3] and test_str[i-1] in vowels and test_str[i+1] in vowels) or \\\n               (test_str[i] == vowels[4] and test_str[i-1] in vowels and test_str[i+1] in vowels):\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if (i-1 >= 0 and test_str[i] in vowels) or (i+1 < len(test_str) and test_str[i] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in vowels and (i == 1 or test_str[i-2] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1 and test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Initialize the sum variable to zero\n    total_sum = 0\n    # Iterate through the unique set and add its values to the sum variable\n    for num in unique_set:\n        total_sum += num\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set from the input array to remove duplicates\n    arr_set = set(arr)\n    # initialize the sum variable to zero\n    sum_non_repeated = 0\n    # iterate over the set of elements and add their values to the sum variable\n    for num in arr_set:\n        sum_non_repeated += num\n    # return the final sum\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    # Iterate through the unique elements of the list\n    for element in unique_elements:\n        # Add the element to the non-repeated sum\n        non_repeated_sum += element\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to keep track of unique elements\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of unique elements\n    sum_unique = 0\n    # Iterate through the set to calculate the sum of unique elements\n    for element in unique_elements:\n        sum_unique += element\n    # Return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements from the list\n    unique_set = set(arr)\n\n    # Convert the set to a list\n    unique_list = list(unique_set)\n\n    # Initialize the sum variable to 0\n    sum_var = 0\n\n    # Iterate through the list and add the sum of unique elements to the sum_var variable\n    for i in range(len(unique_list)):\n        sum_var += unique_list[i]\n\n    # Return the sum_var\n    return sum_var"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list of integers as input and returns the sum of all non-repeated elements.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # Find the sum of the unique elements in the list\n    unique_sum = sum(unique_set)\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    # Create a set to store unique elements in the array\n    unique_elems = set(arr)\n    \n    # Initialize a variable to store the sum of unique elements\n    sum_unique = 0\n    \n    # Loop through the unique elements and add their values to the sum\n    for elem in unique_elems:\n        sum_unique += elem\n        \n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create a set to store unique elements\n    unique_set = set(arr)\n\n    # convert set to list\n    unique_list = list(unique_set)\n\n    # initialize sum variable\n    sum_of_unique = 0\n\n    # iterate over unique list and add each element to sum variable\n    for num in unique_list:\n        sum_of_unique += num\n\n    # return sum of unique list\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)  # Convert the list to a set to get unique elements\n    return sum(unique_elements)  # Return the sum of the unique elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Convert the list to a set to remove duplicate values\n    unique_set = set(arr)\n    # Convert the set back to a list for summation\n    sum_list = list(unique_set)\n    # Calculate the sum of non-repeated elements\n    non_repeated_sum = sum(sum_list)\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for i, group in groupby(enumerate(list1), lambda x: x[1] == x[0] + 1):\n        group = list(map(itemgetter(1), group))\n        result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    result = []\n    for i, group in enumerate(groupby(list1)):\n        group = list(group)\n        if len(group) == 1:\n            result.append([group[0]])\n        else:\n            for j in range(1, len(group)):\n                group[j] = [group[j][0], group[j-1][1]]\n            result.append(group)\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            result.append([key])\n        else:\n            result[-1].append(key)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a new list where consecutive duplicates\n    of the elements are packed into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Use a generator expression to group consecutive duplicates\n    grouped = groupby(lst)\n    # Use a list comprehension to unpack each group and pack it into a sublist\n    return [list(group) for group in grouped]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack(iterable):\n        prev_item = None\n        for item in iterable:\n            if item == prev_item:\n                yield [item]\n            else:\n                yield [prev_item]\n                prev_item = item\n\n    # Pack consecutive duplicates\n    grouped = groupby(list1, lambda x: x)\n    packed = list(pack(grouped))\n\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key == 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = sorted(list(set(list1)))\n    result = []\n    for key, group in groupby(grouped_list):\n        result.append(list(group))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    # Convert the list to a set to remove duplicates\n    lst = set(lst)\n    # Use the groupby function from itertools to group the consecutive elements\n    grouped_list = list(groupby(lst))\n    # Reverse the grouped list to pack consecutive duplicates in reverse order\n    grouped_list.reverse()\n    # Convert the grouped list back to a list and return\n    return list(map(list, grouped_list))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist_count[tuple(item)] = sublist_count.get(tuple(item), 0) + 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for lst in list1:\n        if lst not in count_dict:\n            count_dict[lst] = 1\n        else:\n            count_dict[lst] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n\n    # Create a dictionary to store the count of each sublist\n    sublist_count = {}\n\n    # Loop through each element in the list\n    for i in range(len(list1)):\n\n        # Check if the current element is a list\n        if isinstance(list1[i], list):\n\n            # Convert the list to a tuple and add it to the dictionary if it does not already exist\n            if tuple(list1[i]) not in sublist_count:\n                sublist_count[tuple(list1[i])] = 1\n            else:\n                sublist_count[tuple(list1[i])]+=1\n\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the unique sublists\n    sublists_dict = {}\n\n    # Loop through the list and add unique sublists to the dictionary\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:])\n        if sublist not in sublists_dict:\n            sublists_dict[sublist] = 1\n        else:\n            sublists_dict[sublist] += 1\n\n    # Return the dictionary with the unique sublists as keys and their occurrences as values\n    return sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        sublst = lst[i:]\n        sublst_tuple = tuple(sublst)\n        counts[sublst_tuple] = counts.get(sublst_tuple, 0) + 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if tuple(sublist) not in sublists:\n            sublists[tuple(sublist)] = 1\n        else:\n            sublists[tuple(sublist)] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in sublist_counts:\n            sublist_counts[item_tuple] += 1\n        else:\n            sublist_counts[item_tuple] = 1\n    return sublist_counts\n"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if sublist not in sublist_count:\n            sublist_count[tuple(sublist)] = 1\n        else:\n            sublist_count[tuple(sublist)] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists[tuple(list1[i:j])] = sublists.get(tuple(list1[i:j]), 0) + 1\n    return sublists"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # iterate through all the tuples in the list\n    for i in range(len(test_list)):\n        # iterate through all the tuples that come after i in the list\n        for j in range(i+1, len(test_list)):\n            # find the sum of the two tuples\n            total = test_list[i][0] + test_list[j][0]\n            # check if the total is in the list\n            if total in test_list[i:j]:\n                # if yes, print the combination\n                print(tuple(sorted([test_list[i], test_list[j]])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Initialize empty list to store the combinations\n    combinations_list = []\n    \n    # Loop through all possible combinations of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Find the sum of tuples from i to j\n            sum_of_tuples = sum(test_list[i:j+1])\n            \n            # Check if the sum of tuples is in the list\n            if sum_of_tuples in test_list:\n                # Append the combination to the list\n                combinations_list.append((test_list[i], test_list[j]))\n    \n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    sums = set(sum(comb) for comb in combinations(test_list, r=2))\n    return sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # create a set of tuples\n    tuples_set = set(test_list)\n\n    # iterate over all pairs of tuples in the set\n    for i in combinations(tuples_set, 2):\n        # calculate the sum of the tuples\n        sum_of_tuples = sum(i)\n        # check if the sum is in the set of sums\n        if sum_of_tuples in tuples_set:\n            # print the tuple\n            print(i)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list)+1):\n        comb = combinations(test_list, i)\n        combinations_list.extend(list(comb))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # Define a function to check if the given sum is present in the given list of tuples\n    def is_present(combination, sums):\n        \"\"\"\n        Check if the given sum is present in the given list of tuples.\n        \"\"\"\n        for sum_ in sums:\n            if sum_ in combination:\n                return True\n        return False\n\n    # Initialize the combination list and the set of unique sums\n    combinations_list = []\n    sums_set = set()\n\n    # Iterate over all possible tuples in the given tuple list\n    for combination in combinations(test_list, len(test_list)):\n        # Check if the given combination contains the given sum\n        if is_present(combination, sums_set):\n            # If it does, append the combination to the combination list\n            combinations_list.append(combination)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # List comprehension to get all possible combinations of sums\n    combinations_of_sums = [tuple(combination) for combination in combinations(test_list, len(test_list))]\n    \n    return combinations_of_sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    all_combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            all_combinations.extend(combinations(test_list, i+1))\n\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Create a set of tuples containing elements from both sublists\n            combined_tuples = set(combinations(test_list[i], j))\n            # Convert the set of tuples to a list and add it to the result\n            result.append(list(combined_tuples))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Sort the tuples in the list\n    test_list.sort()\n    \n    # Initialize empty list to store the combinations\n    combinations_list = []\n    \n    # Generate all combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Create a tuple with the two elements from each combination\n            combination = (test_list[i], test_list[j])\n            # Check if the tuple is already in the list and append it if it is not\n            if combination not in combinations_list:\n                combinations_list.append(combination)\n    \n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number n.\n    '''\n    # Initialize variables\n    count = 0\n    divisor = 2\n    \n    # Check if the number is divisible by the first divisor\n    if n % divisor == 0:\n        count += 1\n    \n    # Check for the remaining divisors\n    while divisor * divisor <= n:\n        # Check if the number is divisible by the divisor\n        if n % divisor == 0:\n            count += 1\n        # Move to the next divisor\n        divisor += 1\n    \n    # Check if the number is divisible by the last divisor\n    if n % divisor == 0:\n        count += 1\n        \n    # Return the count of divisors\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even or odd.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if n // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i, n//i)\n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n        i += 1\n    divisors.append(n)\n    return divisors[len(divisors)//2] - 1"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd using the math module.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    count += 1 if n > 1 else 0\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # count divisors of the given number \n    count = 0 \n    for i in range(1, n+1): \n        if n % i == 0: \n            count += 1 \n    \n    # check if count of divisors is even \n    if count % 2 == 0: \n        print(n, \"is a prime number\") \n    else: \n        print(n, \"is not a prime number\") "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            count += 1\n        i += 1\n    if n > 1 and count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if there are even number of divisors, else False.\n    \"\"\"\n\n    # Calculate the sum of all the numbers from 1 to n \n    sum_of_numbers = (n * (n + 1)) // 2\n    \n    # Calculate the number of divisors of n \n    num_of_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            num_of_divisors += 1\n            if n // i!= i:\n                num_of_divisors += 1\n                \n    # If the number of divisors is even, return True. Else, return False.\n    if num_of_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return \"1 has no divisors.\"\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    count_of_divisors = len(divisors)\n    if count_of_divisors % 2 == 0:\n        print(f\"{n} has an even count of divisors: {count_of_divisors}\")\n    else:\n        print(f\"{n} has an odd count of divisors: {count_of_divisors}\")"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n\n    Parameters:\n    arr (list): An array of integers\n\n    Returns:\n    int: The sum of all odd length subarrays in the array.\n    \"\"\"\n\n    # Initialize a dictionary to store the sum of odd length subarrays\n    odd_sum_dict = {}\n\n    # Iterate over the array and check for odd length subarrays\n    for i in range(len(arr)):\n        for j in range(i+2, len(arr)+1):\n            # Check if the subarray is odd length and add the sum to the dictionary\n            if j-i-1 % 2 == 1 and j-i-1 in odd_sum_dict:\n                odd_sum_dict[j-i-1] += arr[i:j]\n            # Check if the subarray is odd length and add the sum to the dictionary\n            elif j-i-1 % 2 == 1 and j-i-1 not in odd_sum_dict:\n                odd_sum_dict[j-i-1] = arr[i:j]\n\n    # Return the sum of all odd length subarrays\n    return sum(odd_sum_dict.values())"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    sum_odd_length_subarrays = 0\n    n = len(arr)\n\n    for i in range(n - 2):\n        for j in range(i + 3, n):\n            sub_arr = arr[i:j+1]\n            if sum(sub_arr) % 2!= 0:\n                sum_odd_length_subarrays += sum(sub_arr)\n\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                sum_odd_length += sum(arr[i:j+1])\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2!= 0:\n                sum += sum_subarray(arr, i, j)\n    return sum\n\ndef sum_subarray(arr, start, end):\n    return sum(arr[start:end+1])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    odd_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            odd_sum += arr[i]\n            count += 1\n        else:\n            count += 1\n    return odd_sum * count // 2"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    # Initialize a variable to store the sum of all odd-length subarrays\n    total_sum = 0\n    \n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Check if the current element is odd\n        if i % 2!= 0:\n            # Initialize a variable to store the sum of the current element and its neighbors\n            partial_sum = 0\n            \n            # Loop through the remaining elements in the array\n            for j in range(i, len(arr)):\n                # Add the current element and the next element to the partial sum\n                partial_sum += arr[j]\n                \n                # If the partial sum has length odd, add it to the total sum and break out of the loop\n                if j - i + 1 % 2!= 0:\n                    total_sum += partial_sum\n                    break\n                \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n-1):\n        left_sum = 0\n        for j in range(i+1, n):\n            left_sum += arr[j]\n            if j-i+1 % 2 == 1:\n                total_sum += left_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length_subarrays = 0\n    n = len(arr)\n\n    # Traverse through all subarrays of odd length\n    for i in range(1, n):\n        sum_odd_length_subarrays += sum(arr[i-j:i+1])\n        for j in range(2, i+1, 2):\n            sum_odd_length_subarrays -= sum(arr[i-j:i])\n\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    total_sum = 0\n    for i in range(len(arr)):\n        if i == 0 or (i > 0 and arr[i] % 2 == 0):\n            count = 1\n            total_sum += arr[i]\n        elif i > 0 and arr[i] % 2 == 1:\n            count += 1\n            total_sum += arr[i]\n        else:\n            count -= 1\n        if count == 0:\n            count = 0\n            total_sum -= arr[i-1]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # initialize the sum of odd length subarrays\n    sum_odd = 0\n    # iterate over all subarrays of length 3 to n\n    for i in range(n-2):\n        if i > 0 and (i+3) % 2 == 0:\n            continue\n        # check if the subarray contains only odd elements\n        if all(arr[j] % 2 == 1 for j in range(i, i+3)):\n            # sum up the subarray elements\n            sum_odd += sum(arr[i:i+3])\n    return sum_odd"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HSV color model\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n    hsv = []\n\n    if max_rgb == min_rgb:\n        # H is undefined for a gray color\n        hsv.append(0)\n    elif delta_rgb == 0:\n        # H and S are both zero\n        hsv.append(0)\n        hsv.append(0)\n    else:\n        # Calculate H and S\n        if r == max_rgb:\n            h = 60 * (g - b) / delta_rgb\n        elif g == max_rgb:\n            h = 60 * (b - r) / delta_rgb + 120\n        elif b == max_rgb:\n            h = 60 * (r - g) / delta_rgb + 240\n\n        if h < 0:\n            h += 360\n\n        hsv.append(h)\n\n        if delta_rgb == 0:\n            s = 0\n        else:\n            s = delta_rgb / max_rgb\n\n        hsv.append(s)\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color model.\n    '''\n    \n    r, g, b = r / 255, g / 255, b / 255\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    d = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / d\n    elif max_val == g:\n        h = 2 + (b - r) / d\n    elif max_val == b:\n        h = 4 + (r - g) / d\n    \n    if h < 0:\n        h += 6\n    \n    if h < 1e-12:\n        h = 0\n    \n    s = 0\n    if max_val == 0:\n        s = 0\n    else:\n        s = d / max_val\n    \n    v = max_val\n    \n    return (h * 360, s * 100, v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert the RGB value to float data type\n    r = float(r) / 255\n    g = float(g) / 255\n    b = float(b) / 255\n\n    # Calculate the maximum and minimum values of RGB\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the value of the HSV color space\n    if max_val == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (g - b) / diff\n        elif max_val == g:\n            h = 2 + (b - r) / diff\n        else:\n            h = 4 + (r - g) / diff\n\n        h = h / 6 if h < 0 else h / 6\n\n    # Calculate the value of the S and V\n    if max_val == 0:\n        s = 0\n        v = 0\n    else:\n        s = diff / max_val\n        v = max_val\n\n    # Calculate the value of the HSV color space\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    h = 0.0\n    s = 0.0\n    v = max_val\n\n    if max_val == min_val:\n        h = 0.0\n        s = 0.0\n    else:\n        d = max_val - min_val\n        s = max_val / min_val\n\n        if max_val == r:\n            h = (g - b) / d + (g < b) * 6.0\n        elif max_val == g:\n            h = (b - r) / d + 2.0\n        else:\n            h = (r - g) / d + 4.0\n\n        h /= 6.0\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert to float values\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Convert to relative luminance\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        h = h * 60\n    \n    # Convert to hsv values\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    v = max_val\n    \n    # Convert to hsv format\n    hsv = (h, s, v)\n    \n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h *= 60\n\n    s = delta / (1 - abs(2 * cmax - 1))\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to LAB color space\n    r = r/255\n    g = g/255\n    b = b/255\n    x = min(r,g,b)\n    y = max(r,g,b)\n    delta = y - x\n    \n    # convert r,g,b to HSV color space\n    h = 0\n    s = 0\n    v = y\n    if delta == 0:\n        s = 0\n    elif r == y:\n        h = 60*(g - b)/delta\n    elif g == y:\n        h = 60*(b - r)/delta + 120\n    else:\n        h = 60*(r - g)/delta + 240\n    \n    if h < 0:\n        h += 360\n    \n    # convert HSV color space to HSV color space\n    h = h/60\n    if h < 1:\n        s = delta/v\n    else:\n        s = delta/v\n    v = v\n    \n    # convert h,s,v to HSV color space\n    if s == 0:\n        hsv = [h,s,v]\n    else:\n        if v < 0.5:\n            s *= 2\n        else:\n            s /= 2\n        hsv = [h,s,v]\n    \n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Normalize the values to be between 0 and 1\n    r, g, b = r / 255, g / 255, b / 255\n\n    # Convert the RGB values to HSV values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    \n    if max_value == 0:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / delta)\n    elif max_value == g:\n        h = 60 * ((b - r) / delta) + 120\n    elif max_value == b:\n        h = 60 * ((r - g) / delta) + 240\n    \n    if max_value == 0:\n        s = 0\n    else:\n        s = delta / max_value\n    \n    if max_value == 0:\n        v = 0\n    else:\n        v = max_value\n    \n    h, s, v = int(h), int(s * 100), int(v * 100)\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # calculate the hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    # calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    # calculate the value\n    value = max_val\n    \n    # convert to hsv\n    hsv_color = (hue / 60, saturation, value)\n    \n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0\n    s = 0\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h / 6\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n\n    return (h, s, cmax)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # initialize variables to store the product of even and odd numbers\n    even_product = 1\n    odd_product = 1\n\n    # loop through the list and multiply the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    # return the product of even and odd numbers\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    # loop through the list and count even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # check if there are at least two even numbers and two odd numbers\n    if even_count < 2 or odd_count < 2:\n        return 0\n    \n    # calculate the product of the even and odd numbers\n    for i in range(1, min(even_count, odd_count)+1):\n        product *= i\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and first odd numbers.\n    \"\"\"\n    if len(lst) < 2:\n        return 0\n    elif lst[0] % 2 == 0 and lst[1] % 2 == 1:\n        return lst[0] * lst[1]\n    elif lst[0] % 2 == 1 and lst[1] % 2 == 0:\n        return lst[0] * lst[1]\n    elif lst[0] % 2 == 1 and lst[1] % 2 == 1:\n        return lst[0] * lst[1]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            product *= i\n            \n    if even_count == 0:\n        return \"There are no even numbers in the list.\"\n    elif odd_count == 0:\n        return \"There are no odd numbers in the list.\"\n    else:\n        return product\n        \n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product *= num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product *= num\n                \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    even = 1\n    odd = 1\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n        product *= num\n\n    return even * odd * product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            result *= num\n            even_count = 0\n            odd_count = 0\n            \n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and first odd numbers in the list.\n    \"\"\"\n    even_found = False\n    odd_found = False\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_found = True\n            product *= num\n        else:\n            odd_found = True\n            product *= num\n    if even_found and odd_found:\n        return product\n    else:\n        return \"No even and odd numbers found in the list.\"\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(int(x) for x in test_str.split(','))\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by commas\n    str_list = test_str.split(',')\n    \n    # Create a new list to hold the integer tuples\n    int_list = []\n    \n    # Loop through each string in the list\n    for str_item in str_list:\n        # Split the string by the colon\n        int_str = str_item.split(':')\n        \n        # Convert the string to an integer and append it to the list\n        int_list.append(int(int_str[1]))\n        \n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert the string to a tuple\n    test_tuple = tuple(test_str.split(','))\n\n    # Convert each element of the tuple to integer\n    new_tuple = []\n    for element in test_tuple:\n        try:\n            new_tuple.append(int(element))\n        except ValueError:\n            print(f\"Invalid value {element} encountered, skipping...\")\n\n    # Return the new tuple\n    return tuple(new_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    Args:\n        test_str (tuple): A tuple string in the format of (1, 2, 3, 4).\n\n    Returns:\n        tuple: The converted integer tuple.\n    \"\"\"\n    # Split the tuple string into a list of integers\n    int_list = list(map(int, test_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    result = []\n    for i in test_str:\n        try:\n            result.append(int(i))\n        except ValueError:\n            pass\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define the tuple string format\n    tuple_str_fmt = '({},{})'\n    \n    # Split the string by comma and split each element by tuple format\n    tuple_str_list = test_str.split(',')\n    for i in range(len(tuple_str_list)):\n        tuple_str_list[i] = tuple_str_list[i].strip('()').split(tuple_str_fmt[i])\n    \n    # Convert the tuple string list to integer tuple\n    int_tuple = tuple([int(i) for j in tuple_str_list for i in j])\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define the tuple of strings that can be converted to integers\n    int_strs = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    \n    # Define the tuple to store the converted integer tuples\n    int_tuple_list = []\n    \n    # Loop through each string in the test_str tuple\n    for string in test_str:\n        \n        # Check if the string can be converted to an integer\n        if string in int_strs:\n            \n            # If the string can be converted, convert it to an integer and append it to the int_tuple_list\n            int_tuple_list.append(int(string))\n            \n    # Return the int_tuple_list\n    return int_tuple_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a tuple of strings\n    str_tuple = tuple(test_str.split())\n    # create an empty integer tuple\n    int_tuple = ()\n    # loop through the tuple of strings\n    for string in str_tuple:\n        # try to convert the string to an integer\n        try:\n            int_tuple += (int(string),)\n        except ValueError:\n            pass\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) == tuple:\n        return tuple([int(i) for i in test_str])\n    else:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a tuple of strings\n    tup_str = ('apple', 'banana', 'cherry', 'date', 'elderberry', 'fig')\n\n    # Define a tuple of integers\n    tup_int = (1, 2, 3, 4, 5, 6)\n\n    # Create an empty list\n    int_list = []\n\n    # Iterate over the tuple of strings\n    for i in range(len(tup_str)):\n        # If the string matches a string in the tuple of integers, add its index to the list\n        if tup_str[i] in tup_int:\n            int_list.append(i)\n\n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        return right_insertion(a[i:], x)\n    else:\n        return bisect.bisect_left(a[:i], x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index if index < len(a) and a[index] == x else index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        return i + 1\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1  # prevent insertion if the value is already present\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] < x:\n        return index + 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] > x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b){3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.+b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a(b{3})')\n    result = pattern.search(text)\n    if result:\n        return result.group(1)\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\ntext = \"apple bananas bananas bananas\"\nprint(text_match_three(text))  # Output: True"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{2}b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the list and string into a single string\n    combined = test_list + test_str\n    \n    # split the combined string into a list of characters\n    characters = list(combined)\n    \n    # convert the list of characters into a tuple\n    new_tuple = tuple(characters)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Split the list into separate elements\n    list_elements = test_list.split()\n    \n    # Join the list elements into a single string\n    joined_list = \" \".join(list_elements)\n    \n    # Combine the list elements and the string into a single string\n    new_tuple_str = test_str + \" \" + joined_list\n    \n    # Split the combined string into separate elements\n    tuple_elements = new_tuple_str.split()\n    \n    # Convert the first element to an integer\n    int_tuple_element = int(tuple_elements[0])\n    \n    # Convert the remaining elements to integers\n    int_tuple_elements = tuple(map(int, tuple_elements[1:]))\n    \n    # Return the new tuple\n    return tuple(int_tuple_elements)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # join the list and string into a single string\n    combined_string = ','.join(str(test_list)) + ',' + test_str\n    # split the combined string into a list of strings\n    list_of_strings = combined_string.split(',')\n    # create a new tuple with the list of strings as elements\n    new_tuple = tuple(list_of_strings)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(str(test_str) + str(elem) for elem in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    list_tuple = tuple(test_list)\n    # concatenate the string and the list tuple\n    new_tuple = (test_str + str(list_tuple))\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Split the given string into a list of words\n    words = test_str.split()\n    # Create a new list with the words reversed\n    reversed_words = [word[::-1] for word in words]\n    # Create a new tuple from the reversed list\n    new_tuple = tuple(reversed_words)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums if num % 2 == 0 if i % 2 == 0])!= len([num for num in nums if num % 2 == 0]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(len(nums)):\n            if i == j:\n                continue\n            if nums[j] % 2 == 0:\n                count += 1\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == 0"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            count = 0\n            for j in nums[i:]:\n                if j % 2 == 0:\n                    count += 1\n                else:\n                    break\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # iterate through the list\n    for i in range(len(nums)):\n        # check if the current index is even\n        if i % 2 == 0:\n            # if it is, iterate through the numbers in the current index\n            for num in nums[i:]:\n                # check if the current number is even\n                if num % 2 == 0:\n                    # if it is, return False (since we've found a pair of even numbers)\n                    return False\n    # if we've made it through the entire list without finding a pair of even numbers, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function will check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Check whether every even index contains even numbers\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    \n    # If all even indices contain even numbers, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                even_count += 1\n            if even_count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Create an empty list to store the flattened tuples\n    flattened_list = []\n\n    # Use recursion to flatten the tuples\n    def flatten(tup):\n        for i in tup:\n            if isinstance(i, tuple):\n                flatten(i)\n            else:\n                flattened_list.append(i)\n\n    flatten(test_tup)\n\n    # Remove the flattened tuples from the original tuple\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            test_tup.pop(i)\n\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            result.append(elem)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                if type(subitem)!= tuple:\n                    nested_tup.append(subitem)\n        elif type(item)!= tuple:\n            nested_tup.append(item)\n    return nested_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_list = [item for sublist in test_tup for item in sublist]\n    return flattened_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Using list comprehension to remove the nested tuple\n    test_list = [x for tup in test_tup for x in tup]\n    # Returning the flattened list\n    return test_list\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                flattened_tup.append(subitem)\n        else:\n            flattened_tup.append(item)\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # using recursion to check if the tuple is a tuple\n    def is_tuple(t):\n        return isinstance(t, tuple)\n\n    def remove_nested_helper(t):\n        if is_tuple(t):\n            return remove_nested_helper(t[0])\n        else:\n            return t\n\n    # removing the nested tuples\n    result = remove_nested_helper(test_tup)\n\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            for sub_elem in elem:\n                new_tup.append(sub_elem)\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    count = 0 \n    for item in input_list: \n        if type(item) == list: \n            count += 1 \n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as input and returns the number of lists in the list.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list:\n        if type(i) == list:\n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as an input and returns the count of number of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize variables for the first and last indices\n    first = 0\n    last = len(arr) - 1\n\n    # Loop through the array until the element is found or the indices cross each other\n    while first < last:\n        mid = (first + last) // 2\n\n        if arr[mid] == x:\n            # If the element is found, return its index\n            return mid\n        elif arr[mid] < x:\n            # If the element is greater than the mid element, search in the left half of the array\n            first = mid + 1\n        else:\n            # If the element is less than the mid element, search in the right half of the array\n            last = mid - 1\n\n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize variables to keep track of the last position and the element\n    last_position = 0\n    last_element = arr[0]\n\n    # loop through the array to find the last element\n    for i in range(1, len(arr)):\n        # if the current element is greater than the target element, update last element and last position\n        if arr[i] > x:\n            last_element = arr[i]\n            last_position = i\n\n    # return the last position and element\n    return last_position, last_element"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # find the leftmost element greater than or equal to x\n    left = 0\n    right = len(arr) - 1\n    while arr[left] < x:\n        left += 1\n    while arr[right] >= x:\n        right -= 1\n\n    # if there is no such element, return -1\n    if left > right:\n        return -1\n\n    # find the last occurrence of x in the sorted part of the array\n    left = right + 1\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            # if we encounter an element equal to x, check if it is the last occurrence\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    This function takes an array and an element x as input and returns the last\n    position of the element in the array. If the element is not found, it returns -1.\n    '''\n    if not arr or arr[0] > x or arr[-1] < x:\n        return -1\n    else:\n        for i in range(len(arr)):\n            if arr[i] == x:\n                return i\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i>=0 and arr[i]!= x:\n        i-=1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    This function takes two parameters - an array and an element to find its last position.\n    It uses binary search to find the last position of the element in the array.\n    Returns the last position of the element in the array.\n    '''\n    left, right = 0, len(arr) - 1\n    \n    # If the array is empty, return -1\n    if len(arr) == 0:\n        return -1\n    \n    # Perform binary search to find the last position of the element\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # If the element is found, return its last position\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            \n            # If the element is repeated, continue searching the right half of the array\n            left = mid + 1\n        # If the element is less than the middle element, search the left half of the array\n        else:\n            right = mid - 1\n    \n    # If the element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables\n    start = 0\n    end = len(arr) - 1\n    \n    # Find the leftmost index of x\n    while arr[start] < x and start < end:\n        start += 1\n    \n    # Find the rightmost index of x\n    while arr[end] > x and start < end:\n        end -= 1\n    \n    # If x is not present in the array, return -1\n    if start == end:\n        return -1\n    \n    # Return the index of x\n    return start"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the index of the first occurrence of x in the array\n    index = arr.index(x)\n\n    # Find the last index of x in the array\n    for i in range(index+1, len(arr)):\n        if arr[i] == x:\n            index = i\n\n    return index"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\b[aA][^b]*b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*)b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a[^b]*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)(.*?)(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog barks.\"\nresult = text_starta_endb(text)\nprint(result) # Output: ['dog barks.']"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?i)a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*?b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dict.values():\n        sum_of_items += item\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take user input for l and r\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # initialize sum to 0\n    total = 0\n\n    # loop through odd numbers from l to r\n    for i in range(l, r+1, 2):\n        # add each odd number to sum\n        total += i\n\n    # print the sum\n    print(\"The sum of all odd natural numbers within the range {} to {} is {}\".format(l, r, total))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    odd_sum = 0\n\n    for i in range(l, r + 1, 2):\n        odd_sum += i\n\n    print(\"Sum of all odd numbers between\", l, \"and\", r, \"is:\", odd_sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize variables\n    l = 1\n    r = n\n    sum_odd_numbers = 0\n    \n    # loop through odd numbers between l and r\n    for i in range(l, r+1, 2):\n        sum_odd_numbers += i\n        \n    return sum_odd_numbers"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range [l, r].\n    \"\"\"\n    sum = 0\n    i = l\n    while i <= r:\n        if i % 2!= 0:\n            sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # Initialize variables for sum and counter\n    sum = 0\n    count = 0\n\n    # Iterate from l to r\n    for i in range(n):\n        # If the number is odd, add it to sum\n        if i % 2!= 0:\n            sum += i\n            count += 1\n\n    # Return the sum divided by the count of odd numbers\n    return sum / count"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n \n    if l % 2 == 0: l += 1 \n    if r % 2 == 0: r -= 1 \n    return sum(i for i in range(l, r+1, 2)) "
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(r): \n    # Initialize sum variable to zero\n    sum = 0\n    # Loop through odd numbers in the range\n    for i in range(1, r+1, 2): \n        # Add each odd number to the sum variable\n        sum += i\n    # Return the sum of all odd numbers in the range\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum variable\n    sum = 0\n\n    # iterate through the array and add each element to the sum variable\n    for element in arr:\n        sum += element\n\n    # return the sum of the array\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:  \n        return 0  \n    else:  \n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize the sum variable to zero\n    sum_value = 0\n\n    # Loop through each element in the array\n    for num in arr:\n        # Add the current element to the sum variable\n        sum_value += num\n\n    # Return the sum value\n    return sum_value"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # Initialize a variable to hold the sum\n    total = 0\n\n    # Loop through each element in the array\n    for num in arr:\n        # Add the element to the total\n        total += num\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    # extract the least significant d bits from the binary representation of n\n    left_shifted_n = n << d\n    \n    # shift the most significant d bits to the left\n    right_shifted_n = n >> (32 - d)\n    \n    # combine the two shifted values and return the result\n    return left_shifted_n | right_shifted_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number n.\n    \"\"\"\n    # Calculate the number of bits to be rotated\n    num_bits = 32\n    \n    # Check if d is negative\n    if d < 0:\n        # Make d positive\n        d = num_bits + d\n    \n    # Calculate the left shift amount\n    shift_amount = d % num_bits\n    \n    # Calculate the number of times we need to rotate the bits\n    num_rotations = d // num_bits\n    \n    # Return the result\n    return (n << shift_amount) | (n >> (num_bits - shift_amount))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff  # rotate left by d bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n_bin = bin(n)[2:]  # convert number to binary string\n    n_bin = n_bin.zfill(32)  # add leading zeros to binary string to make it 32 bits\n    n_bin = n_bin[d:] + n_bin[:d]  # rotate left bits\n    return int(n_bin, 2)  # convert binary string back to integer\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    # Convert the input number to binary string\n    num_bin = bin(n)[2:]\n    # Pad the binary string with zeros if the length is less than d\n    if len(num_bin) < d:\n        num_bin = '0'*(d-len(num_bin)) + num_bin\n    # Rotate the binary string left by d bits\n    rotated_bin = num_bin[-d:] + num_bin[:-d]\n    # Convert the rotated binary string back to integer\n    rotated_num = int(rotated_bin, 2)\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate a 32-bit number left by d bits.\n    \"\"\"\n    mask = (1 << 31) - 1  # mask for sign bit\n    d = d % 32  # d is between 0 and 31\n\n    if d == 0:  # if d is 0, return n\n        return n\n\n    # calculate number of bits to shift left\n    n = (n << d) & mask  # shift left by d bits\n\n    # calculate number of bits to shift right\n    n = (n >> (32 - d)) | (n & ((1 << d) - 1))  # shift right by (32 - d) bits, and mask off extra bits\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the binary number into a list of digits\n    num_list = [int(digit) for digit in bin(n)[2:]]\n\n    # Reverse the list\n    num_list = num_list[::-1]\n\n    # Rotate the list\n    for _ in range(d):\n        num_list.append(num_list.pop(0))\n\n    # Convert the list back to a binary number\n    rotated_num = int(''.join(str(digit) for digit in num_list))\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert binary number to a list of bits\n    bin_num = bin(n)[2:].zfill(32)\n    bin_list = list(bin_num)\n\n    # Rotate left d bits\n    for i in range(d):\n        bin_list.append(bin_list.pop(0))\n\n    # Convert the rotated list back to binary\n    rotated_bin = ''.join(bin_list)\n    rotated_num = int(rotated_bin, 2)\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Shift the bits to the right by d bits\n    rotated_bits = n >> d\n\n    # Shift the remaining bits to the left by n - d bits\n    remaining_bits = n << (32 - d)\n\n    # Combine the rotated bits with the remaining bits\n    final_result = rotated_bits | remaining_bits\n\n    return final_result"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function takes a string as input and removes all whitespaces from it.\n    \"\"\"\n    # Use regex to remove all whitespaces\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define a regular expression pattern to match all whitespaces\n    pattern = r'\\s+'\n    # Use the re.sub() method to remove all matches of the pattern from the text\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define a regular expression pattern to match whitespaces\n    pattern = r'\\s+'\n    # Use the re.sub() function to remove all whitespaces from the text\n    text = re.sub(pattern, '', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all whitespaces using regular expression\n    text = re.sub('\\s+','', text)\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(x,y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    elif x!= y!= z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    elif x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    else:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    if x == y and y == z:\n        return 1\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            if i == j:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1,x+1):\n        if i == y or i == z or i == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize the maximum number of rotations required to generate the sorted array\n    max_rotations = n\n\n    # Traverse through the array and check if the elements are already sorted in reverse order\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            # If the element at index i is greater than the element at n-i-1, then we have found a rotation and update max_rotations\n            max_rotations = min(max_rotations, n-i-1)\n\n    return max_rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    # Finding the minimum element in the array\n    min_element = min(arr)\n    # Counting the number of rotations required to generate the sorted array\n    count = 0\n    for i in range(n):\n        if arr[i] < min_element:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Counting the number of inversions\n    inversion_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversion_count += (j - i)\n    return inversion_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # Check if array is already sorted\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n            break\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Check if the array is already sorted\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return 0\n    \n    # Check if the array is already sorted in reverse\n    for i in range(n - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            return 0\n    \n    return n - 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    # Calculate the length of the array\n    n = len(arr)\n    \n    # Count the number of rotations required to generate a sorted array\n    for i in range(n):\n        # Traverse the array from right to left\n        for j in range(i+1, n):\n            # If the current element is greater than the next element, swap them\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                # Increment the count of rotations required\n                count += 1\n                # Exit the inner loop to avoid unnecessary swapping\n                break\n                \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    # check if the array is sorted or not\n    if sorted(arr) == arr:\n        return 0\n\n    # initialize variables\n    n = len(arr)\n    count = 0\n    left = 0\n    right = n - 1\n\n    # move the left pointer to the right until it is greater than or equal to the right pointer\n    while arr[left] < arr[right]:\n        left += 1\n\n    # move the right pointer to the left until it is less than or equal to the left pointer\n    while arr[right] > arr[left]:\n        right -= 1\n\n    # if the left pointer is greater than the right pointer, the array is already sorted\n    if left > right:\n        return 0\n\n    # initialize variables\n    left_max = arr[left]\n    right_min = arr[right]\n\n    # move the left pointer to the right until it is greater than the right_min\n    while left < right:\n        if arr[left] <= right_min:\n            count += 1\n            left += 1\n        else:\n            right_min = min(right_min, arr[left])\n            left += 1\n\n    # move the right pointer to the left until it is less than the left_max\n    while left < right:\n        if arr[right] >= left_max:\n            count += 1\n            right -= 1\n        else:\n            left_max = max(left_max, arr[right])\n            right -= 1\n\n    # return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # count the number of rotations required to sort the array\n    rotations = 0\n    # check if the array is already sorted or not\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            rotations += 1\n    return rotations"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Using the binary search approach to check for perfect squares\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    root = int(n ** 0.5) + 1\n    if root ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n < 0:\n        return False\n    if n == 4:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a perfect square and False otherwise.\n    \"\"\"\n    # Function to check if a number is a perfect square\n    def is_square(num):\n        \"\"\"\n        This function takes an integer as input and returns True if it is a perfect square and False otherwise.\n        \"\"\"\n        # Base case: 0 and 1 are perfect squares\n        if num == 0 or num == 1:\n            return True\n        # Otherwise, check if the number is divisible by the square root of the number\n        sqrt_num = int(num ** 0.5)\n        return sqrt_num ** 2 == num\n\n    # Check if the input number is a perfect square\n    if is_square(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # calculate square root\n    sqrt_n = int(n**0.5)\n    # check if square root is an integer\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return \"Please enter a positive number.\"\n    root = int(n ** 0.5)\n    if root * root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    left, right = 1, n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    if n < 2:\n        return False\n\n    # use binary search to find root of n\n    left, right = 0, n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Using the binary search algorithm to find the square root of n\n    left = 0\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If the number is not a perfect square, return False\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    if len(arr) == 0:\n        return \"The list is empty.\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of the numbers in the list is even.\"\n    else:\n        return \"The product of the numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and its corresponding list\n    max_sum = float('-inf')\n    max_list = None\n    \n    # Loop over the lists in the input\n    for lst in lists:\n        # Compute the sum of the elements in the list\n        sum_lst = sum(lst)\n        \n        # If the sum is greater than the current maximum sum, update the maximum sum and list\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    \n    # Return the list in a list of lists whose sum of elements is the highest\n    return [[x] for x in max_list]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = []\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Initialize a variable to keep track of the sum of the elements in the list\n        current_sum = 0\n        # Loop through each element in the list and add it to the current sum\n        for num in lst:\n            current_sum += num\n        # If the current sum is greater than the maximum sum so far, update the maximum sum and the list with the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            sum_list = lists[i] + lists[j]\n            if sum_list > max_sum:\n                max_sum = sum_list\n                max_lists = [lists[i], lists[j]]\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_lists = []\n\n    for i in range(len(lists)):\n        if len(lists[i]) == 0:\n            continue\n        sum_ = sum(lists[i])\n        if sum_ > max_sum:\n            max_sum = sum_\n            max_lists = [lists[i]]\n        elif sum_ == max_sum:\n            max_lists.append(lists[i])\n\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0:\n                if j == 0:\n                    max_sum = lists[i][j]\n                    max_list = [[lists[i][j]]]\n                else:\n                    max_sum = max(max_sum, lists[i][j])\n                    max_list.append([lists[i][j]])\n            else:\n                if j == 0:\n                    max_sum = max(max_sum, lists[i][j])\n                    max_list[-1].append(lists[i][j])\n                else:\n                    max_sum = max(max_sum, lists[i][j])\n                    max_list[-1].append(lists[i][j])\n                    max_list[-2].append(lists[i][j])\n        max_sum = max(max_sum, max(max_list[-1]))\n        max_list[-1] = [max(max_list[-1])]\n    return max_list[-1]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0 or i == 0:\n                max_sum.append(lists[i][j])\n            else:\n                max_sum.append(lists[i][j] + max_sum[j - 1])\n        max_sum = sorted(max_sum, reverse=True)\n    return max_sum"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(len(lists[i])):\n                if k == j:\n                    continue\n                current_sum += lists[i][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for sublist in lists:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = sum(lists[i]) + sum(lists[j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i], lists[j]]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # create an empty dictionary to store the maximum sum\n    max_dict = {}\n\n    # iterate through all the lists in the input list\n    for i in lists:\n        # iterate through all the elements in each list and add them up\n        current_sum = sum(i)\n\n        # check if the current sum is higher than the maximum sum found so far\n        if current_sum not in max_dict or current_sum > max_dict[current_sum]:\n            max_dict[current_sum] = i\n\n    # create a list from the dictionary and return it\n    return list(max_dict.values())"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables to store the current run of uppercase characters and its length\n    run = 0\n    current_run = 0\n    \n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is uppercase\n        if char.isupper():\n            # if it is, increment the length of the current run\n            current_run += 1\n        else:\n            # if it's not, update the length of the longest run found so far\n            if current_run > run:\n                run = current_run\n            # reset the current run to 0\n            current_run = 0\n    \n    # update the length of the longest run found so far\n    if current_run > run:\n        run = current_run\n    \n    # return the length of the longest run of uppercase characters found\n    return run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    curr_run = 0\n    max_run = 0\n    current_char = \"\"\n\n    # Loop through each character in the string\n    for char in test_str:\n\n        # If the character is uppercase, update the run count and store the current character\n        if char.isupper():\n            curr_run += 1\n            current_char = char\n        else:\n            # If the character is not uppercase, reset the run count and store the current character\n            curr_run = 0\n            current_char = char\n\n        # If the current run count is greater than the maximum run count, update the maximum run count\n        if curr_run > max_run:\n            max_run = curr_run\n\n    # Return the maximum run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to keep track of the maximum run of uppercase characters and its start and end indices\n    max_run = 0\n    max_run_start = 0\n    max_run_end = 0\n    \n    # Loop through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and the previous character was lowercase, increment the maximum run and update the start and end indices\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            max_run += 1\n            max_run_start = i\n            max_run_end = i + max_run\n        \n        # If the current character is lowercase and the maximum run has not ended yet, increment the end index\n        elif not test_str[i].isupper() and max_run > 0:\n            max_run_end = i + 1\n    \n    # Return the maximum run of uppercase characters and its start and end indices\n    return max_run, max_run_start, max_run_end"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 0\n    max_start = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = i\n        else:\n            count = 1\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    uppercase = False\n    \n    for char in test_str:\n        if char.isupper():\n            uppercase = True\n            current_run += 1\n        else:\n            if uppercase:\n                max_run = max(max_run, current_run)\n                current_run = 0\n                uppercase = False\n    \n    if uppercase:\n        max_run = max(max_run, current_run)\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    start = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_run:\n                max_run = count\n            count = 0\n        if i == len(test_str)-1:\n            if count > max_run:\n                max_run = count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to store the current run of uppercase characters and the maximum run seen so far\n    current_run = 0\n    max_run = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the current character is uppercase, increment the current run counter\n        if char.isupper():\n            current_run += 1\n        # If the current character is not uppercase, reset the current run counter to 0\n        else:\n            current_run = 0\n        \n        # Update the maximum run if the current run is greater than the current maximum run\n        if current_run > max_run:\n            max_run = current_run\n    \n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    run_len = 1\n    run_start = 0\n    max_run_len = 0\n    max_run_start = 0\n    \n    # Iterate through the string\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            # If the current character is uppercase, update the run length\n            run_len += 1\n        else:\n            # If the current character is not uppercase, reset the run length and start index\n            run_len = 1\n            run_start = i\n            \n        # Check if the current run is longer than the previous longest run\n        if run_len > max_run_len:\n            # If the current run is longer than the previous longest run, update the max run length and start index\n            max_run_len = run_len\n            max_run_start = run_start\n            \n    # Return the maximum run of uppercase characters\n    return test_str[max_run_start:max_run_start+max_run_len]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run = max(max_run, i - start + 1)\n        else:\n            start = i\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 1\n    current_run = 1\n    current_char = test_str[0]\n\n    # Iterate over the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase\n        if test_str[i].isupper():\n            # Increment the current run counter\n            current_run += 1\n        else:\n            # If the current character is not uppercase, check if the current run is longer than the previous one\n            if current_run > max_run:\n                # Update the max_run variable\n                max_run = current_run\n            # Reset the current run counter to 1\n            current_run = 1\n            # Update the current character\n            current_char = test_str[i]\n\n    # Check if the last run is longer than the max_run variable\n    if current_run > max_run:\n        # Update the max_run variable\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list, or None if there is no odd number in the list.\n    \"\"\"\n\n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is odd, return it\n        if num % 2!= 0:\n            return num\n\n    # If no odd number is found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup.count(K) > 0:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup).intersection(set(K))) == len(K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    for num in test_tup:\n        if num == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    # check if K is in the first tuple\n    if K in test_tup[0]:\n        # check if K is in the second tuple\n        if K in test_tup[1]:\n            # check if K is in the third tuple\n            if K in test_tup[2]:\n                # if K is in all three tuples, return True\n                return True\n            else:\n                # if K is not in the third tuple, return False\n                return False\n        else:\n            # if K is not in the second tuple, return False\n            return False\n    else:\n        # if K is not in the first tuple, return False\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > K:\n        return False\n    else:\n        for tup in test_tup:\n            if len(tup)!= K:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of both tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    # Loop through each element of the second tuple\n    for i in range(len(test_tup2)):\n        # Check if the element of the second tuple is smaller than the corresponding element of the first tuple\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    # If all the elements of the second tuple are smaller than their corresponding element of the first tuple, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of first tuple should be equal to length of second tuple\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The element in the first tuple is larger than the corresponding element in the second tuple.\")\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must have the same number of elements.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]